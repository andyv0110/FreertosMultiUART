
demos/dac/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 c1 5c 00 00 05 5d 00 00 05 5d 00 00     .P. .\...]...]..
      10:	05 5d 00 00 05 5d 00 00 05 5d 00 00 00 00 00 00     .]...]...]......
	...
      2c:	05 5d 00 00 05 5d 00 00 00 00 00 00 05 5d 00 00     .]...].......]..
      3c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      4c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 11 5a 00 00     .]...]...]...Z..
      5c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      6c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      7c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      8c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      9c:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      ac:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      bc:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      cc:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
      dc:	05 5d 00 00 05 5d 00 00 05 5d 00 00 05 5d 00 00     .]...]...]...]..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
}
     124:	bf00      	nop

00000126 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     126:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     128:	f3ef 8308 	mrs	r3, MSP
     12c:	4618      	mov	r0, r3
     12e:	4770      	bx	lr
     130:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     132:	4623      	mov	r3, r4
}
     134:	4618      	mov	r0, r3

00000136 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     136:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     138:	f383 8808 	msr	MSP, r3
     13c:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
}
     13e:	bf00      	nop

00000140 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     140:	b480      	push	{r7}
     142:	b083      	sub	sp, #12
     144:	af00      	add	r7, sp, #0
  uint32_t result=0;
     146:	2300      	movs	r3, #0
     148:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     14a:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14e:	607b      	str	r3, [r7, #4]
  return(result);
     150:	687b      	ldr	r3, [r7, #4]
}
     152:	4618      	mov	r0, r3
     154:	370c      	adds	r7, #12
     156:	46bd      	mov	sp, r7
     158:	bc80      	pop	{r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	bf00      	nop
     16c:	370c      	adds	r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	bc80      	pop	{r7}
     18e:	4770      	bx	lr

00000190 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     190:	b480      	push	{r7}
     192:	b083      	sub	sp, #12
     194:	af00      	add	r7, sp, #0
     196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     198:	687b      	ldr	r3, [r7, #4]
     19a:	f383 8810 	msr	PRIMASK, r3
}
     19e:	bf00      	nop
     1a0:	370c      	adds	r7, #12
     1a2:	46bd      	mov	sp, r7
     1a4:	bc80      	pop	{r7}
     1a6:	4770      	bx	lr

000001a8 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1a8:	b480      	push	{r7}
     1aa:	b083      	sub	sp, #12
     1ac:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ae:	2300      	movs	r3, #0
     1b0:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b2:	f3ef 8313 	mrs	r3, FAULTMASK
     1b6:	607b      	str	r3, [r7, #4]
  return(result);
     1b8:	687b      	ldr	r3, [r7, #4]
}
     1ba:	4618      	mov	r0, r3
     1bc:	370c      	adds	r7, #12
     1be:	46bd      	mov	sp, r7
     1c0:	bc80      	pop	{r7}
     1c2:	4770      	bx	lr

000001c4 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1c4:	b480      	push	{r7}
     1c6:	b083      	sub	sp, #12
     1c8:	af00      	add	r7, sp, #0
     1ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1cc:	687b      	ldr	r3, [r7, #4]
     1ce:	f383 8813 	msr	FAULTMASK, r3
}
     1d2:	bf00      	nop
     1d4:	370c      	adds	r7, #12
     1d6:	46bd      	mov	sp, r7
     1d8:	bc80      	pop	{r7}
     1da:	4770      	bx	lr

000001dc <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1dc:	b480      	push	{r7}
     1de:	b083      	sub	sp, #12
     1e0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1e2:	2300      	movs	r3, #0
     1e4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1e6:	f3ef 8314 	mrs	r3, CONTROL
     1ea:	607b      	str	r3, [r7, #4]
  return(result);
     1ec:	687b      	ldr	r3, [r7, #4]
}
     1ee:	4618      	mov	r0, r3
     1f0:	370c      	adds	r7, #12
     1f2:	46bd      	mov	sp, r7
     1f4:	bc80      	pop	{r7}
     1f6:	4770      	bx	lr

000001f8 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     200:	687b      	ldr	r3, [r7, #4]
     202:	f383 8814 	msr	CONTROL, r3
}
     206:	bf00      	nop
     208:	370c      	adds	r7, #12
     20a:	46bd      	mov	sp, r7
     20c:	bc80      	pop	{r7}
     20e:	4770      	bx	lr

00000210 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     210:	b480      	push	{r7}
     212:	b085      	sub	sp, #20
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     218:	2300      	movs	r3, #0
     21a:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	ba1b      	rev	r3, r3
     220:	60fb      	str	r3, [r7, #12]
  return(result);
     222:	68fb      	ldr	r3, [r7, #12]
}
     224:	4618      	mov	r0, r3
     226:	3714      	adds	r7, #20
     228:	46bd      	mov	sp, r7
     22a:	bc80      	pop	{r7}
     22c:	4770      	bx	lr

0000022e <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     22e:	b480      	push	{r7}
     230:	b085      	sub	sp, #20
     232:	af00      	add	r7, sp, #0
     234:	4603      	mov	r3, r0
     236:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     238:	2300      	movs	r3, #0
     23a:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     23c:	88fb      	ldrh	r3, [r7, #6]
     23e:	ba5b      	rev16	r3, r3
     240:	60fb      	str	r3, [r7, #12]
  return(result);
     242:	68fb      	ldr	r3, [r7, #12]
}
     244:	4618      	mov	r0, r3
     246:	3714      	adds	r7, #20
     248:	46bd      	mov	sp, r7
     24a:	bc80      	pop	{r7}
     24c:	4770      	bx	lr

0000024e <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     24e:	b480      	push	{r7}
     250:	b085      	sub	sp, #20
     252:	af00      	add	r7, sp, #0
     254:	4603      	mov	r3, r0
     256:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     258:	2300      	movs	r3, #0
     25a:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     25c:	88fb      	ldrh	r3, [r7, #6]
     25e:	badb      	revsh	r3, r3
     260:	60fb      	str	r3, [r7, #12]
  return(result);
     262:	68fb      	ldr	r3, [r7, #12]
}
     264:	4618      	mov	r0, r3
     266:	3714      	adds	r7, #20
     268:	46bd      	mov	sp, r7
     26a:	bc80      	pop	{r7}
     26c:	4770      	bx	lr

0000026e <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     26e:	b480      	push	{r7}
     270:	b085      	sub	sp, #20
     272:	af00      	add	r7, sp, #0
     274:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     276:	2300      	movs	r3, #0
     278:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	fa93 f3a3 	rbit	r3, r3
     280:	60fb      	str	r3, [r7, #12]
   return(result);
     282:	68fb      	ldr	r3, [r7, #12]
}
     284:	4618      	mov	r0, r3
     286:	3714      	adds	r7, #20
     288:	46bd      	mov	sp, r7
     28a:	bc80      	pop	{r7}
     28c:	4770      	bx	lr

0000028e <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     28e:	b480      	push	{r7}
     290:	b085      	sub	sp, #20
     292:	af00      	add	r7, sp, #0
     294:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     296:	2300      	movs	r3, #0
     298:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	e8d3 3f4f 	ldrexb	r3, [r3]
     2a0:	73fb      	strb	r3, [r7, #15]
   return(result);
     2a2:	7bfb      	ldrb	r3, [r7, #15]
}
     2a4:	4618      	mov	r0, r3
     2a6:	3714      	adds	r7, #20
     2a8:	46bd      	mov	sp, r7
     2aa:	bc80      	pop	{r7}
     2ac:	4770      	bx	lr

000002ae <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2ae:	b480      	push	{r7}
     2b0:	b085      	sub	sp, #20
     2b2:	af00      	add	r7, sp, #0
     2b4:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2b6:	2300      	movs	r3, #0
     2b8:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 3f5f 	ldrexh	r3, [r3]
     2c0:	81fb      	strh	r3, [r7, #14]
   return(result);
     2c2:	89fb      	ldrh	r3, [r7, #14]
}
     2c4:	4618      	mov	r0, r3
     2c6:	3714      	adds	r7, #20
     2c8:	46bd      	mov	sp, r7
     2ca:	bc80      	pop	{r7}
     2cc:	4770      	bx	lr

000002ce <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2ce:	b480      	push	{r7}
     2d0:	b085      	sub	sp, #20
     2d2:	af00      	add	r7, sp, #0
     2d4:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2d6:	2300      	movs	r3, #0
     2d8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	e853 3f00 	ldrex	r3, [r3]
     2e0:	60fb      	str	r3, [r7, #12]
   return(result);
     2e2:	68fb      	ldr	r3, [r7, #12]
}
     2e4:	4618      	mov	r0, r3
     2e6:	3714      	adds	r7, #20
     2e8:	46bd      	mov	sp, r7
     2ea:	bc80      	pop	{r7}
     2ec:	4770      	bx	lr

000002ee <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     2ee:	b480      	push	{r7}
     2f0:	b085      	sub	sp, #20
     2f2:	af00      	add	r7, sp, #0
     2f4:	4603      	mov	r3, r0
     2f6:	6039      	str	r1, [r7, #0]
     2f8:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     2fa:	2300      	movs	r3, #0
     2fc:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     2fe:	683a      	ldr	r2, [r7, #0]
     300:	79f9      	ldrb	r1, [r7, #7]
     302:	e8c2 1f43 	strexb	r3, r1, [r2]
     306:	60fb      	str	r3, [r7, #12]
   return(result);
     308:	68fb      	ldr	r3, [r7, #12]
}
     30a:	4618      	mov	r0, r3
     30c:	3714      	adds	r7, #20
     30e:	46bd      	mov	sp, r7
     310:	bc80      	pop	{r7}
     312:	4770      	bx	lr

00000314 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	4603      	mov	r3, r0
     31c:	6039      	str	r1, [r7, #0]
     31e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     320:	2300      	movs	r3, #0
     322:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     324:	683a      	ldr	r2, [r7, #0]
     326:	88f9      	ldrh	r1, [r7, #6]
     328:	e8c2 1f53 	strexh	r3, r1, [r2]
     32c:	60fb      	str	r3, [r7, #12]
   return(result);
     32e:	68fb      	ldr	r3, [r7, #12]
}
     330:	4618      	mov	r0, r3
     332:	3714      	adds	r7, #20
     334:	46bd      	mov	sp, r7
     336:	bc80      	pop	{r7}
     338:	4770      	bx	lr

0000033a <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     33a:	b480      	push	{r7}
     33c:	b085      	sub	sp, #20
     33e:	af00      	add	r7, sp, #0
     340:	6078      	str	r0, [r7, #4]
     342:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     344:	2300      	movs	r3, #0
     346:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     348:	683b      	ldr	r3, [r7, #0]
     34a:	687a      	ldr	r2, [r7, #4]
     34c:	e843 2300 	strex	r3, r2, [r3]
     350:	60fb      	str	r3, [r7, #12]
   return(result);
     352:	68fb      	ldr	r3, [r7, #12]
}
     354:	4618      	mov	r0, r3
     356:	3714      	adds	r7, #20
     358:	46bd      	mov	sp, r7
     35a:	bc80      	pop	{r7}
     35c:	4770      	bx	lr
	...

00000360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     360:	b580      	push	{r7, lr}
     362:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     364:	4b15      	ldr	r3, [pc, #84]	; (3bc <SystemInit+0x5c>)
     366:	681b      	ldr	r3, [r3, #0]
     368:	4a14      	ldr	r2, [pc, #80]	; (3bc <SystemInit+0x5c>)
     36a:	f043 0301 	orr.w	r3, r3, #1
     36e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     370:	4b12      	ldr	r3, [pc, #72]	; (3bc <SystemInit+0x5c>)
     372:	685a      	ldr	r2, [r3, #4]
     374:	4911      	ldr	r1, [pc, #68]	; (3bc <SystemInit+0x5c>)
     376:	4b12      	ldr	r3, [pc, #72]	; (3c0 <SystemInit+0x60>)
     378:	4013      	ands	r3, r2
     37a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     37c:	4b0f      	ldr	r3, [pc, #60]	; (3bc <SystemInit+0x5c>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	4a0e      	ldr	r2, [pc, #56]	; (3bc <SystemInit+0x5c>)
     382:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
     386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     38a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     38c:	4b0b      	ldr	r3, [pc, #44]	; (3bc <SystemInit+0x5c>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	4a0a      	ldr	r2, [pc, #40]	; (3bc <SystemInit+0x5c>)
     392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
     396:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     398:	4b08      	ldr	r3, [pc, #32]	; (3bc <SystemInit+0x5c>)
     39a:	685b      	ldr	r3, [r3, #4]
     39c:	4a07      	ldr	r2, [pc, #28]	; (3bc <SystemInit+0x5c>)
     39e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
     3a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3a4:	4b05      	ldr	r3, [pc, #20]	; (3bc <SystemInit+0x5c>)
     3a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ac:	f000 f878 	bl	4a0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3b0:	4b04      	ldr	r3, [pc, #16]	; (3c4 <SystemInit+0x64>)
     3b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3b6:	609a      	str	r2, [r3, #8]
#endif 
}
     3b8:	bf00      	nop
     3ba:	bd80      	pop	{r7, pc}
     3bc:	40021000 	.word	0x40021000
     3c0:	f8ff0000 	.word	0xf8ff0000
     3c4:	e000ed00 	.word	0xe000ed00

000003c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3c8:	b480      	push	{r7}
     3ca:	b085      	sub	sp, #20
     3cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ce:	2300      	movs	r3, #0
     3d0:	60fb      	str	r3, [r7, #12]
     3d2:	2300      	movs	r3, #0
     3d4:	60bb      	str	r3, [r7, #8]
     3d6:	2300      	movs	r3, #0
     3d8:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3da:	4b2c      	ldr	r3, [pc, #176]	; (48c <SystemCoreClockUpdate+0xc4>)
     3dc:	685b      	ldr	r3, [r3, #4]
     3de:	f003 030c 	and.w	r3, r3, #12
     3e2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     3e4:	68fb      	ldr	r3, [r7, #12]
     3e6:	2b04      	cmp	r3, #4
     3e8:	d007      	beq.n	3fa <SystemCoreClockUpdate+0x32>
     3ea:	2b08      	cmp	r3, #8
     3ec:	d009      	beq.n	402 <SystemCoreClockUpdate+0x3a>
     3ee:	2b00      	cmp	r3, #0
     3f0:	d133      	bne.n	45a <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     3f2:	4b27      	ldr	r3, [pc, #156]	; (490 <SystemCoreClockUpdate+0xc8>)
     3f4:	4a27      	ldr	r2, [pc, #156]	; (494 <SystemCoreClockUpdate+0xcc>)
     3f6:	601a      	str	r2, [r3, #0]
      break;
     3f8:	e033      	b.n	462 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     3fa:	4b25      	ldr	r3, [pc, #148]	; (490 <SystemCoreClockUpdate+0xc8>)
     3fc:	4a25      	ldr	r2, [pc, #148]	; (494 <SystemCoreClockUpdate+0xcc>)
     3fe:	601a      	str	r2, [r3, #0]
      break;
     400:	e02f      	b.n	462 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     402:	4b22      	ldr	r3, [pc, #136]	; (48c <SystemCoreClockUpdate+0xc4>)
     404:	685b      	ldr	r3, [r3, #4]
     406:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     40a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     40c:	4b1f      	ldr	r3, [pc, #124]	; (48c <SystemCoreClockUpdate+0xc4>)
     40e:	685b      	ldr	r3, [r3, #4]
     410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     414:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     416:	68bb      	ldr	r3, [r7, #8]
     418:	0c9b      	lsrs	r3, r3, #18
     41a:	3302      	adds	r3, #2
     41c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     41e:	687b      	ldr	r3, [r7, #4]
     420:	2b00      	cmp	r3, #0
     422:	d106      	bne.n	432 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     424:	68bb      	ldr	r3, [r7, #8]
     426:	4a1c      	ldr	r2, [pc, #112]	; (498 <SystemCoreClockUpdate+0xd0>)
     428:	fb02 f303 	mul.w	r3, r2, r3
     42c:	4a18      	ldr	r2, [pc, #96]	; (490 <SystemCoreClockUpdate+0xc8>)
     42e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     430:	e017      	b.n	462 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     432:	4b16      	ldr	r3, [pc, #88]	; (48c <SystemCoreClockUpdate+0xc4>)
     434:	685b      	ldr	r3, [r3, #4]
     436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     43a:	2b00      	cmp	r3, #0
     43c:	d006      	beq.n	44c <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     43e:	68bb      	ldr	r3, [r7, #8]
     440:	4a15      	ldr	r2, [pc, #84]	; (498 <SystemCoreClockUpdate+0xd0>)
     442:	fb02 f303 	mul.w	r3, r2, r3
     446:	4a12      	ldr	r2, [pc, #72]	; (490 <SystemCoreClockUpdate+0xc8>)
     448:	6013      	str	r3, [r2, #0]
      break;
     44a:	e00a      	b.n	462 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
     44c:	68bb      	ldr	r3, [r7, #8]
     44e:	4a11      	ldr	r2, [pc, #68]	; (494 <SystemCoreClockUpdate+0xcc>)
     450:	fb02 f303 	mul.w	r3, r2, r3
     454:	4a0e      	ldr	r2, [pc, #56]	; (490 <SystemCoreClockUpdate+0xc8>)
     456:	6013      	str	r3, [r2, #0]
      break;
     458:	e003      	b.n	462 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
     45a:	4b0d      	ldr	r3, [pc, #52]	; (490 <SystemCoreClockUpdate+0xc8>)
     45c:	4a0d      	ldr	r2, [pc, #52]	; (494 <SystemCoreClockUpdate+0xcc>)
     45e:	601a      	str	r2, [r3, #0]
      break;
     460:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     462:	4b0a      	ldr	r3, [pc, #40]	; (48c <SystemCoreClockUpdate+0xc4>)
     464:	685b      	ldr	r3, [r3, #4]
     466:	091b      	lsrs	r3, r3, #4
     468:	f003 030f 	and.w	r3, r3, #15
     46c:	4a0b      	ldr	r2, [pc, #44]	; (49c <SystemCoreClockUpdate+0xd4>)
     46e:	5cd3      	ldrb	r3, [r2, r3]
     470:	b2db      	uxtb	r3, r3
     472:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <SystemCoreClockUpdate+0xc8>)
     476:	681a      	ldr	r2, [r3, #0]
     478:	68fb      	ldr	r3, [r7, #12]
     47a:	fa22 f303 	lsr.w	r3, r2, r3
     47e:	4a04      	ldr	r2, [pc, #16]	; (490 <SystemCoreClockUpdate+0xc8>)
     480:	6013      	str	r3, [r2, #0]
}
     482:	bf00      	nop
     484:	3714      	adds	r7, #20
     486:	46bd      	mov	sp, r7
     488:	bc80      	pop	{r7}
     48a:	4770      	bx	lr
     48c:	40021000 	.word	0x40021000
     490:	20000000 	.word	0x20000000
     494:	007a1200 	.word	0x007a1200
     498:	003d0900 	.word	0x003d0900
     49c:	20000004 	.word	0x20000004

000004a0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     4a4:	f000 f802 	bl	4ac <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     4a8:	bf00      	nop
     4aa:	bd80      	pop	{r7, pc}

000004ac <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     4ac:	b480      	push	{r7}
     4ae:	b083      	sub	sp, #12
     4b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     4b2:	2300      	movs	r3, #0
     4b4:	607b      	str	r3, [r7, #4]
     4b6:	2300      	movs	r3, #0
     4b8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     4ba:	4b3a      	ldr	r3, [pc, #232]	; (5a4 <SetSysClockTo72+0xf8>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	4a39      	ldr	r2, [pc, #228]	; (5a4 <SetSysClockTo72+0xf8>)
     4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     4c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     4c6:	4b37      	ldr	r3, [pc, #220]	; (5a4 <SetSysClockTo72+0xf8>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	3301      	adds	r3, #1
     4d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	2b00      	cmp	r3, #0
     4da:	d103      	bne.n	4e4 <SetSysClockTo72+0x38>
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     4e2:	d1f0      	bne.n	4c6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     4e4:	4b2f      	ldr	r3, [pc, #188]	; (5a4 <SetSysClockTo72+0xf8>)
     4e6:	681b      	ldr	r3, [r3, #0]
     4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4ec:	2b00      	cmp	r3, #0
     4ee:	d002      	beq.n	4f6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
     4f0:	2301      	movs	r3, #1
     4f2:	603b      	str	r3, [r7, #0]
     4f4:	e001      	b.n	4fa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     4f6:	2300      	movs	r3, #0
     4f8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     4fa:	683b      	ldr	r3, [r7, #0]
     4fc:	2b01      	cmp	r3, #1
     4fe:	d14b      	bne.n	598 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     500:	4b29      	ldr	r3, [pc, #164]	; (5a8 <SetSysClockTo72+0xfc>)
     502:	681b      	ldr	r3, [r3, #0]
     504:	4a28      	ldr	r2, [pc, #160]	; (5a8 <SetSysClockTo72+0xfc>)
     506:	f043 0310 	orr.w	r3, r3, #16
     50a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     50c:	4b26      	ldr	r3, [pc, #152]	; (5a8 <SetSysClockTo72+0xfc>)
     50e:	681b      	ldr	r3, [r3, #0]
     510:	4a25      	ldr	r2, [pc, #148]	; (5a8 <SetSysClockTo72+0xfc>)
     512:	f023 0303 	bic.w	r3, r3, #3
     516:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     518:	4b23      	ldr	r3, [pc, #140]	; (5a8 <SetSysClockTo72+0xfc>)
     51a:	681b      	ldr	r3, [r3, #0]
     51c:	4a22      	ldr	r2, [pc, #136]	; (5a8 <SetSysClockTo72+0xfc>)
     51e:	f043 0302 	orr.w	r3, r3, #2
     522:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     524:	4b1f      	ldr	r3, [pc, #124]	; (5a4 <SetSysClockTo72+0xf8>)
     526:	4a1f      	ldr	r2, [pc, #124]	; (5a4 <SetSysClockTo72+0xf8>)
     528:	685b      	ldr	r3, [r3, #4]
     52a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     52c:	4b1d      	ldr	r3, [pc, #116]	; (5a4 <SetSysClockTo72+0xf8>)
     52e:	4a1d      	ldr	r2, [pc, #116]	; (5a4 <SetSysClockTo72+0xf8>)
     530:	685b      	ldr	r3, [r3, #4]
     532:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     534:	4b1b      	ldr	r3, [pc, #108]	; (5a4 <SetSysClockTo72+0xf8>)
     536:	685b      	ldr	r3, [r3, #4]
     538:	4a1a      	ldr	r2, [pc, #104]	; (5a4 <SetSysClockTo72+0xf8>)
     53a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     53e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     540:	4b18      	ldr	r3, [pc, #96]	; (5a4 <SetSysClockTo72+0xf8>)
     542:	685b      	ldr	r3, [r3, #4]
     544:	4a17      	ldr	r2, [pc, #92]	; (5a4 <SetSysClockTo72+0xf8>)
     546:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     54a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     54c:	4b15      	ldr	r3, [pc, #84]	; (5a4 <SetSysClockTo72+0xf8>)
     54e:	685b      	ldr	r3, [r3, #4]
     550:	4a14      	ldr	r2, [pc, #80]	; (5a4 <SetSysClockTo72+0xf8>)
     552:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
     556:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     558:	4b12      	ldr	r3, [pc, #72]	; (5a4 <SetSysClockTo72+0xf8>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	4a11      	ldr	r2, [pc, #68]	; (5a4 <SetSysClockTo72+0xf8>)
     55e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     562:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     564:	bf00      	nop
     566:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <SetSysClockTo72+0xf8>)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     56e:	2b00      	cmp	r3, #0
     570:	d0f9      	beq.n	566 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <SetSysClockTo72+0xf8>)
     574:	685b      	ldr	r3, [r3, #4]
     576:	4a0b      	ldr	r2, [pc, #44]	; (5a4 <SetSysClockTo72+0xf8>)
     578:	f023 0303 	bic.w	r3, r3, #3
     57c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     57e:	4b09      	ldr	r3, [pc, #36]	; (5a4 <SetSysClockTo72+0xf8>)
     580:	685b      	ldr	r3, [r3, #4]
     582:	4a08      	ldr	r2, [pc, #32]	; (5a4 <SetSysClockTo72+0xf8>)
     584:	f043 0302 	orr.w	r3, r3, #2
     588:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     58a:	bf00      	nop
     58c:	4b05      	ldr	r3, [pc, #20]	; (5a4 <SetSysClockTo72+0xf8>)
     58e:	685b      	ldr	r3, [r3, #4]
     590:	f003 030c 	and.w	r3, r3, #12
     594:	2b08      	cmp	r3, #8
     596:	d1f9      	bne.n	58c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     598:	bf00      	nop
     59a:	370c      	adds	r7, #12
     59c:	46bd      	mov	sp, r7
     59e:	bc80      	pop	{r7}
     5a0:	4770      	bx	lr
     5a2:	bf00      	nop
     5a4:	40021000 	.word	0x40021000
     5a8:	40022000 	.word	0x40022000
     5ac:	00005d7a 	.word	0x00005d7a
     5b0:	20000000 	.word	0x20000000
     5b4:	20000028 	.word	0x20000028
     5b8:	20000028 	.word	0x20000028
     5bc:	20000029 	.word	0x20000029

000005c0 <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     5c6:	2101      	movs	r1, #1
     5c8:	2010      	movs	r0, #16
     5ca:	f001 f939 	bl	1840 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
     5ce:	2201      	movs	r2, #1
     5d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     5d4:	4809      	ldr	r0, [pc, #36]	; (5fc <init_led+0x3c>)
     5d6:	f001 fc00 	bl	1dda <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     5da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5de:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     5e0:	2310      	movs	r3, #16
     5e2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     5e4:	2303      	movs	r3, #3
     5e6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     5e8:	1d3b      	adds	r3, r7, #4
     5ea:	4619      	mov	r1, r3
     5ec:	4803      	ldr	r0, [pc, #12]	; (5fc <init_led+0x3c>)
     5ee:	f001 fabf 	bl	1b70 <GPIO_Init>
}
     5f2:	bf00      	nop
     5f4:	3708      	adds	r7, #8
     5f6:	46bd      	mov	sp, r7
     5f8:	bd80      	pop	{r7, pc}
     5fa:	bf00      	nop
     5fc:	40011000 	.word	0x40011000

00000600 <init_button>:

void init_button(void)
{
     600:	b580      	push	{r7, lr}
     602:	b082      	sub	sp, #8
     604:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     606:	2101      	movs	r1, #1
     608:	2004      	movs	r0, #4
     60a:	f001 f919 	bl	1840 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     60e:	2301      	movs	r3, #1
     610:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     612:	2304      	movs	r3, #4
     614:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     616:	2303      	movs	r3, #3
     618:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     61a:	1d3b      	adds	r3, r7, #4
     61c:	4619      	mov	r1, r3
     61e:	4803      	ldr	r0, [pc, #12]	; (62c <init_button+0x2c>)
     620:	f001 faa6 	bl	1b70 <GPIO_Init>
}
     624:	bf00      	nop
     626:	3708      	adds	r7, #8
     628:	46bd      	mov	sp, r7
     62a:	bd80      	pop	{r7, pc}
     62c:	40011000 	.word	0x40011000

00000630 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     636:	2101      	movs	r1, #1
     638:	2001      	movs	r0, #1
     63a:	f001 f901 	bl	1840 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     63e:	2100      	movs	r1, #0
     640:	2000      	movs	r0, #0
     642:	f001 fcb5 	bl	1fb0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     646:	2301      	movs	r3, #1
     648:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     64a:	2300      	movs	r3, #0
     64c:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     64e:	2308      	movs	r3, #8
     650:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     652:	2301      	movs	r3, #1
     654:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     656:	f107 0308 	add.w	r3, r7, #8
     65a:	4618      	mov	r0, r3
     65c:	f002 f97e 	bl	295c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     660:	2306      	movs	r3, #6
     662:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     664:	230f      	movs	r3, #15
     666:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     668:	230f      	movs	r3, #15
     66a:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     66c:	2301      	movs	r3, #1
     66e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     670:	1d3b      	adds	r3, r7, #4
     672:	4618      	mov	r0, r3
     674:	f005 f918 	bl	58a8 <NVIC_Init>
}
     678:	bf00      	nop
     67a:	3710      	adds	r7, #16
     67c:	46bd      	mov	sp, r7
     67e:	bd80      	pop	{r7, pc}

00000680 <init_rs232>:

void init_rs232(void)
{
     680:	b580      	push	{r7, lr}
     682:	b086      	sub	sp, #24
     684:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO | RCC_APB2Periph_USART1, ENABLE);
     686:	2101      	movs	r1, #1
     688:	f244 000d 	movw	r0, #16397	; 0x400d
     68c:	f001 f8d8 	bl	1840 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3, ENABLE);
     690:	2101      	movs	r1, #1
     692:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
     696:	f001 f8f1 	bl	187c <RCC_APB1PeriphClockCmd>
	
    /* DMA clock enable */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
     69a:	2101      	movs	r1, #1
     69c:	2001      	movs	r0, #1
     69e:	f001 f8b1 	bl	1804 <RCC_AHBPeriphClockCmd>
 
    /* Configure USART1 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     6a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
     6a6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     6a8:	2304      	movs	r3, #4
     6aa:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6ac:	1d3b      	adds	r3, r7, #4
     6ae:	4619      	mov	r1, r3
     6b0:	4840      	ldr	r0, [pc, #256]	; (7b4 <init_rs232+0x134>)
     6b2:	f001 fa5d 	bl	1b70 <GPIO_Init>
    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
     6b6:	2308      	movs	r3, #8
     6b8:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     6ba:	2304      	movs	r3, #4
     6bc:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6be:	1d3b      	adds	r3, r7, #4
     6c0:	4619      	mov	r1, r3
     6c2:	483c      	ldr	r0, [pc, #240]	; (7b4 <init_rs232+0x134>)
     6c4:	f001 fa54 	bl	1b70 <GPIO_Init>
    /* Configure USART3 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
     6c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
     6cc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     6ce:	2304      	movs	r3, #4
     6d0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
     6d2:	1d3b      	adds	r3, r7, #4
     6d4:	4619      	mov	r1, r3
     6d6:	4838      	ldr	r0, [pc, #224]	; (7b8 <init_rs232+0x138>)
     6d8:	f001 fa4a 	bl	1b70 <GPIO_Init>

    /* Configure USART1 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     6dc:	2304      	movs	r3, #4
     6de:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6e0:	2303      	movs	r3, #3
     6e2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     6e4:	2318      	movs	r3, #24
     6e6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     6e8:	1d3b      	adds	r3, r7, #4
     6ea:	4619      	mov	r1, r3
     6ec:	4831      	ldr	r0, [pc, #196]	; (7b4 <init_rs232+0x134>)
     6ee:	f001 fa3f 	bl	1b70 <GPIO_Init>
    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
     6f2:	f44f 7300 	mov.w	r3, #512	; 0x200
     6f6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6f8:	2303      	movs	r3, #3
     6fa:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     6fc:	2318      	movs	r3, #24
     6fe:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     700:	1d3b      	adds	r3, r7, #4
     702:	4619      	mov	r1, r3
     704:	482b      	ldr	r0, [pc, #172]	; (7b4 <init_rs232+0x134>)
     706:	f001 fa33 	bl	1b70 <GPIO_Init>
    /* Configure USAR3 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     70a:	f44f 6380 	mov.w	r3, #1024	; 0x400
     70e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     710:	2303      	movs	r3, #3
     712:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     714:	2318      	movs	r3, #24
     716:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
     718:	1d3b      	adds	r3, r7, #4
     71a:	4619      	mov	r1, r3
     71c:	4826      	ldr	r0, [pc, #152]	; (7b8 <init_rs232+0x138>)
     71e:	f001 fa27 	bl	1b70 <GPIO_Init>

    /* Configure the USART1 */
    USART_InitStructure.USART_BaudRate = 115200;
     722:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     726:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     728:	2300      	movs	r3, #0
     72a:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     72c:	2300      	movs	r3, #0
     72e:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     730:	2300      	movs	r3, #0
     732:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     734:	2300      	movs	r3, #0
     736:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     738:	230c      	movs	r3, #12
     73a:	827b      	strh	r3, [r7, #18]
    USART_Init(USART1, &USART_InitStructure);
     73c:	f107 0308 	add.w	r3, r7, #8
     740:	4619      	mov	r1, r3
     742:	481e      	ldr	r0, [pc, #120]	; (7bc <init_rs232+0x13c>)
     744:	f001 fcde 	bl	2104 <USART_Init>
    USART_Cmd(USART1, ENABLE);
     748:	2101      	movs	r1, #1
     74a:	481c      	ldr	r0, [pc, #112]	; (7bc <init_rs232+0x13c>)
     74c:	f001 fdf0 	bl	2330 <USART_Cmd>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 115200;
     750:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     754:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     756:	2300      	movs	r3, #0
     758:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     75a:	2300      	movs	r3, #0
     75c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     75e:	2300      	movs	r3, #0
     760:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     762:	2300      	movs	r3, #0
     764:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     766:	230c      	movs	r3, #12
     768:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
     76a:	f107 0308 	add.w	r3, r7, #8
     76e:	4619      	mov	r1, r3
     770:	4813      	ldr	r0, [pc, #76]	; (7c0 <init_rs232+0x140>)
     772:	f001 fcc7 	bl	2104 <USART_Init>
    USART_Cmd(USART2, ENABLE);
     776:	2101      	movs	r1, #1
     778:	4811      	ldr	r0, [pc, #68]	; (7c0 <init_rs232+0x140>)
     77a:	f001 fdd9 	bl	2330 <USART_Cmd>

    /* Configure the USART3 */
    USART_InitStructure.USART_BaudRate = 115200;
     77e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     782:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     784:	2300      	movs	r3, #0
     786:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     788:	2300      	movs	r3, #0
     78a:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     78c:	2300      	movs	r3, #0
     78e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     790:	2300      	movs	r3, #0
     792:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     794:	230c      	movs	r3, #12
     796:	827b      	strh	r3, [r7, #18]
    USART_Init(USART3, &USART_InitStructure);
     798:	f107 0308 	add.w	r3, r7, #8
     79c:	4619      	mov	r1, r3
     79e:	4809      	ldr	r0, [pc, #36]	; (7c4 <init_rs232+0x144>)
     7a0:	f001 fcb0 	bl	2104 <USART_Init>
    USART_Cmd(USART3, ENABLE);
     7a4:	2101      	movs	r1, #1
     7a6:	4807      	ldr	r0, [pc, #28]	; (7c4 <init_rs232+0x144>)
     7a8:	f001 fdc2 	bl	2330 <USART_Cmd>

}
     7ac:	bf00      	nop
     7ae:	3718      	adds	r7, #24
     7b0:	46bd      	mov	sp, r7
     7b2:	bd80      	pop	{r7, pc}
     7b4:	40010800 	.word	0x40010800
     7b8:	40010c00 	.word	0x40010c00
     7bc:	40013800 	.word	0x40013800
     7c0:	40004400 	.word	0x40004400
     7c4:	40004800 	.word	0x40004800

000007c8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     7c8:	b580      	push	{r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART1. */
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
     7ce:	2200      	movs	r2, #0
     7d0:	f240 7127 	movw	r1, #1831	; 0x727
     7d4:	4821      	ldr	r0, [pc, #132]	; (85c <enable_rs232_interrupts+0x94>)
     7d6:	f001 fdca 	bl	236e <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
     7da:	2201      	movs	r2, #1
     7dc:	f240 5125 	movw	r1, #1317	; 0x525
     7e0:	481e      	ldr	r0, [pc, #120]	; (85c <enable_rs232_interrupts+0x94>)
     7e2:	f001 fdc4 	bl	236e <USART_ITConfig>

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     7e6:	2200      	movs	r2, #0
     7e8:	f240 7127 	movw	r1, #1831	; 0x727
     7ec:	481c      	ldr	r0, [pc, #112]	; (860 <enable_rs232_interrupts+0x98>)
     7ee:	f001 fdbe 	bl	236e <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
     7f2:	2201      	movs	r2, #1
     7f4:	f240 5125 	movw	r1, #1317	; 0x525
     7f8:	4819      	ldr	r0, [pc, #100]	; (860 <enable_rs232_interrupts+0x98>)
     7fa:	f001 fdb8 	bl	236e <USART_ITConfig>

    /* Enable transmit and receive interrupts for the USART3. */
    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
     7fe:	2200      	movs	r2, #0
     800:	f240 7127 	movw	r1, #1831	; 0x727
     804:	4817      	ldr	r0, [pc, #92]	; (864 <enable_rs232_interrupts+0x9c>)
     806:	f001 fdb2 	bl	236e <USART_ITConfig>
    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
     80a:	2201      	movs	r2, #1
     80c:	f240 5125 	movw	r1, #1317	; 0x525
     810:	4814      	ldr	r0, [pc, #80]	; (864 <enable_rs232_interrupts+0x9c>)
     812:	f001 fdac 	bl	236e <USART_ITConfig>

    /* Enable the USART1 IRQ in the NVIC module (so that the USART1 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
     816:	2325      	movs	r3, #37	; 0x25
     818:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     81a:	2300      	movs	r3, #0
     81c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     81e:	2301      	movs	r3, #1
     820:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     822:	1d3b      	adds	r3, r7, #4
     824:	4618      	mov	r0, r3
     826:	f005 f83f 	bl	58a8 <NVIC_Init>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
     82a:	2326      	movs	r3, #38	; 0x26
     82c:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     82e:	2300      	movs	r3, #0
     830:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     832:	2301      	movs	r3, #1
     834:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     836:	1d3b      	adds	r3, r7, #4
     838:	4618      	mov	r0, r3
     83a:	f005 f835 	bl	58a8 <NVIC_Init>

    /* Enable the USART3 IRQ in the NVIC module (so that the USART3 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
     83e:	2327      	movs	r3, #39	; 0x27
     840:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x04;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     842:	2300      	movs	r3, #0
     844:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     846:	2301      	movs	r3, #1
     848:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     84a:	1d3b      	adds	r3, r7, #4
     84c:	4618      	mov	r0, r3
     84e:	f005 f82b 	bl	58a8 <NVIC_Init>
}
     852:	bf00      	nop
     854:	3708      	adds	r7, #8
     856:	46bd      	mov	sp, r7
     858:	bd80      	pop	{r7, pc}
     85a:	bf00      	nop
     85c:	40013800 	.word	0x40013800
     860:	40004400 	.word	0x40004400
     864:	40004800 	.word	0x40004800

00000868 <enable_rs232>:

void enable_rs232(void)
{
     868:	b580      	push	{r7, lr}
     86a:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART1, ENABLE);
     86c:	2101      	movs	r1, #1
     86e:	4806      	ldr	r0, [pc, #24]	; (888 <enable_rs232+0x20>)
     870:	f001 fd5e 	bl	2330 <USART_Cmd>
    USART_Cmd(USART2, ENABLE);
     874:	2101      	movs	r1, #1
     876:	4805      	ldr	r0, [pc, #20]	; (88c <enable_rs232+0x24>)
     878:	f001 fd5a 	bl	2330 <USART_Cmd>
    USART_Cmd(USART3, ENABLE);
     87c:	2101      	movs	r1, #1
     87e:	4804      	ldr	r0, [pc, #16]	; (890 <enable_rs232+0x28>)
     880:	f001 fd56 	bl	2330 <USART_Cmd>
}
     884:	bf00      	nop
     886:	bd80      	pop	{r7, pc}
     888:	40013800 	.word	0x40013800
     88c:	40004400 	.word	0x40004400
     890:	40004800 	.word	0x40004800

00000894 <rs232_print_str>:

void rs232_print_str(const char *str)
{
     894:	b580      	push	{r7, lr}
     896:	b084      	sub	sp, #16
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     8a0:	e011      	b.n	8c6 <rs232_print_str+0x32>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     8a2:	bf00      	nop
     8a4:	2180      	movs	r1, #128	; 0x80
     8a6:	480c      	ldr	r0, [pc, #48]	; (8d8 <rs232_print_str+0x44>)
     8a8:	f001 ff9c 	bl	27e4 <USART_GetFlagStatus>
     8ac:	4603      	mov	r3, r0
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0f8      	beq.n	8a4 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	b29b      	uxth	r3, r3
     8b8:	4619      	mov	r1, r3
     8ba:	4807      	ldr	r0, [pc, #28]	; (8d8 <rs232_print_str+0x44>)
     8bc:	f001 fe51 	bl	2562 <USART_SendData>
        curr_char++;
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	3301      	adds	r3, #1
     8c4:	60fb      	str	r3, [r7, #12]
    while(*curr_char != '\0') {
     8c6:	68fb      	ldr	r3, [r7, #12]
     8c8:	781b      	ldrb	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d1e9      	bne.n	8a2 <rs232_print_str+0xe>
    }
}
     8ce:	bf00      	nop
     8d0:	3710      	adds	r7, #16
     8d2:	46bd      	mov	sp, r7
     8d4:	bd80      	pop	{r7, pc}
     8d6:	bf00      	nop
     8d8:	40004400 	.word	0x40004400

000008dc <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     8dc:	b480      	push	{r7}
     8de:	b083      	sub	sp, #12
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	2b09      	cmp	r3, #9
     8e8:	d804      	bhi.n	8f4 <hex_to_char+0x18>
        return hex_number + '0';
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	b2db      	uxtb	r3, r3
     8ee:	3330      	adds	r3, #48	; 0x30
     8f0:	b2db      	uxtb	r3, r3
     8f2:	e003      	b.n	8fc <hex_to_char+0x20>
    } else {
        return hex_number - 0xA + 'A';
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	b2db      	uxtb	r3, r3
     8f8:	3337      	adds	r3, #55	; 0x37
     8fa:	b2db      	uxtb	r3, r3
    }
}
     8fc:	4618      	mov	r0, r3
     8fe:	370c      	adds	r7, #12
     900:	46bd      	mov	sp, r7
     902:	bc80      	pop	{r7}
     904:	4770      	bx	lr

00000906 <send_byte>:

void send_byte(uint8_t b)
{
     906:	b580      	push	{r7, lr}
     908:	b082      	sub	sp, #8
     90a:	af00      	add	r7, sp, #0
     90c:	4603      	mov	r3, r0
     90e:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     910:	bf00      	nop
     912:	2180      	movs	r1, #128	; 0x80
     914:	480a      	ldr	r0, [pc, #40]	; (940 <send_byte+0x3a>)
     916:	f001 ff65 	bl	27e4 <USART_GetFlagStatus>
     91a:	4603      	mov	r3, r0
     91c:	2b00      	cmp	r3, #0
     91e:	d0f8      	beq.n	912 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     920:	4b08      	ldr	r3, [pc, #32]	; (944 <send_byte+0x3e>)
     922:	68db      	ldr	r3, [r3, #12]
     924:	4a07      	ldr	r2, [pc, #28]	; (944 <send_byte+0x3e>)
     926:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     92a:	60d3      	str	r3, [r2, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
     92c:	79fb      	ldrb	r3, [r7, #7]
     92e:	b29b      	uxth	r3, r3
     930:	4619      	mov	r1, r3
     932:	4803      	ldr	r0, [pc, #12]	; (940 <send_byte+0x3a>)
     934:	f001 fe15 	bl	2562 <USART_SendData>
}
     938:	bf00      	nop
     93a:	3708      	adds	r7, #8
     93c:	46bd      	mov	sp, r7
     93e:	bd80      	pop	{r7, pc}
     940:	40004400 	.word	0x40004400
     944:	40011000 	.word	0x40011000

00000948 <send_byte_uart>:




void send_byte_uart(USART_TypeDef* USARTx,uint8_t b)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
     950:	460b      	mov	r3, r1
     952:	70fb      	strb	r3, [r7, #3]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);
     954:	bf00      	nop
     956:	2180      	movs	r1, #128	; 0x80
     958:	6878      	ldr	r0, [r7, #4]
     95a:	f001 ff43 	bl	27e4 <USART_GetFlagStatus>
     95e:	4603      	mov	r3, r0
     960:	2b00      	cmp	r3, #0
     962:	d0f8      	beq.n	956 <send_byte_uart+0xe>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     964:	4b07      	ldr	r3, [pc, #28]	; (984 <send_byte_uart+0x3c>)
     966:	68db      	ldr	r3, [r3, #12]
     968:	4a06      	ldr	r2, [pc, #24]	; (984 <send_byte_uart+0x3c>)
     96a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     96e:	60d3      	str	r3, [r2, #12]

    /* Send the byte */
    USART_SendData(USARTx, b);
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	b29b      	uxth	r3, r3
     974:	4619      	mov	r1, r3
     976:	6878      	ldr	r0, [r7, #4]
     978:	f001 fdf3 	bl	2562 <USART_SendData>
}
     97c:	bf00      	nop
     97e:	3708      	adds	r7, #8
     980:	46bd      	mov	sp, r7
     982:	bd80      	pop	{r7, pc}
     984:	40011000 	.word	0x40011000

00000988 <send_number>:

void send_number(unsigned long sample, int radix)
{
     988:	b580      	push	{r7, lr}
     98a:	b09e      	sub	sp, #120	; 0x78
     98c:	af00      	add	r7, sp, #0
     98e:	6078      	str	r0, [r7, #4]
     990:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
     992:	2300      	movs	r3, #0
     994:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
     996:	683a      	ldr	r2, [r7, #0]
     998:	687b      	ldr	r3, [r7, #4]
     99a:	fbb3 f1f2 	udiv	r1, r3, r2
     99e:	fb02 f201 	mul.w	r2, r2, r1
     9a2:	1a9b      	subs	r3, r3, r2
     9a4:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
     9a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
     9a8:	f7ff ff98 	bl	8dc <hex_to_char>
     9ac:	4603      	mov	r3, r0
     9ae:	4619      	mov	r1, r3
     9b0:	f107 020c 	add.w	r2, r7, #12
     9b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9b6:	4413      	add	r3, r2
     9b8:	460a      	mov	r2, r1
     9ba:	701a      	strb	r2, [r3, #0]
        sample /= radix;
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	687a      	ldr	r2, [r7, #4]
     9c0:	fbb2 f3f3 	udiv	r3, r2, r3
     9c4:	607b      	str	r3, [r7, #4]
        digit++;
     9c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9c8:	3301      	adds	r3, #1
     9ca:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d1e1      	bne.n	996 <send_number+0xe>

    while(digit != 0) {
     9d2:	e014      	b.n	9fe <send_number+0x76>
        digit--;
     9d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9d6:	3b01      	subs	r3, #1
     9d8:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     9da:	bf00      	nop
     9dc:	2180      	movs	r1, #128	; 0x80
     9de:	480b      	ldr	r0, [pc, #44]	; (a0c <send_number+0x84>)
     9e0:	f001 ff00 	bl	27e4 <USART_GetFlagStatus>
     9e4:	4603      	mov	r3, r0
     9e6:	2b00      	cmp	r3, #0
     9e8:	d0f8      	beq.n	9dc <send_number+0x54>
        USART_SendData(USART2, str[digit]);
     9ea:	f107 020c 	add.w	r2, r7, #12
     9ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     9f0:	4413      	add	r3, r2
     9f2:	781b      	ldrb	r3, [r3, #0]
     9f4:	b29b      	uxth	r3, r3
     9f6:	4619      	mov	r1, r3
     9f8:	4804      	ldr	r0, [pc, #16]	; (a0c <send_number+0x84>)
     9fa:	f001 fdb2 	bl	2562 <USART_SendData>
    while(digit != 0) {
     9fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     a00:	2b00      	cmp	r3, #0
     a02:	d1e7      	bne.n	9d4 <send_number+0x4c>
    }
}
     a04:	bf00      	nop
     a06:	3778      	adds	r7, #120	; 0x78
     a08:	46bd      	mov	sp, r7
     a0a:	bd80      	pop	{r7, pc}
     a0c:	40004400 	.word	0x40004400

00000a10 <myprintf_init>:
#define LARGE  	64		/* use 'ABCDEF' instead of 'abcdef' */
#define SMALL  	64		/* use 'abcdef' instead of 'ABCDEF' */
#define PBSIZE 128 /* Print Buffer Size  */

void myprintf_init()
{
     a10:	b580      	push	{r7, lr}
     a12:	af00      	add	r7, sp, #0
    init_rs232();
     a14:	f7ff fe34 	bl	680 <init_rs232>
    enable_rs232_interrupts();
     a18:	f7ff fed6 	bl	7c8 <enable_rs232_interrupts>
    enable_rs232();
     a1c:	f7ff ff24 	bl	868 <enable_rs232>
}
     a20:	bf00      	nop
     a22:	bd80      	pop	{r7, pc}

00000a24 <usart_send_bytes>:

void usart_send_bytes(uint8_t data)
{
     a24:	b580      	push	{r7, lr}
     a26:	b082      	sub	sp, #8
     a28:	af00      	add	r7, sp, #0
     a2a:	4603      	mov	r3, r0
     a2c:	71fb      	strb	r3, [r7, #7]
    while(!USART_GetFlagStatus(USART2 ,USART_FLAG_TXE)) {
     a2e:	bf00      	nop
     a30:	2180      	movs	r1, #128	; 0x80
     a32:	4808      	ldr	r0, [pc, #32]	; (a54 <usart_send_bytes+0x30>)
     a34:	f001 fed6 	bl	27e4 <USART_GetFlagStatus>
     a38:	4603      	mov	r3, r0
     a3a:	2b00      	cmp	r3, #0
     a3c:	d0f8      	beq.n	a30 <usart_send_bytes+0xc>
    }
    USART_SendData( USART2, data);
     a3e:	79fb      	ldrb	r3, [r7, #7]
     a40:	b29b      	uxth	r3, r3
     a42:	4619      	mov	r1, r3
     a44:	4803      	ldr	r0, [pc, #12]	; (a54 <usart_send_bytes+0x30>)
     a46:	f001 fd8c 	bl	2562 <USART_SendData>
}
     a4a:	bf00      	nop
     a4c:	3708      	adds	r7, #8
     a4e:	46bd      	mov	sp, r7
     a50:	bd80      	pop	{r7, pc}
     a52:	bf00      	nop
     a54:	40004400 	.word	0x40004400

00000a58 <mystrnlen>:


signed int mystrnlen (const char * s, signed int count)
{
     a58:	b480      	push	{r7}
     a5a:	b085      	sub	sp, #20
     a5c:	af00      	add	r7, sp, #0
     a5e:	6078      	str	r0, [r7, #4]
     a60:	6039      	str	r1, [r7, #0]
    const char *sc;

    for (sc = s; count-- && *sc != '\0'; ++sc) {
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	60fb      	str	r3, [r7, #12]
     a66:	e002      	b.n	a6e <mystrnlen+0x16>
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	3301      	adds	r3, #1
     a6c:	60fb      	str	r3, [r7, #12]
     a6e:	683b      	ldr	r3, [r7, #0]
     a70:	1e5a      	subs	r2, r3, #1
     a72:	603a      	str	r2, [r7, #0]
     a74:	2b00      	cmp	r3, #0
     a76:	d003      	beq.n	a80 <mystrnlen+0x28>
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	781b      	ldrb	r3, [r3, #0]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d1f3      	bne.n	a68 <mystrnlen+0x10>
        /* nothing */
    }
    return sc - s;
     a80:	68fa      	ldr	r2, [r7, #12]
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	1ad3      	subs	r3, r2, r3
}
     a86:	4618      	mov	r0, r3
     a88:	3714      	adds	r7, #20
     a8a:	46bd      	mov	sp, r7
     a8c:	bc80      	pop	{r7}
     a8e:	4770      	bx	lr

00000a90 <myskip_atoi>:

static int myskip_atoi (const char **s)
{
     a90:	b480      	push	{r7}
     a92:	b085      	sub	sp, #20
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
    int i = 0;
     a98:	2300      	movs	r3, #0
     a9a:	60fb      	str	r3, [r7, #12]

    while (isdigit(**s) != 0) {
     a9c:	e00e      	b.n	abc <myskip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
     a9e:	68fa      	ldr	r2, [r7, #12]
     aa0:	4613      	mov	r3, r2
     aa2:	009b      	lsls	r3, r3, #2
     aa4:	4413      	add	r3, r2
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	4618      	mov	r0, r3
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	1c59      	adds	r1, r3, #1
     ab0:	687a      	ldr	r2, [r7, #4]
     ab2:	6011      	str	r1, [r2, #0]
     ab4:	781b      	ldrb	r3, [r3, #0]
     ab6:	4403      	add	r3, r0
     ab8:	3b30      	subs	r3, #48	; 0x30
     aba:	60fb      	str	r3, [r7, #12]
    while (isdigit(**s) != 0) {
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	3b30      	subs	r3, #48	; 0x30
     ac4:	2b09      	cmp	r3, #9
     ac6:	d9ea      	bls.n	a9e <myskip_atoi+0xe>
    }
    return i;
     ac8:	68fb      	ldr	r3, [r7, #12]
}
     aca:	4618      	mov	r0, r3
     acc:	3714      	adds	r7, #20
     ace:	46bd      	mov	sp, r7
     ad0:	bc80      	pop	{r7}
     ad2:	4770      	bx	lr

00000ad4 <mynumber>:

static char * mynumber (char * str, long num, int base, int size, int precision ,int type)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b09a      	sub	sp, #104	; 0x68
     ad8:	af00      	add	r7, sp, #0
     ada:	60f8      	str	r0, [r7, #12]
     adc:	60b9      	str	r1, [r7, #8]
     ade:	607a      	str	r2, [r7, #4]
     ae0:	603b      	str	r3, [r7, #0]
    char c = 0;
     ae2:	2300      	movs	r3, #0
     ae4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    char sign = 0;
     ae8:	2300      	movs	r3, #0
     aea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    char tmp[66] = {0};
     aee:	f107 0310 	add.w	r3, r7, #16
     af2:	2242      	movs	r2, #66	; 0x42
     af4:	2100      	movs	r1, #0
     af6:	4618      	mov	r0, r3
     af8:	f005 f898 	bl	5c2c <memset>
    int  i = 0;
     afc:	2300      	movs	r3, #0
     afe:	663b      	str	r3, [r7, #96]	; 0x60
    const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
     b00:	4b85      	ldr	r3, [pc, #532]	; (d18 <mynumber+0x244>)
     b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((type & LARGE) != 0) {
     b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
     b0a:	2b00      	cmp	r3, #0
     b0c:	d001      	beq.n	b12 <mynumber+0x3e>
        digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
     b0e:	4b83      	ldr	r3, [pc, #524]	; (d1c <mynumber+0x248>)
     b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if ((type & LEFT) != 0) {
     b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b14:	f003 0310 	and.w	r3, r3, #16
     b18:	2b00      	cmp	r3, #0
     b1a:	d003      	beq.n	b24 <mynumber+0x50>
        type &= ~ZEROPAD;
     b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b1e:	f023 0301 	bic.w	r3, r3, #1
     b22:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((base < 2) || (base > 36)) {
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	2b01      	cmp	r3, #1
     b28:	dd02      	ble.n	b30 <mynumber+0x5c>
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	2b24      	cmp	r3, #36	; 0x24
     b2e:	dd01      	ble.n	b34 <mynumber+0x60>
        return 0;
     b30:	2300      	movs	r3, #0
     b32:	e0ec      	b.n	d0e <mynumber+0x23a>
    }

    c = (type & ZEROPAD) ? '0' : ' ';
     b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b36:	f003 0301 	and.w	r3, r3, #1
     b3a:	2b00      	cmp	r3, #0
     b3c:	d001      	beq.n	b42 <mynumber+0x6e>
     b3e:	2330      	movs	r3, #48	; 0x30
     b40:	e000      	b.n	b44 <mynumber+0x70>
     b42:	2320      	movs	r3, #32
     b44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    sign = 0;
     b48:	2300      	movs	r3, #0
     b4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if ((type & SIGN) != 0) {
     b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b50:	f003 0302 	and.w	r3, r3, #2
     b54:	2b00      	cmp	r3, #0
     b56:	d023      	beq.n	ba0 <mynumber+0xcc>
        if (num < 0) {
     b58:	68bb      	ldr	r3, [r7, #8]
     b5a:	2b00      	cmp	r3, #0
     b5c:	da09      	bge.n	b72 <mynumber+0x9e>
            sign = '-';
     b5e:	232d      	movs	r3, #45	; 0x2d
     b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
     b64:	68bb      	ldr	r3, [r7, #8]
     b66:	425b      	negs	r3, r3
     b68:	60bb      	str	r3, [r7, #8]
            size--;
     b6a:	683b      	ldr	r3, [r7, #0]
     b6c:	3b01      	subs	r3, #1
     b6e:	603b      	str	r3, [r7, #0]
     b70:	e016      	b.n	ba0 <mynumber+0xcc>
        } else if ((type & PLUS) != 0) {
     b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b74:	f003 0304 	and.w	r3, r3, #4
     b78:	2b00      	cmp	r3, #0
     b7a:	d006      	beq.n	b8a <mynumber+0xb6>
            sign = '+';
     b7c:	232b      	movs	r3, #43	; 0x2b
     b7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     b82:	683b      	ldr	r3, [r7, #0]
     b84:	3b01      	subs	r3, #1
     b86:	603b      	str	r3, [r7, #0]
     b88:	e00a      	b.n	ba0 <mynumber+0xcc>
        } else if ((type & SPACE) != 0) {
     b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     b8c:	f003 0308 	and.w	r3, r3, #8
     b90:	2b00      	cmp	r3, #0
     b92:	d005      	beq.n	ba0 <mynumber+0xcc>
            sign = ' ';
     b94:	2320      	movs	r3, #32
     b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	3b01      	subs	r3, #1
     b9e:	603b      	str	r3, [r7, #0]
        }
    }
    if ((type & SPECIAL) != 0) {
     ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     ba2:	f003 0320 	and.w	r3, r3, #32
     ba6:	2b00      	cmp	r3, #0
     ba8:	d00c      	beq.n	bc4 <mynumber+0xf0>
        if (16 == base) {
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	2b10      	cmp	r3, #16
     bae:	d103      	bne.n	bb8 <mynumber+0xe4>
            size -= 2;
     bb0:	683b      	ldr	r3, [r7, #0]
     bb2:	3b02      	subs	r3, #2
     bb4:	603b      	str	r3, [r7, #0]
     bb6:	e005      	b.n	bc4 <mynumber+0xf0>
        } else if (8 == base) {
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2b08      	cmp	r3, #8
     bbc:	d102      	bne.n	bc4 <mynumber+0xf0>
            size--;
     bbe:	683b      	ldr	r3, [r7, #0]
     bc0:	3b01      	subs	r3, #1
     bc2:	603b      	str	r3, [r7, #0]
        }
    }
    i = 0;
     bc4:	2300      	movs	r3, #0
     bc6:	663b      	str	r3, [r7, #96]	; 0x60
    if (0 == num) {
     bc8:	68bb      	ldr	r3, [r7, #8]
     bca:	2b00      	cmp	r3, #0
     bcc:	d123      	bne.n	c16 <mynumber+0x142>
        tmp[i++] = '0';
     bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     bd0:	1c5a      	adds	r2, r3, #1
     bd2:	663a      	str	r2, [r7, #96]	; 0x60
     bd4:	f107 0268 	add.w	r2, r7, #104	; 0x68
     bd8:	4413      	add	r3, r2
     bda:	2230      	movs	r2, #48	; 0x30
     bdc:	f803 2c58 	strb.w	r2, [r3, #-88]
     be0:	e01c      	b.n	c1c <mynumber+0x148>
    } else {
        while (num != 0) {
            tmp[i++] = digits[mydo_div(num,base)];
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	687a      	ldr	r2, [r7, #4]
     be6:	fbb3 f1f2 	udiv	r1, r3, r2
     bea:	fb02 f201 	mul.w	r2, r2, r1
     bee:	1a9b      	subs	r3, r3, r2
     bf0:	657b      	str	r3, [r7, #84]	; 0x54
     bf2:	68ba      	ldr	r2, [r7, #8]
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	fbb2 f3f3 	udiv	r3, r2, r3
     bfa:	60bb      	str	r3, [r7, #8]
     bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     bfe:	461a      	mov	r2, r3
     c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     c02:	441a      	add	r2, r3
     c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     c06:	1c59      	adds	r1, r3, #1
     c08:	6639      	str	r1, [r7, #96]	; 0x60
     c0a:	7812      	ldrb	r2, [r2, #0]
     c0c:	f107 0168 	add.w	r1, r7, #104	; 0x68
     c10:	440b      	add	r3, r1
     c12:	f803 2c58 	strb.w	r2, [r3, #-88]
        while (num != 0) {
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	2b00      	cmp	r3, #0
     c1a:	d1e2      	bne.n	be2 <mynumber+0x10e>
        }
    }
    if (i > precision) {
     c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     c20:	429a      	cmp	r2, r3
     c22:	dd01      	ble.n	c28 <mynumber+0x154>
        precision = i;
     c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     c26:	673b      	str	r3, [r7, #112]	; 0x70
    }
    size -= precision;
     c28:	683a      	ldr	r2, [r7, #0]
     c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     c2c:	1ad3      	subs	r3, r2, r3
     c2e:	603b      	str	r3, [r7, #0]
    if (0 == (type & (ZEROPAD + LEFT))) {
     c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     c32:	f003 0311 	and.w	r3, r3, #17
     c36:	2b00      	cmp	r3, #0
     c38:	d10a      	bne.n	c50 <mynumber+0x17c>
        while (size-- > 0) {
     c3a:	e004      	b.n	c46 <mynumber+0x172>
            *str++ = ' ';
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	1c5a      	adds	r2, r3, #1
     c40:	60fa      	str	r2, [r7, #12]
     c42:	2220      	movs	r2, #32
     c44:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	1e5a      	subs	r2, r3, #1
     c4a:	603a      	str	r2, [r7, #0]
     c4c:	2b00      	cmp	r3, #0
     c4e:	dcf5      	bgt.n	c3c <mynumber+0x168>
        }
    }
    if (sign != 0) {
     c50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
     c54:	2b00      	cmp	r3, #0
     c56:	d005      	beq.n	c64 <mynumber+0x190>
        *str++ = sign;
     c58:	68fb      	ldr	r3, [r7, #12]
     c5a:	1c5a      	adds	r2, r3, #1
     c5c:	60fa      	str	r2, [r7, #12]
     c5e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
     c62:	701a      	strb	r2, [r3, #0]
    }
    if ((type & SPECIAL) != 0) {
     c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     c66:	f003 0320 	and.w	r3, r3, #32
     c6a:	2b00      	cmp	r3, #0
     c6c:	d017      	beq.n	c9e <mynumber+0x1ca>
        if (8 == base) {
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	2b08      	cmp	r3, #8
     c72:	d105      	bne.n	c80 <mynumber+0x1ac>
            *str++ = '0';
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	1c5a      	adds	r2, r3, #1
     c78:	60fa      	str	r2, [r7, #12]
     c7a:	2230      	movs	r2, #48	; 0x30
     c7c:	701a      	strb	r2, [r3, #0]
     c7e:	e00e      	b.n	c9e <mynumber+0x1ca>
        } else if (16 == base) {
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	2b10      	cmp	r3, #16
     c84:	d10b      	bne.n	c9e <mynumber+0x1ca>
            *str++ = '0';
     c86:	68fb      	ldr	r3, [r7, #12]
     c88:	1c5a      	adds	r2, r3, #1
     c8a:	60fa      	str	r2, [r7, #12]
     c8c:	2230      	movs	r2, #48	; 0x30
     c8e:	701a      	strb	r2, [r3, #0]
            *str++ = digits[33];
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	1c5a      	adds	r2, r3, #1
     c94:	60fa      	str	r2, [r7, #12]
     c96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     c98:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
     c9c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (0 == (type & LEFT)) {
     c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     ca0:	f003 0310 	and.w	r3, r3, #16
     ca4:	2b00      	cmp	r3, #0
     ca6:	d111      	bne.n	ccc <mynumber+0x1f8>
        while (size-- > 0) {
     ca8:	e005      	b.n	cb6 <mynumber+0x1e2>
            *str++ = c;
     caa:	68fb      	ldr	r3, [r7, #12]
     cac:	1c5a      	adds	r2, r3, #1
     cae:	60fa      	str	r2, [r7, #12]
     cb0:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
     cb4:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
     cb6:	683b      	ldr	r3, [r7, #0]
     cb8:	1e5a      	subs	r2, r3, #1
     cba:	603a      	str	r2, [r7, #0]
     cbc:	2b00      	cmp	r3, #0
     cbe:	dcf4      	bgt.n	caa <mynumber+0x1d6>
        }
    }
    while (i < precision--) {
     cc0:	e004      	b.n	ccc <mynumber+0x1f8>
        *str++ = '0';
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	1c5a      	adds	r2, r3, #1
     cc6:	60fa      	str	r2, [r7, #12]
     cc8:	2230      	movs	r2, #48	; 0x30
     cca:	701a      	strb	r2, [r3, #0]
    while (i < precision--) {
     ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     cce:	1e5a      	subs	r2, r3, #1
     cd0:	673a      	str	r2, [r7, #112]	; 0x70
     cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     cd4:	429a      	cmp	r2, r3
     cd6:	dbf4      	blt.n	cc2 <mynumber+0x1ee>
    }
    while (i-- > 0) {
     cd8:	e008      	b.n	cec <mynumber+0x218>
        *str++ = tmp[i];
     cda:	68fb      	ldr	r3, [r7, #12]
     cdc:	1c5a      	adds	r2, r3, #1
     cde:	60fa      	str	r2, [r7, #12]
     ce0:	f107 0110 	add.w	r1, r7, #16
     ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     ce6:	440a      	add	r2, r1
     ce8:	7812      	ldrb	r2, [r2, #0]
     cea:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
     cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     cee:	1e5a      	subs	r2, r3, #1
     cf0:	663a      	str	r2, [r7, #96]	; 0x60
     cf2:	2b00      	cmp	r3, #0
     cf4:	dcf1      	bgt.n	cda <mynumber+0x206>
    }
    while (size-- > 0) {
     cf6:	e004      	b.n	d02 <mynumber+0x22e>
        *str++ = ' ';
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	1c5a      	adds	r2, r3, #1
     cfc:	60fa      	str	r2, [r7, #12]
     cfe:	2220      	movs	r2, #32
     d00:	701a      	strb	r2, [r3, #0]
    while (size-- > 0) {
     d02:	683b      	ldr	r3, [r7, #0]
     d04:	1e5a      	subs	r2, r3, #1
     d06:	603a      	str	r2, [r7, #0]
     d08:	2b00      	cmp	r3, #0
     d0a:	dcf5      	bgt.n	cf8 <mynumber+0x224>
    }

    return str;
     d0c:	68fb      	ldr	r3, [r7, #12]
}
     d0e:	4618      	mov	r0, r3
     d10:	3768      	adds	r7, #104	; 0x68
     d12:	46bd      	mov	sp, r7
     d14:	bd80      	pop	{r7, pc}
     d16:	bf00      	nop
     d18:	00005d08 	.word	0x00005d08
     d1c:	00005d30 	.word	0x00005d30

00000d20 <myvsprintf>:
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */

int myvsprintf (char *buf, const char *fmt, va_list args)
{
     d20:	b580      	push	{r7, lr}
     d22:	b092      	sub	sp, #72	; 0x48
     d24:	af02      	add	r7, sp, #8
     d26:	60f8      	str	r0, [r7, #12]
     d28:	60b9      	str	r1, [r7, #8]
     d2a:	607a      	str	r2, [r7, #4]
    int qualifier;		//'h', 'l', or 'q' for integer fields
    char * str;
    const char *s;
    unsigned long num;

    for (str = buf; *fmt; ++fmt) {
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	627b      	str	r3, [r7, #36]	; 0x24
     d30:	e264      	b.n	11fc <myvsprintf+0x4dc>
        if (*fmt != '%') {
     d32:	68bb      	ldr	r3, [r7, #8]
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	2b25      	cmp	r3, #37	; 0x25
     d38:	d006      	beq.n	d48 <myvsprintf+0x28>
            *str++ = *fmt;
     d3a:	68ba      	ldr	r2, [r7, #8]
     d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d3e:	1c59      	adds	r1, r3, #1
     d40:	6279      	str	r1, [r7, #36]	; 0x24
     d42:	7812      	ldrb	r2, [r2, #0]
     d44:	701a      	strb	r2, [r3, #0]
            continue;
     d46:	e256      	b.n	11f6 <myvsprintf+0x4d6>
        }

        flags = 0;     //process flags
     d48:	2300      	movs	r3, #0
     d4a:	63bb      	str	r3, [r7, #56]	; 0x38

repeat:
        ++fmt;		   //this also skips first '%'
     d4c:	68bb      	ldr	r3, [r7, #8]
     d4e:	3301      	adds	r3, #1
     d50:	60bb      	str	r3, [r7, #8]
        switch (*fmt) {
     d52:	68bb      	ldr	r3, [r7, #8]
     d54:	781b      	ldrb	r3, [r3, #0]
     d56:	3b20      	subs	r3, #32
     d58:	2b10      	cmp	r3, #16
     d5a:	d83e      	bhi.n	dda <myvsprintf+0xba>
     d5c:	a201      	add	r2, pc, #4	; (adr r2, d64 <myvsprintf+0x44>)
     d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d62:	bf00      	nop
     d64:	00000dbd 	.word	0x00000dbd
     d68:	00000ddb 	.word	0x00000ddb
     d6c:	00000ddb 	.word	0x00000ddb
     d70:	00000dc7 	.word	0x00000dc7
     d74:	00000ddb 	.word	0x00000ddb
     d78:	00000ddb 	.word	0x00000ddb
     d7c:	00000ddb 	.word	0x00000ddb
     d80:	00000ddb 	.word	0x00000ddb
     d84:	00000ddb 	.word	0x00000ddb
     d88:	00000ddb 	.word	0x00000ddb
     d8c:	00000ddb 	.word	0x00000ddb
     d90:	00000db3 	.word	0x00000db3
     d94:	00000ddb 	.word	0x00000ddb
     d98:	00000da9 	.word	0x00000da9
     d9c:	00000ddb 	.word	0x00000ddb
     da0:	00000ddb 	.word	0x00000ddb
     da4:	00000dd1 	.word	0x00000dd1
        case '-':
            flags |= LEFT;
     da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     daa:	f043 0310 	orr.w	r3, r3, #16
     dae:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     db0:	e7cc      	b.n	d4c <myvsprintf+0x2c>
        case '+':
            flags |= PLUS;
     db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     db4:	f043 0304 	orr.w	r3, r3, #4
     db8:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     dba:	e7c7      	b.n	d4c <myvsprintf+0x2c>
        case ' ':
            flags |= SPACE;
     dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dbe:	f043 0308 	orr.w	r3, r3, #8
     dc2:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     dc4:	e7c2      	b.n	d4c <myvsprintf+0x2c>
        case '#':
            flags |= SPECIAL;
     dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dc8:	f043 0320 	orr.w	r3, r3, #32
     dcc:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     dce:	e7bd      	b.n	d4c <myvsprintf+0x2c>
        case '0':
            flags |= ZEROPAD;
     dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dd2:	f043 0301 	orr.w	r3, r3, #1
     dd6:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
     dd8:	e7b8      	b.n	d4c <myvsprintf+0x2c>
        }

        field_width = -1;  //get field width
     dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     dde:	633b      	str	r3, [r7, #48]	; 0x30
        if (isdigit(*fmt) != 0) {
     de0:	68bb      	ldr	r3, [r7, #8]
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	3b30      	subs	r3, #48	; 0x30
     de6:	2b09      	cmp	r3, #9
     de8:	d806      	bhi.n	df8 <myvsprintf+0xd8>

            field_width = myskip_atoi(&fmt);
     dea:	f107 0308 	add.w	r3, r7, #8
     dee:	4618      	mov	r0, r3
     df0:	f7ff fe4e 	bl	a90 <myskip_atoi>
     df4:	6338      	str	r0, [r7, #48]	; 0x30
     df6:	e015      	b.n	e24 <myvsprintf+0x104>
        } else if ('*' == *fmt) {
     df8:	68bb      	ldr	r3, [r7, #8]
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	2b2a      	cmp	r3, #42	; 0x2a
     dfe:	d111      	bne.n	e24 <myvsprintf+0x104>
            ++fmt;
     e00:	68bb      	ldr	r3, [r7, #8]
     e02:	3301      	adds	r3, #1
     e04:	60bb      	str	r3, [r7, #8]
            field_width = va_arg(args, int); //it's the next argument
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	1d1a      	adds	r2, r3, #4
     e0a:	607a      	str	r2, [r7, #4]
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	633b      	str	r3, [r7, #48]	; 0x30
            if (field_width < 0) {
     e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e12:	2b00      	cmp	r3, #0
     e14:	da06      	bge.n	e24 <myvsprintf+0x104>
                field_width = -field_width;
     e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e18:	425b      	negs	r3, r3
     e1a:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= LEFT;
     e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e1e:	f043 0310 	orr.w	r3, r3, #16
     e22:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        precision = -1;      //get the precision
     e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ('.' == *fmt) {
     e2a:	68bb      	ldr	r3, [r7, #8]
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	2b2e      	cmp	r3, #46	; 0x2e
     e30:	d11f      	bne.n	e72 <myvsprintf+0x152>
            ++fmt;
     e32:	68bb      	ldr	r3, [r7, #8]
     e34:	3301      	adds	r3, #1
     e36:	60bb      	str	r3, [r7, #8]
            if (isdigit(*fmt)) {
     e38:	68bb      	ldr	r3, [r7, #8]
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	3b30      	subs	r3, #48	; 0x30
     e3e:	2b09      	cmp	r3, #9
     e40:	d806      	bhi.n	e50 <myvsprintf+0x130>
                precision = myskip_atoi(&fmt);
     e42:	f107 0308 	add.w	r3, r7, #8
     e46:	4618      	mov	r0, r3
     e48:	f7ff fe22 	bl	a90 <myskip_atoi>
     e4c:	62f8      	str	r0, [r7, #44]	; 0x2c
     e4e:	e00b      	b.n	e68 <myvsprintf+0x148>
            } else if ('*' == *fmt) {
     e50:	68bb      	ldr	r3, [r7, #8]
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	2b2a      	cmp	r3, #42	; 0x2a
     e56:	d107      	bne.n	e68 <myvsprintf+0x148>
                ++fmt;
     e58:	68bb      	ldr	r3, [r7, #8]
     e5a:	3301      	adds	r3, #1
     e5c:	60bb      	str	r3, [r7, #8]
                precision = va_arg(args, int); //it's the next argument
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	1d1a      	adds	r2, r3, #4
     e62:	607a      	str	r2, [r7, #4]
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (precision < 0) {
     e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e6a:	2b00      	cmp	r3, #0
     e6c:	da01      	bge.n	e72 <myvsprintf+0x152>
                precision = 0;
     e6e:	2300      	movs	r3, #0
     e70:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        qualifier = -1;         //get the conversion qualifier
     e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e76:	62bb      	str	r3, [r7, #40]	; 0x28
        if (('h' == *fmt) || ('l' == *fmt) || ('q' == *fmt)) {
     e78:	68bb      	ldr	r3, [r7, #8]
     e7a:	781b      	ldrb	r3, [r3, #0]
     e7c:	2b68      	cmp	r3, #104	; 0x68
     e7e:	d007      	beq.n	e90 <myvsprintf+0x170>
     e80:	68bb      	ldr	r3, [r7, #8]
     e82:	781b      	ldrb	r3, [r3, #0]
     e84:	2b6c      	cmp	r3, #108	; 0x6c
     e86:	d003      	beq.n	e90 <myvsprintf+0x170>
     e88:	68bb      	ldr	r3, [r7, #8]
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	2b71      	cmp	r3, #113	; 0x71
     e8e:	d105      	bne.n	e9c <myvsprintf+0x17c>
            qualifier = *fmt;
     e90:	68bb      	ldr	r3, [r7, #8]
     e92:	781b      	ldrb	r3, [r3, #0]
     e94:	62bb      	str	r3, [r7, #40]	; 0x28
            ++fmt;
     e96:	68bb      	ldr	r3, [r7, #8]
     e98:	3301      	adds	r3, #1
     e9a:	60bb      	str	r3, [r7, #8]
        }

        base = 10;          //default base
     e9c:	230a      	movs	r3, #10
     e9e:	637b      	str	r3, [r7, #52]	; 0x34
        switch (*fmt) {
     ea0:	68bb      	ldr	r3, [r7, #8]
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	3b25      	subs	r3, #37	; 0x25
     ea6:	2b53      	cmp	r3, #83	; 0x53
     ea8:	f200 815a 	bhi.w	1160 <myvsprintf+0x440>
     eac:	a201      	add	r2, pc, #4	; (adr r2, eb4 <myvsprintf+0x194>)
     eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     eb2:	bf00      	nop
     eb4:	00001137 	.word	0x00001137
     eb8:	00001161 	.word	0x00001161
     ebc:	00001161 	.word	0x00001161
     ec0:	00001161 	.word	0x00001161
     ec4:	00001161 	.word	0x00001161
     ec8:	00001161 	.word	0x00001161
     ecc:	00001161 	.word	0x00001161
     ed0:	00001161 	.word	0x00001161
     ed4:	00001161 	.word	0x00001161
     ed8:	00001161 	.word	0x00001161
     edc:	00001161 	.word	0x00001161
     ee0:	00001161 	.word	0x00001161
     ee4:	00001161 	.word	0x00001161
     ee8:	00001161 	.word	0x00001161
     eec:	00001161 	.word	0x00001161
     ef0:	00001161 	.word	0x00001161
     ef4:	00001161 	.word	0x00001161
     ef8:	00001161 	.word	0x00001161
     efc:	00001161 	.word	0x00001161
     f00:	00001161 	.word	0x00001161
     f04:	00001161 	.word	0x00001161
     f08:	00001161 	.word	0x00001161
     f0c:	00001161 	.word	0x00001161
     f10:	00001161 	.word	0x00001161
     f14:	00001161 	.word	0x00001161
     f18:	00001161 	.word	0x00001161
     f1c:	00001161 	.word	0x00001161
     f20:	00001161 	.word	0x00001161
     f24:	00001161 	.word	0x00001161
     f28:	00001161 	.word	0x00001161
     f2c:	00001161 	.word	0x00001161
     f30:	00001161 	.word	0x00001161
     f34:	00001161 	.word	0x00001161
     f38:	00001161 	.word	0x00001161
     f3c:	00001161 	.word	0x00001161
     f40:	00001161 	.word	0x00001161
     f44:	00001161 	.word	0x00001161
     f48:	00001161 	.word	0x00001161
     f4c:	00001161 	.word	0x00001161
     f50:	00001161 	.word	0x00001161
     f54:	00001161 	.word	0x00001161
     f58:	00001161 	.word	0x00001161
     f5c:	00001161 	.word	0x00001161
     f60:	00001161 	.word	0x00001161
     f64:	00001161 	.word	0x00001161
     f68:	00001161 	.word	0x00001161
     f6c:	00001161 	.word	0x00001161
     f70:	00001161 	.word	0x00001161
     f74:	00001161 	.word	0x00001161
     f78:	00001161 	.word	0x00001161
     f7c:	00001161 	.word	0x00001161
     f80:	00001149 	.word	0x00001149
     f84:	00001161 	.word	0x00001161
     f88:	00001161 	.word	0x00001161
     f8c:	00001161 	.word	0x00001161
     f90:	00001161 	.word	0x00001161
     f94:	00001161 	.word	0x00001161
     f98:	00001161 	.word	0x00001161
     f9c:	00001161 	.word	0x00001161
     fa0:	00001161 	.word	0x00001161
     fa4:	00001161 	.word	0x00001161
     fa8:	00001161 	.word	0x00001161
     fac:	00001005 	.word	0x00001005
     fb0:	00001157 	.word	0x00001157
     fb4:	00001161 	.word	0x00001161
     fb8:	00001161 	.word	0x00001161
     fbc:	00001161 	.word	0x00001161
     fc0:	00001161 	.word	0x00001161
     fc4:	00001157 	.word	0x00001157
     fc8:	00001161 	.word	0x00001161
     fcc:	00001161 	.word	0x00001161
     fd0:	00001161 	.word	0x00001161
     fd4:	00001161 	.word	0x00001161
     fd8:	00001105 	.word	0x00001105
     fdc:	00001143 	.word	0x00001143
     fe0:	000010d1 	.word	0x000010d1
     fe4:	00001161 	.word	0x00001161
     fe8:	00001161 	.word	0x00001161
     fec:	00001053 	.word	0x00001053
     ff0:	00001161 	.word	0x00001161
     ff4:	00001189 	.word	0x00001189
     ff8:	00001161 	.word	0x00001161
     ffc:	00001161 	.word	0x00001161
    1000:	00001151 	.word	0x00001151
        case 'c': {
            if (0 == (flags & LEFT)) {
    1004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1006:	f003 0310 	and.w	r3, r3, #16
    100a:	2b00      	cmp	r3, #0
    100c:	d10b      	bne.n	1026 <myvsprintf+0x306>
                while (--field_width > 0) {
    100e:	e004      	b.n	101a <myvsprintf+0x2fa>
                    *str++ = ' ';
    1010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1012:	1c5a      	adds	r2, r3, #1
    1014:	627a      	str	r2, [r7, #36]	; 0x24
    1016:	2220      	movs	r2, #32
    1018:	701a      	strb	r2, [r3, #0]
                while (--field_width > 0) {
    101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    101c:	3b01      	subs	r3, #1
    101e:	633b      	str	r3, [r7, #48]	; 0x30
    1020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1022:	2b00      	cmp	r3, #0
    1024:	dcf4      	bgt.n	1010 <myvsprintf+0x2f0>
                }
            }
            *str++ = (unsigned char) va_arg(args, int);
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	1d1a      	adds	r2, r3, #4
    102a:	607a      	str	r2, [r7, #4]
    102c:	6819      	ldr	r1, [r3, #0]
    102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1030:	1c5a      	adds	r2, r3, #1
    1032:	627a      	str	r2, [r7, #36]	; 0x24
    1034:	b2ca      	uxtb	r2, r1
    1036:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    1038:	e004      	b.n	1044 <myvsprintf+0x324>
                *str++ = ' ';
    103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    103c:	1c5a      	adds	r2, r3, #1
    103e:	627a      	str	r2, [r7, #36]	; 0x24
    1040:	2220      	movs	r2, #32
    1042:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    1044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1046:	3b01      	subs	r3, #1
    1048:	633b      	str	r3, [r7, #48]	; 0x30
    104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    104c:	2b00      	cmp	r3, #0
    104e:	dcf4      	bgt.n	103a <myvsprintf+0x31a>
            }
            continue;
    1050:	e0d1      	b.n	11f6 <myvsprintf+0x4d6>
        }
        case 's': {
            s = va_arg(args, char *);
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	1d1a      	adds	r2, r3, #4
    1056:	607a      	str	r2, [r7, #4]
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	623b      	str	r3, [r7, #32]
            if (!s) {
    105c:	6a3b      	ldr	r3, [r7, #32]
    105e:	2b00      	cmp	r3, #0
    1060:	d101      	bne.n	1066 <myvsprintf+0x346>
                s = "<NULL>";
    1062:	4b6e      	ldr	r3, [pc, #440]	; (121c <myvsprintf+0x4fc>)
    1064:	623b      	str	r3, [r7, #32]
            }
            len = mystrnlen(s, precision);
    1066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1068:	6a38      	ldr	r0, [r7, #32]
    106a:	f7ff fcf5 	bl	a58 <mystrnlen>
    106e:	61b8      	str	r0, [r7, #24]
            if (0 == (flags & LEFT)) {
    1070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1072:	f003 0310 	and.w	r3, r3, #16
    1076:	2b00      	cmp	r3, #0
    1078:	d10b      	bne.n	1092 <myvsprintf+0x372>
                while (len < field_width--) {
    107a:	e004      	b.n	1086 <myvsprintf+0x366>
                    *str++ = ' ';
    107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    107e:	1c5a      	adds	r2, r3, #1
    1080:	627a      	str	r2, [r7, #36]	; 0x24
    1082:	2220      	movs	r2, #32
    1084:	701a      	strb	r2, [r3, #0]
                while (len < field_width--) {
    1086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1088:	1e5a      	subs	r2, r3, #1
    108a:	633a      	str	r2, [r7, #48]	; 0x30
    108c:	69ba      	ldr	r2, [r7, #24]
    108e:	429a      	cmp	r2, r3
    1090:	dbf4      	blt.n	107c <myvsprintf+0x35c>
                }
            }
            for (i = 0; i < len; ++i) {
    1092:	2300      	movs	r3, #0
    1094:	63fb      	str	r3, [r7, #60]	; 0x3c
    1096:	e00a      	b.n	10ae <myvsprintf+0x38e>
                *str++ = *s++;
    1098:	6a3a      	ldr	r2, [r7, #32]
    109a:	1c53      	adds	r3, r2, #1
    109c:	623b      	str	r3, [r7, #32]
    109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10a0:	1c59      	adds	r1, r3, #1
    10a2:	6279      	str	r1, [r7, #36]	; 0x24
    10a4:	7812      	ldrb	r2, [r2, #0]
    10a6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < len; ++i) {
    10a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10aa:	3301      	adds	r3, #1
    10ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    10ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    10b0:	69bb      	ldr	r3, [r7, #24]
    10b2:	429a      	cmp	r2, r3
    10b4:	dbf0      	blt.n	1098 <myvsprintf+0x378>
            }
            while (len < field_width--) {
    10b6:	e004      	b.n	10c2 <myvsprintf+0x3a2>
                *str++ = ' ';
    10b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ba:	1c5a      	adds	r2, r3, #1
    10bc:	627a      	str	r2, [r7, #36]	; 0x24
    10be:	2220      	movs	r2, #32
    10c0:	701a      	strb	r2, [r3, #0]
            while (len < field_width--) {
    10c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10c4:	1e5a      	subs	r2, r3, #1
    10c6:	633a      	str	r2, [r7, #48]	; 0x30
    10c8:	69ba      	ldr	r2, [r7, #24]
    10ca:	429a      	cmp	r2, r3
    10cc:	dbf4      	blt.n	10b8 <myvsprintf+0x398>
            }
            continue;
    10ce:	e092      	b.n	11f6 <myvsprintf+0x4d6>
        }
        case 'p': {
            if (-1 == field_width) {
    10d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    10d6:	d105      	bne.n	10e4 <myvsprintf+0x3c4>
                field_width = 2 * sizeof(void *);
    10d8:	2308      	movs	r3, #8
    10da:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= ZEROPAD;
    10dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10de:	f043 0301 	orr.w	r3, r3, #1
    10e2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            str = mynumber(str, (unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	1d1a      	adds	r2, r3, #4
    10e8:	607a      	str	r2, [r7, #4]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	4619      	mov	r1, r3
    10ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10f0:	9301      	str	r3, [sp, #4]
    10f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10f4:	9300      	str	r3, [sp, #0]
    10f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10f8:	2210      	movs	r2, #16
    10fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    10fc:	f7ff fcea 	bl	ad4 <mynumber>
    1100:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
    1102:	e078      	b.n	11f6 <myvsprintf+0x4d6>
        }
        case 'n': {
            if ('l' == qualifier) {
    1104:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1106:	2b6c      	cmp	r3, #108	; 0x6c
    1108:	d10a      	bne.n	1120 <myvsprintf+0x400>
                long * ip = va_arg(args, long *);
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	1d1a      	adds	r2, r3, #4
    110e:	607a      	str	r2, [r7, #4]
    1110:	681b      	ldr	r3, [r3, #0]
    1112:	613b      	str	r3, [r7, #16]
                *ip = (str - buf);
    1114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1116:	68fb      	ldr	r3, [r7, #12]
    1118:	1ad2      	subs	r2, r2, r3
    111a:	693b      	ldr	r3, [r7, #16]
    111c:	601a      	str	r2, [r3, #0]
            } else {
                int * ip = va_arg(args, int *);
                *ip = (str - buf);
            }
            continue;
    111e:	e06a      	b.n	11f6 <myvsprintf+0x4d6>
                int * ip = va_arg(args, int *);
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	1d1a      	adds	r2, r3, #4
    1124:	607a      	str	r2, [r7, #4]
    1126:	681b      	ldr	r3, [r3, #0]
    1128:	617b      	str	r3, [r7, #20]
                *ip = (str - buf);
    112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    112c:	68fb      	ldr	r3, [r7, #12]
    112e:	1ad2      	subs	r2, r2, r3
    1130:	697b      	ldr	r3, [r7, #20]
    1132:	601a      	str	r2, [r3, #0]
            continue;
    1134:	e05f      	b.n	11f6 <myvsprintf+0x4d6>
        }
        case '%': {
            *str++ = '%';
    1136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1138:	1c5a      	adds	r2, r3, #1
    113a:	627a      	str	r2, [r7, #36]	; 0x24
    113c:	2225      	movs	r2, #37	; 0x25
    113e:	701a      	strb	r2, [r3, #0]
            continue;
    1140:	e059      	b.n	11f6 <myvsprintf+0x4d6>
        }

        case 'o': { //integer number formats - set up the flags and "break"
            base = 8;
    1142:	2308      	movs	r3, #8
    1144:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    1146:	e020      	b.n	118a <myvsprintf+0x46a>
        }

        case 'X': {
            flags |= LARGE;
    1148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    114a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    114e:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'x': {
            base = 16;
    1150:	2310      	movs	r3, #16
    1152:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    1154:	e019      	b.n	118a <myvsprintf+0x46a>
        }
        case 'd':
        case 'i': {
            flags |= SIGN;
    1156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1158:	f043 0302 	orr.w	r3, r3, #2
    115c:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'u': {
            break;
    115e:	e013      	b.n	1188 <myvsprintf+0x468>
        }
        default: {
            *str++ = '%';
    1160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1162:	1c5a      	adds	r2, r3, #1
    1164:	627a      	str	r2, [r7, #36]	; 0x24
    1166:	2225      	movs	r2, #37	; 0x25
    1168:	701a      	strb	r2, [r3, #0]
            if (0 == *fmt) {
    116a:	68bb      	ldr	r3, [r7, #8]
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	d106      	bne.n	1180 <myvsprintf+0x460>
                *str++ = *fmt;
    1172:	68ba      	ldr	r2, [r7, #8]
    1174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1176:	1c59      	adds	r1, r3, #1
    1178:	6279      	str	r1, [r7, #36]	; 0x24
    117a:	7812      	ldrb	r2, [r2, #0]
    117c:	701a      	strb	r2, [r3, #0]
            } else {
                --fmt;
            }
            continue;
    117e:	e03a      	b.n	11f6 <myvsprintf+0x4d6>
                --fmt;
    1180:	68bb      	ldr	r3, [r7, #8]
    1182:	3b01      	subs	r3, #1
    1184:	60bb      	str	r3, [r7, #8]
            continue;
    1186:	e036      	b.n	11f6 <myvsprintf+0x4d6>
            break;
    1188:	bf00      	nop
        }
        }

        if ('l' == qualifier) {
    118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    118c:	2b6c      	cmp	r3, #108	; 0x6c
    118e:	d105      	bne.n	119c <myvsprintf+0x47c>
            num = va_arg(args, unsigned long);
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	1d1a      	adds	r2, r3, #4
    1194:	607a      	str	r2, [r7, #4]
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	61fb      	str	r3, [r7, #28]
    119a:	e021      	b.n	11e0 <myvsprintf+0x4c0>
        } else if ('h' == qualifier) {
    119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    119e:	2b68      	cmp	r3, #104	; 0x68
    11a0:	d10e      	bne.n	11c0 <myvsprintf+0x4a0>
            num = (unsigned short) va_arg(args, int);
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	1d1a      	adds	r2, r3, #4
    11a6:	607a      	str	r2, [r7, #4]
    11a8:	681b      	ldr	r3, [r3, #0]
    11aa:	b29b      	uxth	r3, r3
    11ac:	61fb      	str	r3, [r7, #28]
            if (0 == (flags & SIGN)) {
    11ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11b0:	f003 0302 	and.w	r3, r3, #2
    11b4:	2b00      	cmp	r3, #0
    11b6:	d113      	bne.n	11e0 <myvsprintf+0x4c0>
                num = (short) num;
    11b8:	69fb      	ldr	r3, [r7, #28]
    11ba:	b21b      	sxth	r3, r3
    11bc:	61fb      	str	r3, [r7, #28]
    11be:	e00f      	b.n	11e0 <myvsprintf+0x4c0>
            }
        } else if (0 == (flags & SIGN)) {
    11c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11c2:	f003 0302 	and.w	r3, r3, #2
    11c6:	2b00      	cmp	r3, #0
    11c8:	d105      	bne.n	11d6 <myvsprintf+0x4b6>
            num = va_arg(args, int);
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	1d1a      	adds	r2, r3, #4
    11ce:	607a      	str	r2, [r7, #4]
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	61fb      	str	r3, [r7, #28]
    11d4:	e004      	b.n	11e0 <myvsprintf+0x4c0>
        } else {
            num = va_arg(args, unsigned int);
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	1d1a      	adds	r2, r3, #4
    11da:	607a      	str	r2, [r7, #4]
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	61fb      	str	r3, [r7, #28]
        }

        str = mynumber(str, num, base, field_width, precision, flags);
    11e0:	69f9      	ldr	r1, [r7, #28]
    11e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11e4:	9301      	str	r3, [sp, #4]
    11e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11e8:	9300      	str	r3, [sp, #0]
    11ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    11ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
    11f0:	f7ff fc70 	bl	ad4 <mynumber>
    11f4:	6278      	str	r0, [r7, #36]	; 0x24
    for (str = buf; *fmt; ++fmt) {
    11f6:	68bb      	ldr	r3, [r7, #8]
    11f8:	3301      	adds	r3, #1
    11fa:	60bb      	str	r3, [r7, #8]
    11fc:	68bb      	ldr	r3, [r7, #8]
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	2b00      	cmp	r3, #0
    1202:	f47f ad96 	bne.w	d32 <myvsprintf+0x12>

    }
    *str = '\0';
    1206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1208:	2200      	movs	r2, #0
    120a:	701a      	strb	r2, [r3, #0]

    return str-buf;
    120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    120e:	68fb      	ldr	r3, [r7, #12]
    1210:	1ad3      	subs	r3, r2, r3
}
    1212:	4618      	mov	r0, r3
    1214:	3740      	adds	r7, #64	; 0x40
    1216:	46bd      	mov	sp, r7
    1218:	bd80      	pop	{r7, pc}
    121a:	bf00      	nop
    121c:	00005d58 	.word	0x00005d58

00001220 <myputc>:

void myputc (const char c)
{
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
    1226:	4603      	mov	r3, r0
    1228:	71fb      	strb	r3, [r7, #7]
    if (c == '\n')
    122a:	79fb      	ldrb	r3, [r7, #7]
    122c:	2b0a      	cmp	r3, #10
    122e:	d102      	bne.n	1236 <myputc+0x16>
        usart_send_bytes('\r');
    1230:	200d      	movs	r0, #13
    1232:	f7ff fbf7 	bl	a24 <usart_send_bytes>
    usart_send_bytes(c);
    1236:	79fb      	ldrb	r3, [r7, #7]
    1238:	4618      	mov	r0, r3
    123a:	f7ff fbf3 	bl	a24 <usart_send_bytes>
}
    123e:	bf00      	nop
    1240:	3708      	adds	r7, #8
    1242:	46bd      	mov	sp, r7
    1244:	bd80      	pop	{r7, pc}

00001246 <myputs>:

void myputs (const unsigned char *s)
{
    1246:	b580      	push	{r7, lr}
    1248:	b082      	sub	sp, #8
    124a:	af00      	add	r7, sp, #0
    124c:	6078      	str	r0, [r7, #4]
    while (*s) {
    124e:	e006      	b.n	125e <myputs+0x18>
        myputc (*s++);
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	1c5a      	adds	r2, r3, #1
    1254:	607a      	str	r2, [r7, #4]
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	4618      	mov	r0, r3
    125a:	f7ff ffe1 	bl	1220 <myputc>
    while (*s) {
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	2b00      	cmp	r3, #0
    1264:	d1f4      	bne.n	1250 <myputs+0xa>
    }
}
    1266:	bf00      	nop
    1268:	3708      	adds	r7, #8
    126a:	46bd      	mov	sp, r7
    126c:	bd80      	pop	{r7, pc}

0000126e <myprintf>:

void myprintf (const char *fmt,...)
{
    126e:	b40f      	push	{r0, r1, r2, r3}
    1270:	b580      	push	{r7, lr}
    1272:	b0a2      	sub	sp, #136	; 0x88
    1274:	af00      	add	r7, sp, #0
    va_list args;
    char printbuffer[PBSIZE];

    va_start(args, fmt);
    1276:	f107 0394 	add.w	r3, r7, #148	; 0x94
    127a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    myvsprintf(printbuffer, fmt, args);
    127e:	1d3b      	adds	r3, r7, #4
    1280:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    1284:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1288:	4618      	mov	r0, r3
    128a:	f7ff fd49 	bl	d20 <myvsprintf>
    va_end(args);

    myputs((const unsigned char *)printbuffer);  // Print the string
    128e:	1d3b      	adds	r3, r7, #4
    1290:	4618      	mov	r0, r3
    1292:	f7ff ffd8 	bl	1246 <myputs>
}
    1296:	bf00      	nop
    1298:	3788      	adds	r7, #136	; 0x88
    129a:	46bd      	mov	sp, r7
    129c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12a0:	b004      	add	sp, #16
    12a2:	4770      	bx	lr

000012a4 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    12a4:	b480      	push	{r7}
    12a6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    12a8:	4b13      	ldr	r3, [pc, #76]	; (12f8 <RCC_DeInit+0x54>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	4a12      	ldr	r2, [pc, #72]	; (12f8 <RCC_DeInit+0x54>)
    12ae:	f043 0301 	orr.w	r3, r3, #1
    12b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    12b4:	4b10      	ldr	r3, [pc, #64]	; (12f8 <RCC_DeInit+0x54>)
    12b6:	685a      	ldr	r2, [r3, #4]
    12b8:	490f      	ldr	r1, [pc, #60]	; (12f8 <RCC_DeInit+0x54>)
    12ba:	4b10      	ldr	r3, [pc, #64]	; (12fc <RCC_DeInit+0x58>)
    12bc:	4013      	ands	r3, r2
    12be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    12c0:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <RCC_DeInit+0x54>)
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	4a0c      	ldr	r2, [pc, #48]	; (12f8 <RCC_DeInit+0x54>)
    12c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    12ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    12ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    12d0:	4b09      	ldr	r3, [pc, #36]	; (12f8 <RCC_DeInit+0x54>)
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	4a08      	ldr	r2, [pc, #32]	; (12f8 <RCC_DeInit+0x54>)
    12d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    12da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    12dc:	4b06      	ldr	r3, [pc, #24]	; (12f8 <RCC_DeInit+0x54>)
    12de:	685b      	ldr	r3, [r3, #4]
    12e0:	4a05      	ldr	r2, [pc, #20]	; (12f8 <RCC_DeInit+0x54>)
    12e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    12e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    12e8:	4b03      	ldr	r3, [pc, #12]	; (12f8 <RCC_DeInit+0x54>)
    12ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    12ee:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    12f0:	bf00      	nop
    12f2:	46bd      	mov	sp, r7
    12f4:	bc80      	pop	{r7}
    12f6:	4770      	bx	lr
    12f8:	40021000 	.word	0x40021000
    12fc:	f8ff0000 	.word	0xf8ff0000

00001300 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1300:	b480      	push	{r7}
    1302:	b083      	sub	sp, #12
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1308:	4b13      	ldr	r3, [pc, #76]	; (1358 <RCC_HSEConfig+0x58>)
    130a:	681b      	ldr	r3, [r3, #0]
    130c:	4a12      	ldr	r2, [pc, #72]	; (1358 <RCC_HSEConfig+0x58>)
    130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1312:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1314:	4b10      	ldr	r3, [pc, #64]	; (1358 <RCC_HSEConfig+0x58>)
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	4a0f      	ldr	r2, [pc, #60]	; (1358 <RCC_HSEConfig+0x58>)
    131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    131e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1326:	d003      	beq.n	1330 <RCC_HSEConfig+0x30>
    1328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    132c:	d007      	beq.n	133e <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
    132e:	e00d      	b.n	134c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
    1330:	4b09      	ldr	r3, [pc, #36]	; (1358 <RCC_HSEConfig+0x58>)
    1332:	681b      	ldr	r3, [r3, #0]
    1334:	4a08      	ldr	r2, [pc, #32]	; (1358 <RCC_HSEConfig+0x58>)
    1336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    133a:	6013      	str	r3, [r2, #0]
      break;
    133c:	e006      	b.n	134c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    133e:	4b06      	ldr	r3, [pc, #24]	; (1358 <RCC_HSEConfig+0x58>)
    1340:	681b      	ldr	r3, [r3, #0]
    1342:	4a05      	ldr	r2, [pc, #20]	; (1358 <RCC_HSEConfig+0x58>)
    1344:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1348:	6013      	str	r3, [r2, #0]
      break;
    134a:	bf00      	nop
  }
}
    134c:	bf00      	nop
    134e:	370c      	adds	r7, #12
    1350:	46bd      	mov	sp, r7
    1352:	bc80      	pop	{r7}
    1354:	4770      	bx	lr
    1356:	bf00      	nop
    1358:	40021000 	.word	0x40021000

0000135c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    135c:	b580      	push	{r7, lr}
    135e:	b082      	sub	sp, #8
    1360:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1362:	2300      	movs	r3, #0
    1364:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1366:	2300      	movs	r3, #0
    1368:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    136a:	2300      	movs	r3, #0
    136c:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    136e:	2031      	movs	r0, #49	; 0x31
    1370:	f000 fb0e 	bl	1990 <RCC_GetFlagStatus>
    1374:	4603      	mov	r3, r0
    1376:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	3301      	adds	r3, #1
    137c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    137e:	683b      	ldr	r3, [r7, #0]
    1380:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1384:	d002      	beq.n	138c <RCC_WaitForHSEStartUp+0x30>
    1386:	79bb      	ldrb	r3, [r7, #6]
    1388:	2b00      	cmp	r3, #0
    138a:	d0f0      	beq.n	136e <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    138c:	2031      	movs	r0, #49	; 0x31
    138e:	f000 faff 	bl	1990 <RCC_GetFlagStatus>
    1392:	4603      	mov	r3, r0
    1394:	2b00      	cmp	r3, #0
    1396:	d002      	beq.n	139e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
    1398:	2301      	movs	r3, #1
    139a:	71fb      	strb	r3, [r7, #7]
    139c:	e001      	b.n	13a2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
    139e:	2300      	movs	r3, #0
    13a0:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    13a2:	79fb      	ldrb	r3, [r7, #7]
}
    13a4:	4618      	mov	r0, r3
    13a6:	3708      	adds	r7, #8
    13a8:	46bd      	mov	sp, r7
    13aa:	bd80      	pop	{r7, pc}

000013ac <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    13ac:	b480      	push	{r7}
    13ae:	b085      	sub	sp, #20
    13b0:	af00      	add	r7, sp, #0
    13b2:	4603      	mov	r3, r0
    13b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    13b6:	2300      	movs	r3, #0
    13b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    13ba:	4b0a      	ldr	r3, [pc, #40]	; (13e4 <RCC_AdjustHSICalibrationValue+0x38>)
    13bc:	681b      	ldr	r3, [r3, #0]
    13be:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    13c6:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    13c8:	79fb      	ldrb	r3, [r7, #7]
    13ca:	00db      	lsls	r3, r3, #3
    13cc:	68fa      	ldr	r2, [r7, #12]
    13ce:	4313      	orrs	r3, r2
    13d0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    13d2:	4a04      	ldr	r2, [pc, #16]	; (13e4 <RCC_AdjustHSICalibrationValue+0x38>)
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	6013      	str	r3, [r2, #0]
}
    13d8:	bf00      	nop
    13da:	3714      	adds	r7, #20
    13dc:	46bd      	mov	sp, r7
    13de:	bc80      	pop	{r7}
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	40021000 	.word	0x40021000

000013e8 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    13e8:	b480      	push	{r7}
    13ea:	b083      	sub	sp, #12
    13ec:	af00      	add	r7, sp, #0
    13ee:	4603      	mov	r3, r0
    13f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    13f2:	4a04      	ldr	r2, [pc, #16]	; (1404 <RCC_HSICmd+0x1c>)
    13f4:	79fb      	ldrb	r3, [r7, #7]
    13f6:	6013      	str	r3, [r2, #0]
}
    13f8:	bf00      	nop
    13fa:	370c      	adds	r7, #12
    13fc:	46bd      	mov	sp, r7
    13fe:	bc80      	pop	{r7}
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	42420000 	.word	0x42420000

00001408 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1408:	b480      	push	{r7}
    140a:	b085      	sub	sp, #20
    140c:	af00      	add	r7, sp, #0
    140e:	6078      	str	r0, [r7, #4]
    1410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1412:	2300      	movs	r3, #0
    1414:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <RCC_PLLConfig+0x38>)
    1418:	685b      	ldr	r3, [r3, #4]
    141a:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    141c:	68fb      	ldr	r3, [r7, #12]
    141e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1422:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1424:	687a      	ldr	r2, [r7, #4]
    1426:	683b      	ldr	r3, [r7, #0]
    1428:	4313      	orrs	r3, r2
    142a:	68fa      	ldr	r2, [r7, #12]
    142c:	4313      	orrs	r3, r2
    142e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1430:	4a03      	ldr	r2, [pc, #12]	; (1440 <RCC_PLLConfig+0x38>)
    1432:	68fb      	ldr	r3, [r7, #12]
    1434:	6053      	str	r3, [r2, #4]
}
    1436:	bf00      	nop
    1438:	3714      	adds	r7, #20
    143a:	46bd      	mov	sp, r7
    143c:	bc80      	pop	{r7}
    143e:	4770      	bx	lr
    1440:	40021000 	.word	0x40021000

00001444 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1444:	b480      	push	{r7}
    1446:	b083      	sub	sp, #12
    1448:	af00      	add	r7, sp, #0
    144a:	4603      	mov	r3, r0
    144c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    144e:	4a04      	ldr	r2, [pc, #16]	; (1460 <RCC_PLLCmd+0x1c>)
    1450:	79fb      	ldrb	r3, [r7, #7]
    1452:	6013      	str	r3, [r2, #0]
}
    1454:	bf00      	nop
    1456:	370c      	adds	r7, #12
    1458:	46bd      	mov	sp, r7
    145a:	bc80      	pop	{r7}
    145c:	4770      	bx	lr
    145e:	bf00      	nop
    1460:	42420060 	.word	0x42420060

00001464 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1464:	b480      	push	{r7}
    1466:	b085      	sub	sp, #20
    1468:	af00      	add	r7, sp, #0
    146a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    146c:	2300      	movs	r3, #0
    146e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1470:	4b09      	ldr	r3, [pc, #36]	; (1498 <RCC_SYSCLKConfig+0x34>)
    1472:	685b      	ldr	r3, [r3, #4]
    1474:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	f023 0303 	bic.w	r3, r3, #3
    147c:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    147e:	68fa      	ldr	r2, [r7, #12]
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	4313      	orrs	r3, r2
    1484:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1486:	4a04      	ldr	r2, [pc, #16]	; (1498 <RCC_SYSCLKConfig+0x34>)
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	6053      	str	r3, [r2, #4]
}
    148c:	bf00      	nop
    148e:	3714      	adds	r7, #20
    1490:	46bd      	mov	sp, r7
    1492:	bc80      	pop	{r7}
    1494:	4770      	bx	lr
    1496:	bf00      	nop
    1498:	40021000 	.word	0x40021000

0000149c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    149c:	b480      	push	{r7}
    149e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <RCC_GetSYSCLKSource+0x18>)
    14a2:	685b      	ldr	r3, [r3, #4]
    14a4:	b2db      	uxtb	r3, r3
    14a6:	f003 030c 	and.w	r3, r3, #12
    14aa:	b2db      	uxtb	r3, r3
}
    14ac:	4618      	mov	r0, r3
    14ae:	46bd      	mov	sp, r7
    14b0:	bc80      	pop	{r7}
    14b2:	4770      	bx	lr
    14b4:	40021000 	.word	0x40021000

000014b8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    14b8:	b480      	push	{r7}
    14ba:	b085      	sub	sp, #20
    14bc:	af00      	add	r7, sp, #0
    14be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    14c0:	2300      	movs	r3, #0
    14c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    14c4:	4b09      	ldr	r3, [pc, #36]	; (14ec <RCC_HCLKConfig+0x34>)
    14c6:	685b      	ldr	r3, [r3, #4]
    14c8:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    14d0:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    14d2:	68fa      	ldr	r2, [r7, #12]
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	4313      	orrs	r3, r2
    14d8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    14da:	4a04      	ldr	r2, [pc, #16]	; (14ec <RCC_HCLKConfig+0x34>)
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	6053      	str	r3, [r2, #4]
}
    14e0:	bf00      	nop
    14e2:	3714      	adds	r7, #20
    14e4:	46bd      	mov	sp, r7
    14e6:	bc80      	pop	{r7}
    14e8:	4770      	bx	lr
    14ea:	bf00      	nop
    14ec:	40021000 	.word	0x40021000

000014f0 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    14f0:	b480      	push	{r7}
    14f2:	b085      	sub	sp, #20
    14f4:	af00      	add	r7, sp, #0
    14f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    14fc:	4b09      	ldr	r3, [pc, #36]	; (1524 <RCC_PCLK1Config+0x34>)
    14fe:	685b      	ldr	r3, [r3, #4]
    1500:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1508:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    150a:	68fa      	ldr	r2, [r7, #12]
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	4313      	orrs	r3, r2
    1510:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1512:	4a04      	ldr	r2, [pc, #16]	; (1524 <RCC_PCLK1Config+0x34>)
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	6053      	str	r3, [r2, #4]
}
    1518:	bf00      	nop
    151a:	3714      	adds	r7, #20
    151c:	46bd      	mov	sp, r7
    151e:	bc80      	pop	{r7}
    1520:	4770      	bx	lr
    1522:	bf00      	nop
    1524:	40021000 	.word	0x40021000

00001528 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    1528:	b480      	push	{r7}
    152a:	b085      	sub	sp, #20
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1530:	2300      	movs	r3, #0
    1532:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    1534:	4b09      	ldr	r3, [pc, #36]	; (155c <RCC_PCLK2Config+0x34>)
    1536:	685b      	ldr	r3, [r3, #4]
    1538:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    1540:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	00db      	lsls	r3, r3, #3
    1546:	68fa      	ldr	r2, [r7, #12]
    1548:	4313      	orrs	r3, r2
    154a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    154c:	4a03      	ldr	r2, [pc, #12]	; (155c <RCC_PCLK2Config+0x34>)
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	6053      	str	r3, [r2, #4]
}
    1552:	bf00      	nop
    1554:	3714      	adds	r7, #20
    1556:	46bd      	mov	sp, r7
    1558:	bc80      	pop	{r7}
    155a:	4770      	bx	lr
    155c:	40021000 	.word	0x40021000

00001560 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    1560:	b480      	push	{r7}
    1562:	b083      	sub	sp, #12
    1564:	af00      	add	r7, sp, #0
    1566:	4603      	mov	r3, r0
    1568:	460a      	mov	r2, r1
    156a:	71fb      	strb	r3, [r7, #7]
    156c:	4613      	mov	r3, r2
    156e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1570:	79bb      	ldrb	r3, [r7, #6]
    1572:	2b00      	cmp	r3, #0
    1574:	d008      	beq.n	1588 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    1576:	4b0c      	ldr	r3, [pc, #48]	; (15a8 <RCC_ITConfig+0x48>)
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	b2da      	uxtb	r2, r3
    157c:	490a      	ldr	r1, [pc, #40]	; (15a8 <RCC_ITConfig+0x48>)
    157e:	79fb      	ldrb	r3, [r7, #7]
    1580:	4313      	orrs	r3, r2
    1582:	b2db      	uxtb	r3, r3
    1584:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
    1586:	e009      	b.n	159c <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    1588:	4b07      	ldr	r3, [pc, #28]	; (15a8 <RCC_ITConfig+0x48>)
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	b2da      	uxtb	r2, r3
    158e:	79fb      	ldrb	r3, [r7, #7]
    1590:	43db      	mvns	r3, r3
    1592:	b2db      	uxtb	r3, r3
    1594:	4904      	ldr	r1, [pc, #16]	; (15a8 <RCC_ITConfig+0x48>)
    1596:	4013      	ands	r3, r2
    1598:	b2db      	uxtb	r3, r3
    159a:	700b      	strb	r3, [r1, #0]
}
    159c:	bf00      	nop
    159e:	370c      	adds	r7, #12
    15a0:	46bd      	mov	sp, r7
    15a2:	bc80      	pop	{r7}
    15a4:	4770      	bx	lr
    15a6:	bf00      	nop
    15a8:	40021009 	.word	0x40021009

000015ac <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    15ac:	b480      	push	{r7}
    15ae:	b083      	sub	sp, #12
    15b0:	af00      	add	r7, sp, #0
    15b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    15b4:	4a03      	ldr	r2, [pc, #12]	; (15c4 <RCC_USBCLKConfig+0x18>)
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	6013      	str	r3, [r2, #0]
}
    15ba:	bf00      	nop
    15bc:	370c      	adds	r7, #12
    15be:	46bd      	mov	sp, r7
    15c0:	bc80      	pop	{r7}
    15c2:	4770      	bx	lr
    15c4:	424200d8 	.word	0x424200d8

000015c8 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    15c8:	b480      	push	{r7}
    15ca:	b085      	sub	sp, #20
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    15d0:	2300      	movs	r3, #0
    15d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    15d4:	4b09      	ldr	r3, [pc, #36]	; (15fc <RCC_ADCCLKConfig+0x34>)
    15d6:	685b      	ldr	r3, [r3, #4]
    15d8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    15e0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    15e2:	68fa      	ldr	r2, [r7, #12]
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	4313      	orrs	r3, r2
    15e8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    15ea:	4a04      	ldr	r2, [pc, #16]	; (15fc <RCC_ADCCLKConfig+0x34>)
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	6053      	str	r3, [r2, #4]
}
    15f0:	bf00      	nop
    15f2:	3714      	adds	r7, #20
    15f4:	46bd      	mov	sp, r7
    15f6:	bc80      	pop	{r7}
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	40021000 	.word	0x40021000

00001600 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    1600:	b480      	push	{r7}
    1602:	b083      	sub	sp, #12
    1604:	af00      	add	r7, sp, #0
    1606:	4603      	mov	r3, r0
    1608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    160a:	4b0c      	ldr	r3, [pc, #48]	; (163c <RCC_LSEConfig+0x3c>)
    160c:	2200      	movs	r2, #0
    160e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    1610:	4b0a      	ldr	r3, [pc, #40]	; (163c <RCC_LSEConfig+0x3c>)
    1612:	2200      	movs	r2, #0
    1614:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    1616:	79fb      	ldrb	r3, [r7, #7]
    1618:	2b01      	cmp	r3, #1
    161a:	d002      	beq.n	1622 <RCC_LSEConfig+0x22>
    161c:	2b04      	cmp	r3, #4
    161e:	d004      	beq.n	162a <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
    1620:	e007      	b.n	1632 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    1622:	4b06      	ldr	r3, [pc, #24]	; (163c <RCC_LSEConfig+0x3c>)
    1624:	2201      	movs	r2, #1
    1626:	701a      	strb	r2, [r3, #0]
      break;
    1628:	e003      	b.n	1632 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <RCC_LSEConfig+0x3c>)
    162c:	2205      	movs	r2, #5
    162e:	701a      	strb	r2, [r3, #0]
      break;            
    1630:	bf00      	nop
  }
}
    1632:	bf00      	nop
    1634:	370c      	adds	r7, #12
    1636:	46bd      	mov	sp, r7
    1638:	bc80      	pop	{r7}
    163a:	4770      	bx	lr
    163c:	40021020 	.word	0x40021020

00001640 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    1640:	b480      	push	{r7}
    1642:	b083      	sub	sp, #12
    1644:	af00      	add	r7, sp, #0
    1646:	4603      	mov	r3, r0
    1648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    164a:	4a04      	ldr	r2, [pc, #16]	; (165c <RCC_LSICmd+0x1c>)
    164c:	79fb      	ldrb	r3, [r7, #7]
    164e:	6013      	str	r3, [r2, #0]
}
    1650:	bf00      	nop
    1652:	370c      	adds	r7, #12
    1654:	46bd      	mov	sp, r7
    1656:	bc80      	pop	{r7}
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	42420480 	.word	0x42420480

00001660 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    1660:	b480      	push	{r7}
    1662:	b083      	sub	sp, #12
    1664:	af00      	add	r7, sp, #0
    1666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    1668:	4b05      	ldr	r3, [pc, #20]	; (1680 <RCC_RTCCLKConfig+0x20>)
    166a:	6a1a      	ldr	r2, [r3, #32]
    166c:	4904      	ldr	r1, [pc, #16]	; (1680 <RCC_RTCCLKConfig+0x20>)
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	4313      	orrs	r3, r2
    1672:	620b      	str	r3, [r1, #32]
}
    1674:	bf00      	nop
    1676:	370c      	adds	r7, #12
    1678:	46bd      	mov	sp, r7
    167a:	bc80      	pop	{r7}
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	40021000 	.word	0x40021000

00001684 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    1684:	b480      	push	{r7}
    1686:	b083      	sub	sp, #12
    1688:	af00      	add	r7, sp, #0
    168a:	4603      	mov	r3, r0
    168c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    168e:	4a04      	ldr	r2, [pc, #16]	; (16a0 <RCC_RTCCLKCmd+0x1c>)
    1690:	79fb      	ldrb	r3, [r7, #7]
    1692:	6013      	str	r3, [r2, #0]
}
    1694:	bf00      	nop
    1696:	370c      	adds	r7, #12
    1698:	46bd      	mov	sp, r7
    169a:	bc80      	pop	{r7}
    169c:	4770      	bx	lr
    169e:	bf00      	nop
    16a0:	4242043c 	.word	0x4242043c

000016a4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    16a4:	b480      	push	{r7}
    16a6:	b087      	sub	sp, #28
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    16ac:	2300      	movs	r3, #0
    16ae:	617b      	str	r3, [r7, #20]
    16b0:	2300      	movs	r3, #0
    16b2:	613b      	str	r3, [r7, #16]
    16b4:	2300      	movs	r3, #0
    16b6:	60fb      	str	r3, [r7, #12]
    16b8:	2300      	movs	r3, #0
    16ba:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    16bc:	4b4c      	ldr	r3, [pc, #304]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    16be:	685b      	ldr	r3, [r3, #4]
    16c0:	f003 030c 	and.w	r3, r3, #12
    16c4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    16c6:	697b      	ldr	r3, [r7, #20]
    16c8:	2b04      	cmp	r3, #4
    16ca:	d007      	beq.n	16dc <RCC_GetClocksFreq+0x38>
    16cc:	2b08      	cmp	r3, #8
    16ce:	d009      	beq.n	16e4 <RCC_GetClocksFreq+0x40>
    16d0:	2b00      	cmp	r3, #0
    16d2:	d133      	bne.n	173c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	4a47      	ldr	r2, [pc, #284]	; (17f4 <RCC_GetClocksFreq+0x150>)
    16d8:	601a      	str	r2, [r3, #0]
      break;
    16da:	e033      	b.n	1744 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	4a45      	ldr	r2, [pc, #276]	; (17f4 <RCC_GetClocksFreq+0x150>)
    16e0:	601a      	str	r2, [r3, #0]
      break;
    16e2:	e02f      	b.n	1744 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    16e4:	4b42      	ldr	r3, [pc, #264]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    16e6:	685b      	ldr	r3, [r3, #4]
    16e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    16ec:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    16ee:	4b40      	ldr	r3, [pc, #256]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    16f0:	685b      	ldr	r3, [r3, #4]
    16f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    16f6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    16f8:	693b      	ldr	r3, [r7, #16]
    16fa:	0c9b      	lsrs	r3, r3, #18
    16fc:	3302      	adds	r3, #2
    16fe:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	2b00      	cmp	r3, #0
    1704:	d106      	bne.n	1714 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    1706:	693b      	ldr	r3, [r7, #16]
    1708:	4a3b      	ldr	r2, [pc, #236]	; (17f8 <RCC_GetClocksFreq+0x154>)
    170a:	fb02 f203 	mul.w	r2, r2, r3
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1712:	e017      	b.n	1744 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    1714:	4b36      	ldr	r3, [pc, #216]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    171c:	2b00      	cmp	r3, #0
    171e:	d006      	beq.n	172e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    1720:	693b      	ldr	r3, [r7, #16]
    1722:	4a35      	ldr	r2, [pc, #212]	; (17f8 <RCC_GetClocksFreq+0x154>)
    1724:	fb02 f203 	mul.w	r2, r2, r3
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	601a      	str	r2, [r3, #0]
      break;
    172c:	e00a      	b.n	1744 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    172e:	693b      	ldr	r3, [r7, #16]
    1730:	4a30      	ldr	r2, [pc, #192]	; (17f4 <RCC_GetClocksFreq+0x150>)
    1732:	fb02 f203 	mul.w	r2, r2, r3
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	601a      	str	r2, [r3, #0]
      break;
    173a:	e003      	b.n	1744 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	4a2d      	ldr	r2, [pc, #180]	; (17f4 <RCC_GetClocksFreq+0x150>)
    1740:	601a      	str	r2, [r3, #0]
      break;
    1742:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1744:	4b2a      	ldr	r3, [pc, #168]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    1746:	685b      	ldr	r3, [r3, #4]
    1748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    174c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    174e:	697b      	ldr	r3, [r7, #20]
    1750:	091b      	lsrs	r3, r3, #4
    1752:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1754:	4a29      	ldr	r2, [pc, #164]	; (17fc <RCC_GetClocksFreq+0x158>)
    1756:	697b      	ldr	r3, [r7, #20]
    1758:	4413      	add	r3, r2
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	b2db      	uxtb	r3, r3
    175e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	681a      	ldr	r2, [r3, #0]
    1764:	68bb      	ldr	r3, [r7, #8]
    1766:	40da      	lsrs	r2, r3
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    176c:	4b20      	ldr	r3, [pc, #128]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    176e:	685b      	ldr	r3, [r3, #4]
    1770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1774:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    1776:	697b      	ldr	r3, [r7, #20]
    1778:	0a1b      	lsrs	r3, r3, #8
    177a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    177c:	4a1f      	ldr	r2, [pc, #124]	; (17fc <RCC_GetClocksFreq+0x158>)
    177e:	697b      	ldr	r3, [r7, #20]
    1780:	4413      	add	r3, r2
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	b2db      	uxtb	r3, r3
    1786:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	685a      	ldr	r2, [r3, #4]
    178c:	68bb      	ldr	r3, [r7, #8]
    178e:	40da      	lsrs	r2, r3
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    1794:	4b16      	ldr	r3, [pc, #88]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    1796:	685b      	ldr	r3, [r3, #4]
    1798:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    179c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    179e:	697b      	ldr	r3, [r7, #20]
    17a0:	0adb      	lsrs	r3, r3, #11
    17a2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    17a4:	4a15      	ldr	r2, [pc, #84]	; (17fc <RCC_GetClocksFreq+0x158>)
    17a6:	697b      	ldr	r3, [r7, #20]
    17a8:	4413      	add	r3, r2
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	b2db      	uxtb	r3, r3
    17ae:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	685a      	ldr	r2, [r3, #4]
    17b4:	68bb      	ldr	r3, [r7, #8]
    17b6:	40da      	lsrs	r2, r3
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    17bc:	4b0c      	ldr	r3, [pc, #48]	; (17f0 <RCC_GetClocksFreq+0x14c>)
    17be:	685b      	ldr	r3, [r3, #4]
    17c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    17c4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    17c6:	697b      	ldr	r3, [r7, #20]
    17c8:	0b9b      	lsrs	r3, r3, #14
    17ca:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    17cc:	4a0c      	ldr	r2, [pc, #48]	; (1800 <RCC_GetClocksFreq+0x15c>)
    17ce:	697b      	ldr	r3, [r7, #20]
    17d0:	4413      	add	r3, r2
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	b2db      	uxtb	r3, r3
    17d6:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	68da      	ldr	r2, [r3, #12]
    17dc:	68bb      	ldr	r3, [r7, #8]
    17de:	fbb2 f2f3 	udiv	r2, r2, r3
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	611a      	str	r2, [r3, #16]
}
    17e6:	bf00      	nop
    17e8:	371c      	adds	r7, #28
    17ea:	46bd      	mov	sp, r7
    17ec:	bc80      	pop	{r7}
    17ee:	4770      	bx	lr
    17f0:	40021000 	.word	0x40021000
    17f4:	007a1200 	.word	0x007a1200
    17f8:	003d0900 	.word	0x003d0900
    17fc:	20000014 	.word	0x20000014
    1800:	20000024 	.word	0x20000024

00001804 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    1804:	b480      	push	{r7}
    1806:	b083      	sub	sp, #12
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
    180c:	460b      	mov	r3, r1
    180e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1810:	78fb      	ldrb	r3, [r7, #3]
    1812:	2b00      	cmp	r3, #0
    1814:	d006      	beq.n	1824 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    1816:	4b09      	ldr	r3, [pc, #36]	; (183c <RCC_AHBPeriphClockCmd+0x38>)
    1818:	695a      	ldr	r2, [r3, #20]
    181a:	4908      	ldr	r1, [pc, #32]	; (183c <RCC_AHBPeriphClockCmd+0x38>)
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	4313      	orrs	r3, r2
    1820:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
    1822:	e006      	b.n	1832 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
    1824:	4b05      	ldr	r3, [pc, #20]	; (183c <RCC_AHBPeriphClockCmd+0x38>)
    1826:	695a      	ldr	r2, [r3, #20]
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	43db      	mvns	r3, r3
    182c:	4903      	ldr	r1, [pc, #12]	; (183c <RCC_AHBPeriphClockCmd+0x38>)
    182e:	4013      	ands	r3, r2
    1830:	614b      	str	r3, [r1, #20]
}
    1832:	bf00      	nop
    1834:	370c      	adds	r7, #12
    1836:	46bd      	mov	sp, r7
    1838:	bc80      	pop	{r7}
    183a:	4770      	bx	lr
    183c:	40021000 	.word	0x40021000

00001840 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1840:	b480      	push	{r7}
    1842:	b083      	sub	sp, #12
    1844:	af00      	add	r7, sp, #0
    1846:	6078      	str	r0, [r7, #4]
    1848:	460b      	mov	r3, r1
    184a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    184c:	78fb      	ldrb	r3, [r7, #3]
    184e:	2b00      	cmp	r3, #0
    1850:	d006      	beq.n	1860 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    1852:	4b09      	ldr	r3, [pc, #36]	; (1878 <RCC_APB2PeriphClockCmd+0x38>)
    1854:	699a      	ldr	r2, [r3, #24]
    1856:	4908      	ldr	r1, [pc, #32]	; (1878 <RCC_APB2PeriphClockCmd+0x38>)
    1858:	687b      	ldr	r3, [r7, #4]
    185a:	4313      	orrs	r3, r2
    185c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
    185e:	e006      	b.n	186e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <RCC_APB2PeriphClockCmd+0x38>)
    1862:	699a      	ldr	r2, [r3, #24]
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	43db      	mvns	r3, r3
    1868:	4903      	ldr	r1, [pc, #12]	; (1878 <RCC_APB2PeriphClockCmd+0x38>)
    186a:	4013      	ands	r3, r2
    186c:	618b      	str	r3, [r1, #24]
}
    186e:	bf00      	nop
    1870:	370c      	adds	r7, #12
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr
    1878:	40021000 	.word	0x40021000

0000187c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    187c:	b480      	push	{r7}
    187e:	b083      	sub	sp, #12
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
    1884:	460b      	mov	r3, r1
    1886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1888:	78fb      	ldrb	r3, [r7, #3]
    188a:	2b00      	cmp	r3, #0
    188c:	d006      	beq.n	189c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    188e:	4b09      	ldr	r3, [pc, #36]	; (18b4 <RCC_APB1PeriphClockCmd+0x38>)
    1890:	69da      	ldr	r2, [r3, #28]
    1892:	4908      	ldr	r1, [pc, #32]	; (18b4 <RCC_APB1PeriphClockCmd+0x38>)
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	4313      	orrs	r3, r2
    1898:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
    189a:	e006      	b.n	18aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <RCC_APB1PeriphClockCmd+0x38>)
    189e:	69da      	ldr	r2, [r3, #28]
    18a0:	687b      	ldr	r3, [r7, #4]
    18a2:	43db      	mvns	r3, r3
    18a4:	4903      	ldr	r1, [pc, #12]	; (18b4 <RCC_APB1PeriphClockCmd+0x38>)
    18a6:	4013      	ands	r3, r2
    18a8:	61cb      	str	r3, [r1, #28]
}
    18aa:	bf00      	nop
    18ac:	370c      	adds	r7, #12
    18ae:	46bd      	mov	sp, r7
    18b0:	bc80      	pop	{r7}
    18b2:	4770      	bx	lr
    18b4:	40021000 	.word	0x40021000

000018b8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    18b8:	b480      	push	{r7}
    18ba:	b083      	sub	sp, #12
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	460b      	mov	r3, r1
    18c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    18c4:	78fb      	ldrb	r3, [r7, #3]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d006      	beq.n	18d8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    18ca:	4b09      	ldr	r3, [pc, #36]	; (18f0 <RCC_APB2PeriphResetCmd+0x38>)
    18cc:	68da      	ldr	r2, [r3, #12]
    18ce:	4908      	ldr	r1, [pc, #32]	; (18f0 <RCC_APB2PeriphResetCmd+0x38>)
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	4313      	orrs	r3, r2
    18d4:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
    18d6:	e006      	b.n	18e6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <RCC_APB2PeriphResetCmd+0x38>)
    18da:	68da      	ldr	r2, [r3, #12]
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	43db      	mvns	r3, r3
    18e0:	4903      	ldr	r1, [pc, #12]	; (18f0 <RCC_APB2PeriphResetCmd+0x38>)
    18e2:	4013      	ands	r3, r2
    18e4:	60cb      	str	r3, [r1, #12]
}
    18e6:	bf00      	nop
    18e8:	370c      	adds	r7, #12
    18ea:	46bd      	mov	sp, r7
    18ec:	bc80      	pop	{r7}
    18ee:	4770      	bx	lr
    18f0:	40021000 	.word	0x40021000

000018f4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    18f4:	b480      	push	{r7}
    18f6:	b083      	sub	sp, #12
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	460b      	mov	r3, r1
    18fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1900:	78fb      	ldrb	r3, [r7, #3]
    1902:	2b00      	cmp	r3, #0
    1904:	d006      	beq.n	1914 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    1906:	4b09      	ldr	r3, [pc, #36]	; (192c <RCC_APB1PeriphResetCmd+0x38>)
    1908:	691a      	ldr	r2, [r3, #16]
    190a:	4908      	ldr	r1, [pc, #32]	; (192c <RCC_APB1PeriphResetCmd+0x38>)
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	4313      	orrs	r3, r2
    1910:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
    1912:	e006      	b.n	1922 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    1914:	4b05      	ldr	r3, [pc, #20]	; (192c <RCC_APB1PeriphResetCmd+0x38>)
    1916:	691a      	ldr	r2, [r3, #16]
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	43db      	mvns	r3, r3
    191c:	4903      	ldr	r1, [pc, #12]	; (192c <RCC_APB1PeriphResetCmd+0x38>)
    191e:	4013      	ands	r3, r2
    1920:	610b      	str	r3, [r1, #16]
}
    1922:	bf00      	nop
    1924:	370c      	adds	r7, #12
    1926:	46bd      	mov	sp, r7
    1928:	bc80      	pop	{r7}
    192a:	4770      	bx	lr
    192c:	40021000 	.word	0x40021000

00001930 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    1930:	b480      	push	{r7}
    1932:	b083      	sub	sp, #12
    1934:	af00      	add	r7, sp, #0
    1936:	4603      	mov	r3, r0
    1938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    193a:	4a04      	ldr	r2, [pc, #16]	; (194c <RCC_BackupResetCmd+0x1c>)
    193c:	79fb      	ldrb	r3, [r7, #7]
    193e:	6013      	str	r3, [r2, #0]
}
    1940:	bf00      	nop
    1942:	370c      	adds	r7, #12
    1944:	46bd      	mov	sp, r7
    1946:	bc80      	pop	{r7}
    1948:	4770      	bx	lr
    194a:	bf00      	nop
    194c:	42420440 	.word	0x42420440

00001950 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    1950:	b480      	push	{r7}
    1952:	b083      	sub	sp, #12
    1954:	af00      	add	r7, sp, #0
    1956:	4603      	mov	r3, r0
    1958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    195a:	4a04      	ldr	r2, [pc, #16]	; (196c <RCC_ClockSecuritySystemCmd+0x1c>)
    195c:	79fb      	ldrb	r3, [r7, #7]
    195e:	6013      	str	r3, [r2, #0]
}
    1960:	bf00      	nop
    1962:	370c      	adds	r7, #12
    1964:	46bd      	mov	sp, r7
    1966:	bc80      	pop	{r7}
    1968:	4770      	bx	lr
    196a:	bf00      	nop
    196c:	4242004c 	.word	0x4242004c

00001970 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	4603      	mov	r3, r0
    1978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    197a:	4a04      	ldr	r2, [pc, #16]	; (198c <RCC_MCOConfig+0x1c>)
    197c:	79fb      	ldrb	r3, [r7, #7]
    197e:	7013      	strb	r3, [r2, #0]
}
    1980:	bf00      	nop
    1982:	370c      	adds	r7, #12
    1984:	46bd      	mov	sp, r7
    1986:	bc80      	pop	{r7}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	40021007 	.word	0x40021007

00001990 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1990:	b480      	push	{r7}
    1992:	b087      	sub	sp, #28
    1994:	af00      	add	r7, sp, #0
    1996:	4603      	mov	r3, r0
    1998:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    199a:	2300      	movs	r3, #0
    199c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    199e:	2300      	movs	r3, #0
    19a0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    19a2:	2300      	movs	r3, #0
    19a4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    19a6:	79fb      	ldrb	r3, [r7, #7]
    19a8:	095b      	lsrs	r3, r3, #5
    19aa:	b2db      	uxtb	r3, r3
    19ac:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	2b01      	cmp	r3, #1
    19b2:	d103      	bne.n	19bc <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
    19b4:	4b12      	ldr	r3, [pc, #72]	; (1a00 <RCC_GetFlagStatus+0x70>)
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	617b      	str	r3, [r7, #20]
    19ba:	e009      	b.n	19d0 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	2b02      	cmp	r3, #2
    19c0:	d103      	bne.n	19ca <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
    19c2:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <RCC_GetFlagStatus+0x70>)
    19c4:	6a1b      	ldr	r3, [r3, #32]
    19c6:	617b      	str	r3, [r7, #20]
    19c8:	e002      	b.n	19d0 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    19ca:	4b0d      	ldr	r3, [pc, #52]	; (1a00 <RCC_GetFlagStatus+0x70>)
    19cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19ce:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    19d0:	79fb      	ldrb	r3, [r7, #7]
    19d2:	f003 031f 	and.w	r3, r3, #31
    19d6:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    19d8:	697a      	ldr	r2, [r7, #20]
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	fa22 f303 	lsr.w	r3, r2, r3
    19e0:	f003 0301 	and.w	r3, r3, #1
    19e4:	2b00      	cmp	r3, #0
    19e6:	d002      	beq.n	19ee <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
    19e8:	2301      	movs	r3, #1
    19ea:	74fb      	strb	r3, [r7, #19]
    19ec:	e001      	b.n	19f2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
    19ee:	2300      	movs	r3, #0
    19f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    19f2:	7cfb      	ldrb	r3, [r7, #19]
}
    19f4:	4618      	mov	r0, r3
    19f6:	371c      	adds	r7, #28
    19f8:	46bd      	mov	sp, r7
    19fa:	bc80      	pop	{r7}
    19fc:	4770      	bx	lr
    19fe:	bf00      	nop
    1a00:	40021000 	.word	0x40021000

00001a04 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1a04:	b480      	push	{r7}
    1a06:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <RCC_ClearFlag+0x18>)
    1a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a0c:	4a03      	ldr	r2, [pc, #12]	; (1a1c <RCC_ClearFlag+0x18>)
    1a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1a12:	6253      	str	r3, [r2, #36]	; 0x24
}
    1a14:	bf00      	nop
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr
    1a1c:	40021000 	.word	0x40021000

00001a20 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1a20:	b480      	push	{r7}
    1a22:	b085      	sub	sp, #20
    1a24:	af00      	add	r7, sp, #0
    1a26:	4603      	mov	r3, r0
    1a28:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1a2a:	2300      	movs	r3, #0
    1a2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1a2e:	4b08      	ldr	r3, [pc, #32]	; (1a50 <RCC_GetITStatus+0x30>)
    1a30:	689a      	ldr	r2, [r3, #8]
    1a32:	79fb      	ldrb	r3, [r7, #7]
    1a34:	4013      	ands	r3, r2
    1a36:	2b00      	cmp	r3, #0
    1a38:	d002      	beq.n	1a40 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
    1a3a:	2301      	movs	r3, #1
    1a3c:	73fb      	strb	r3, [r7, #15]
    1a3e:	e001      	b.n	1a44 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
    1a40:	2300      	movs	r3, #0
    1a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1a44:	7bfb      	ldrb	r3, [r7, #15]
}
    1a46:	4618      	mov	r0, r3
    1a48:	3714      	adds	r7, #20
    1a4a:	46bd      	mov	sp, r7
    1a4c:	bc80      	pop	{r7}
    1a4e:	4770      	bx	lr
    1a50:	40021000 	.word	0x40021000

00001a54 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1a54:	b480      	push	{r7}
    1a56:	b083      	sub	sp, #12
    1a58:	af00      	add	r7, sp, #0
    1a5a:	4603      	mov	r3, r0
    1a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1a5e:	4a04      	ldr	r2, [pc, #16]	; (1a70 <RCC_ClearITPendingBit+0x1c>)
    1a60:	79fb      	ldrb	r3, [r7, #7]
    1a62:	7013      	strb	r3, [r2, #0]
}
    1a64:	bf00      	nop
    1a66:	370c      	adds	r7, #12
    1a68:	46bd      	mov	sp, r7
    1a6a:	bc80      	pop	{r7}
    1a6c:	4770      	bx	lr
    1a6e:	bf00      	nop
    1a70:	4002100a 	.word	0x4002100a

00001a74 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	4a2f      	ldr	r2, [pc, #188]	; (1b3c <GPIO_DeInit+0xc8>)
    1a80:	4293      	cmp	r3, r2
    1a82:	d108      	bne.n	1a96 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1a84:	2101      	movs	r1, #1
    1a86:	2004      	movs	r0, #4
    1a88:	f7ff ff16 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1a8c:	2100      	movs	r1, #0
    1a8e:	2004      	movs	r0, #4
    1a90:	f7ff ff12 	bl	18b8 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
    1a94:	e04e      	b.n	1b34 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	4a29      	ldr	r2, [pc, #164]	; (1b40 <GPIO_DeInit+0xcc>)
    1a9a:	4293      	cmp	r3, r2
    1a9c:	d108      	bne.n	1ab0 <GPIO_DeInit+0x3c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1a9e:	2101      	movs	r1, #1
    1aa0:	2008      	movs	r0, #8
    1aa2:	f7ff ff09 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1aa6:	2100      	movs	r1, #0
    1aa8:	2008      	movs	r0, #8
    1aaa:	f7ff ff05 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1aae:	e041      	b.n	1b34 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	4a24      	ldr	r2, [pc, #144]	; (1b44 <GPIO_DeInit+0xd0>)
    1ab4:	4293      	cmp	r3, r2
    1ab6:	d108      	bne.n	1aca <GPIO_DeInit+0x56>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1ab8:	2101      	movs	r1, #1
    1aba:	2010      	movs	r0, #16
    1abc:	f7ff fefc 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    1ac0:	2100      	movs	r1, #0
    1ac2:	2010      	movs	r0, #16
    1ac4:	f7ff fef8 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1ac8:	e034      	b.n	1b34 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	4a1e      	ldr	r2, [pc, #120]	; (1b48 <GPIO_DeInit+0xd4>)
    1ace:	4293      	cmp	r3, r2
    1ad0:	d108      	bne.n	1ae4 <GPIO_DeInit+0x70>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1ad2:	2101      	movs	r1, #1
    1ad4:	2020      	movs	r0, #32
    1ad6:	f7ff feef 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    1ada:	2100      	movs	r1, #0
    1adc:	2020      	movs	r0, #32
    1ade:	f7ff feeb 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1ae2:	e027      	b.n	1b34 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	4a19      	ldr	r2, [pc, #100]	; (1b4c <GPIO_DeInit+0xd8>)
    1ae8:	4293      	cmp	r3, r2
    1aea:	d108      	bne.n	1afe <GPIO_DeInit+0x8a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1aec:	2101      	movs	r1, #1
    1aee:	2040      	movs	r0, #64	; 0x40
    1af0:	f7ff fee2 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    1af4:	2100      	movs	r1, #0
    1af6:	2040      	movs	r0, #64	; 0x40
    1af8:	f7ff fede 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1afc:	e01a      	b.n	1b34 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOF)
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	4a13      	ldr	r2, [pc, #76]	; (1b50 <GPIO_DeInit+0xdc>)
    1b02:	4293      	cmp	r3, r2
    1b04:	d108      	bne.n	1b18 <GPIO_DeInit+0xa4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1b06:	2101      	movs	r1, #1
    1b08:	2080      	movs	r0, #128	; 0x80
    1b0a:	f7ff fed5 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1b0e:	2100      	movs	r1, #0
    1b10:	2080      	movs	r0, #128	; 0x80
    1b12:	f7ff fed1 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1b16:	e00d      	b.n	1b34 <GPIO_DeInit+0xc0>
    if (GPIOx == GPIOG)
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	4a0e      	ldr	r2, [pc, #56]	; (1b54 <GPIO_DeInit+0xe0>)
    1b1c:	4293      	cmp	r3, r2
    1b1e:	d109      	bne.n	1b34 <GPIO_DeInit+0xc0>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1b20:	2101      	movs	r1, #1
    1b22:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b26:	f7ff fec7 	bl	18b8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1b2a:	2100      	movs	r1, #0
    1b2c:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b30:	f7ff fec2 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1b34:	bf00      	nop
    1b36:	3708      	adds	r7, #8
    1b38:	46bd      	mov	sp, r7
    1b3a:	bd80      	pop	{r7, pc}
    1b3c:	40010800 	.word	0x40010800
    1b40:	40010c00 	.word	0x40010c00
    1b44:	40011000 	.word	0x40011000
    1b48:	40011400 	.word	0x40011400
    1b4c:	40011800 	.word	0x40011800
    1b50:	40011c00 	.word	0x40011c00
    1b54:	40012000 	.word	0x40012000

00001b58 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1b5c:	2101      	movs	r1, #1
    1b5e:	2001      	movs	r0, #1
    1b60:	f7ff feaa 	bl	18b8 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1b64:	2100      	movs	r1, #0
    1b66:	2001      	movs	r0, #1
    1b68:	f7ff fea6 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    1b6c:	bf00      	nop
    1b6e:	bd80      	pop	{r7, pc}

00001b70 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1b70:	b480      	push	{r7}
    1b72:	b089      	sub	sp, #36	; 0x24
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
    1b78:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1b7a:	2300      	movs	r3, #0
    1b7c:	61fb      	str	r3, [r7, #28]
    1b7e:	2300      	movs	r3, #0
    1b80:	613b      	str	r3, [r7, #16]
    1b82:	2300      	movs	r3, #0
    1b84:	61bb      	str	r3, [r7, #24]
    1b86:	2300      	movs	r3, #0
    1b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1b8a:	2300      	movs	r3, #0
    1b8c:	617b      	str	r3, [r7, #20]
    1b8e:	2300      	movs	r3, #0
    1b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1b92:	683b      	ldr	r3, [r7, #0]
    1b94:	78db      	ldrb	r3, [r3, #3]
    1b96:	f003 030f 	and.w	r3, r3, #15
    1b9a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1b9c:	683b      	ldr	r3, [r7, #0]
    1b9e:	78db      	ldrb	r3, [r3, #3]
    1ba0:	f003 0310 	and.w	r3, r3, #16
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d005      	beq.n	1bb4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    1ba8:	683b      	ldr	r3, [r7, #0]
    1baa:	789b      	ldrb	r3, [r3, #2]
    1bac:	461a      	mov	r2, r3
    1bae:	69fb      	ldr	r3, [r7, #28]
    1bb0:	4313      	orrs	r3, r2
    1bb2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	881b      	ldrh	r3, [r3, #0]
    1bb8:	b2db      	uxtb	r3, r3
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d044      	beq.n	1c48 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1bc4:	2300      	movs	r3, #0
    1bc6:	61bb      	str	r3, [r7, #24]
    1bc8:	e038      	b.n	1c3c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1bca:	2201      	movs	r2, #1
    1bcc:	69bb      	ldr	r3, [r7, #24]
    1bce:	fa02 f303 	lsl.w	r3, r2, r3
    1bd2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1bd4:	683b      	ldr	r3, [r7, #0]
    1bd6:	881b      	ldrh	r3, [r3, #0]
    1bd8:	461a      	mov	r2, r3
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	4013      	ands	r3, r2
    1bde:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1be0:	693a      	ldr	r2, [r7, #16]
    1be2:	68fb      	ldr	r3, [r7, #12]
    1be4:	429a      	cmp	r2, r3
    1be6:	d126      	bne.n	1c36 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
    1be8:	69bb      	ldr	r3, [r7, #24]
    1bea:	009b      	lsls	r3, r3, #2
    1bec:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1bee:	220f      	movs	r2, #15
    1bf0:	68fb      	ldr	r3, [r7, #12]
    1bf2:	fa02 f303 	lsl.w	r3, r2, r3
    1bf6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1bf8:	68bb      	ldr	r3, [r7, #8]
    1bfa:	43db      	mvns	r3, r3
    1bfc:	697a      	ldr	r2, [r7, #20]
    1bfe:	4013      	ands	r3, r2
    1c00:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1c02:	69fa      	ldr	r2, [r7, #28]
    1c04:	68fb      	ldr	r3, [r7, #12]
    1c06:	fa02 f303 	lsl.w	r3, r2, r3
    1c0a:	697a      	ldr	r2, [r7, #20]
    1c0c:	4313      	orrs	r3, r2
    1c0e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1c10:	683b      	ldr	r3, [r7, #0]
    1c12:	78db      	ldrb	r3, [r3, #3]
    1c14:	2b28      	cmp	r3, #40	; 0x28
    1c16:	d105      	bne.n	1c24 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1c18:	2201      	movs	r2, #1
    1c1a:	69bb      	ldr	r3, [r7, #24]
    1c1c:	409a      	lsls	r2, r3
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	615a      	str	r2, [r3, #20]
    1c22:	e008      	b.n	1c36 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1c24:	683b      	ldr	r3, [r7, #0]
    1c26:	78db      	ldrb	r3, [r3, #3]
    1c28:	2b48      	cmp	r3, #72	; 0x48
    1c2a:	d104      	bne.n	1c36 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1c2c:	2201      	movs	r2, #1
    1c2e:	69bb      	ldr	r3, [r7, #24]
    1c30:	409a      	lsls	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1c36:	69bb      	ldr	r3, [r7, #24]
    1c38:	3301      	adds	r3, #1
    1c3a:	61bb      	str	r3, [r7, #24]
    1c3c:	69bb      	ldr	r3, [r7, #24]
    1c3e:	2b07      	cmp	r3, #7
    1c40:	d9c3      	bls.n	1bca <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1c42:	687b      	ldr	r3, [r7, #4]
    1c44:	697a      	ldr	r2, [r7, #20]
    1c46:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1c48:	683b      	ldr	r3, [r7, #0]
    1c4a:	881b      	ldrh	r3, [r3, #0]
    1c4c:	2bff      	cmp	r3, #255	; 0xff
    1c4e:	d946      	bls.n	1cde <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	685b      	ldr	r3, [r3, #4]
    1c54:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1c56:	2300      	movs	r3, #0
    1c58:	61bb      	str	r3, [r7, #24]
    1c5a:	e03a      	b.n	1cd2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1c5c:	69bb      	ldr	r3, [r7, #24]
    1c5e:	3308      	adds	r3, #8
    1c60:	2201      	movs	r2, #1
    1c62:	fa02 f303 	lsl.w	r3, r2, r3
    1c66:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1c68:	683b      	ldr	r3, [r7, #0]
    1c6a:	881b      	ldrh	r3, [r3, #0]
    1c6c:	461a      	mov	r2, r3
    1c6e:	68fb      	ldr	r3, [r7, #12]
    1c70:	4013      	ands	r3, r2
    1c72:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1c74:	693a      	ldr	r2, [r7, #16]
    1c76:	68fb      	ldr	r3, [r7, #12]
    1c78:	429a      	cmp	r2, r3
    1c7a:	d127      	bne.n	1ccc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
    1c7c:	69bb      	ldr	r3, [r7, #24]
    1c7e:	009b      	lsls	r3, r3, #2
    1c80:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1c82:	220f      	movs	r2, #15
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	fa02 f303 	lsl.w	r3, r2, r3
    1c8a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1c8c:	68bb      	ldr	r3, [r7, #8]
    1c8e:	43db      	mvns	r3, r3
    1c90:	697a      	ldr	r2, [r7, #20]
    1c92:	4013      	ands	r3, r2
    1c94:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1c96:	69fa      	ldr	r2, [r7, #28]
    1c98:	68fb      	ldr	r3, [r7, #12]
    1c9a:	fa02 f303 	lsl.w	r3, r2, r3
    1c9e:	697a      	ldr	r2, [r7, #20]
    1ca0:	4313      	orrs	r3, r2
    1ca2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	78db      	ldrb	r3, [r3, #3]
    1ca8:	2b28      	cmp	r3, #40	; 0x28
    1caa:	d105      	bne.n	1cb8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1cac:	69bb      	ldr	r3, [r7, #24]
    1cae:	3308      	adds	r3, #8
    1cb0:	2201      	movs	r2, #1
    1cb2:	409a      	lsls	r2, r3
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1cb8:	683b      	ldr	r3, [r7, #0]
    1cba:	78db      	ldrb	r3, [r3, #3]
    1cbc:	2b48      	cmp	r3, #72	; 0x48
    1cbe:	d105      	bne.n	1ccc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1cc0:	69bb      	ldr	r3, [r7, #24]
    1cc2:	3308      	adds	r3, #8
    1cc4:	2201      	movs	r2, #1
    1cc6:	409a      	lsls	r2, r3
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1ccc:	69bb      	ldr	r3, [r7, #24]
    1cce:	3301      	adds	r3, #1
    1cd0:	61bb      	str	r3, [r7, #24]
    1cd2:	69bb      	ldr	r3, [r7, #24]
    1cd4:	2b07      	cmp	r3, #7
    1cd6:	d9c1      	bls.n	1c5c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	697a      	ldr	r2, [r7, #20]
    1cdc:	605a      	str	r2, [r3, #4]
  }
}
    1cde:	bf00      	nop
    1ce0:	3724      	adds	r7, #36	; 0x24
    1ce2:	46bd      	mov	sp, r7
    1ce4:	bc80      	pop	{r7}
    1ce6:	4770      	bx	lr

00001ce8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1ce8:	b480      	push	{r7}
    1cea:	b083      	sub	sp, #12
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1cf6:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	2202      	movs	r2, #2
    1cfc:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	2204      	movs	r2, #4
    1d02:	70da      	strb	r2, [r3, #3]
}
    1d04:	bf00      	nop
    1d06:	370c      	adds	r7, #12
    1d08:	46bd      	mov	sp, r7
    1d0a:	bc80      	pop	{r7}
    1d0c:	4770      	bx	lr

00001d0e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1d0e:	b480      	push	{r7}
    1d10:	b085      	sub	sp, #20
    1d12:	af00      	add	r7, sp, #0
    1d14:	6078      	str	r0, [r7, #4]
    1d16:	460b      	mov	r3, r1
    1d18:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1d1a:	2300      	movs	r3, #0
    1d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	689a      	ldr	r2, [r3, #8]
    1d22:	887b      	ldrh	r3, [r7, #2]
    1d24:	4013      	ands	r3, r2
    1d26:	2b00      	cmp	r3, #0
    1d28:	d002      	beq.n	1d30 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1d2a:	2301      	movs	r3, #1
    1d2c:	73fb      	strb	r3, [r7, #15]
    1d2e:	e001      	b.n	1d34 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1d30:	2300      	movs	r3, #0
    1d32:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1d34:	7bfb      	ldrb	r3, [r7, #15]
}
    1d36:	4618      	mov	r0, r3
    1d38:	3714      	adds	r7, #20
    1d3a:	46bd      	mov	sp, r7
    1d3c:	bc80      	pop	{r7}
    1d3e:	4770      	bx	lr

00001d40 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1d40:	b480      	push	{r7}
    1d42:	b083      	sub	sp, #12
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	689b      	ldr	r3, [r3, #8]
    1d4c:	b29b      	uxth	r3, r3
}
    1d4e:	4618      	mov	r0, r3
    1d50:	370c      	adds	r7, #12
    1d52:	46bd      	mov	sp, r7
    1d54:	bc80      	pop	{r7}
    1d56:	4770      	bx	lr

00001d58 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1d58:	b480      	push	{r7}
    1d5a:	b085      	sub	sp, #20
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	6078      	str	r0, [r7, #4]
    1d60:	460b      	mov	r3, r1
    1d62:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1d64:	2300      	movs	r3, #0
    1d66:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	68da      	ldr	r2, [r3, #12]
    1d6c:	887b      	ldrh	r3, [r7, #2]
    1d6e:	4013      	ands	r3, r2
    1d70:	2b00      	cmp	r3, #0
    1d72:	d002      	beq.n	1d7a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1d74:	2301      	movs	r3, #1
    1d76:	73fb      	strb	r3, [r7, #15]
    1d78:	e001      	b.n	1d7e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1d7a:	2300      	movs	r3, #0
    1d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1d7e:	7bfb      	ldrb	r3, [r7, #15]
}
    1d80:	4618      	mov	r0, r3
    1d82:	3714      	adds	r7, #20
    1d84:	46bd      	mov	sp, r7
    1d86:	bc80      	pop	{r7}
    1d88:	4770      	bx	lr

00001d8a <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1d8a:	b480      	push	{r7}
    1d8c:	b083      	sub	sp, #12
    1d8e:	af00      	add	r7, sp, #0
    1d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    1d92:	687b      	ldr	r3, [r7, #4]
    1d94:	68db      	ldr	r3, [r3, #12]
    1d96:	b29b      	uxth	r3, r3
}
    1d98:	4618      	mov	r0, r3
    1d9a:	370c      	adds	r7, #12
    1d9c:	46bd      	mov	sp, r7
    1d9e:	bc80      	pop	{r7}
    1da0:	4770      	bx	lr

00001da2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1da2:	b480      	push	{r7}
    1da4:	b083      	sub	sp, #12
    1da6:	af00      	add	r7, sp, #0
    1da8:	6078      	str	r0, [r7, #4]
    1daa:	460b      	mov	r3, r1
    1dac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1dae:	887a      	ldrh	r2, [r7, #2]
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	611a      	str	r2, [r3, #16]
}
    1db4:	bf00      	nop
    1db6:	370c      	adds	r7, #12
    1db8:	46bd      	mov	sp, r7
    1dba:	bc80      	pop	{r7}
    1dbc:	4770      	bx	lr

00001dbe <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1dbe:	b480      	push	{r7}
    1dc0:	b083      	sub	sp, #12
    1dc2:	af00      	add	r7, sp, #0
    1dc4:	6078      	str	r0, [r7, #4]
    1dc6:	460b      	mov	r3, r1
    1dc8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1dca:	887a      	ldrh	r2, [r7, #2]
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	615a      	str	r2, [r3, #20]
}
    1dd0:	bf00      	nop
    1dd2:	370c      	adds	r7, #12
    1dd4:	46bd      	mov	sp, r7
    1dd6:	bc80      	pop	{r7}
    1dd8:	4770      	bx	lr

00001dda <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1dda:	b480      	push	{r7}
    1ddc:	b083      	sub	sp, #12
    1dde:	af00      	add	r7, sp, #0
    1de0:	6078      	str	r0, [r7, #4]
    1de2:	460b      	mov	r3, r1
    1de4:	807b      	strh	r3, [r7, #2]
    1de6:	4613      	mov	r3, r2
    1de8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1dea:	787b      	ldrb	r3, [r7, #1]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d003      	beq.n	1df8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1df0:	887a      	ldrh	r2, [r7, #2]
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
    1df6:	e002      	b.n	1dfe <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
    1df8:	887a      	ldrh	r2, [r7, #2]
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	615a      	str	r2, [r3, #20]
}
    1dfe:	bf00      	nop
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	bc80      	pop	{r7}
    1e06:	4770      	bx	lr

00001e08 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1e08:	b480      	push	{r7}
    1e0a:	b083      	sub	sp, #12
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
    1e10:	460b      	mov	r3, r1
    1e12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1e14:	887a      	ldrh	r2, [r7, #2]
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	60da      	str	r2, [r3, #12]
}
    1e1a:	bf00      	nop
    1e1c:	370c      	adds	r7, #12
    1e1e:	46bd      	mov	sp, r7
    1e20:	bc80      	pop	{r7}
    1e22:	4770      	bx	lr

00001e24 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e24:	b480      	push	{r7}
    1e26:	b085      	sub	sp, #20
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	460b      	mov	r3, r1
    1e2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e34:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1e36:	887b      	ldrh	r3, [r7, #2]
    1e38:	68fa      	ldr	r2, [r7, #12]
    1e3a:	4313      	orrs	r3, r2
    1e3c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	68fa      	ldr	r2, [r7, #12]
    1e42:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1e44:	887a      	ldrh	r2, [r7, #2]
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	68fa      	ldr	r2, [r7, #12]
    1e4e:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	699b      	ldr	r3, [r3, #24]
    1e54:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	699b      	ldr	r3, [r3, #24]
    1e5a:	60fb      	str	r3, [r7, #12]
}
    1e5c:	bf00      	nop
    1e5e:	3714      	adds	r7, #20
    1e60:	46bd      	mov	sp, r7
    1e62:	bc80      	pop	{r7}
    1e64:	4770      	bx	lr

00001e66 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1e66:	b480      	push	{r7}
    1e68:	b085      	sub	sp, #20
    1e6a:	af00      	add	r7, sp, #0
    1e6c:	4603      	mov	r3, r0
    1e6e:	460a      	mov	r2, r1
    1e70:	71fb      	strb	r3, [r7, #7]
    1e72:	4613      	mov	r3, r2
    1e74:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1e76:	2300      	movs	r3, #0
    1e78:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    1e7a:	4b0c      	ldr	r3, [pc, #48]	; (1eac <GPIO_EventOutputConfig+0x46>)
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1e80:	68fa      	ldr	r2, [r7, #12]
    1e82:	f64f 7380 	movw	r3, #65408	; 0xff80
    1e86:	4013      	ands	r3, r2
    1e88:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1e8a:	79fb      	ldrb	r3, [r7, #7]
    1e8c:	011b      	lsls	r3, r3, #4
    1e8e:	68fa      	ldr	r2, [r7, #12]
    1e90:	4313      	orrs	r3, r2
    1e92:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1e94:	79bb      	ldrb	r3, [r7, #6]
    1e96:	68fa      	ldr	r2, [r7, #12]
    1e98:	4313      	orrs	r3, r2
    1e9a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1e9c:	4a03      	ldr	r2, [pc, #12]	; (1eac <GPIO_EventOutputConfig+0x46>)
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	6013      	str	r3, [r2, #0]
}
    1ea2:	bf00      	nop
    1ea4:	3714      	adds	r7, #20
    1ea6:	46bd      	mov	sp, r7
    1ea8:	bc80      	pop	{r7}
    1eaa:	4770      	bx	lr
    1eac:	40010000 	.word	0x40010000

00001eb0 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1eb0:	b480      	push	{r7}
    1eb2:	b083      	sub	sp, #12
    1eb4:	af00      	add	r7, sp, #0
    1eb6:	4603      	mov	r3, r0
    1eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1eba:	4a04      	ldr	r2, [pc, #16]	; (1ecc <GPIO_EventOutputCmd+0x1c>)
    1ebc:	79fb      	ldrb	r3, [r7, #7]
    1ebe:	6013      	str	r3, [r2, #0]
}
    1ec0:	bf00      	nop
    1ec2:	370c      	adds	r7, #12
    1ec4:	46bd      	mov	sp, r7
    1ec6:	bc80      	pop	{r7}
    1ec8:	4770      	bx	lr
    1eca:	bf00      	nop
    1ecc:	4220001c 	.word	0x4220001c

00001ed0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1ed0:	b480      	push	{r7}
    1ed2:	b087      	sub	sp, #28
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	6078      	str	r0, [r7, #4]
    1ed8:	460b      	mov	r3, r1
    1eda:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1edc:	2300      	movs	r3, #0
    1ede:	613b      	str	r3, [r7, #16]
    1ee0:	2300      	movs	r3, #0
    1ee2:	60fb      	str	r3, [r7, #12]
    1ee4:	2300      	movs	r3, #0
    1ee6:	617b      	str	r3, [r7, #20]
    1ee8:	2300      	movs	r3, #0
    1eea:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	da03      	bge.n	1efa <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
    1ef2:	4b2e      	ldr	r3, [pc, #184]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1ef4:	69db      	ldr	r3, [r3, #28]
    1ef6:	617b      	str	r3, [r7, #20]
    1ef8:	e002      	b.n	1f00 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1efa:	4b2c      	ldr	r3, [pc, #176]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1efc:	685b      	ldr	r3, [r3, #4]
    1efe:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	0c1b      	lsrs	r3, r3, #16
    1f04:	f003 030f 	and.w	r3, r3, #15
    1f08:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	b29b      	uxth	r3, r3
    1f0e:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1f10:	687b      	ldr	r3, [r7, #4]
    1f12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1f1a:	d10a      	bne.n	1f32 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1f1c:	697b      	ldr	r3, [r7, #20]
    1f1e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1f22:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1f24:	4b21      	ldr	r3, [pc, #132]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1f26:	685b      	ldr	r3, [r3, #4]
    1f28:	4a20      	ldr	r2, [pc, #128]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1f2a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1f2e:	6053      	str	r3, [r2, #4]
    1f30:	e021      	b.n	1f76 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d00e      	beq.n	1f5a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1f3c:	2203      	movs	r2, #3
    1f3e:	68bb      	ldr	r3, [r7, #8]
    1f40:	fa02 f303 	lsl.w	r3, r2, r3
    1f44:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1f46:	68fb      	ldr	r3, [r7, #12]
    1f48:	43db      	mvns	r3, r3
    1f4a:	697a      	ldr	r2, [r7, #20]
    1f4c:	4013      	ands	r3, r2
    1f4e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1f56:	617b      	str	r3, [r7, #20]
    1f58:	e00d      	b.n	1f76 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	0d5b      	lsrs	r3, r3, #21
    1f5e:	011b      	lsls	r3, r3, #4
    1f60:	693a      	ldr	r2, [r7, #16]
    1f62:	fa02 f303 	lsl.w	r3, r2, r3
    1f66:	43db      	mvns	r3, r3
    1f68:	697a      	ldr	r2, [r7, #20]
    1f6a:	4013      	ands	r3, r2
    1f6c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1f6e:	697b      	ldr	r3, [r7, #20]
    1f70:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1f74:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1f76:	78fb      	ldrb	r3, [r7, #3]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d008      	beq.n	1f8e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	0d5b      	lsrs	r3, r3, #21
    1f80:	011b      	lsls	r3, r3, #4
    1f82:	693a      	ldr	r2, [r7, #16]
    1f84:	fa02 f303 	lsl.w	r3, r2, r3
    1f88:	697a      	ldr	r2, [r7, #20]
    1f8a:	4313      	orrs	r3, r2
    1f8c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	2b00      	cmp	r3, #0
    1f92:	da03      	bge.n	1f9c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
    1f94:	4a05      	ldr	r2, [pc, #20]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1f96:	697b      	ldr	r3, [r7, #20]
    1f98:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
    1f9a:	e002      	b.n	1fa2 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
    1f9c:	4a03      	ldr	r2, [pc, #12]	; (1fac <GPIO_PinRemapConfig+0xdc>)
    1f9e:	697b      	ldr	r3, [r7, #20]
    1fa0:	6053      	str	r3, [r2, #4]
}
    1fa2:	bf00      	nop
    1fa4:	371c      	adds	r7, #28
    1fa6:	46bd      	mov	sp, r7
    1fa8:	bc80      	pop	{r7}
    1faa:	4770      	bx	lr
    1fac:	40010000 	.word	0x40010000

00001fb0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1fb0:	b480      	push	{r7}
    1fb2:	b085      	sub	sp, #20
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	4603      	mov	r3, r0
    1fb8:	460a      	mov	r2, r1
    1fba:	71fb      	strb	r3, [r7, #7]
    1fbc:	4613      	mov	r3, r2
    1fbe:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1fc0:	2300      	movs	r3, #0
    1fc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1fc4:	79bb      	ldrb	r3, [r7, #6]
    1fc6:	f003 0303 	and.w	r3, r3, #3
    1fca:	009b      	lsls	r3, r3, #2
    1fcc:	220f      	movs	r2, #15
    1fce:	fa02 f303 	lsl.w	r3, r2, r3
    1fd2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1fd4:	4a15      	ldr	r2, [pc, #84]	; (202c <GPIO_EXTILineConfig+0x7c>)
    1fd6:	79bb      	ldrb	r3, [r7, #6]
    1fd8:	089b      	lsrs	r3, r3, #2
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	3302      	adds	r3, #2
    1fde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	43db      	mvns	r3, r3
    1fe6:	4811      	ldr	r0, [pc, #68]	; (202c <GPIO_EXTILineConfig+0x7c>)
    1fe8:	79b9      	ldrb	r1, [r7, #6]
    1fea:	0889      	lsrs	r1, r1, #2
    1fec:	b2c9      	uxtb	r1, r1
    1fee:	401a      	ands	r2, r3
    1ff0:	1c8b      	adds	r3, r1, #2
    1ff2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1ff6:	4a0d      	ldr	r2, [pc, #52]	; (202c <GPIO_EXTILineConfig+0x7c>)
    1ff8:	79bb      	ldrb	r3, [r7, #6]
    1ffa:	089b      	lsrs	r3, r3, #2
    1ffc:	b2db      	uxtb	r3, r3
    1ffe:	3302      	adds	r3, #2
    2000:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2004:	79f9      	ldrb	r1, [r7, #7]
    2006:	79bb      	ldrb	r3, [r7, #6]
    2008:	f003 0303 	and.w	r3, r3, #3
    200c:	009b      	lsls	r3, r3, #2
    200e:	fa01 f303 	lsl.w	r3, r1, r3
    2012:	4806      	ldr	r0, [pc, #24]	; (202c <GPIO_EXTILineConfig+0x7c>)
    2014:	79b9      	ldrb	r1, [r7, #6]
    2016:	0889      	lsrs	r1, r1, #2
    2018:	b2c9      	uxtb	r1, r1
    201a:	431a      	orrs	r2, r3
    201c:	1c8b      	adds	r3, r1, #2
    201e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    2022:	bf00      	nop
    2024:	3714      	adds	r7, #20
    2026:	46bd      	mov	sp, r7
    2028:	bc80      	pop	{r7}
    202a:	4770      	bx	lr
    202c:	40010000 	.word	0x40010000

00002030 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    2030:	b480      	push	{r7}
    2032:	b083      	sub	sp, #12
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    2038:	4a03      	ldr	r2, [pc, #12]	; (2048 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	6013      	str	r3, [r2, #0]
}
    203e:	bf00      	nop
    2040:	370c      	adds	r7, #12
    2042:	46bd      	mov	sp, r7
    2044:	bc80      	pop	{r7}
    2046:	4770      	bx	lr
    2048:	422000dc 	.word	0x422000dc

0000204c <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	4a26      	ldr	r2, [pc, #152]	; (20f0 <USART_DeInit+0xa4>)
    2058:	4293      	cmp	r3, r2
    205a:	d10a      	bne.n	2072 <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    205c:	2101      	movs	r1, #1
    205e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2062:	f7ff fc29 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    2066:	2100      	movs	r1, #0
    2068:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    206c:	f7ff fc24 	bl	18b8 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
    2070:	e03a      	b.n	20e8 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	4a1f      	ldr	r2, [pc, #124]	; (20f4 <USART_DeInit+0xa8>)
    2076:	4293      	cmp	r3, r2
    2078:	d10a      	bne.n	2090 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    207a:	2101      	movs	r1, #1
    207c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2080:	f7ff fc38 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    2084:	2100      	movs	r1, #0
    2086:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    208a:	f7ff fc33 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    208e:	e02b      	b.n	20e8 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	4a19      	ldr	r2, [pc, #100]	; (20f8 <USART_DeInit+0xac>)
    2094:	4293      	cmp	r3, r2
    2096:	d10a      	bne.n	20ae <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    2098:	2101      	movs	r1, #1
    209a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    209e:	f7ff fc29 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    20a2:	2100      	movs	r1, #0
    20a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    20a8:	f7ff fc24 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    20ac:	e01c      	b.n	20e8 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	4a12      	ldr	r2, [pc, #72]	; (20fc <USART_DeInit+0xb0>)
    20b2:	4293      	cmp	r3, r2
    20b4:	d10a      	bne.n	20cc <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    20b6:	2101      	movs	r1, #1
    20b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    20bc:	f7ff fc1a 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    20c0:	2100      	movs	r1, #0
    20c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    20c6:	f7ff fc15 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    20ca:	e00d      	b.n	20e8 <USART_DeInit+0x9c>
    if (USARTx == UART5)
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	4a0c      	ldr	r2, [pc, #48]	; (2100 <USART_DeInit+0xb4>)
    20d0:	4293      	cmp	r3, r2
    20d2:	d109      	bne.n	20e8 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    20d4:	2101      	movs	r1, #1
    20d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    20da:	f7ff fc0b 	bl	18f4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    20de:	2100      	movs	r1, #0
    20e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    20e4:	f7ff fc06 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    20e8:	bf00      	nop
    20ea:	3708      	adds	r7, #8
    20ec:	46bd      	mov	sp, r7
    20ee:	bd80      	pop	{r7, pc}
    20f0:	40013800 	.word	0x40013800
    20f4:	40004400 	.word	0x40004400
    20f8:	40004800 	.word	0x40004800
    20fc:	40004c00 	.word	0x40004c00
    2100:	40005000 	.word	0x40005000

00002104 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    2104:	b580      	push	{r7, lr}
    2106:	b08c      	sub	sp, #48	; 0x30
    2108:	af00      	add	r7, sp, #0
    210a:	6078      	str	r0, [r7, #4]
    210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    210e:	2300      	movs	r3, #0
    2110:	62fb      	str	r3, [r7, #44]	; 0x2c
    2112:	2300      	movs	r3, #0
    2114:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    2116:	2300      	movs	r3, #0
    2118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    211a:	2300      	movs	r3, #0
    211c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    211e:	2300      	movs	r3, #0
    2120:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	8a1b      	ldrh	r3, [r3, #16]
    212a:	b29b      	uxth	r3, r3
    212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    212e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2130:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    2134:	4013      	ands	r3, r2
    2136:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    2138:	683b      	ldr	r3, [r7, #0]
    213a:	88db      	ldrh	r3, [r3, #6]
    213c:	461a      	mov	r2, r3
    213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2140:	4313      	orrs	r3, r2
    2142:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2146:	b29a      	uxth	r2, r3
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	899b      	ldrh	r3, [r3, #12]
    2150:	b29b      	uxth	r3, r3
    2152:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    2154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2156:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    215a:	4013      	ands	r3, r2
    215c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	889a      	ldrh	r2, [r3, #4]
    2162:	683b      	ldr	r3, [r7, #0]
    2164:	891b      	ldrh	r3, [r3, #8]
    2166:	4313      	orrs	r3, r2
    2168:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    216a:	683b      	ldr	r3, [r7, #0]
    216c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    216e:	4313      	orrs	r3, r2
    2170:	b29b      	uxth	r3, r3
    2172:	461a      	mov	r2, r3
    2174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2176:	4313      	orrs	r3, r2
    2178:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    217c:	b29a      	uxth	r2, r3
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	8a9b      	ldrh	r3, [r3, #20]
    2186:	b29b      	uxth	r3, r3
    2188:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    218a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    218c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    2190:	4013      	ands	r3, r2
    2192:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    2194:	683b      	ldr	r3, [r7, #0]
    2196:	899b      	ldrh	r3, [r3, #12]
    2198:	461a      	mov	r2, r3
    219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    219c:	4313      	orrs	r3, r2
    219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    21a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    21a2:	b29a      	uxth	r2, r3
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    21a8:	f107 0308 	add.w	r3, r7, #8
    21ac:	4618      	mov	r0, r3
    21ae:	f7ff fa79 	bl	16a4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    21b2:	69fb      	ldr	r3, [r7, #28]
    21b4:	4a2e      	ldr	r2, [pc, #184]	; (2270 <USART_Init+0x16c>)
    21b6:	4293      	cmp	r3, r2
    21b8:	d102      	bne.n	21c0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    21ba:	697b      	ldr	r3, [r7, #20]
    21bc:	62bb      	str	r3, [r7, #40]	; 0x28
    21be:	e001      	b.n	21c4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    21c0:	693b      	ldr	r3, [r7, #16]
    21c2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	899b      	ldrh	r3, [r3, #12]
    21c8:	b29b      	uxth	r3, r3
    21ca:	b21b      	sxth	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	da0c      	bge.n	21ea <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    21d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    21d2:	4613      	mov	r3, r2
    21d4:	009b      	lsls	r3, r3, #2
    21d6:	4413      	add	r3, r2
    21d8:	009a      	lsls	r2, r3, #2
    21da:	441a      	add	r2, r3
    21dc:	683b      	ldr	r3, [r7, #0]
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	005b      	lsls	r3, r3, #1
    21e2:	fbb2 f3f3 	udiv	r3, r2, r3
    21e6:	627b      	str	r3, [r7, #36]	; 0x24
    21e8:	e00b      	b.n	2202 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    21ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    21ec:	4613      	mov	r3, r2
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	4413      	add	r3, r2
    21f2:	009a      	lsls	r2, r3, #2
    21f4:	441a      	add	r2, r3
    21f6:	683b      	ldr	r3, [r7, #0]
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	009b      	lsls	r3, r3, #2
    21fc:	fbb2 f3f3 	udiv	r3, r2, r3
    2200:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    2202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2204:	4a1b      	ldr	r2, [pc, #108]	; (2274 <USART_Init+0x170>)
    2206:	fba2 2303 	umull	r2, r3, r2, r3
    220a:	095b      	lsrs	r3, r3, #5
    220c:	011b      	lsls	r3, r3, #4
    220e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    2210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2212:	091b      	lsrs	r3, r3, #4
    2214:	2264      	movs	r2, #100	; 0x64
    2216:	fb02 f303 	mul.w	r3, r2, r3
    221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    221c:	1ad3      	subs	r3, r2, r3
    221e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	899b      	ldrh	r3, [r3, #12]
    2224:	b29b      	uxth	r3, r3
    2226:	b21b      	sxth	r3, r3
    2228:	2b00      	cmp	r3, #0
    222a:	da0c      	bge.n	2246 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    222c:	6a3b      	ldr	r3, [r7, #32]
    222e:	00db      	lsls	r3, r3, #3
    2230:	3332      	adds	r3, #50	; 0x32
    2232:	4a10      	ldr	r2, [pc, #64]	; (2274 <USART_Init+0x170>)
    2234:	fba2 2303 	umull	r2, r3, r2, r3
    2238:	095b      	lsrs	r3, r3, #5
    223a:	f003 0307 	and.w	r3, r3, #7
    223e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2240:	4313      	orrs	r3, r2
    2242:	62fb      	str	r3, [r7, #44]	; 0x2c
    2244:	e00b      	b.n	225e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    2246:	6a3b      	ldr	r3, [r7, #32]
    2248:	011b      	lsls	r3, r3, #4
    224a:	3332      	adds	r3, #50	; 0x32
    224c:	4a09      	ldr	r2, [pc, #36]	; (2274 <USART_Init+0x170>)
    224e:	fba2 2303 	umull	r2, r3, r2, r3
    2252:	095b      	lsrs	r3, r3, #5
    2254:	f003 030f 	and.w	r3, r3, #15
    2258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    225a:	4313      	orrs	r3, r2
    225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2260:	b29a      	uxth	r2, r3
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	811a      	strh	r2, [r3, #8]
}
    2266:	bf00      	nop
    2268:	3730      	adds	r7, #48	; 0x30
    226a:	46bd      	mov	sp, r7
    226c:	bd80      	pop	{r7, pc}
    226e:	bf00      	nop
    2270:	40013800 	.word	0x40013800
    2274:	51eb851f 	.word	0x51eb851f

00002278 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    2278:	b480      	push	{r7}
    227a:	b083      	sub	sp, #12
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    2286:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	2200      	movs	r2, #0
    228c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	2200      	movs	r2, #0
    2292:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2200      	movs	r2, #0
    2298:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	220c      	movs	r2, #12
    229e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	2200      	movs	r2, #0
    22a4:	819a      	strh	r2, [r3, #12]
}
    22a6:	bf00      	nop
    22a8:	370c      	adds	r7, #12
    22aa:	46bd      	mov	sp, r7
    22ac:	bc80      	pop	{r7}
    22ae:	4770      	bx	lr

000022b0 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    22b0:	b480      	push	{r7}
    22b2:	b085      	sub	sp, #20
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
    22b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    22ba:	2300      	movs	r3, #0
    22bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    22be:	687b      	ldr	r3, [r7, #4]
    22c0:	8a1b      	ldrh	r3, [r3, #16]
    22c2:	b29b      	uxth	r3, r3
    22c4:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    22c6:	68fa      	ldr	r2, [r7, #12]
    22c8:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    22cc:	4013      	ands	r3, r2
    22ce:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    22d0:	683b      	ldr	r3, [r7, #0]
    22d2:	881a      	ldrh	r2, [r3, #0]
    22d4:	683b      	ldr	r3, [r7, #0]
    22d6:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    22d8:	4313      	orrs	r3, r2
    22da:	b29a      	uxth	r2, r3
    22dc:	683b      	ldr	r3, [r7, #0]
    22de:	889b      	ldrh	r3, [r3, #4]
    22e0:	4313      	orrs	r3, r2
    22e2:	b29a      	uxth	r2, r3
    22e4:	683b      	ldr	r3, [r7, #0]
    22e6:	88db      	ldrh	r3, [r3, #6]
    22e8:	4313      	orrs	r3, r2
    22ea:	b29b      	uxth	r3, r3
    22ec:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    22ee:	68fb      	ldr	r3, [r7, #12]
    22f0:	4313      	orrs	r3, r2
    22f2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	b29a      	uxth	r2, r3
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	821a      	strh	r2, [r3, #16]
}
    22fc:	bf00      	nop
    22fe:	3714      	adds	r7, #20
    2300:	46bd      	mov	sp, r7
    2302:	bc80      	pop	{r7}
    2304:	4770      	bx	lr

00002306 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    2306:	b480      	push	{r7}
    2308:	b083      	sub	sp, #12
    230a:	af00      	add	r7, sp, #0
    230c:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	2200      	movs	r2, #0
    2312:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	2200      	movs	r2, #0
    2318:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    231a:	687b      	ldr	r3, [r7, #4]
    231c:	2200      	movs	r2, #0
    231e:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	2200      	movs	r2, #0
    2324:	80da      	strh	r2, [r3, #6]
}
    2326:	bf00      	nop
    2328:	370c      	adds	r7, #12
    232a:	46bd      	mov	sp, r7
    232c:	bc80      	pop	{r7}
    232e:	4770      	bx	lr

00002330 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2330:	b480      	push	{r7}
    2332:	b083      	sub	sp, #12
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
    2338:	460b      	mov	r3, r1
    233a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    233c:	78fb      	ldrb	r3, [r7, #3]
    233e:	2b00      	cmp	r3, #0
    2340:	d008      	beq.n	2354 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	899b      	ldrh	r3, [r3, #12]
    2346:	b29b      	uxth	r3, r3
    2348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    234c:	b29a      	uxth	r2, r3
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
    2352:	e007      	b.n	2364 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	899b      	ldrh	r3, [r3, #12]
    2358:	b29b      	uxth	r3, r3
    235a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    235e:	b29a      	uxth	r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	819a      	strh	r2, [r3, #12]
}
    2364:	bf00      	nop
    2366:	370c      	adds	r7, #12
    2368:	46bd      	mov	sp, r7
    236a:	bc80      	pop	{r7}
    236c:	4770      	bx	lr

0000236e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    236e:	b480      	push	{r7}
    2370:	b087      	sub	sp, #28
    2372:	af00      	add	r7, sp, #0
    2374:	6078      	str	r0, [r7, #4]
    2376:	460b      	mov	r3, r1
    2378:	807b      	strh	r3, [r7, #2]
    237a:	4613      	mov	r3, r2
    237c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    237e:	2300      	movs	r3, #0
    2380:	613b      	str	r3, [r7, #16]
    2382:	2300      	movs	r3, #0
    2384:	60fb      	str	r3, [r7, #12]
    2386:	2300      	movs	r3, #0
    2388:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    238a:	2300      	movs	r3, #0
    238c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2392:	887b      	ldrh	r3, [r7, #2]
    2394:	b2db      	uxtb	r3, r3
    2396:	095b      	lsrs	r3, r3, #5
    2398:	b2db      	uxtb	r3, r3
    239a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    239c:	887b      	ldrh	r3, [r7, #2]
    239e:	f003 031f 	and.w	r3, r3, #31
    23a2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    23a4:	2201      	movs	r2, #1
    23a6:	68fb      	ldr	r3, [r7, #12]
    23a8:	fa02 f303 	lsl.w	r3, r2, r3
    23ac:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    23ae:	693b      	ldr	r3, [r7, #16]
    23b0:	2b01      	cmp	r3, #1
    23b2:	d103      	bne.n	23bc <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    23b4:	697b      	ldr	r3, [r7, #20]
    23b6:	330c      	adds	r3, #12
    23b8:	617b      	str	r3, [r7, #20]
    23ba:	e009      	b.n	23d0 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    23bc:	693b      	ldr	r3, [r7, #16]
    23be:	2b02      	cmp	r3, #2
    23c0:	d103      	bne.n	23ca <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    23c2:	697b      	ldr	r3, [r7, #20]
    23c4:	3310      	adds	r3, #16
    23c6:	617b      	str	r3, [r7, #20]
    23c8:	e002      	b.n	23d0 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    23ca:	697b      	ldr	r3, [r7, #20]
    23cc:	3314      	adds	r3, #20
    23ce:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    23d0:	787b      	ldrb	r3, [r7, #1]
    23d2:	2b00      	cmp	r3, #0
    23d4:	d006      	beq.n	23e4 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    23d6:	697b      	ldr	r3, [r7, #20]
    23d8:	6819      	ldr	r1, [r3, #0]
    23da:	697b      	ldr	r3, [r7, #20]
    23dc:	68ba      	ldr	r2, [r7, #8]
    23de:	430a      	orrs	r2, r1
    23e0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
    23e2:	e006      	b.n	23f2 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
    23e4:	697b      	ldr	r3, [r7, #20]
    23e6:	6819      	ldr	r1, [r3, #0]
    23e8:	68bb      	ldr	r3, [r7, #8]
    23ea:	43da      	mvns	r2, r3
    23ec:	697b      	ldr	r3, [r7, #20]
    23ee:	400a      	ands	r2, r1
    23f0:	601a      	str	r2, [r3, #0]
}
    23f2:	bf00      	nop
    23f4:	371c      	adds	r7, #28
    23f6:	46bd      	mov	sp, r7
    23f8:	bc80      	pop	{r7}
    23fa:	4770      	bx	lr

000023fc <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    23fc:	b480      	push	{r7}
    23fe:	b083      	sub	sp, #12
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
    2404:	460b      	mov	r3, r1
    2406:	807b      	strh	r3, [r7, #2]
    2408:	4613      	mov	r3, r2
    240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    240c:	787b      	ldrb	r3, [r7, #1]
    240e:	2b00      	cmp	r3, #0
    2410:	d008      	beq.n	2424 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    2412:	687b      	ldr	r3, [r7, #4]
    2414:	8a9b      	ldrh	r3, [r3, #20]
    2416:	b29a      	uxth	r2, r3
    2418:	887b      	ldrh	r3, [r7, #2]
    241a:	4313      	orrs	r3, r2
    241c:	b29a      	uxth	r2, r3
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
    2422:	e009      	b.n	2438 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	8a9b      	ldrh	r3, [r3, #20]
    2428:	b29a      	uxth	r2, r3
    242a:	887b      	ldrh	r3, [r7, #2]
    242c:	43db      	mvns	r3, r3
    242e:	b29b      	uxth	r3, r3
    2430:	4013      	ands	r3, r2
    2432:	b29a      	uxth	r2, r3
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	829a      	strh	r2, [r3, #20]
}
    2438:	bf00      	nop
    243a:	370c      	adds	r7, #12
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr

00002442 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    2442:	b480      	push	{r7}
    2444:	b083      	sub	sp, #12
    2446:	af00      	add	r7, sp, #0
    2448:	6078      	str	r0, [r7, #4]
    244a:	460b      	mov	r3, r1
    244c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	8a1b      	ldrh	r3, [r3, #16]
    2452:	b29b      	uxth	r3, r3
    2454:	f023 030f 	bic.w	r3, r3, #15
    2458:	b29a      	uxth	r2, r3
    245a:	687b      	ldr	r3, [r7, #4]
    245c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	8a1b      	ldrh	r3, [r3, #16]
    2462:	b29a      	uxth	r2, r3
    2464:	78fb      	ldrb	r3, [r7, #3]
    2466:	b29b      	uxth	r3, r3
    2468:	4313      	orrs	r3, r2
    246a:	b29a      	uxth	r2, r3
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	821a      	strh	r2, [r3, #16]
}
    2470:	bf00      	nop
    2472:	370c      	adds	r7, #12
    2474:	46bd      	mov	sp, r7
    2476:	bc80      	pop	{r7}
    2478:	4770      	bx	lr

0000247a <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    247a:	b480      	push	{r7}
    247c:	b083      	sub	sp, #12
    247e:	af00      	add	r7, sp, #0
    2480:	6078      	str	r0, [r7, #4]
    2482:	460b      	mov	r3, r1
    2484:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	899b      	ldrh	r3, [r3, #12]
    248a:	b29b      	uxth	r3, r3
    248c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2490:	b29a      	uxth	r2, r3
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	899b      	ldrh	r3, [r3, #12]
    249a:	b29a      	uxth	r2, r3
    249c:	887b      	ldrh	r3, [r7, #2]
    249e:	4313      	orrs	r3, r2
    24a0:	b29a      	uxth	r2, r3
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	819a      	strh	r2, [r3, #12]
}
    24a6:	bf00      	nop
    24a8:	370c      	adds	r7, #12
    24aa:	46bd      	mov	sp, r7
    24ac:	bc80      	pop	{r7}
    24ae:	4770      	bx	lr

000024b0 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    24b0:	b480      	push	{r7}
    24b2:	b083      	sub	sp, #12
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
    24b8:	460b      	mov	r3, r1
    24ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    24bc:	78fb      	ldrb	r3, [r7, #3]
    24be:	2b00      	cmp	r3, #0
    24c0:	d008      	beq.n	24d4 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	899b      	ldrh	r3, [r3, #12]
    24c6:	b29b      	uxth	r3, r3
    24c8:	f043 0302 	orr.w	r3, r3, #2
    24cc:	b29a      	uxth	r2, r3
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
  }
}
    24d2:	e007      	b.n	24e4 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= CR1_RWU_Reset;
    24d4:	687b      	ldr	r3, [r7, #4]
    24d6:	899b      	ldrh	r3, [r3, #12]
    24d8:	b29b      	uxth	r3, r3
    24da:	f023 0302 	bic.w	r3, r3, #2
    24de:	b29a      	uxth	r2, r3
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	819a      	strh	r2, [r3, #12]
}
    24e4:	bf00      	nop
    24e6:	370c      	adds	r7, #12
    24e8:	46bd      	mov	sp, r7
    24ea:	bc80      	pop	{r7}
    24ec:	4770      	bx	lr

000024ee <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    24ee:	b480      	push	{r7}
    24f0:	b083      	sub	sp, #12
    24f2:	af00      	add	r7, sp, #0
    24f4:	6078      	str	r0, [r7, #4]
    24f6:	460b      	mov	r3, r1
    24f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	8a1b      	ldrh	r3, [r3, #16]
    24fe:	b29b      	uxth	r3, r3
    2500:	f023 0320 	bic.w	r3, r3, #32
    2504:	b29a      	uxth	r2, r3
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	8a1b      	ldrh	r3, [r3, #16]
    250e:	b29a      	uxth	r2, r3
    2510:	887b      	ldrh	r3, [r7, #2]
    2512:	4313      	orrs	r3, r2
    2514:	b29a      	uxth	r2, r3
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	821a      	strh	r2, [r3, #16]
}
    251a:	bf00      	nop
    251c:	370c      	adds	r7, #12
    251e:	46bd      	mov	sp, r7
    2520:	bc80      	pop	{r7}
    2522:	4770      	bx	lr

00002524 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2524:	b480      	push	{r7}
    2526:	b083      	sub	sp, #12
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
    252c:	460b      	mov	r3, r1
    252e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2530:	78fb      	ldrb	r3, [r7, #3]
    2532:	2b00      	cmp	r3, #0
    2534:	d008      	beq.n	2548 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    2536:	687b      	ldr	r3, [r7, #4]
    2538:	8a1b      	ldrh	r3, [r3, #16]
    253a:	b29b      	uxth	r3, r3
    253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2540:	b29a      	uxth	r2, r3
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
  }
}
    2546:	e007      	b.n	2558 <USART_LINCmd+0x34>
    USARTx->CR2 &= CR2_LINEN_Reset;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	8a1b      	ldrh	r3, [r3, #16]
    254c:	b29b      	uxth	r3, r3
    254e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2552:	b29a      	uxth	r2, r3
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	821a      	strh	r2, [r3, #16]
}
    2558:	bf00      	nop
    255a:	370c      	adds	r7, #12
    255c:	46bd      	mov	sp, r7
    255e:	bc80      	pop	{r7}
    2560:	4770      	bx	lr

00002562 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    2562:	b480      	push	{r7}
    2564:	b083      	sub	sp, #12
    2566:	af00      	add	r7, sp, #0
    2568:	6078      	str	r0, [r7, #4]
    256a:	460b      	mov	r3, r1
    256c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    256e:	887b      	ldrh	r3, [r7, #2]
    2570:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2574:	b29a      	uxth	r2, r3
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	809a      	strh	r2, [r3, #4]
}
    257a:	bf00      	nop
    257c:	370c      	adds	r7, #12
    257e:	46bd      	mov	sp, r7
    2580:	bc80      	pop	{r7}
    2582:	4770      	bx	lr

00002584 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    2584:	b480      	push	{r7}
    2586:	b083      	sub	sp, #12
    2588:	af00      	add	r7, sp, #0
    258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	889b      	ldrh	r3, [r3, #4]
    2590:	b29b      	uxth	r3, r3
    2592:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2596:	b29b      	uxth	r3, r3
}
    2598:	4618      	mov	r0, r3
    259a:	370c      	adds	r7, #12
    259c:	46bd      	mov	sp, r7
    259e:	bc80      	pop	{r7}
    25a0:	4770      	bx	lr

000025a2 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    25a2:	b480      	push	{r7}
    25a4:	b083      	sub	sp, #12
    25a6:	af00      	add	r7, sp, #0
    25a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	899b      	ldrh	r3, [r3, #12]
    25ae:	b29b      	uxth	r3, r3
    25b0:	f043 0301 	orr.w	r3, r3, #1
    25b4:	b29a      	uxth	r2, r3
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	819a      	strh	r2, [r3, #12]
}
    25ba:	bf00      	nop
    25bc:	370c      	adds	r7, #12
    25be:	46bd      	mov	sp, r7
    25c0:	bc80      	pop	{r7}
    25c2:	4770      	bx	lr

000025c4 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    25c4:	b480      	push	{r7}
    25c6:	b083      	sub	sp, #12
    25c8:	af00      	add	r7, sp, #0
    25ca:	6078      	str	r0, [r7, #4]
    25cc:	460b      	mov	r3, r1
    25ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	8b1b      	ldrh	r3, [r3, #24]
    25d4:	b29b      	uxth	r3, r3
    25d6:	b2db      	uxtb	r3, r3
    25d8:	b29a      	uxth	r2, r3
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	8b1b      	ldrh	r3, [r3, #24]
    25e2:	b29a      	uxth	r2, r3
    25e4:	78fb      	ldrb	r3, [r7, #3]
    25e6:	b29b      	uxth	r3, r3
    25e8:	021b      	lsls	r3, r3, #8
    25ea:	b29b      	uxth	r3, r3
    25ec:	4313      	orrs	r3, r2
    25ee:	b29a      	uxth	r2, r3
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	831a      	strh	r2, [r3, #24]
}
    25f4:	bf00      	nop
    25f6:	370c      	adds	r7, #12
    25f8:	46bd      	mov	sp, r7
    25fa:	bc80      	pop	{r7}
    25fc:	4770      	bx	lr

000025fe <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    25fe:	b480      	push	{r7}
    2600:	b083      	sub	sp, #12
    2602:	af00      	add	r7, sp, #0
    2604:	6078      	str	r0, [r7, #4]
    2606:	460b      	mov	r3, r1
    2608:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	8b1b      	ldrh	r3, [r3, #24]
    260e:	b29b      	uxth	r3, r3
    2610:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2614:	b29a      	uxth	r2, r3
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	8b1b      	ldrh	r3, [r3, #24]
    261e:	b29a      	uxth	r2, r3
    2620:	78fb      	ldrb	r3, [r7, #3]
    2622:	b29b      	uxth	r3, r3
    2624:	4313      	orrs	r3, r2
    2626:	b29a      	uxth	r2, r3
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	831a      	strh	r2, [r3, #24]
}
    262c:	bf00      	nop
    262e:	370c      	adds	r7, #12
    2630:	46bd      	mov	sp, r7
    2632:	bc80      	pop	{r7}
    2634:	4770      	bx	lr

00002636 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2636:	b480      	push	{r7}
    2638:	b083      	sub	sp, #12
    263a:	af00      	add	r7, sp, #0
    263c:	6078      	str	r0, [r7, #4]
    263e:	460b      	mov	r3, r1
    2640:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2642:	78fb      	ldrb	r3, [r7, #3]
    2644:	2b00      	cmp	r3, #0
    2646:	d008      	beq.n	265a <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	8a9b      	ldrh	r3, [r3, #20]
    264c:	b29b      	uxth	r3, r3
    264e:	f043 0320 	orr.w	r3, r3, #32
    2652:	b29a      	uxth	r2, r3
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
  }
}
    2658:	e007      	b.n	266a <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= CR3_SCEN_Reset;
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	8a9b      	ldrh	r3, [r3, #20]
    265e:	b29b      	uxth	r3, r3
    2660:	f023 0320 	bic.w	r3, r3, #32
    2664:	b29a      	uxth	r2, r3
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	829a      	strh	r2, [r3, #20]
}
    266a:	bf00      	nop
    266c:	370c      	adds	r7, #12
    266e:	46bd      	mov	sp, r7
    2670:	bc80      	pop	{r7}
    2672:	4770      	bx	lr

00002674 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2674:	b480      	push	{r7}
    2676:	b083      	sub	sp, #12
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    267c:	460b      	mov	r3, r1
    267e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2680:	78fb      	ldrb	r3, [r7, #3]
    2682:	2b00      	cmp	r3, #0
    2684:	d008      	beq.n	2698 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	8a9b      	ldrh	r3, [r3, #20]
    268a:	b29b      	uxth	r3, r3
    268c:	f043 0310 	orr.w	r3, r3, #16
    2690:	b29a      	uxth	r2, r3
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
  }
}
    2696:	e007      	b.n	26a8 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= CR3_NACK_Reset;
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	8a9b      	ldrh	r3, [r3, #20]
    269c:	b29b      	uxth	r3, r3
    269e:	f023 0310 	bic.w	r3, r3, #16
    26a2:	b29a      	uxth	r2, r3
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	829a      	strh	r2, [r3, #20]
}
    26a8:	bf00      	nop
    26aa:	370c      	adds	r7, #12
    26ac:	46bd      	mov	sp, r7
    26ae:	bc80      	pop	{r7}
    26b0:	4770      	bx	lr

000026b2 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    26b2:	b480      	push	{r7}
    26b4:	b083      	sub	sp, #12
    26b6:	af00      	add	r7, sp, #0
    26b8:	6078      	str	r0, [r7, #4]
    26ba:	460b      	mov	r3, r1
    26bc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    26be:	78fb      	ldrb	r3, [r7, #3]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d008      	beq.n	26d6 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	8a9b      	ldrh	r3, [r3, #20]
    26c8:	b29b      	uxth	r3, r3
    26ca:	f043 0308 	orr.w	r3, r3, #8
    26ce:	b29a      	uxth	r2, r3
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
  }
}
    26d4:	e007      	b.n	26e6 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= CR3_HDSEL_Reset;
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	8a9b      	ldrh	r3, [r3, #20]
    26da:	b29b      	uxth	r3, r3
    26dc:	f023 0308 	bic.w	r3, r3, #8
    26e0:	b29a      	uxth	r2, r3
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	829a      	strh	r2, [r3, #20]
}
    26e6:	bf00      	nop
    26e8:	370c      	adds	r7, #12
    26ea:	46bd      	mov	sp, r7
    26ec:	bc80      	pop	{r7}
    26ee:	4770      	bx	lr

000026f0 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    26f0:	b480      	push	{r7}
    26f2:	b083      	sub	sp, #12
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
    26f8:	460b      	mov	r3, r1
    26fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    26fc:	78fb      	ldrb	r3, [r7, #3]
    26fe:	2b00      	cmp	r3, #0
    2700:	d00a      	beq.n	2718 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	899b      	ldrh	r3, [r3, #12]
    2706:	b29b      	uxth	r3, r3
    2708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    270c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    2710:	b29a      	uxth	r2, r3
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
  }
}
    2716:	e007      	b.n	2728 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= CR1_OVER8_Reset;
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	899b      	ldrh	r3, [r3, #12]
    271c:	b29b      	uxth	r3, r3
    271e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    2722:	b29a      	uxth	r2, r3
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	819a      	strh	r2, [r3, #12]
}
    2728:	bf00      	nop
    272a:	370c      	adds	r7, #12
    272c:	46bd      	mov	sp, r7
    272e:	bc80      	pop	{r7}
    2730:	4770      	bx	lr

00002732 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2732:	b480      	push	{r7}
    2734:	b083      	sub	sp, #12
    2736:	af00      	add	r7, sp, #0
    2738:	6078      	str	r0, [r7, #4]
    273a:	460b      	mov	r3, r1
    273c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    273e:	78fb      	ldrb	r3, [r7, #3]
    2740:	2b00      	cmp	r3, #0
    2742:	d008      	beq.n	2756 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	8a9b      	ldrh	r3, [r3, #20]
    2748:	b29b      	uxth	r3, r3
    274a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    274e:	b29a      	uxth	r2, r3
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
  }
}
    2754:	e007      	b.n	2766 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	8a9b      	ldrh	r3, [r3, #20]
    275a:	b29b      	uxth	r3, r3
    275c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2760:	b29a      	uxth	r2, r3
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	829a      	strh	r2, [r3, #20]
}
    2766:	bf00      	nop
    2768:	370c      	adds	r7, #12
    276a:	46bd      	mov	sp, r7
    276c:	bc80      	pop	{r7}
    276e:	4770      	bx	lr

00002770 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    2770:	b480      	push	{r7}
    2772:	b083      	sub	sp, #12
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
    2778:	460b      	mov	r3, r1
    277a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	8a9b      	ldrh	r3, [r3, #20]
    2780:	b29b      	uxth	r3, r3
    2782:	f023 0304 	bic.w	r3, r3, #4
    2786:	b29a      	uxth	r2, r3
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	8a9b      	ldrh	r3, [r3, #20]
    2790:	b29a      	uxth	r2, r3
    2792:	887b      	ldrh	r3, [r7, #2]
    2794:	4313      	orrs	r3, r2
    2796:	b29a      	uxth	r2, r3
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	829a      	strh	r2, [r3, #20]
}
    279c:	bf00      	nop
    279e:	370c      	adds	r7, #12
    27a0:	46bd      	mov	sp, r7
    27a2:	bc80      	pop	{r7}
    27a4:	4770      	bx	lr

000027a6 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    27a6:	b480      	push	{r7}
    27a8:	b083      	sub	sp, #12
    27aa:	af00      	add	r7, sp, #0
    27ac:	6078      	str	r0, [r7, #4]
    27ae:	460b      	mov	r3, r1
    27b0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    27b2:	78fb      	ldrb	r3, [r7, #3]
    27b4:	2b00      	cmp	r3, #0
    27b6:	d008      	beq.n	27ca <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	8a9b      	ldrh	r3, [r3, #20]
    27bc:	b29b      	uxth	r3, r3
    27be:	f043 0302 	orr.w	r3, r3, #2
    27c2:	b29a      	uxth	r2, r3
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
  }
}
    27c8:	e007      	b.n	27da <USART_IrDACmd+0x34>
    USARTx->CR3 &= CR3_IREN_Reset;
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	8a9b      	ldrh	r3, [r3, #20]
    27ce:	b29b      	uxth	r3, r3
    27d0:	f023 0302 	bic.w	r3, r3, #2
    27d4:	b29a      	uxth	r2, r3
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	829a      	strh	r2, [r3, #20]
}
    27da:	bf00      	nop
    27dc:	370c      	adds	r7, #12
    27de:	46bd      	mov	sp, r7
    27e0:	bc80      	pop	{r7}
    27e2:	4770      	bx	lr

000027e4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    27e4:	b480      	push	{r7}
    27e6:	b085      	sub	sp, #20
    27e8:	af00      	add	r7, sp, #0
    27ea:	6078      	str	r0, [r7, #4]
    27ec:	460b      	mov	r3, r1
    27ee:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    27f0:	2300      	movs	r3, #0
    27f2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	881b      	ldrh	r3, [r3, #0]
    27f8:	b29a      	uxth	r2, r3
    27fa:	887b      	ldrh	r3, [r7, #2]
    27fc:	4013      	ands	r3, r2
    27fe:	b29b      	uxth	r3, r3
    2800:	2b00      	cmp	r3, #0
    2802:	d002      	beq.n	280a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    2804:	2301      	movs	r3, #1
    2806:	73fb      	strb	r3, [r7, #15]
    2808:	e001      	b.n	280e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    280a:	2300      	movs	r3, #0
    280c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    280e:	7bfb      	ldrb	r3, [r7, #15]
}
    2810:	4618      	mov	r0, r3
    2812:	3714      	adds	r7, #20
    2814:	46bd      	mov	sp, r7
    2816:	bc80      	pop	{r7}
    2818:	4770      	bx	lr

0000281a <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    281a:	b480      	push	{r7}
    281c:	b083      	sub	sp, #12
    281e:	af00      	add	r7, sp, #0
    2820:	6078      	str	r0, [r7, #4]
    2822:	460b      	mov	r3, r1
    2824:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    2826:	887b      	ldrh	r3, [r7, #2]
    2828:	43db      	mvns	r3, r3
    282a:	b29a      	uxth	r2, r3
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	801a      	strh	r2, [r3, #0]
}
    2830:	bf00      	nop
    2832:	370c      	adds	r7, #12
    2834:	46bd      	mov	sp, r7
    2836:	bc80      	pop	{r7}
    2838:	4770      	bx	lr

0000283a <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    283a:	b480      	push	{r7}
    283c:	b087      	sub	sp, #28
    283e:	af00      	add	r7, sp, #0
    2840:	6078      	str	r0, [r7, #4]
    2842:	460b      	mov	r3, r1
    2844:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2846:	2300      	movs	r3, #0
    2848:	60fb      	str	r3, [r7, #12]
    284a:	2300      	movs	r3, #0
    284c:	617b      	str	r3, [r7, #20]
    284e:	2300      	movs	r3, #0
    2850:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2852:	2300      	movs	r3, #0
    2854:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2856:	887b      	ldrh	r3, [r7, #2]
    2858:	b2db      	uxtb	r3, r3
    285a:	095b      	lsrs	r3, r3, #5
    285c:	b2db      	uxtb	r3, r3
    285e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2860:	887b      	ldrh	r3, [r7, #2]
    2862:	f003 031f 	and.w	r3, r3, #31
    2866:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2868:	2201      	movs	r2, #1
    286a:	697b      	ldr	r3, [r7, #20]
    286c:	fa02 f303 	lsl.w	r3, r2, r3
    2870:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    2872:	68bb      	ldr	r3, [r7, #8]
    2874:	2b01      	cmp	r3, #1
    2876:	d107      	bne.n	2888 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	899b      	ldrh	r3, [r3, #12]
    287c:	b29b      	uxth	r3, r3
    287e:	461a      	mov	r2, r3
    2880:	697b      	ldr	r3, [r7, #20]
    2882:	4013      	ands	r3, r2
    2884:	617b      	str	r3, [r7, #20]
    2886:	e011      	b.n	28ac <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2888:	68bb      	ldr	r3, [r7, #8]
    288a:	2b02      	cmp	r3, #2
    288c:	d107      	bne.n	289e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	8a1b      	ldrh	r3, [r3, #16]
    2892:	b29b      	uxth	r3, r3
    2894:	461a      	mov	r2, r3
    2896:	697b      	ldr	r3, [r7, #20]
    2898:	4013      	ands	r3, r2
    289a:	617b      	str	r3, [r7, #20]
    289c:	e006      	b.n	28ac <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    289e:	687b      	ldr	r3, [r7, #4]
    28a0:	8a9b      	ldrh	r3, [r3, #20]
    28a2:	b29b      	uxth	r3, r3
    28a4:	461a      	mov	r2, r3
    28a6:	697b      	ldr	r3, [r7, #20]
    28a8:	4013      	ands	r3, r2
    28aa:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    28ac:	887b      	ldrh	r3, [r7, #2]
    28ae:	0a1b      	lsrs	r3, r3, #8
    28b0:	b29b      	uxth	r3, r3
    28b2:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    28b4:	2201      	movs	r2, #1
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	fa02 f303 	lsl.w	r3, r2, r3
    28bc:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	881b      	ldrh	r3, [r3, #0]
    28c2:	b29b      	uxth	r3, r3
    28c4:	461a      	mov	r2, r3
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	4013      	ands	r3, r2
    28ca:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    28cc:	697b      	ldr	r3, [r7, #20]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d005      	beq.n	28de <USART_GetITStatus+0xa4>
    28d2:	68fb      	ldr	r3, [r7, #12]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d002      	beq.n	28de <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
    28d8:	2301      	movs	r3, #1
    28da:	74fb      	strb	r3, [r7, #19]
    28dc:	e001      	b.n	28e2 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
    28de:	2300      	movs	r3, #0
    28e0:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    28e2:	7cfb      	ldrb	r3, [r7, #19]
}
    28e4:	4618      	mov	r0, r3
    28e6:	371c      	adds	r7, #28
    28e8:	46bd      	mov	sp, r7
    28ea:	bc80      	pop	{r7}
    28ec:	4770      	bx	lr

000028ee <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    28ee:	b480      	push	{r7}
    28f0:	b085      	sub	sp, #20
    28f2:	af00      	add	r7, sp, #0
    28f4:	6078      	str	r0, [r7, #4]
    28f6:	460b      	mov	r3, r1
    28f8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    28fa:	2300      	movs	r3, #0
    28fc:	81fb      	strh	r3, [r7, #14]
    28fe:	2300      	movs	r3, #0
    2900:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    2902:	887b      	ldrh	r3, [r7, #2]
    2904:	0a1b      	lsrs	r3, r3, #8
    2906:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    2908:	89fb      	ldrh	r3, [r7, #14]
    290a:	2201      	movs	r2, #1
    290c:	fa02 f303 	lsl.w	r3, r2, r3
    2910:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    2912:	89bb      	ldrh	r3, [r7, #12]
    2914:	43db      	mvns	r3, r3
    2916:	b29a      	uxth	r2, r3
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	801a      	strh	r2, [r3, #0]
}
    291c:	bf00      	nop
    291e:	3714      	adds	r7, #20
    2920:	46bd      	mov	sp, r7
    2922:	bc80      	pop	{r7}
    2924:	4770      	bx	lr
    2926:	bf00      	nop

00002928 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2928:	b480      	push	{r7}
    292a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    292c:	4b09      	ldr	r3, [pc, #36]	; (2954 <EXTI_DeInit+0x2c>)
    292e:	2200      	movs	r2, #0
    2930:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2932:	4b08      	ldr	r3, [pc, #32]	; (2954 <EXTI_DeInit+0x2c>)
    2934:	2200      	movs	r2, #0
    2936:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    2938:	4b06      	ldr	r3, [pc, #24]	; (2954 <EXTI_DeInit+0x2c>)
    293a:	2200      	movs	r2, #0
    293c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    293e:	4b05      	ldr	r3, [pc, #20]	; (2954 <EXTI_DeInit+0x2c>)
    2940:	2200      	movs	r2, #0
    2942:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2944:	4b03      	ldr	r3, [pc, #12]	; (2954 <EXTI_DeInit+0x2c>)
    2946:	4a04      	ldr	r2, [pc, #16]	; (2958 <EXTI_DeInit+0x30>)
    2948:	615a      	str	r2, [r3, #20]
}
    294a:	bf00      	nop
    294c:	46bd      	mov	sp, r7
    294e:	bc80      	pop	{r7}
    2950:	4770      	bx	lr
    2952:	bf00      	nop
    2954:	40010400 	.word	0x40010400
    2958:	000fffff 	.word	0x000fffff

0000295c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    295c:	b480      	push	{r7}
    295e:	b085      	sub	sp, #20
    2960:	af00      	add	r7, sp, #0
    2962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    2964:	2300      	movs	r3, #0
    2966:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2968:	4b34      	ldr	r3, [pc, #208]	; (2a3c <EXTI_Init+0xe0>)
    296a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	799b      	ldrb	r3, [r3, #6]
    2970:	2b00      	cmp	r3, #0
    2972:	d04f      	beq.n	2a14 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2974:	4b31      	ldr	r3, [pc, #196]	; (2a3c <EXTI_Init+0xe0>)
    2976:	681a      	ldr	r2, [r3, #0]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	43db      	mvns	r3, r3
    297e:	492f      	ldr	r1, [pc, #188]	; (2a3c <EXTI_Init+0xe0>)
    2980:	4013      	ands	r3, r2
    2982:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2984:	4b2d      	ldr	r3, [pc, #180]	; (2a3c <EXTI_Init+0xe0>)
    2986:	685a      	ldr	r2, [r3, #4]
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	43db      	mvns	r3, r3
    298e:	492b      	ldr	r1, [pc, #172]	; (2a3c <EXTI_Init+0xe0>)
    2990:	4013      	ands	r3, r2
    2992:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	791b      	ldrb	r3, [r3, #4]
    2998:	461a      	mov	r2, r3
    299a:	68fb      	ldr	r3, [r7, #12]
    299c:	4413      	add	r3, r2
    299e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    29a0:	68fb      	ldr	r3, [r7, #12]
    29a2:	6819      	ldr	r1, [r3, #0]
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	68fb      	ldr	r3, [r7, #12]
    29aa:	430a      	orrs	r2, r1
    29ac:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    29ae:	4b23      	ldr	r3, [pc, #140]	; (2a3c <EXTI_Init+0xe0>)
    29b0:	689a      	ldr	r2, [r3, #8]
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	43db      	mvns	r3, r3
    29b8:	4920      	ldr	r1, [pc, #128]	; (2a3c <EXTI_Init+0xe0>)
    29ba:	4013      	ands	r3, r2
    29bc:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    29be:	4b1f      	ldr	r3, [pc, #124]	; (2a3c <EXTI_Init+0xe0>)
    29c0:	68da      	ldr	r2, [r3, #12]
    29c2:	687b      	ldr	r3, [r7, #4]
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	43db      	mvns	r3, r3
    29c8:	491c      	ldr	r1, [pc, #112]	; (2a3c <EXTI_Init+0xe0>)
    29ca:	4013      	ands	r3, r2
    29cc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	795b      	ldrb	r3, [r3, #5]
    29d2:	2b10      	cmp	r3, #16
    29d4:	d10e      	bne.n	29f4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    29d6:	4b19      	ldr	r3, [pc, #100]	; (2a3c <EXTI_Init+0xe0>)
    29d8:	689a      	ldr	r2, [r3, #8]
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	4917      	ldr	r1, [pc, #92]	; (2a3c <EXTI_Init+0xe0>)
    29e0:	4313      	orrs	r3, r2
    29e2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    29e4:	4b15      	ldr	r3, [pc, #84]	; (2a3c <EXTI_Init+0xe0>)
    29e6:	68da      	ldr	r2, [r3, #12]
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	681b      	ldr	r3, [r3, #0]
    29ec:	4913      	ldr	r1, [pc, #76]	; (2a3c <EXTI_Init+0xe0>)
    29ee:	4313      	orrs	r3, r2
    29f0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
    29f2:	e01d      	b.n	2a30 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
    29f4:	4b11      	ldr	r3, [pc, #68]	; (2a3c <EXTI_Init+0xe0>)
    29f6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	795b      	ldrb	r3, [r3, #5]
    29fc:	461a      	mov	r2, r3
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	4413      	add	r3, r2
    2a02:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	6819      	ldr	r1, [r3, #0]
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	681a      	ldr	r2, [r3, #0]
    2a0c:	68fb      	ldr	r3, [r7, #12]
    2a0e:	430a      	orrs	r2, r1
    2a10:	601a      	str	r2, [r3, #0]
}
    2a12:	e00d      	b.n	2a30 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	791b      	ldrb	r3, [r3, #4]
    2a18:	461a      	mov	r2, r3
    2a1a:	68fb      	ldr	r3, [r7, #12]
    2a1c:	4413      	add	r3, r2
    2a1e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2a20:	68fb      	ldr	r3, [r7, #12]
    2a22:	6819      	ldr	r1, [r3, #0]
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	43da      	mvns	r2, r3
    2a2a:	68fb      	ldr	r3, [r7, #12]
    2a2c:	400a      	ands	r2, r1
    2a2e:	601a      	str	r2, [r3, #0]
}
    2a30:	bf00      	nop
    2a32:	3714      	adds	r7, #20
    2a34:	46bd      	mov	sp, r7
    2a36:	bc80      	pop	{r7}
    2a38:	4770      	bx	lr
    2a3a:	bf00      	nop
    2a3c:	40010400 	.word	0x40010400

00002a40 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2a40:	b480      	push	{r7}
    2a42:	b083      	sub	sp, #12
    2a44:	af00      	add	r7, sp, #0
    2a46:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	2200      	movs	r2, #0
    2a4c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	2200      	movs	r2, #0
    2a52:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	220c      	movs	r2, #12
    2a58:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	2200      	movs	r2, #0
    2a5e:	719a      	strb	r2, [r3, #6]
}
    2a60:	bf00      	nop
    2a62:	370c      	adds	r7, #12
    2a64:	46bd      	mov	sp, r7
    2a66:	bc80      	pop	{r7}
    2a68:	4770      	bx	lr

00002a6a <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2a6a:	b480      	push	{r7}
    2a6c:	b083      	sub	sp, #12
    2a6e:	af00      	add	r7, sp, #0
    2a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    2a72:	4b05      	ldr	r3, [pc, #20]	; (2a88 <EXTI_GenerateSWInterrupt+0x1e>)
    2a74:	691a      	ldr	r2, [r3, #16]
    2a76:	4904      	ldr	r1, [pc, #16]	; (2a88 <EXTI_GenerateSWInterrupt+0x1e>)
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	4313      	orrs	r3, r2
    2a7c:	610b      	str	r3, [r1, #16]
}
    2a7e:	bf00      	nop
    2a80:	370c      	adds	r7, #12
    2a82:	46bd      	mov	sp, r7
    2a84:	bc80      	pop	{r7}
    2a86:	4770      	bx	lr
    2a88:	40010400 	.word	0x40010400

00002a8c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2a8c:	b480      	push	{r7}
    2a8e:	b085      	sub	sp, #20
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2a94:	2300      	movs	r3, #0
    2a96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <EXTI_GetFlagStatus+0x30>)
    2a9a:	695a      	ldr	r2, [r3, #20]
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	4013      	ands	r3, r2
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d002      	beq.n	2aaa <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
    2aa4:	2301      	movs	r3, #1
    2aa6:	73fb      	strb	r3, [r7, #15]
    2aa8:	e001      	b.n	2aae <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
    2aaa:	2300      	movs	r3, #0
    2aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2aae:	7bfb      	ldrb	r3, [r7, #15]
}
    2ab0:	4618      	mov	r0, r3
    2ab2:	3714      	adds	r7, #20
    2ab4:	46bd      	mov	sp, r7
    2ab6:	bc80      	pop	{r7}
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	40010400 	.word	0x40010400

00002ac0 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2ac0:	b480      	push	{r7}
    2ac2:	b083      	sub	sp, #12
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2ac8:	4a03      	ldr	r2, [pc, #12]	; (2ad8 <EXTI_ClearFlag+0x18>)
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	6153      	str	r3, [r2, #20]
}
    2ace:	bf00      	nop
    2ad0:	370c      	adds	r7, #12
    2ad2:	46bd      	mov	sp, r7
    2ad4:	bc80      	pop	{r7}
    2ad6:	4770      	bx	lr
    2ad8:	40010400 	.word	0x40010400

00002adc <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2adc:	b480      	push	{r7}
    2ade:	b085      	sub	sp, #20
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2ae4:	2300      	movs	r3, #0
    2ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2ae8:	2300      	movs	r3, #0
    2aea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2aec:	4b0c      	ldr	r3, [pc, #48]	; (2b20 <EXTI_GetITStatus+0x44>)
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	687a      	ldr	r2, [r7, #4]
    2af2:	4013      	ands	r3, r2
    2af4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    2af6:	4b0a      	ldr	r3, [pc, #40]	; (2b20 <EXTI_GetITStatus+0x44>)
    2af8:	695a      	ldr	r2, [r3, #20]
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	4013      	ands	r3, r2
    2afe:	2b00      	cmp	r3, #0
    2b00:	d005      	beq.n	2b0e <EXTI_GetITStatus+0x32>
    2b02:	68bb      	ldr	r3, [r7, #8]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d002      	beq.n	2b0e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
    2b08:	2301      	movs	r3, #1
    2b0a:	73fb      	strb	r3, [r7, #15]
    2b0c:	e001      	b.n	2b12 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
    2b0e:	2300      	movs	r3, #0
    2b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2b12:	7bfb      	ldrb	r3, [r7, #15]
}
    2b14:	4618      	mov	r0, r3
    2b16:	3714      	adds	r7, #20
    2b18:	46bd      	mov	sp, r7
    2b1a:	bc80      	pop	{r7}
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop
    2b20:	40010400 	.word	0x40010400

00002b24 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2b24:	b480      	push	{r7}
    2b26:	b083      	sub	sp, #12
    2b28:	af00      	add	r7, sp, #0
    2b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2b2c:	4a03      	ldr	r2, [pc, #12]	; (2b3c <EXTI_ClearITPendingBit+0x18>)
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	6153      	str	r3, [r2, #20]
}
    2b32:	bf00      	nop
    2b34:	370c      	adds	r7, #12
    2b36:	46bd      	mov	sp, r7
    2b38:	bc80      	pop	{r7}
    2b3a:	4770      	bx	lr
    2b3c:	40010400 	.word	0x40010400

00002b40 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	4a17      	ldr	r2, [pc, #92]	; (2ba8 <ADC_DeInit+0x68>)
    2b4c:	4293      	cmp	r3, r2
    2b4e:	d10a      	bne.n	2b66 <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    2b50:	2101      	movs	r1, #1
    2b52:	f44f 7000 	mov.w	r0, #512	; 0x200
    2b56:	f7fe feaf 	bl	18b8 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    2b5a:	2100      	movs	r1, #0
    2b5c:	f44f 7000 	mov.w	r0, #512	; 0x200
    2b60:	f7fe feaa 	bl	18b8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
    2b64:	e01c      	b.n	2ba0 <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	4a10      	ldr	r2, [pc, #64]	; (2bac <ADC_DeInit+0x6c>)
    2b6a:	4293      	cmp	r3, r2
    2b6c:	d10a      	bne.n	2b84 <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    2b6e:	2101      	movs	r1, #1
    2b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2b74:	f7fe fea0 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    2b78:	2100      	movs	r1, #0
    2b7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2b7e:	f7fe fe9b 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    2b82:	e00d      	b.n	2ba0 <ADC_DeInit+0x60>
    if (ADCx == ADC3)
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	4a0a      	ldr	r2, [pc, #40]	; (2bb0 <ADC_DeInit+0x70>)
    2b88:	4293      	cmp	r3, r2
    2b8a:	d109      	bne.n	2ba0 <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    2b8c:	2101      	movs	r1, #1
    2b8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2b92:	f7fe fe91 	bl	18b8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    2b96:	2100      	movs	r1, #0
    2b98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2b9c:	f7fe fe8c 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    2ba0:	bf00      	nop
    2ba2:	3708      	adds	r7, #8
    2ba4:	46bd      	mov	sp, r7
    2ba6:	bd80      	pop	{r7, pc}
    2ba8:	40012400 	.word	0x40012400
    2bac:	40012800 	.word	0x40012800
    2bb0:	40013c00 	.word	0x40013c00

00002bb4 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    2bb4:	b480      	push	{r7}
    2bb6:	b085      	sub	sp, #20
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
    2bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    2bbe:	2300      	movs	r3, #0
    2bc0:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    2bc2:	2300      	movs	r3, #0
    2bc4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	685b      	ldr	r3, [r3, #4]
    2bca:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    2bcc:	68fb      	ldr	r3, [r7, #12]
    2bce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2bd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2bd6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    2bd8:	683b      	ldr	r3, [r7, #0]
    2bda:	681a      	ldr	r2, [r3, #0]
    2bdc:	683b      	ldr	r3, [r7, #0]
    2bde:	791b      	ldrb	r3, [r3, #4]
    2be0:	021b      	lsls	r3, r3, #8
    2be2:	4313      	orrs	r3, r2
    2be4:	68fa      	ldr	r2, [r7, #12]
    2be6:	4313      	orrs	r3, r2
    2be8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	68fa      	ldr	r2, [r7, #12]
    2bee:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	689b      	ldr	r3, [r3, #8]
    2bf4:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    2bf6:	68fa      	ldr	r2, [r7, #12]
    2bf8:	4b16      	ldr	r3, [pc, #88]	; (2c54 <ADC_Init+0xa0>)
    2bfa:	4013      	ands	r3, r2
    2bfc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	68da      	ldr	r2, [r3, #12]
    2c02:	683b      	ldr	r3, [r7, #0]
    2c04:	689b      	ldr	r3, [r3, #8]
    2c06:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    2c08:	683b      	ldr	r3, [r7, #0]
    2c0a:	795b      	ldrb	r3, [r3, #5]
    2c0c:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2c0e:	4313      	orrs	r3, r2
    2c10:	68fa      	ldr	r2, [r7, #12]
    2c12:	4313      	orrs	r3, r2
    2c14:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	68fa      	ldr	r2, [r7, #12]
    2c1a:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c20:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2c22:	68fb      	ldr	r3, [r7, #12]
    2c24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2c28:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	7c1b      	ldrb	r3, [r3, #16]
    2c2e:	3b01      	subs	r3, #1
    2c30:	b2da      	uxtb	r2, r3
    2c32:	7afb      	ldrb	r3, [r7, #11]
    2c34:	4313      	orrs	r3, r2
    2c36:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    2c38:	7afb      	ldrb	r3, [r7, #11]
    2c3a:	051b      	lsls	r3, r3, #20
    2c3c:	68fa      	ldr	r2, [r7, #12]
    2c3e:	4313      	orrs	r3, r2
    2c40:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	68fa      	ldr	r2, [r7, #12]
    2c46:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2c48:	bf00      	nop
    2c4a:	3714      	adds	r7, #20
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bc80      	pop	{r7}
    2c50:	4770      	bx	lr
    2c52:	bf00      	nop
    2c54:	fff1f7fd 	.word	0xfff1f7fd

00002c58 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    2c58:	b480      	push	{r7}
    2c5a:	b083      	sub	sp, #12
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	2200      	movs	r2, #0
    2c64:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	2200      	movs	r2, #0
    2c6a:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	2200      	movs	r2, #0
    2c70:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	2200      	movs	r2, #0
    2c76:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	2200      	movs	r2, #0
    2c7c:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	2201      	movs	r2, #1
    2c82:	741a      	strb	r2, [r3, #16]
}
    2c84:	bf00      	nop
    2c86:	370c      	adds	r7, #12
    2c88:	46bd      	mov	sp, r7
    2c8a:	bc80      	pop	{r7}
    2c8c:	4770      	bx	lr

00002c8e <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2c8e:	b480      	push	{r7}
    2c90:	b083      	sub	sp, #12
    2c92:	af00      	add	r7, sp, #0
    2c94:	6078      	str	r0, [r7, #4]
    2c96:	460b      	mov	r3, r1
    2c98:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2c9a:	78fb      	ldrb	r3, [r7, #3]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d006      	beq.n	2cae <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	689b      	ldr	r3, [r3, #8]
    2ca4:	f043 0201 	orr.w	r2, r3, #1
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
    2cac:	e005      	b.n	2cba <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	689b      	ldr	r3, [r3, #8]
    2cb2:	f023 0201 	bic.w	r2, r3, #1
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	609a      	str	r2, [r3, #8]
}
    2cba:	bf00      	nop
    2cbc:	370c      	adds	r7, #12
    2cbe:	46bd      	mov	sp, r7
    2cc0:	bc80      	pop	{r7}
    2cc2:	4770      	bx	lr

00002cc4 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2cc4:	b480      	push	{r7}
    2cc6:	b083      	sub	sp, #12
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    2ccc:	460b      	mov	r3, r1
    2cce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2cd0:	78fb      	ldrb	r3, [r7, #3]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d006      	beq.n	2ce4 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	689b      	ldr	r3, [r3, #8]
    2cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
    2ce2:	e005      	b.n	2cf0 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	689b      	ldr	r3, [r3, #8]
    2ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	609a      	str	r2, [r3, #8]
}
    2cf0:	bf00      	nop
    2cf2:	370c      	adds	r7, #12
    2cf4:	46bd      	mov	sp, r7
    2cf6:	bc80      	pop	{r7}
    2cf8:	4770      	bx	lr

00002cfa <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2cfa:	b480      	push	{r7}
    2cfc:	b085      	sub	sp, #20
    2cfe:	af00      	add	r7, sp, #0
    2d00:	6078      	str	r0, [r7, #4]
    2d02:	460b      	mov	r3, r1
    2d04:	807b      	strh	r3, [r7, #2]
    2d06:	4613      	mov	r3, r2
    2d08:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2d0a:	2300      	movs	r3, #0
    2d0c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2d0e:	887b      	ldrh	r3, [r7, #2]
    2d10:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    2d12:	787b      	ldrb	r3, [r7, #1]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d006      	beq.n	2d26 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	685a      	ldr	r2, [r3, #4]
    2d1c:	7bfb      	ldrb	r3, [r7, #15]
    2d1e:	431a      	orrs	r2, r3
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
    2d24:	e006      	b.n	2d34 <ADC_ITConfig+0x3a>
    ADCx->CR1 &= (~(uint32_t)itmask);
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	685a      	ldr	r2, [r3, #4]
    2d2a:	7bfb      	ldrb	r3, [r7, #15]
    2d2c:	43db      	mvns	r3, r3
    2d2e:	401a      	ands	r2, r3
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	605a      	str	r2, [r3, #4]
}
    2d34:	bf00      	nop
    2d36:	3714      	adds	r7, #20
    2d38:	46bd      	mov	sp, r7
    2d3a:	bc80      	pop	{r7}
    2d3c:	4770      	bx	lr

00002d3e <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    2d3e:	b480      	push	{r7}
    2d40:	b083      	sub	sp, #12
    2d42:	af00      	add	r7, sp, #0
    2d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	689b      	ldr	r3, [r3, #8]
    2d4a:	f043 0208 	orr.w	r2, r3, #8
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	609a      	str	r2, [r3, #8]
}
    2d52:	bf00      	nop
    2d54:	370c      	adds	r7, #12
    2d56:	46bd      	mov	sp, r7
    2d58:	bc80      	pop	{r7}
    2d5a:	4770      	bx	lr

00002d5c <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2d5c:	b480      	push	{r7}
    2d5e:	b085      	sub	sp, #20
    2d60:	af00      	add	r7, sp, #0
    2d62:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2d64:	2300      	movs	r3, #0
    2d66:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	689b      	ldr	r3, [r3, #8]
    2d6c:	f003 0308 	and.w	r3, r3, #8
    2d70:	2b00      	cmp	r3, #0
    2d72:	d002      	beq.n	2d7a <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    2d74:	2301      	movs	r3, #1
    2d76:	73fb      	strb	r3, [r7, #15]
    2d78:	e001      	b.n	2d7e <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    2d7a:	2300      	movs	r3, #0
    2d7c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    2d7e:	7bfb      	ldrb	r3, [r7, #15]
}
    2d80:	4618      	mov	r0, r3
    2d82:	3714      	adds	r7, #20
    2d84:	46bd      	mov	sp, r7
    2d86:	bc80      	pop	{r7}
    2d88:	4770      	bx	lr

00002d8a <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    2d8a:	b480      	push	{r7}
    2d8c:	b083      	sub	sp, #12
    2d8e:	af00      	add	r7, sp, #0
    2d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	689b      	ldr	r3, [r3, #8]
    2d96:	f043 0204 	orr.w	r2, r3, #4
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	609a      	str	r2, [r3, #8]
}
    2d9e:	bf00      	nop
    2da0:	370c      	adds	r7, #12
    2da2:	46bd      	mov	sp, r7
    2da4:	bc80      	pop	{r7}
    2da6:	4770      	bx	lr

00002da8 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    2da8:	b480      	push	{r7}
    2daa:	b085      	sub	sp, #20
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2db0:	2300      	movs	r3, #0
    2db2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	689b      	ldr	r3, [r3, #8]
    2db8:	f003 0304 	and.w	r3, r3, #4
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d002      	beq.n	2dc6 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    2dc0:	2301      	movs	r3, #1
    2dc2:	73fb      	strb	r3, [r7, #15]
    2dc4:	e001      	b.n	2dca <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    2dc6:	2300      	movs	r3, #0
    2dc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    2dca:	7bfb      	ldrb	r3, [r7, #15]
}
    2dcc:	4618      	mov	r0, r3
    2dce:	3714      	adds	r7, #20
    2dd0:	46bd      	mov	sp, r7
    2dd2:	bc80      	pop	{r7}
    2dd4:	4770      	bx	lr

00002dd6 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2dd6:	b480      	push	{r7}
    2dd8:	b083      	sub	sp, #12
    2dda:	af00      	add	r7, sp, #0
    2ddc:	6078      	str	r0, [r7, #4]
    2dde:	460b      	mov	r3, r1
    2de0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2de2:	78fb      	ldrb	r3, [r7, #3]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d006      	beq.n	2df6 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	689b      	ldr	r3, [r3, #8]
    2dec:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
    2df4:	e005      	b.n	2e02 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	689b      	ldr	r3, [r3, #8]
    2dfa:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	609a      	str	r2, [r3, #8]
}
    2e02:	bf00      	nop
    2e04:	370c      	adds	r7, #12
    2e06:	46bd      	mov	sp, r7
    2e08:	bc80      	pop	{r7}
    2e0a:	4770      	bx	lr

00002e0c <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    2e0c:	b480      	push	{r7}
    2e0e:	b085      	sub	sp, #20
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2e14:	2300      	movs	r3, #0
    2e16:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	689b      	ldr	r3, [r3, #8]
    2e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2e20:	2b00      	cmp	r3, #0
    2e22:	d002      	beq.n	2e2a <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    2e24:	2301      	movs	r3, #1
    2e26:	73fb      	strb	r3, [r7, #15]
    2e28:	e001      	b.n	2e2e <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    2e2a:	2300      	movs	r3, #0
    2e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    2e2e:	7bfb      	ldrb	r3, [r7, #15]
}
    2e30:	4618      	mov	r0, r3
    2e32:	3714      	adds	r7, #20
    2e34:	46bd      	mov	sp, r7
    2e36:	bc80      	pop	{r7}
    2e38:	4770      	bx	lr

00002e3a <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    2e3a:	b480      	push	{r7}
    2e3c:	b085      	sub	sp, #20
    2e3e:	af00      	add	r7, sp, #0
    2e40:	6078      	str	r0, [r7, #4]
    2e42:	460b      	mov	r3, r1
    2e44:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    2e46:	2300      	movs	r3, #0
    2e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    2e4a:	2300      	movs	r3, #0
    2e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	685b      	ldr	r3, [r3, #4]
    2e52:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    2e54:	68fb      	ldr	r3, [r7, #12]
    2e56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    2e5a:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    2e5c:	78fb      	ldrb	r3, [r7, #3]
    2e5e:	3b01      	subs	r3, #1
    2e60:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    2e62:	68bb      	ldr	r3, [r7, #8]
    2e64:	035b      	lsls	r3, r3, #13
    2e66:	68fa      	ldr	r2, [r7, #12]
    2e68:	4313      	orrs	r3, r2
    2e6a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	68fa      	ldr	r2, [r7, #12]
    2e70:	605a      	str	r2, [r3, #4]
}
    2e72:	bf00      	nop
    2e74:	3714      	adds	r7, #20
    2e76:	46bd      	mov	sp, r7
    2e78:	bc80      	pop	{r7}
    2e7a:	4770      	bx	lr

00002e7c <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2e7c:	b480      	push	{r7}
    2e7e:	b083      	sub	sp, #12
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    2e84:	460b      	mov	r3, r1
    2e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e88:	78fb      	ldrb	r3, [r7, #3]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d006      	beq.n	2e9c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	685b      	ldr	r3, [r3, #4]
    2e92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
  }
}
    2e9a:	e005      	b.n	2ea8 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_DISCEN_Reset;
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	605a      	str	r2, [r3, #4]
}
    2ea8:	bf00      	nop
    2eaa:	370c      	adds	r7, #12
    2eac:	46bd      	mov	sp, r7
    2eae:	bc80      	pop	{r7}
    2eb0:	4770      	bx	lr

00002eb2 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    2eb2:	b480      	push	{r7}
    2eb4:	b085      	sub	sp, #20
    2eb6:	af00      	add	r7, sp, #0
    2eb8:	6078      	str	r0, [r7, #4]
    2eba:	4608      	mov	r0, r1
    2ebc:	4611      	mov	r1, r2
    2ebe:	461a      	mov	r2, r3
    2ec0:	4603      	mov	r3, r0
    2ec2:	70fb      	strb	r3, [r7, #3]
    2ec4:	460b      	mov	r3, r1
    2ec6:	70bb      	strb	r3, [r7, #2]
    2ec8:	4613      	mov	r3, r2
    2eca:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    2ecc:	2300      	movs	r3, #0
    2ece:	60fb      	str	r3, [r7, #12]
    2ed0:	2300      	movs	r3, #0
    2ed2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    2ed4:	78fb      	ldrb	r3, [r7, #3]
    2ed6:	2b09      	cmp	r3, #9
    2ed8:	d923      	bls.n	2f22 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	68db      	ldr	r3, [r3, #12]
    2ede:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    2ee0:	78fb      	ldrb	r3, [r7, #3]
    2ee2:	f1a3 020a 	sub.w	r2, r3, #10
    2ee6:	4613      	mov	r3, r2
    2ee8:	005b      	lsls	r3, r3, #1
    2eea:	4413      	add	r3, r2
    2eec:	2207      	movs	r2, #7
    2eee:	fa02 f303 	lsl.w	r3, r2, r3
    2ef2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2ef4:	68bb      	ldr	r3, [r7, #8]
    2ef6:	43db      	mvns	r3, r3
    2ef8:	68fa      	ldr	r2, [r7, #12]
    2efa:	4013      	ands	r3, r2
    2efc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    2efe:	7879      	ldrb	r1, [r7, #1]
    2f00:	78fb      	ldrb	r3, [r7, #3]
    2f02:	f1a3 020a 	sub.w	r2, r3, #10
    2f06:	4613      	mov	r3, r2
    2f08:	005b      	lsls	r3, r3, #1
    2f0a:	4413      	add	r3, r2
    2f0c:	fa01 f303 	lsl.w	r3, r1, r3
    2f10:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2f12:	68fa      	ldr	r2, [r7, #12]
    2f14:	68bb      	ldr	r3, [r7, #8]
    2f16:	4313      	orrs	r3, r2
    2f18:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	68fa      	ldr	r2, [r7, #12]
    2f1e:	60da      	str	r2, [r3, #12]
    2f20:	e01e      	b.n	2f60 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	691b      	ldr	r3, [r3, #16]
    2f26:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    2f28:	78fa      	ldrb	r2, [r7, #3]
    2f2a:	4613      	mov	r3, r2
    2f2c:	005b      	lsls	r3, r3, #1
    2f2e:	4413      	add	r3, r2
    2f30:	2207      	movs	r2, #7
    2f32:	fa02 f303 	lsl.w	r3, r2, r3
    2f36:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    2f38:	68bb      	ldr	r3, [r7, #8]
    2f3a:	43db      	mvns	r3, r3
    2f3c:	68fa      	ldr	r2, [r7, #12]
    2f3e:	4013      	ands	r3, r2
    2f40:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    2f42:	7879      	ldrb	r1, [r7, #1]
    2f44:	78fa      	ldrb	r2, [r7, #3]
    2f46:	4613      	mov	r3, r2
    2f48:	005b      	lsls	r3, r3, #1
    2f4a:	4413      	add	r3, r2
    2f4c:	fa01 f303 	lsl.w	r3, r1, r3
    2f50:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    2f52:	68fa      	ldr	r2, [r7, #12]
    2f54:	68bb      	ldr	r3, [r7, #8]
    2f56:	4313      	orrs	r3, r2
    2f58:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	68fa      	ldr	r2, [r7, #12]
    2f5e:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    2f60:	78bb      	ldrb	r3, [r7, #2]
    2f62:	2b06      	cmp	r3, #6
    2f64:	d821      	bhi.n	2faa <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2f6a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    2f6c:	78bb      	ldrb	r3, [r7, #2]
    2f6e:	1e5a      	subs	r2, r3, #1
    2f70:	4613      	mov	r3, r2
    2f72:	009b      	lsls	r3, r3, #2
    2f74:	4413      	add	r3, r2
    2f76:	221f      	movs	r2, #31
    2f78:	fa02 f303 	lsl.w	r3, r2, r3
    2f7c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    2f7e:	68bb      	ldr	r3, [r7, #8]
    2f80:	43db      	mvns	r3, r3
    2f82:	68fa      	ldr	r2, [r7, #12]
    2f84:	4013      	ands	r3, r2
    2f86:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    2f88:	78f9      	ldrb	r1, [r7, #3]
    2f8a:	78bb      	ldrb	r3, [r7, #2]
    2f8c:	1e5a      	subs	r2, r3, #1
    2f8e:	4613      	mov	r3, r2
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	fa01 f303 	lsl.w	r3, r1, r3
    2f98:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    2f9a:	68fa      	ldr	r2, [r7, #12]
    2f9c:	68bb      	ldr	r3, [r7, #8]
    2f9e:	4313      	orrs	r3, r2
    2fa0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	68fa      	ldr	r2, [r7, #12]
    2fa6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
    2fa8:	e047      	b.n	303a <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
    2faa:	78bb      	ldrb	r3, [r7, #2]
    2fac:	2b0c      	cmp	r3, #12
    2fae:	d821      	bhi.n	2ff4 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2fb4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    2fb6:	78bb      	ldrb	r3, [r7, #2]
    2fb8:	1fda      	subs	r2, r3, #7
    2fba:	4613      	mov	r3, r2
    2fbc:	009b      	lsls	r3, r3, #2
    2fbe:	4413      	add	r3, r2
    2fc0:	221f      	movs	r2, #31
    2fc2:	fa02 f303 	lsl.w	r3, r2, r3
    2fc6:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    2fc8:	68bb      	ldr	r3, [r7, #8]
    2fca:	43db      	mvns	r3, r3
    2fcc:	68fa      	ldr	r2, [r7, #12]
    2fce:	4013      	ands	r3, r2
    2fd0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    2fd2:	78f9      	ldrb	r1, [r7, #3]
    2fd4:	78bb      	ldrb	r3, [r7, #2]
    2fd6:	1fda      	subs	r2, r3, #7
    2fd8:	4613      	mov	r3, r2
    2fda:	009b      	lsls	r3, r3, #2
    2fdc:	4413      	add	r3, r2
    2fde:	fa01 f303 	lsl.w	r3, r1, r3
    2fe2:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    2fe4:	68fa      	ldr	r2, [r7, #12]
    2fe6:	68bb      	ldr	r3, [r7, #8]
    2fe8:	4313      	orrs	r3, r2
    2fea:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	68fa      	ldr	r2, [r7, #12]
    2ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
    2ff2:	e022      	b.n	303a <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ff8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    2ffa:	78bb      	ldrb	r3, [r7, #2]
    2ffc:	f1a3 020d 	sub.w	r2, r3, #13
    3000:	4613      	mov	r3, r2
    3002:	009b      	lsls	r3, r3, #2
    3004:	4413      	add	r3, r2
    3006:	221f      	movs	r2, #31
    3008:	fa02 f303 	lsl.w	r3, r2, r3
    300c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    300e:	68bb      	ldr	r3, [r7, #8]
    3010:	43db      	mvns	r3, r3
    3012:	68fa      	ldr	r2, [r7, #12]
    3014:	4013      	ands	r3, r2
    3016:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    3018:	78f9      	ldrb	r1, [r7, #3]
    301a:	78bb      	ldrb	r3, [r7, #2]
    301c:	f1a3 020d 	sub.w	r2, r3, #13
    3020:	4613      	mov	r3, r2
    3022:	009b      	lsls	r3, r3, #2
    3024:	4413      	add	r3, r2
    3026:	fa01 f303 	lsl.w	r3, r1, r3
    302a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    302c:	68fa      	ldr	r2, [r7, #12]
    302e:	68bb      	ldr	r3, [r7, #8]
    3030:	4313      	orrs	r3, r2
    3032:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	68fa      	ldr	r2, [r7, #12]
    3038:	62da      	str	r2, [r3, #44]	; 0x2c
}
    303a:	bf00      	nop
    303c:	3714      	adds	r7, #20
    303e:	46bd      	mov	sp, r7
    3040:	bc80      	pop	{r7}
    3042:	4770      	bx	lr

00003044 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3044:	b480      	push	{r7}
    3046:	b083      	sub	sp, #12
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
    304c:	460b      	mov	r3, r1
    304e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3050:	78fb      	ldrb	r3, [r7, #3]
    3052:	2b00      	cmp	r3, #0
    3054:	d006      	beq.n	3064 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	689b      	ldr	r3, [r3, #8]
    305a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
  }
}
    3062:	e005      	b.n	3070 <ADC_ExternalTrigConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    3064:	687b      	ldr	r3, [r7, #4]
    3066:	689b      	ldr	r3, [r3, #8]
    3068:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	609a      	str	r2, [r3, #8]
}
    3070:	bf00      	nop
    3072:	370c      	adds	r7, #12
    3074:	46bd      	mov	sp, r7
    3076:	bc80      	pop	{r7}
    3078:	4770      	bx	lr

0000307a <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    307a:	b480      	push	{r7}
    307c:	b083      	sub	sp, #12
    307e:	af00      	add	r7, sp, #0
    3080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3086:	b29b      	uxth	r3, r3
}
    3088:	4618      	mov	r0, r3
    308a:	370c      	adds	r7, #12
    308c:	46bd      	mov	sp, r7
    308e:	bc80      	pop	{r7}
    3090:	4770      	bx	lr

00003092 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    3092:	b480      	push	{r7}
    3094:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    3096:	4b03      	ldr	r3, [pc, #12]	; (30a4 <ADC_GetDualModeConversionValue+0x12>)
    3098:	681b      	ldr	r3, [r3, #0]
}
    309a:	4618      	mov	r0, r3
    309c:	46bd      	mov	sp, r7
    309e:	bc80      	pop	{r7}
    30a0:	4770      	bx	lr
    30a2:	bf00      	nop
    30a4:	4001244c 	.word	0x4001244c

000030a8 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    30a8:	b480      	push	{r7}
    30aa:	b083      	sub	sp, #12
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
    30b0:	460b      	mov	r3, r1
    30b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    30b4:	78fb      	ldrb	r3, [r7, #3]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d006      	beq.n	30c8 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	685b      	ldr	r3, [r3, #4]
    30be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
  }
}
    30c6:	e005      	b.n	30d4 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= CR1_JAUTO_Reset;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	685b      	ldr	r3, [r3, #4]
    30cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	605a      	str	r2, [r3, #4]
}
    30d4:	bf00      	nop
    30d6:	370c      	adds	r7, #12
    30d8:	46bd      	mov	sp, r7
    30da:	bc80      	pop	{r7}
    30dc:	4770      	bx	lr

000030de <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    30de:	b480      	push	{r7}
    30e0:	b083      	sub	sp, #12
    30e2:	af00      	add	r7, sp, #0
    30e4:	6078      	str	r0, [r7, #4]
    30e6:	460b      	mov	r3, r1
    30e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    30ea:	78fb      	ldrb	r3, [r7, #3]
    30ec:	2b00      	cmp	r3, #0
    30ee:	d006      	beq.n	30fe <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	685b      	ldr	r3, [r3, #4]
    30f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
  }
}
    30fc:	e005      	b.n	310a <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	685b      	ldr	r3, [r3, #4]
    3102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	605a      	str	r2, [r3, #4]
}
    310a:	bf00      	nop
    310c:	370c      	adds	r7, #12
    310e:	46bd      	mov	sp, r7
    3110:	bc80      	pop	{r7}
    3112:	4770      	bx	lr

00003114 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    3114:	b480      	push	{r7}
    3116:	b085      	sub	sp, #20
    3118:	af00      	add	r7, sp, #0
    311a:	6078      	str	r0, [r7, #4]
    311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    311e:	2300      	movs	r3, #0
    3120:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	689b      	ldr	r3, [r3, #8]
    3126:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    312e:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    3130:	68fa      	ldr	r2, [r7, #12]
    3132:	683b      	ldr	r3, [r7, #0]
    3134:	4313      	orrs	r3, r2
    3136:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	68fa      	ldr	r2, [r7, #12]
    313c:	609a      	str	r2, [r3, #8]
}
    313e:	bf00      	nop
    3140:	3714      	adds	r7, #20
    3142:	46bd      	mov	sp, r7
    3144:	bc80      	pop	{r7}
    3146:	4770      	bx	lr

00003148 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3148:	b480      	push	{r7}
    314a:	b083      	sub	sp, #12
    314c:	af00      	add	r7, sp, #0
    314e:	6078      	str	r0, [r7, #4]
    3150:	460b      	mov	r3, r1
    3152:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3154:	78fb      	ldrb	r3, [r7, #3]
    3156:	2b00      	cmp	r3, #0
    3158:	d006      	beq.n	3168 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	689b      	ldr	r3, [r3, #8]
    315e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
  }
}
    3166:	e005      	b.n	3174 <ADC_ExternalTrigInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	689b      	ldr	r3, [r3, #8]
    316c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	609a      	str	r2, [r3, #8]
}
    3174:	bf00      	nop
    3176:	370c      	adds	r7, #12
    3178:	46bd      	mov	sp, r7
    317a:	bc80      	pop	{r7}
    317c:	4770      	bx	lr

0000317e <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    317e:	b480      	push	{r7}
    3180:	b083      	sub	sp, #12
    3182:	af00      	add	r7, sp, #0
    3184:	6078      	str	r0, [r7, #4]
    3186:	460b      	mov	r3, r1
    3188:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    318a:	78fb      	ldrb	r3, [r7, #3]
    318c:	2b00      	cmp	r3, #0
    318e:	d006      	beq.n	319e <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
  }
}
    319c:	e005      	b.n	31aa <ADC_SoftwareStartInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	689b      	ldr	r3, [r3, #8]
    31a2:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	609a      	str	r2, [r3, #8]
}
    31aa:	bf00      	nop
    31ac:	370c      	adds	r7, #12
    31ae:	46bd      	mov	sp, r7
    31b0:	bc80      	pop	{r7}
    31b2:	4770      	bx	lr

000031b4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    31b4:	b480      	push	{r7}
    31b6:	b085      	sub	sp, #20
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    31bc:	2300      	movs	r3, #0
    31be:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    31c0:	687b      	ldr	r3, [r7, #4]
    31c2:	689b      	ldr	r3, [r3, #8]
    31c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    31c8:	2b00      	cmp	r3, #0
    31ca:	d002      	beq.n	31d2 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    31cc:	2301      	movs	r3, #1
    31ce:	73fb      	strb	r3, [r7, #15]
    31d0:	e001      	b.n	31d6 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    31d2:	2300      	movs	r3, #0
    31d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    31d6:	7bfb      	ldrb	r3, [r7, #15]
}
    31d8:	4618      	mov	r0, r3
    31da:	3714      	adds	r7, #20
    31dc:	46bd      	mov	sp, r7
    31de:	bc80      	pop	{r7}
    31e0:	4770      	bx	lr

000031e2 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    31e2:	b480      	push	{r7}
    31e4:	b087      	sub	sp, #28
    31e6:	af00      	add	r7, sp, #0
    31e8:	6078      	str	r0, [r7, #4]
    31ea:	4608      	mov	r0, r1
    31ec:	4611      	mov	r1, r2
    31ee:	461a      	mov	r2, r3
    31f0:	4603      	mov	r3, r0
    31f2:	70fb      	strb	r3, [r7, #3]
    31f4:	460b      	mov	r3, r1
    31f6:	70bb      	strb	r3, [r7, #2]
    31f8:	4613      	mov	r3, r2
    31fa:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    31fc:	2300      	movs	r3, #0
    31fe:	617b      	str	r3, [r7, #20]
    3200:	2300      	movs	r3, #0
    3202:	613b      	str	r3, [r7, #16]
    3204:	2300      	movs	r3, #0
    3206:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    3208:	78fb      	ldrb	r3, [r7, #3]
    320a:	2b09      	cmp	r3, #9
    320c:	d923      	bls.n	3256 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	68db      	ldr	r3, [r3, #12]
    3212:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    3214:	78fb      	ldrb	r3, [r7, #3]
    3216:	f1a3 020a 	sub.w	r2, r3, #10
    321a:	4613      	mov	r3, r2
    321c:	005b      	lsls	r3, r3, #1
    321e:	4413      	add	r3, r2
    3220:	2207      	movs	r2, #7
    3222:	fa02 f303 	lsl.w	r3, r2, r3
    3226:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3228:	693b      	ldr	r3, [r7, #16]
    322a:	43db      	mvns	r3, r3
    322c:	697a      	ldr	r2, [r7, #20]
    322e:	4013      	ands	r3, r2
    3230:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    3232:	7879      	ldrb	r1, [r7, #1]
    3234:	78fb      	ldrb	r3, [r7, #3]
    3236:	f1a3 020a 	sub.w	r2, r3, #10
    323a:	4613      	mov	r3, r2
    323c:	005b      	lsls	r3, r3, #1
    323e:	4413      	add	r3, r2
    3240:	fa01 f303 	lsl.w	r3, r1, r3
    3244:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3246:	697a      	ldr	r2, [r7, #20]
    3248:	693b      	ldr	r3, [r7, #16]
    324a:	4313      	orrs	r3, r2
    324c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	697a      	ldr	r2, [r7, #20]
    3252:	60da      	str	r2, [r3, #12]
    3254:	e01e      	b.n	3294 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	691b      	ldr	r3, [r3, #16]
    325a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    325c:	78fa      	ldrb	r2, [r7, #3]
    325e:	4613      	mov	r3, r2
    3260:	005b      	lsls	r3, r3, #1
    3262:	4413      	add	r3, r2
    3264:	2207      	movs	r2, #7
    3266:	fa02 f303 	lsl.w	r3, r2, r3
    326a:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    326c:	693b      	ldr	r3, [r7, #16]
    326e:	43db      	mvns	r3, r3
    3270:	697a      	ldr	r2, [r7, #20]
    3272:	4013      	ands	r3, r2
    3274:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    3276:	7879      	ldrb	r1, [r7, #1]
    3278:	78fa      	ldrb	r2, [r7, #3]
    327a:	4613      	mov	r3, r2
    327c:	005b      	lsls	r3, r3, #1
    327e:	4413      	add	r3, r2
    3280:	fa01 f303 	lsl.w	r3, r1, r3
    3284:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3286:	697a      	ldr	r2, [r7, #20]
    3288:	693b      	ldr	r3, [r7, #16]
    328a:	4313      	orrs	r3, r2
    328c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	697a      	ldr	r2, [r7, #20]
    3292:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3298:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    329a:	697b      	ldr	r3, [r7, #20]
    329c:	0d1b      	lsrs	r3, r3, #20
    329e:	f003 0303 	and.w	r3, r3, #3
    32a2:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	b2db      	uxtb	r3, r3
    32a8:	78ba      	ldrb	r2, [r7, #2]
    32aa:	1ad3      	subs	r3, r2, r3
    32ac:	b2db      	uxtb	r3, r3
    32ae:	3302      	adds	r3, #2
    32b0:	b2db      	uxtb	r3, r3
    32b2:	461a      	mov	r2, r3
    32b4:	4613      	mov	r3, r2
    32b6:	009b      	lsls	r3, r3, #2
    32b8:	4413      	add	r3, r2
    32ba:	221f      	movs	r2, #31
    32bc:	fa02 f303 	lsl.w	r3, r2, r3
    32c0:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    32c2:	693b      	ldr	r3, [r7, #16]
    32c4:	43db      	mvns	r3, r3
    32c6:	697a      	ldr	r2, [r7, #20]
    32c8:	4013      	ands	r3, r2
    32ca:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    32cc:	78fa      	ldrb	r2, [r7, #3]
    32ce:	68fb      	ldr	r3, [r7, #12]
    32d0:	b2db      	uxtb	r3, r3
    32d2:	78b9      	ldrb	r1, [r7, #2]
    32d4:	1acb      	subs	r3, r1, r3
    32d6:	b2db      	uxtb	r3, r3
    32d8:	3302      	adds	r3, #2
    32da:	b2db      	uxtb	r3, r3
    32dc:	4619      	mov	r1, r3
    32de:	460b      	mov	r3, r1
    32e0:	009b      	lsls	r3, r3, #2
    32e2:	440b      	add	r3, r1
    32e4:	fa02 f303 	lsl.w	r3, r2, r3
    32e8:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    32ea:	697a      	ldr	r2, [r7, #20]
    32ec:	693b      	ldr	r3, [r7, #16]
    32ee:	4313      	orrs	r3, r2
    32f0:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	697a      	ldr	r2, [r7, #20]
    32f6:	639a      	str	r2, [r3, #56]	; 0x38
}
    32f8:	bf00      	nop
    32fa:	371c      	adds	r7, #28
    32fc:	46bd      	mov	sp, r7
    32fe:	bc80      	pop	{r7}
    3300:	4770      	bx	lr

00003302 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    3302:	b480      	push	{r7}
    3304:	b085      	sub	sp, #20
    3306:	af00      	add	r7, sp, #0
    3308:	6078      	str	r0, [r7, #4]
    330a:	460b      	mov	r3, r1
    330c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    330e:	2300      	movs	r3, #0
    3310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    3312:	2300      	movs	r3, #0
    3314:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    331a:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    331c:	68fb      	ldr	r3, [r7, #12]
    331e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    3322:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    3324:	78fb      	ldrb	r3, [r7, #3]
    3326:	3b01      	subs	r3, #1
    3328:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    332a:	68bb      	ldr	r3, [r7, #8]
    332c:	051b      	lsls	r3, r3, #20
    332e:	68fa      	ldr	r2, [r7, #12]
    3330:	4313      	orrs	r3, r2
    3332:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	68fa      	ldr	r2, [r7, #12]
    3338:	639a      	str	r2, [r3, #56]	; 0x38
}
    333a:	bf00      	nop
    333c:	3714      	adds	r7, #20
    333e:	46bd      	mov	sp, r7
    3340:	bc80      	pop	{r7}
    3342:	4770      	bx	lr

00003344 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    3344:	b480      	push	{r7}
    3346:	b085      	sub	sp, #20
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	460b      	mov	r3, r1
    334e:	70fb      	strb	r3, [r7, #3]
    3350:	4613      	mov	r3, r2
    3352:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    3354:	2300      	movs	r3, #0
    3356:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    335c:	78fa      	ldrb	r2, [r7, #3]
    335e:	68fb      	ldr	r3, [r7, #12]
    3360:	4413      	add	r3, r2
    3362:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    3364:	68fb      	ldr	r3, [r7, #12]
    3366:	461a      	mov	r2, r3
    3368:	883b      	ldrh	r3, [r7, #0]
    336a:	6013      	str	r3, [r2, #0]
}
    336c:	bf00      	nop
    336e:	3714      	adds	r7, #20
    3370:	46bd      	mov	sp, r7
    3372:	bc80      	pop	{r7}
    3374:	4770      	bx	lr

00003376 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    3376:	b480      	push	{r7}
    3378:	b085      	sub	sp, #20
    337a:	af00      	add	r7, sp, #0
    337c:	6078      	str	r0, [r7, #4]
    337e:	460b      	mov	r3, r1
    3380:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    3382:	2300      	movs	r3, #0
    3384:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    338a:	78fa      	ldrb	r2, [r7, #3]
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	4413      	add	r3, r2
    3390:	3328      	adds	r3, #40	; 0x28
    3392:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    3394:	68fb      	ldr	r3, [r7, #12]
    3396:	681b      	ldr	r3, [r3, #0]
    3398:	b29b      	uxth	r3, r3
}
    339a:	4618      	mov	r0, r3
    339c:	3714      	adds	r7, #20
    339e:	46bd      	mov	sp, r7
    33a0:	bc80      	pop	{r7}
    33a2:	4770      	bx	lr

000033a4 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    33a4:	b480      	push	{r7}
    33a6:	b085      	sub	sp, #20
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    33ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    33ae:	2300      	movs	r3, #0
    33b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	685b      	ldr	r3, [r3, #4]
    33b6:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    33b8:	68fb      	ldr	r3, [r7, #12]
    33ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    33be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    33c2:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    33c4:	68fa      	ldr	r2, [r7, #12]
    33c6:	683b      	ldr	r3, [r7, #0]
    33c8:	4313      	orrs	r3, r2
    33ca:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	68fa      	ldr	r2, [r7, #12]
    33d0:	605a      	str	r2, [r3, #4]
}
    33d2:	bf00      	nop
    33d4:	3714      	adds	r7, #20
    33d6:	46bd      	mov	sp, r7
    33d8:	bc80      	pop	{r7}
    33da:	4770      	bx	lr

000033dc <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    33dc:	b480      	push	{r7}
    33de:	b083      	sub	sp, #12
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
    33e4:	460b      	mov	r3, r1
    33e6:	807b      	strh	r3, [r7, #2]
    33e8:	4613      	mov	r3, r2
    33ea:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    33ec:	887a      	ldrh	r2, [r7, #2]
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    33f2:	883a      	ldrh	r2, [r7, #0]
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	629a      	str	r2, [r3, #40]	; 0x28
}
    33f8:	bf00      	nop
    33fa:	370c      	adds	r7, #12
    33fc:	46bd      	mov	sp, r7
    33fe:	bc80      	pop	{r7}
    3400:	4770      	bx	lr

00003402 <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    3402:	b480      	push	{r7}
    3404:	b085      	sub	sp, #20
    3406:	af00      	add	r7, sp, #0
    3408:	6078      	str	r0, [r7, #4]
    340a:	460b      	mov	r3, r1
    340c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    340e:	2300      	movs	r3, #0
    3410:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	685b      	ldr	r3, [r3, #4]
    3416:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    3418:	68fb      	ldr	r3, [r7, #12]
    341a:	f023 031f 	bic.w	r3, r3, #31
    341e:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    3420:	78fb      	ldrb	r3, [r7, #3]
    3422:	68fa      	ldr	r2, [r7, #12]
    3424:	4313      	orrs	r3, r2
    3426:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	68fa      	ldr	r2, [r7, #12]
    342c:	605a      	str	r2, [r3, #4]
}
    342e:	bf00      	nop
    3430:	3714      	adds	r7, #20
    3432:	46bd      	mov	sp, r7
    3434:	bc80      	pop	{r7}
    3436:	4770      	bx	lr

00003438 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    3438:	b480      	push	{r7}
    343a:	b083      	sub	sp, #12
    343c:	af00      	add	r7, sp, #0
    343e:	4603      	mov	r3, r0
    3440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3442:	79fb      	ldrb	r3, [r7, #7]
    3444:	2b00      	cmp	r3, #0
    3446:	d006      	beq.n	3456 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    3448:	4b08      	ldr	r3, [pc, #32]	; (346c <ADC_TempSensorVrefintCmd+0x34>)
    344a:	689b      	ldr	r3, [r3, #8]
    344c:	4a07      	ldr	r2, [pc, #28]	; (346c <ADC_TempSensorVrefintCmd+0x34>)
    344e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3452:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
    3454:	e005      	b.n	3462 <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    3456:	4b05      	ldr	r3, [pc, #20]	; (346c <ADC_TempSensorVrefintCmd+0x34>)
    3458:	689b      	ldr	r3, [r3, #8]
    345a:	4a04      	ldr	r2, [pc, #16]	; (346c <ADC_TempSensorVrefintCmd+0x34>)
    345c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3460:	6093      	str	r3, [r2, #8]
}
    3462:	bf00      	nop
    3464:	370c      	adds	r7, #12
    3466:	46bd      	mov	sp, r7
    3468:	bc80      	pop	{r7}
    346a:	4770      	bx	lr
    346c:	40012400 	.word	0x40012400

00003470 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3470:	b480      	push	{r7}
    3472:	b085      	sub	sp, #20
    3474:	af00      	add	r7, sp, #0
    3476:	6078      	str	r0, [r7, #4]
    3478:	460b      	mov	r3, r1
    347a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    347c:	2300      	movs	r3, #0
    347e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	681a      	ldr	r2, [r3, #0]
    3484:	78fb      	ldrb	r3, [r7, #3]
    3486:	4013      	ands	r3, r2
    3488:	2b00      	cmp	r3, #0
    348a:	d002      	beq.n	3492 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    348c:	2301      	movs	r3, #1
    348e:	73fb      	strb	r3, [r7, #15]
    3490:	e001      	b.n	3496 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    3492:	2300      	movs	r3, #0
    3494:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    3496:	7bfb      	ldrb	r3, [r7, #15]
}
    3498:	4618      	mov	r0, r3
    349a:	3714      	adds	r7, #20
    349c:	46bd      	mov	sp, r7
    349e:	bc80      	pop	{r7}
    34a0:	4770      	bx	lr

000034a2 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    34a2:	b480      	push	{r7}
    34a4:	b083      	sub	sp, #12
    34a6:	af00      	add	r7, sp, #0
    34a8:	6078      	str	r0, [r7, #4]
    34aa:	460b      	mov	r3, r1
    34ac:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    34ae:	78fb      	ldrb	r3, [r7, #3]
    34b0:	43da      	mvns	r2, r3
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	601a      	str	r2, [r3, #0]
}
    34b6:	bf00      	nop
    34b8:	370c      	adds	r7, #12
    34ba:	46bd      	mov	sp, r7
    34bc:	bc80      	pop	{r7}
    34be:	4770      	bx	lr

000034c0 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    34c0:	b480      	push	{r7}
    34c2:	b087      	sub	sp, #28
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    34c8:	460b      	mov	r3, r1
    34ca:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    34cc:	2300      	movs	r3, #0
    34ce:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    34d0:	2300      	movs	r3, #0
    34d2:	613b      	str	r3, [r7, #16]
    34d4:	2300      	movs	r3, #0
    34d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    34d8:	887b      	ldrh	r3, [r7, #2]
    34da:	0a1b      	lsrs	r3, r3, #8
    34dc:	b29b      	uxth	r3, r3
    34de:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	685b      	ldr	r3, [r3, #4]
    34e4:	887a      	ldrh	r2, [r7, #2]
    34e6:	b2d2      	uxtb	r2, r2
    34e8:	4013      	ands	r3, r2
    34ea:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	693b      	ldr	r3, [r7, #16]
    34f2:	4013      	ands	r3, r2
    34f4:	2b00      	cmp	r3, #0
    34f6:	d005      	beq.n	3504 <ADC_GetITStatus+0x44>
    34f8:	68fb      	ldr	r3, [r7, #12]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d002      	beq.n	3504 <ADC_GetITStatus+0x44>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    34fe:	2301      	movs	r3, #1
    3500:	75fb      	strb	r3, [r7, #23]
    3502:	e001      	b.n	3508 <ADC_GetITStatus+0x48>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    3504:	2300      	movs	r3, #0
    3506:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    3508:	7dfb      	ldrb	r3, [r7, #23]
}
    350a:	4618      	mov	r0, r3
    350c:	371c      	adds	r7, #28
    350e:	46bd      	mov	sp, r7
    3510:	bc80      	pop	{r7}
    3512:	4770      	bx	lr

00003514 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3514:	b480      	push	{r7}
    3516:	b085      	sub	sp, #20
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
    351c:	460b      	mov	r3, r1
    351e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    3520:	2300      	movs	r3, #0
    3522:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    3524:	887b      	ldrh	r3, [r7, #2]
    3526:	0a1b      	lsrs	r3, r3, #8
    3528:	b29b      	uxth	r3, r3
    352a:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    352c:	7bfb      	ldrb	r3, [r7, #15]
    352e:	43da      	mvns	r2, r3
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	601a      	str	r2, [r3, #0]
}
    3534:	bf00      	nop
    3536:	3714      	adds	r7, #20
    3538:	46bd      	mov	sp, r7
    353a:	bc80      	pop	{r7}
    353c:	4770      	bx	lr
    353e:	bf00      	nop

00003540 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    3540:	b580      	push	{r7, lr}
    3542:	b082      	sub	sp, #8
    3544:	af00      	add	r7, sp, #0
    3546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    3548:	687b      	ldr	r3, [r7, #4]
    354a:	4a78      	ldr	r2, [pc, #480]	; (372c <TIM_DeInit+0x1ec>)
    354c:	4293      	cmp	r3, r2
    354e:	d10a      	bne.n	3566 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    3550:	2101      	movs	r1, #1
    3552:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3556:	f7fe f9af 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    355a:	2100      	movs	r1, #0
    355c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3560:	f7fe f9aa 	bl	18b8 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
    3564:	e0de      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM2)
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    356c:	d108      	bne.n	3580 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    356e:	2101      	movs	r1, #1
    3570:	2001      	movs	r0, #1
    3572:	f7fe f9bf 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    3576:	2100      	movs	r1, #0
    3578:	2001      	movs	r0, #1
    357a:	f7fe f9bb 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    357e:	e0d1      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM3)
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	4a6b      	ldr	r2, [pc, #428]	; (3730 <TIM_DeInit+0x1f0>)
    3584:	4293      	cmp	r3, r2
    3586:	d108      	bne.n	359a <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    3588:	2101      	movs	r1, #1
    358a:	2002      	movs	r0, #2
    358c:	f7fe f9b2 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    3590:	2100      	movs	r1, #0
    3592:	2002      	movs	r0, #2
    3594:	f7fe f9ae 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    3598:	e0c4      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM4)
    359a:	687b      	ldr	r3, [r7, #4]
    359c:	4a65      	ldr	r2, [pc, #404]	; (3734 <TIM_DeInit+0x1f4>)
    359e:	4293      	cmp	r3, r2
    35a0:	d108      	bne.n	35b4 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    35a2:	2101      	movs	r1, #1
    35a4:	2004      	movs	r0, #4
    35a6:	f7fe f9a5 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    35aa:	2100      	movs	r1, #0
    35ac:	2004      	movs	r0, #4
    35ae:	f7fe f9a1 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    35b2:	e0b7      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM5)
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	4a60      	ldr	r2, [pc, #384]	; (3738 <TIM_DeInit+0x1f8>)
    35b8:	4293      	cmp	r3, r2
    35ba:	d108      	bne.n	35ce <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    35bc:	2101      	movs	r1, #1
    35be:	2008      	movs	r0, #8
    35c0:	f7fe f998 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    35c4:	2100      	movs	r1, #0
    35c6:	2008      	movs	r0, #8
    35c8:	f7fe f994 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    35cc:	e0aa      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM6)
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	4a5a      	ldr	r2, [pc, #360]	; (373c <TIM_DeInit+0x1fc>)
    35d2:	4293      	cmp	r3, r2
    35d4:	d108      	bne.n	35e8 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    35d6:	2101      	movs	r1, #1
    35d8:	2010      	movs	r0, #16
    35da:	f7fe f98b 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    35de:	2100      	movs	r1, #0
    35e0:	2010      	movs	r0, #16
    35e2:	f7fe f987 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    35e6:	e09d      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM7)
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	4a55      	ldr	r2, [pc, #340]	; (3740 <TIM_DeInit+0x200>)
    35ec:	4293      	cmp	r3, r2
    35ee:	d108      	bne.n	3602 <TIM_DeInit+0xc2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    35f0:	2101      	movs	r1, #1
    35f2:	2020      	movs	r0, #32
    35f4:	f7fe f97e 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    35f8:	2100      	movs	r1, #0
    35fa:	2020      	movs	r0, #32
    35fc:	f7fe f97a 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    3600:	e090      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM8)
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	4a4f      	ldr	r2, [pc, #316]	; (3744 <TIM_DeInit+0x204>)
    3606:	4293      	cmp	r3, r2
    3608:	d10a      	bne.n	3620 <TIM_DeInit+0xe0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    360a:	2101      	movs	r1, #1
    360c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3610:	f7fe f952 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    3614:	2100      	movs	r1, #0
    3616:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    361a:	f7fe f94d 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    361e:	e081      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM9)
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	4a49      	ldr	r2, [pc, #292]	; (3748 <TIM_DeInit+0x208>)
    3624:	4293      	cmp	r3, r2
    3626:	d10a      	bne.n	363e <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    3628:	2101      	movs	r1, #1
    362a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    362e:	f7fe f943 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    3632:	2100      	movs	r1, #0
    3634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3638:	f7fe f93e 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    363c:	e072      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM10)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	4a42      	ldr	r2, [pc, #264]	; (374c <TIM_DeInit+0x20c>)
    3642:	4293      	cmp	r3, r2
    3644:	d10a      	bne.n	365c <TIM_DeInit+0x11c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    3646:	2101      	movs	r1, #1
    3648:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    364c:	f7fe f934 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    3650:	2100      	movs	r1, #0
    3652:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3656:	f7fe f92f 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    365a:	e063      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM11) 
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	4a3c      	ldr	r2, [pc, #240]	; (3750 <TIM_DeInit+0x210>)
    3660:	4293      	cmp	r3, r2
    3662:	d10a      	bne.n	367a <TIM_DeInit+0x13a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    3664:	2101      	movs	r1, #1
    3666:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    366a:	f7fe f925 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    366e:	2100      	movs	r1, #0
    3670:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3674:	f7fe f920 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    3678:	e054      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM12)
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	4a35      	ldr	r2, [pc, #212]	; (3754 <TIM_DeInit+0x214>)
    367e:	4293      	cmp	r3, r2
    3680:	d108      	bne.n	3694 <TIM_DeInit+0x154>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    3682:	2101      	movs	r1, #1
    3684:	2040      	movs	r0, #64	; 0x40
    3686:	f7fe f935 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    368a:	2100      	movs	r1, #0
    368c:	2040      	movs	r0, #64	; 0x40
    368e:	f7fe f931 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    3692:	e047      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM13) 
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	4a30      	ldr	r2, [pc, #192]	; (3758 <TIM_DeInit+0x218>)
    3698:	4293      	cmp	r3, r2
    369a:	d108      	bne.n	36ae <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    369c:	2101      	movs	r1, #1
    369e:	2080      	movs	r0, #128	; 0x80
    36a0:	f7fe f928 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    36a4:	2100      	movs	r1, #0
    36a6:	2080      	movs	r0, #128	; 0x80
    36a8:	f7fe f924 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    36ac:	e03a      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM14) 
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	4a2a      	ldr	r2, [pc, #168]	; (375c <TIM_DeInit+0x21c>)
    36b2:	4293      	cmp	r3, r2
    36b4:	d10a      	bne.n	36cc <TIM_DeInit+0x18c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    36b6:	2101      	movs	r1, #1
    36b8:	f44f 7080 	mov.w	r0, #256	; 0x100
    36bc:	f7fe f91a 	bl	18f4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    36c0:	2100      	movs	r1, #0
    36c2:	f44f 7080 	mov.w	r0, #256	; 0x100
    36c6:	f7fe f915 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    36ca:	e02b      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM15)
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	4a24      	ldr	r2, [pc, #144]	; (3760 <TIM_DeInit+0x220>)
    36d0:	4293      	cmp	r3, r2
    36d2:	d10a      	bne.n	36ea <TIM_DeInit+0x1aa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    36d4:	2101      	movs	r1, #1
    36d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    36da:	f7fe f8ed 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    36de:	2100      	movs	r1, #0
    36e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    36e4:	f7fe f8e8 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    36e8:	e01c      	b.n	3724 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM16)
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	4a1d      	ldr	r2, [pc, #116]	; (3764 <TIM_DeInit+0x224>)
    36ee:	4293      	cmp	r3, r2
    36f0:	d10a      	bne.n	3708 <TIM_DeInit+0x1c8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    36f2:	2101      	movs	r1, #1
    36f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    36f8:	f7fe f8de 	bl	18b8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    36fc:	2100      	movs	r1, #0
    36fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3702:	f7fe f8d9 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    3706:	e00d      	b.n	3724 <TIM_DeInit+0x1e4>
    if (TIMx == TIM17)
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	4a17      	ldr	r2, [pc, #92]	; (3768 <TIM_DeInit+0x228>)
    370c:	4293      	cmp	r3, r2
    370e:	d109      	bne.n	3724 <TIM_DeInit+0x1e4>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    3710:	2101      	movs	r1, #1
    3712:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3716:	f7fe f8cf 	bl	18b8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    371a:	2100      	movs	r1, #0
    371c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3720:	f7fe f8ca 	bl	18b8 <RCC_APB2PeriphResetCmd>
}
    3724:	bf00      	nop
    3726:	3708      	adds	r7, #8
    3728:	46bd      	mov	sp, r7
    372a:	bd80      	pop	{r7, pc}
    372c:	40012c00 	.word	0x40012c00
    3730:	40000400 	.word	0x40000400
    3734:	40000800 	.word	0x40000800
    3738:	40000c00 	.word	0x40000c00
    373c:	40001000 	.word	0x40001000
    3740:	40001400 	.word	0x40001400
    3744:	40013400 	.word	0x40013400
    3748:	40014c00 	.word	0x40014c00
    374c:	40015000 	.word	0x40015000
    3750:	40015400 	.word	0x40015400
    3754:	40001800 	.word	0x40001800
    3758:	40001c00 	.word	0x40001c00
    375c:	40002000 	.word	0x40002000
    3760:	40014000 	.word	0x40014000
    3764:	40014400 	.word	0x40014400
    3768:	40014800 	.word	0x40014800

0000376c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    376c:	b480      	push	{r7}
    376e:	b085      	sub	sp, #20
    3770:	af00      	add	r7, sp, #0
    3772:	6078      	str	r0, [r7, #4]
    3774:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    3776:	2300      	movs	r3, #0
    3778:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    377a:	687b      	ldr	r3, [r7, #4]
    377c:	881b      	ldrh	r3, [r3, #0]
    377e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	4a2e      	ldr	r2, [pc, #184]	; (383c <TIM_TimeBaseInit+0xd0>)
    3784:	4293      	cmp	r3, r2
    3786:	d013      	beq.n	37b0 <TIM_TimeBaseInit+0x44>
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	4a2d      	ldr	r2, [pc, #180]	; (3840 <TIM_TimeBaseInit+0xd4>)
    378c:	4293      	cmp	r3, r2
    378e:	d00f      	beq.n	37b0 <TIM_TimeBaseInit+0x44>
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    3796:	d00b      	beq.n	37b0 <TIM_TimeBaseInit+0x44>
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	4a2a      	ldr	r2, [pc, #168]	; (3844 <TIM_TimeBaseInit+0xd8>)
    379c:	4293      	cmp	r3, r2
    379e:	d007      	beq.n	37b0 <TIM_TimeBaseInit+0x44>
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	4a29      	ldr	r2, [pc, #164]	; (3848 <TIM_TimeBaseInit+0xdc>)
    37a4:	4293      	cmp	r3, r2
    37a6:	d003      	beq.n	37b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    37a8:	687b      	ldr	r3, [r7, #4]
    37aa:	4a28      	ldr	r2, [pc, #160]	; (384c <TIM_TimeBaseInit+0xe0>)
    37ac:	4293      	cmp	r3, r2
    37ae:	d108      	bne.n	37c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    37b0:	89fb      	ldrh	r3, [r7, #14]
    37b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    37b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    37b8:	683b      	ldr	r3, [r7, #0]
    37ba:	885a      	ldrh	r2, [r3, #2]
    37bc:	89fb      	ldrh	r3, [r7, #14]
    37be:	4313      	orrs	r3, r2
    37c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	4a22      	ldr	r2, [pc, #136]	; (3850 <TIM_TimeBaseInit+0xe4>)
    37c6:	4293      	cmp	r3, r2
    37c8:	d00c      	beq.n	37e4 <TIM_TimeBaseInit+0x78>
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	4a21      	ldr	r2, [pc, #132]	; (3854 <TIM_TimeBaseInit+0xe8>)
    37ce:	4293      	cmp	r3, r2
    37d0:	d008      	beq.n	37e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    37d2:	89fb      	ldrh	r3, [r7, #14]
    37d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    37d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    37da:	683b      	ldr	r3, [r7, #0]
    37dc:	88da      	ldrh	r2, [r3, #6]
    37de:	89fb      	ldrh	r3, [r7, #14]
    37e0:	4313      	orrs	r3, r2
    37e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	89fa      	ldrh	r2, [r7, #14]
    37e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	889a      	ldrh	r2, [r3, #4]
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	881a      	ldrh	r2, [r3, #0]
    37f6:	687b      	ldr	r3, [r7, #4]
    37f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	4a0f      	ldr	r2, [pc, #60]	; (383c <TIM_TimeBaseInit+0xd0>)
    37fe:	4293      	cmp	r3, r2
    3800:	d00f      	beq.n	3822 <TIM_TimeBaseInit+0xb6>
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	4a0e      	ldr	r2, [pc, #56]	; (3840 <TIM_TimeBaseInit+0xd4>)
    3806:	4293      	cmp	r3, r2
    3808:	d00b      	beq.n	3822 <TIM_TimeBaseInit+0xb6>
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	4a12      	ldr	r2, [pc, #72]	; (3858 <TIM_TimeBaseInit+0xec>)
    380e:	4293      	cmp	r3, r2
    3810:	d007      	beq.n	3822 <TIM_TimeBaseInit+0xb6>
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	4a11      	ldr	r2, [pc, #68]	; (385c <TIM_TimeBaseInit+0xf0>)
    3816:	4293      	cmp	r3, r2
    3818:	d003      	beq.n	3822 <TIM_TimeBaseInit+0xb6>
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	4a10      	ldr	r2, [pc, #64]	; (3860 <TIM_TimeBaseInit+0xf4>)
    381e:	4293      	cmp	r3, r2
    3820:	d104      	bne.n	382c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    3822:	683b      	ldr	r3, [r7, #0]
    3824:	7a1b      	ldrb	r3, [r3, #8]
    3826:	b29a      	uxth	r2, r3
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	2201      	movs	r2, #1
    3830:	829a      	strh	r2, [r3, #20]
}
    3832:	bf00      	nop
    3834:	3714      	adds	r7, #20
    3836:	46bd      	mov	sp, r7
    3838:	bc80      	pop	{r7}
    383a:	4770      	bx	lr
    383c:	40012c00 	.word	0x40012c00
    3840:	40013400 	.word	0x40013400
    3844:	40000400 	.word	0x40000400
    3848:	40000800 	.word	0x40000800
    384c:	40000c00 	.word	0x40000c00
    3850:	40001000 	.word	0x40001000
    3854:	40001400 	.word	0x40001400
    3858:	40014000 	.word	0x40014000
    385c:	40014400 	.word	0x40014400
    3860:	40014800 	.word	0x40014800

00003864 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3864:	b480      	push	{r7}
    3866:	b085      	sub	sp, #20
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    386e:	2300      	movs	r3, #0
    3870:	817b      	strh	r3, [r7, #10]
    3872:	2300      	movs	r3, #0
    3874:	81fb      	strh	r3, [r7, #14]
    3876:	2300      	movs	r3, #0
    3878:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	8c1b      	ldrh	r3, [r3, #32]
    387e:	b29b      	uxth	r3, r3
    3880:	f023 0301 	bic.w	r3, r3, #1
    3884:	b29a      	uxth	r2, r3
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	8c1b      	ldrh	r3, [r3, #32]
    388e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	889b      	ldrh	r3, [r3, #4]
    3894:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	8b1b      	ldrh	r3, [r3, #24]
    389a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    389c:	897b      	ldrh	r3, [r7, #10]
    389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    38a2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    38a4:	897b      	ldrh	r3, [r7, #10]
    38a6:	f023 0303 	bic.w	r3, r3, #3
    38aa:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	881a      	ldrh	r2, [r3, #0]
    38b0:	897b      	ldrh	r3, [r7, #10]
    38b2:	4313      	orrs	r3, r2
    38b4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    38b6:	89fb      	ldrh	r3, [r7, #14]
    38b8:	f023 0302 	bic.w	r3, r3, #2
    38bc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    38be:	683b      	ldr	r3, [r7, #0]
    38c0:	891a      	ldrh	r2, [r3, #8]
    38c2:	89fb      	ldrh	r3, [r7, #14]
    38c4:	4313      	orrs	r3, r2
    38c6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    38c8:	683b      	ldr	r3, [r7, #0]
    38ca:	885a      	ldrh	r2, [r3, #2]
    38cc:	89fb      	ldrh	r3, [r7, #14]
    38ce:	4313      	orrs	r3, r2
    38d0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	4a24      	ldr	r2, [pc, #144]	; (3968 <TIM_OC1Init+0x104>)
    38d6:	4293      	cmp	r3, r2
    38d8:	d00f      	beq.n	38fa <TIM_OC1Init+0x96>
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	4a23      	ldr	r2, [pc, #140]	; (396c <TIM_OC1Init+0x108>)
    38de:	4293      	cmp	r3, r2
    38e0:	d00b      	beq.n	38fa <TIM_OC1Init+0x96>
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	4a22      	ldr	r2, [pc, #136]	; (3970 <TIM_OC1Init+0x10c>)
    38e6:	4293      	cmp	r3, r2
    38e8:	d007      	beq.n	38fa <TIM_OC1Init+0x96>
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	4a21      	ldr	r2, [pc, #132]	; (3974 <TIM_OC1Init+0x110>)
    38ee:	4293      	cmp	r3, r2
    38f0:	d003      	beq.n	38fa <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	4a20      	ldr	r2, [pc, #128]	; (3978 <TIM_OC1Init+0x114>)
    38f6:	4293      	cmp	r3, r2
    38f8:	d123      	bne.n	3942 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    38fa:	89fb      	ldrh	r3, [r7, #14]
    38fc:	f023 0308 	bic.w	r3, r3, #8
    3900:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    3902:	683b      	ldr	r3, [r7, #0]
    3904:	895a      	ldrh	r2, [r3, #10]
    3906:	89fb      	ldrh	r3, [r7, #14]
    3908:	4313      	orrs	r3, r2
    390a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    390c:	89fb      	ldrh	r3, [r7, #14]
    390e:	f023 0304 	bic.w	r3, r3, #4
    3912:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	889a      	ldrh	r2, [r3, #4]
    3918:	89fb      	ldrh	r3, [r7, #14]
    391a:	4313      	orrs	r3, r2
    391c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    391e:	89bb      	ldrh	r3, [r7, #12]
    3920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3924:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    3926:	89bb      	ldrh	r3, [r7, #12]
    3928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    392c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    392e:	683b      	ldr	r3, [r7, #0]
    3930:	899a      	ldrh	r2, [r3, #12]
    3932:	89bb      	ldrh	r3, [r7, #12]
    3934:	4313      	orrs	r3, r2
    3936:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    3938:	683b      	ldr	r3, [r7, #0]
    393a:	89da      	ldrh	r2, [r3, #14]
    393c:	89bb      	ldrh	r3, [r7, #12]
    393e:	4313      	orrs	r3, r2
    3940:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	89ba      	ldrh	r2, [r7, #12]
    3946:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	897a      	ldrh	r2, [r7, #10]
    394c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    394e:	683b      	ldr	r3, [r7, #0]
    3950:	88da      	ldrh	r2, [r3, #6]
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	89fa      	ldrh	r2, [r7, #14]
    395a:	841a      	strh	r2, [r3, #32]
}
    395c:	bf00      	nop
    395e:	3714      	adds	r7, #20
    3960:	46bd      	mov	sp, r7
    3962:	bc80      	pop	{r7}
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	40012c00 	.word	0x40012c00
    396c:	40013400 	.word	0x40013400
    3970:	40014000 	.word	0x40014000
    3974:	40014400 	.word	0x40014400
    3978:	40014800 	.word	0x40014800

0000397c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    397c:	b480      	push	{r7}
    397e:	b085      	sub	sp, #20
    3980:	af00      	add	r7, sp, #0
    3982:	6078      	str	r0, [r7, #4]
    3984:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3986:	2300      	movs	r3, #0
    3988:	817b      	strh	r3, [r7, #10]
    398a:	2300      	movs	r3, #0
    398c:	81fb      	strh	r3, [r7, #14]
    398e:	2300      	movs	r3, #0
    3990:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	8c1b      	ldrh	r3, [r3, #32]
    3996:	b29b      	uxth	r3, r3
    3998:	f023 0310 	bic.w	r3, r3, #16
    399c:	b29a      	uxth	r2, r3
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8c1b      	ldrh	r3, [r3, #32]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	889b      	ldrh	r3, [r3, #4]
    39ac:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	8b1b      	ldrh	r3, [r3, #24]
    39b2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    39b4:	897b      	ldrh	r3, [r7, #10]
    39b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    39ba:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    39bc:	897b      	ldrh	r3, [r7, #10]
    39be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    39c2:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    39c4:	683b      	ldr	r3, [r7, #0]
    39c6:	881b      	ldrh	r3, [r3, #0]
    39c8:	021b      	lsls	r3, r3, #8
    39ca:	b29a      	uxth	r2, r3
    39cc:	897b      	ldrh	r3, [r7, #10]
    39ce:	4313      	orrs	r3, r2
    39d0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    39d2:	89fb      	ldrh	r3, [r7, #14]
    39d4:	f023 0320 	bic.w	r3, r3, #32
    39d8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	891b      	ldrh	r3, [r3, #8]
    39de:	011b      	lsls	r3, r3, #4
    39e0:	b29a      	uxth	r2, r3
    39e2:	89fb      	ldrh	r3, [r7, #14]
    39e4:	4313      	orrs	r3, r2
    39e6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    39e8:	683b      	ldr	r3, [r7, #0]
    39ea:	885b      	ldrh	r3, [r3, #2]
    39ec:	011b      	lsls	r3, r3, #4
    39ee:	b29a      	uxth	r2, r3
    39f0:	89fb      	ldrh	r3, [r7, #14]
    39f2:	4313      	orrs	r3, r2
    39f4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	4a22      	ldr	r2, [pc, #136]	; (3a84 <TIM_OC2Init+0x108>)
    39fa:	4293      	cmp	r3, r2
    39fc:	d003      	beq.n	3a06 <TIM_OC2Init+0x8a>
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	4a21      	ldr	r2, [pc, #132]	; (3a88 <TIM_OC2Init+0x10c>)
    3a02:	4293      	cmp	r3, r2
    3a04:	d12b      	bne.n	3a5e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    3a06:	89fb      	ldrh	r3, [r7, #14]
    3a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3a0c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    3a0e:	683b      	ldr	r3, [r7, #0]
    3a10:	895b      	ldrh	r3, [r3, #10]
    3a12:	011b      	lsls	r3, r3, #4
    3a14:	b29a      	uxth	r2, r3
    3a16:	89fb      	ldrh	r3, [r7, #14]
    3a18:	4313      	orrs	r3, r2
    3a1a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    3a1c:	89fb      	ldrh	r3, [r7, #14]
    3a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3a22:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    3a24:	683b      	ldr	r3, [r7, #0]
    3a26:	889b      	ldrh	r3, [r3, #4]
    3a28:	011b      	lsls	r3, r3, #4
    3a2a:	b29a      	uxth	r2, r3
    3a2c:	89fb      	ldrh	r3, [r7, #14]
    3a2e:	4313      	orrs	r3, r2
    3a30:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    3a32:	89bb      	ldrh	r3, [r7, #12]
    3a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3a38:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    3a3a:	89bb      	ldrh	r3, [r7, #12]
    3a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3a40:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    3a42:	683b      	ldr	r3, [r7, #0]
    3a44:	899b      	ldrh	r3, [r3, #12]
    3a46:	009b      	lsls	r3, r3, #2
    3a48:	b29a      	uxth	r2, r3
    3a4a:	89bb      	ldrh	r3, [r7, #12]
    3a4c:	4313      	orrs	r3, r2
    3a4e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    3a50:	683b      	ldr	r3, [r7, #0]
    3a52:	89db      	ldrh	r3, [r3, #14]
    3a54:	009b      	lsls	r3, r3, #2
    3a56:	b29a      	uxth	r2, r3
    3a58:	89bb      	ldrh	r3, [r7, #12]
    3a5a:	4313      	orrs	r3, r2
    3a5c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	89ba      	ldrh	r2, [r7, #12]
    3a62:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	897a      	ldrh	r2, [r7, #10]
    3a68:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    3a6a:	683b      	ldr	r3, [r7, #0]
    3a6c:	88da      	ldrh	r2, [r3, #6]
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3a72:	687b      	ldr	r3, [r7, #4]
    3a74:	89fa      	ldrh	r2, [r7, #14]
    3a76:	841a      	strh	r2, [r3, #32]
}
    3a78:	bf00      	nop
    3a7a:	3714      	adds	r7, #20
    3a7c:	46bd      	mov	sp, r7
    3a7e:	bc80      	pop	{r7}
    3a80:	4770      	bx	lr
    3a82:	bf00      	nop
    3a84:	40012c00 	.word	0x40012c00
    3a88:	40013400 	.word	0x40013400

00003a8c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3a96:	2300      	movs	r3, #0
    3a98:	817b      	strh	r3, [r7, #10]
    3a9a:	2300      	movs	r3, #0
    3a9c:	81fb      	strh	r3, [r7, #14]
    3a9e:	2300      	movs	r3, #0
    3aa0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	8c1b      	ldrh	r3, [r3, #32]
    3aa6:	b29b      	uxth	r3, r3
    3aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3aac:	b29a      	uxth	r2, r3
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	8c1b      	ldrh	r3, [r3, #32]
    3ab6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	889b      	ldrh	r3, [r3, #4]
    3abc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	8b9b      	ldrh	r3, [r3, #28]
    3ac2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    3ac4:	897b      	ldrh	r3, [r7, #10]
    3ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3aca:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    3acc:	897b      	ldrh	r3, [r7, #10]
    3ace:	f023 0303 	bic.w	r3, r3, #3
    3ad2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3ad4:	683b      	ldr	r3, [r7, #0]
    3ad6:	881a      	ldrh	r2, [r3, #0]
    3ad8:	897b      	ldrh	r3, [r7, #10]
    3ada:	4313      	orrs	r3, r2
    3adc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    3ade:	89fb      	ldrh	r3, [r7, #14]
    3ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3ae4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    3ae6:	683b      	ldr	r3, [r7, #0]
    3ae8:	891b      	ldrh	r3, [r3, #8]
    3aea:	021b      	lsls	r3, r3, #8
    3aec:	b29a      	uxth	r2, r3
    3aee:	89fb      	ldrh	r3, [r7, #14]
    3af0:	4313      	orrs	r3, r2
    3af2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    3af4:	683b      	ldr	r3, [r7, #0]
    3af6:	885b      	ldrh	r3, [r3, #2]
    3af8:	021b      	lsls	r3, r3, #8
    3afa:	b29a      	uxth	r2, r3
    3afc:	89fb      	ldrh	r3, [r7, #14]
    3afe:	4313      	orrs	r3, r2
    3b00:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	4a22      	ldr	r2, [pc, #136]	; (3b90 <TIM_OC3Init+0x104>)
    3b06:	4293      	cmp	r3, r2
    3b08:	d003      	beq.n	3b12 <TIM_OC3Init+0x86>
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	4a21      	ldr	r2, [pc, #132]	; (3b94 <TIM_OC3Init+0x108>)
    3b0e:	4293      	cmp	r3, r2
    3b10:	d12b      	bne.n	3b6a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    3b12:	89fb      	ldrh	r3, [r7, #14]
    3b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b18:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	895b      	ldrh	r3, [r3, #10]
    3b1e:	021b      	lsls	r3, r3, #8
    3b20:	b29a      	uxth	r2, r3
    3b22:	89fb      	ldrh	r3, [r7, #14]
    3b24:	4313      	orrs	r3, r2
    3b26:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    3b28:	89fb      	ldrh	r3, [r7, #14]
    3b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3b2e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    3b30:	683b      	ldr	r3, [r7, #0]
    3b32:	889b      	ldrh	r3, [r3, #4]
    3b34:	021b      	lsls	r3, r3, #8
    3b36:	b29a      	uxth	r2, r3
    3b38:	89fb      	ldrh	r3, [r7, #14]
    3b3a:	4313      	orrs	r3, r2
    3b3c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    3b3e:	89bb      	ldrh	r3, [r7, #12]
    3b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3b44:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    3b46:	89bb      	ldrh	r3, [r7, #12]
    3b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b4c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    3b4e:	683b      	ldr	r3, [r7, #0]
    3b50:	899b      	ldrh	r3, [r3, #12]
    3b52:	011b      	lsls	r3, r3, #4
    3b54:	b29a      	uxth	r2, r3
    3b56:	89bb      	ldrh	r3, [r7, #12]
    3b58:	4313      	orrs	r3, r2
    3b5a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    3b5c:	683b      	ldr	r3, [r7, #0]
    3b5e:	89db      	ldrh	r3, [r3, #14]
    3b60:	011b      	lsls	r3, r3, #4
    3b62:	b29a      	uxth	r2, r3
    3b64:	89bb      	ldrh	r3, [r7, #12]
    3b66:	4313      	orrs	r3, r2
    3b68:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	89ba      	ldrh	r2, [r7, #12]
    3b6e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	897a      	ldrh	r2, [r7, #10]
    3b74:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    3b76:	683b      	ldr	r3, [r7, #0]
    3b78:	88da      	ldrh	r2, [r3, #6]
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	89fa      	ldrh	r2, [r7, #14]
    3b82:	841a      	strh	r2, [r3, #32]
}
    3b84:	bf00      	nop
    3b86:	3714      	adds	r7, #20
    3b88:	46bd      	mov	sp, r7
    3b8a:	bc80      	pop	{r7}
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	40012c00 	.word	0x40012c00
    3b94:	40013400 	.word	0x40013400

00003b98 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3b98:	b480      	push	{r7}
    3b9a:	b085      	sub	sp, #20
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	6078      	str	r0, [r7, #4]
    3ba0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3ba2:	2300      	movs	r3, #0
    3ba4:	81bb      	strh	r3, [r7, #12]
    3ba6:	2300      	movs	r3, #0
    3ba8:	817b      	strh	r3, [r7, #10]
    3baa:	2300      	movs	r3, #0
    3bac:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3bb8:	b29a      	uxth	r2, r3
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3bbe:	687b      	ldr	r3, [r7, #4]
    3bc0:	8c1b      	ldrh	r3, [r3, #32]
    3bc2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	889b      	ldrh	r3, [r3, #4]
    3bc8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	8b9b      	ldrh	r3, [r3, #28]
    3bce:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    3bd0:	89bb      	ldrh	r3, [r7, #12]
    3bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3bd6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    3bd8:	89bb      	ldrh	r3, [r7, #12]
    3bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3bde:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3be0:	683b      	ldr	r3, [r7, #0]
    3be2:	881b      	ldrh	r3, [r3, #0]
    3be4:	021b      	lsls	r3, r3, #8
    3be6:	b29a      	uxth	r2, r3
    3be8:	89bb      	ldrh	r3, [r7, #12]
    3bea:	4313      	orrs	r3, r2
    3bec:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    3bee:	897b      	ldrh	r3, [r7, #10]
    3bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3bf4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    3bf6:	683b      	ldr	r3, [r7, #0]
    3bf8:	891b      	ldrh	r3, [r3, #8]
    3bfa:	031b      	lsls	r3, r3, #12
    3bfc:	b29a      	uxth	r2, r3
    3bfe:	897b      	ldrh	r3, [r7, #10]
    3c00:	4313      	orrs	r3, r2
    3c02:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    3c04:	683b      	ldr	r3, [r7, #0]
    3c06:	885b      	ldrh	r3, [r3, #2]
    3c08:	031b      	lsls	r3, r3, #12
    3c0a:	b29a      	uxth	r2, r3
    3c0c:	897b      	ldrh	r3, [r7, #10]
    3c0e:	4313      	orrs	r3, r2
    3c10:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	4a12      	ldr	r2, [pc, #72]	; (3c60 <TIM_OC4Init+0xc8>)
    3c16:	4293      	cmp	r3, r2
    3c18:	d003      	beq.n	3c22 <TIM_OC4Init+0x8a>
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	4a11      	ldr	r2, [pc, #68]	; (3c64 <TIM_OC4Init+0xcc>)
    3c1e:	4293      	cmp	r3, r2
    3c20:	d10a      	bne.n	3c38 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    3c22:	89fb      	ldrh	r3, [r7, #14]
    3c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3c28:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    3c2a:	683b      	ldr	r3, [r7, #0]
    3c2c:	899b      	ldrh	r3, [r3, #12]
    3c2e:	019b      	lsls	r3, r3, #6
    3c30:	b29a      	uxth	r2, r3
    3c32:	89fb      	ldrh	r3, [r7, #14]
    3c34:	4313      	orrs	r3, r2
    3c36:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	89fa      	ldrh	r2, [r7, #14]
    3c3c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	89ba      	ldrh	r2, [r7, #12]
    3c42:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	88da      	ldrh	r2, [r3, #6]
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	897a      	ldrh	r2, [r7, #10]
    3c52:	841a      	strh	r2, [r3, #32]
}
    3c54:	bf00      	nop
    3c56:	3714      	adds	r7, #20
    3c58:	46bd      	mov	sp, r7
    3c5a:	bc80      	pop	{r7}
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	40012c00 	.word	0x40012c00
    3c64:	40013400 	.word	0x40013400

00003c68 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b082      	sub	sp, #8
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	6078      	str	r0, [r7, #4]
    3c70:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3c72:	683b      	ldr	r3, [r7, #0]
    3c74:	881b      	ldrh	r3, [r3, #0]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d10f      	bne.n	3c9a <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3c7a:	683b      	ldr	r3, [r7, #0]
    3c7c:	8859      	ldrh	r1, [r3, #2]
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	889a      	ldrh	r2, [r3, #4]
    3c82:	683b      	ldr	r3, [r7, #0]
    3c84:	891b      	ldrh	r3, [r3, #8]
    3c86:	6878      	ldr	r0, [r7, #4]
    3c88:	f001 f946 	bl	4f18 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3c8c:	683b      	ldr	r3, [r7, #0]
    3c8e:	88db      	ldrh	r3, [r3, #6]
    3c90:	4619      	mov	r1, r3
    3c92:	6878      	ldr	r0, [r7, #4]
    3c94:	f001 f808 	bl	4ca8 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3c98:	e036      	b.n	3d08 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    3c9a:	683b      	ldr	r3, [r7, #0]
    3c9c:	881b      	ldrh	r3, [r3, #0]
    3c9e:	2b04      	cmp	r3, #4
    3ca0:	d10f      	bne.n	3cc2 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3ca2:	683b      	ldr	r3, [r7, #0]
    3ca4:	8859      	ldrh	r1, [r3, #2]
    3ca6:	683b      	ldr	r3, [r7, #0]
    3ca8:	889a      	ldrh	r2, [r3, #4]
    3caa:	683b      	ldr	r3, [r7, #0]
    3cac:	891b      	ldrh	r3, [r3, #8]
    3cae:	6878      	ldr	r0, [r7, #4]
    3cb0:	f001 f9a2 	bl	4ff8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cb4:	683b      	ldr	r3, [r7, #0]
    3cb6:	88db      	ldrh	r3, [r3, #6]
    3cb8:	4619      	mov	r1, r3
    3cba:	6878      	ldr	r0, [r7, #4]
    3cbc:	f001 f80f 	bl	4cde <TIM_SetIC2Prescaler>
}
    3cc0:	e022      	b.n	3d08 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    3cc2:	683b      	ldr	r3, [r7, #0]
    3cc4:	881b      	ldrh	r3, [r3, #0]
    3cc6:	2b08      	cmp	r3, #8
    3cc8:	d10f      	bne.n	3cea <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	8859      	ldrh	r1, [r3, #2]
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	889a      	ldrh	r2, [r3, #4]
    3cd2:	683b      	ldr	r3, [r7, #0]
    3cd4:	891b      	ldrh	r3, [r3, #8]
    3cd6:	6878      	ldr	r0, [r7, #4]
    3cd8:	f001 fa08 	bl	50ec <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	88db      	ldrh	r3, [r3, #6]
    3ce0:	4619      	mov	r1, r3
    3ce2:	6878      	ldr	r0, [r7, #4]
    3ce4:	f001 f818 	bl	4d18 <TIM_SetIC3Prescaler>
}
    3ce8:	e00e      	b.n	3d08 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    3cea:	683b      	ldr	r3, [r7, #0]
    3cec:	8859      	ldrh	r1, [r3, #2]
    3cee:	683b      	ldr	r3, [r7, #0]
    3cf0:	889a      	ldrh	r2, [r3, #4]
    3cf2:	683b      	ldr	r3, [r7, #0]
    3cf4:	891b      	ldrh	r3, [r3, #8]
    3cf6:	6878      	ldr	r0, [r7, #4]
    3cf8:	f001 fa6e 	bl	51d8 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3cfc:	683b      	ldr	r3, [r7, #0]
    3cfe:	88db      	ldrh	r3, [r3, #6]
    3d00:	4619      	mov	r1, r3
    3d02:	6878      	ldr	r0, [r7, #4]
    3d04:	f001 f823 	bl	4d4e <TIM_SetIC4Prescaler>
}
    3d08:	bf00      	nop
    3d0a:	3708      	adds	r7, #8
    3d0c:	46bd      	mov	sp, r7
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    3d18:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    3d1a:	2300      	movs	r3, #0
    3d1c:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    3d1e:	2301      	movs	r3, #1
    3d20:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    3d22:	683b      	ldr	r3, [r7, #0]
    3d24:	885b      	ldrh	r3, [r3, #2]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d102      	bne.n	3d30 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    3d2a:	2302      	movs	r3, #2
    3d2c:	81fb      	strh	r3, [r7, #14]
    3d2e:	e001      	b.n	3d34 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    3d30:	2300      	movs	r3, #0
    3d32:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    3d34:	683b      	ldr	r3, [r7, #0]
    3d36:	889b      	ldrh	r3, [r3, #4]
    3d38:	2b01      	cmp	r3, #1
    3d3a:	d102      	bne.n	3d42 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    3d3c:	2302      	movs	r3, #2
    3d3e:	81bb      	strh	r3, [r7, #12]
    3d40:	e001      	b.n	3d46 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    3d42:	2301      	movs	r3, #1
    3d44:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    3d46:	683b      	ldr	r3, [r7, #0]
    3d48:	881b      	ldrh	r3, [r3, #0]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d11c      	bne.n	3d88 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3d4e:	683b      	ldr	r3, [r7, #0]
    3d50:	8859      	ldrh	r1, [r3, #2]
    3d52:	683b      	ldr	r3, [r7, #0]
    3d54:	889a      	ldrh	r2, [r3, #4]
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	891b      	ldrh	r3, [r3, #8]
    3d5a:	6878      	ldr	r0, [r7, #4]
    3d5c:	f001 f8dc 	bl	4f18 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d60:	683b      	ldr	r3, [r7, #0]
    3d62:	88db      	ldrh	r3, [r3, #6]
    3d64:	4619      	mov	r1, r3
    3d66:	6878      	ldr	r0, [r7, #4]
    3d68:	f000 ff9e 	bl	4ca8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3d6c:	683b      	ldr	r3, [r7, #0]
    3d6e:	891b      	ldrh	r3, [r3, #8]
    3d70:	89ba      	ldrh	r2, [r7, #12]
    3d72:	89f9      	ldrh	r1, [r7, #14]
    3d74:	6878      	ldr	r0, [r7, #4]
    3d76:	f001 f93f 	bl	4ff8 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d7a:	683b      	ldr	r3, [r7, #0]
    3d7c:	88db      	ldrh	r3, [r3, #6]
    3d7e:	4619      	mov	r1, r3
    3d80:	6878      	ldr	r0, [r7, #4]
    3d82:	f000 ffac 	bl	4cde <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    3d86:	e01b      	b.n	3dc0 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    3d88:	683b      	ldr	r3, [r7, #0]
    3d8a:	8859      	ldrh	r1, [r3, #2]
    3d8c:	683b      	ldr	r3, [r7, #0]
    3d8e:	889a      	ldrh	r2, [r3, #4]
    3d90:	683b      	ldr	r3, [r7, #0]
    3d92:	891b      	ldrh	r3, [r3, #8]
    3d94:	6878      	ldr	r0, [r7, #4]
    3d96:	f001 f92f 	bl	4ff8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	88db      	ldrh	r3, [r3, #6]
    3d9e:	4619      	mov	r1, r3
    3da0:	6878      	ldr	r0, [r7, #4]
    3da2:	f000 ff9c 	bl	4cde <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    3da6:	683b      	ldr	r3, [r7, #0]
    3da8:	891b      	ldrh	r3, [r3, #8]
    3daa:	89ba      	ldrh	r2, [r7, #12]
    3dac:	89f9      	ldrh	r1, [r7, #14]
    3dae:	6878      	ldr	r0, [r7, #4]
    3db0:	f001 f8b2 	bl	4f18 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    3db4:	683b      	ldr	r3, [r7, #0]
    3db6:	88db      	ldrh	r3, [r3, #6]
    3db8:	4619      	mov	r1, r3
    3dba:	6878      	ldr	r0, [r7, #4]
    3dbc:	f000 ff74 	bl	4ca8 <TIM_SetIC1Prescaler>
}
    3dc0:	bf00      	nop
    3dc2:	3710      	adds	r7, #16
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bd80      	pop	{r7, pc}

00003dc8 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    3dc8:	b480      	push	{r7}
    3dca:	b083      	sub	sp, #12
    3dcc:	af00      	add	r7, sp, #0
    3dce:	6078      	str	r0, [r7, #4]
    3dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3dd2:	683b      	ldr	r3, [r7, #0]
    3dd4:	881a      	ldrh	r2, [r3, #0]
    3dd6:	683b      	ldr	r3, [r7, #0]
    3dd8:	885b      	ldrh	r3, [r3, #2]
    3dda:	4313      	orrs	r3, r2
    3ddc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3dde:	683b      	ldr	r3, [r7, #0]
    3de0:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3de2:	4313      	orrs	r3, r2
    3de4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    3de6:	683b      	ldr	r3, [r7, #0]
    3de8:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3dea:	4313      	orrs	r3, r2
    3dec:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3dee:	683b      	ldr	r3, [r7, #0]
    3df0:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3df2:	4313      	orrs	r3, r2
    3df4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    3df6:	683b      	ldr	r3, [r7, #0]
    3df8:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3dfa:	4313      	orrs	r3, r2
    3dfc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    3dfe:	683b      	ldr	r3, [r7, #0]
    3e00:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    3e02:	4313      	orrs	r3, r2
    3e04:	b29a      	uxth	r2, r3
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3e0c:	bf00      	nop
    3e0e:	370c      	adds	r7, #12
    3e10:	46bd      	mov	sp, r7
    3e12:	bc80      	pop	{r7}
    3e14:	4770      	bx	lr

00003e16 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3e16:	b480      	push	{r7}
    3e18:	b083      	sub	sp, #12
    3e1a:	af00      	add	r7, sp, #0
    3e1c:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3e24:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	2200      	movs	r2, #0
    3e2a:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	2200      	movs	r2, #0
    3e30:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	2200      	movs	r2, #0
    3e36:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	2200      	movs	r2, #0
    3e3c:	721a      	strb	r2, [r3, #8]
}
    3e3e:	bf00      	nop
    3e40:	370c      	adds	r7, #12
    3e42:	46bd      	mov	sp, r7
    3e44:	bc80      	pop	{r7}
    3e46:	4770      	bx	lr

00003e48 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3e48:	b480      	push	{r7}
    3e4a:	b083      	sub	sp, #12
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	2200      	movs	r2, #0
    3e54:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	2200      	movs	r2, #0
    3e5a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    3e5c:	687b      	ldr	r3, [r7, #4]
    3e5e:	2200      	movs	r2, #0
    3e60:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	2200      	movs	r2, #0
    3e66:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	2200      	movs	r2, #0
    3e6c:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	2200      	movs	r2, #0
    3e72:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	2200      	movs	r2, #0
    3e78:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	2200      	movs	r2, #0
    3e7e:	81da      	strh	r2, [r3, #14]
}
    3e80:	bf00      	nop
    3e82:	370c      	adds	r7, #12
    3e84:	46bd      	mov	sp, r7
    3e86:	bc80      	pop	{r7}
    3e88:	4770      	bx	lr

00003e8a <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    3e8a:	b480      	push	{r7}
    3e8c:	b083      	sub	sp, #12
    3e8e:	af00      	add	r7, sp, #0
    3e90:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	2200      	movs	r2, #0
    3e96:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	2200      	movs	r2, #0
    3e9c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	2201      	movs	r2, #1
    3ea2:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	2200      	movs	r2, #0
    3ea8:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	2200      	movs	r2, #0
    3eae:	811a      	strh	r2, [r3, #8]
}
    3eb0:	bf00      	nop
    3eb2:	370c      	adds	r7, #12
    3eb4:	46bd      	mov	sp, r7
    3eb6:	bc80      	pop	{r7}
    3eb8:	4770      	bx	lr

00003eba <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    3eba:	b480      	push	{r7}
    3ebc:	b083      	sub	sp, #12
    3ebe:	af00      	add	r7, sp, #0
    3ec0:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	2200      	movs	r2, #0
    3ec6:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	2200      	movs	r2, #0
    3ecc:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	2200      	movs	r2, #0
    3ed2:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	2200      	movs	r2, #0
    3ed8:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	2200      	movs	r2, #0
    3ede:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	2200      	movs	r2, #0
    3ee4:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	2200      	movs	r2, #0
    3eea:	819a      	strh	r2, [r3, #12]
}
    3eec:	bf00      	nop
    3eee:	370c      	adds	r7, #12
    3ef0:	46bd      	mov	sp, r7
    3ef2:	bc80      	pop	{r7}
    3ef4:	4770      	bx	lr

00003ef6 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3ef6:	b480      	push	{r7}
    3ef8:	b083      	sub	sp, #12
    3efa:	af00      	add	r7, sp, #0
    3efc:	6078      	str	r0, [r7, #4]
    3efe:	460b      	mov	r3, r1
    3f00:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3f02:	78fb      	ldrb	r3, [r7, #3]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d008      	beq.n	3f1a <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	881b      	ldrh	r3, [r3, #0]
    3f0c:	b29b      	uxth	r3, r3
    3f0e:	f043 0301 	orr.w	r3, r3, #1
    3f12:	b29a      	uxth	r2, r3
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
    3f18:	e007      	b.n	3f2a <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	881b      	ldrh	r3, [r3, #0]
    3f1e:	b29b      	uxth	r3, r3
    3f20:	f023 0301 	bic.w	r3, r3, #1
    3f24:	b29a      	uxth	r2, r3
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	801a      	strh	r2, [r3, #0]
}
    3f2a:	bf00      	nop
    3f2c:	370c      	adds	r7, #12
    3f2e:	46bd      	mov	sp, r7
    3f30:	bc80      	pop	{r7}
    3f32:	4770      	bx	lr

00003f34 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3f34:	b480      	push	{r7}
    3f36:	b083      	sub	sp, #12
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    3f3c:	460b      	mov	r3, r1
    3f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3f40:	78fb      	ldrb	r3, [r7, #3]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d00c      	beq.n	3f60 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3f4c:	b29b      	uxth	r3, r3
    3f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3f56:	b29a      	uxth	r2, r3
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
    3f5e:	e009      	b.n	3f74 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    3f66:	b29b      	uxth	r3, r3
    3f68:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3f6c:	b29a      	uxth	r2, r3
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    3f74:	bf00      	nop
    3f76:	370c      	adds	r7, #12
    3f78:	46bd      	mov	sp, r7
    3f7a:	bc80      	pop	{r7}
    3f7c:	4770      	bx	lr

00003f7e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    3f7e:	b480      	push	{r7}
    3f80:	b083      	sub	sp, #12
    3f82:	af00      	add	r7, sp, #0
    3f84:	6078      	str	r0, [r7, #4]
    3f86:	460b      	mov	r3, r1
    3f88:	807b      	strh	r3, [r7, #2]
    3f8a:	4613      	mov	r3, r2
    3f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3f8e:	787b      	ldrb	r3, [r7, #1]
    3f90:	2b00      	cmp	r3, #0
    3f92:	d008      	beq.n	3fa6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	899b      	ldrh	r3, [r3, #12]
    3f98:	b29a      	uxth	r2, r3
    3f9a:	887b      	ldrh	r3, [r7, #2]
    3f9c:	4313      	orrs	r3, r2
    3f9e:	b29a      	uxth	r2, r3
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
    3fa4:	e009      	b.n	3fba <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	899b      	ldrh	r3, [r3, #12]
    3faa:	b29a      	uxth	r2, r3
    3fac:	887b      	ldrh	r3, [r7, #2]
    3fae:	43db      	mvns	r3, r3
    3fb0:	b29b      	uxth	r3, r3
    3fb2:	4013      	ands	r3, r2
    3fb4:	b29a      	uxth	r2, r3
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	819a      	strh	r2, [r3, #12]
}
    3fba:	bf00      	nop
    3fbc:	370c      	adds	r7, #12
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bc80      	pop	{r7}
    3fc2:	4770      	bx	lr

00003fc4 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3fc4:	b480      	push	{r7}
    3fc6:	b083      	sub	sp, #12
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
    3fcc:	460b      	mov	r3, r1
    3fce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	887a      	ldrh	r2, [r7, #2]
    3fd4:	829a      	strh	r2, [r3, #20]
}
    3fd6:	bf00      	nop
    3fd8:	370c      	adds	r7, #12
    3fda:	46bd      	mov	sp, r7
    3fdc:	bc80      	pop	{r7}
    3fde:	4770      	bx	lr

00003fe0 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3fe0:	b480      	push	{r7}
    3fe2:	b083      	sub	sp, #12
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
    3fe8:	460b      	mov	r3, r1
    3fea:	807b      	strh	r3, [r7, #2]
    3fec:	4613      	mov	r3, r2
    3fee:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3ff0:	887a      	ldrh	r2, [r7, #2]
    3ff2:	883b      	ldrh	r3, [r7, #0]
    3ff4:	4313      	orrs	r3, r2
    3ff6:	b29a      	uxth	r2, r3
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    3ffe:	bf00      	nop
    4000:	370c      	adds	r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	bc80      	pop	{r7}
    4006:	4770      	bx	lr

00004008 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
    4010:	460b      	mov	r3, r1
    4012:	807b      	strh	r3, [r7, #2]
    4014:	4613      	mov	r3, r2
    4016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4018:	787b      	ldrb	r3, [r7, #1]
    401a:	2b00      	cmp	r3, #0
    401c:	d008      	beq.n	4030 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	899b      	ldrh	r3, [r3, #12]
    4022:	b29a      	uxth	r2, r3
    4024:	887b      	ldrh	r3, [r7, #2]
    4026:	4313      	orrs	r3, r2
    4028:	b29a      	uxth	r2, r3
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
    402e:	e009      	b.n	4044 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	899b      	ldrh	r3, [r3, #12]
    4034:	b29a      	uxth	r2, r3
    4036:	887b      	ldrh	r3, [r7, #2]
    4038:	43db      	mvns	r3, r3
    403a:	b29b      	uxth	r3, r3
    403c:	4013      	ands	r3, r2
    403e:	b29a      	uxth	r2, r3
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	819a      	strh	r2, [r3, #12]
}
    4044:	bf00      	nop
    4046:	370c      	adds	r7, #12
    4048:	46bd      	mov	sp, r7
    404a:	bc80      	pop	{r7}
    404c:	4770      	bx	lr

0000404e <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    404e:	b480      	push	{r7}
    4050:	b083      	sub	sp, #12
    4052:	af00      	add	r7, sp, #0
    4054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	891b      	ldrh	r3, [r3, #8]
    405a:	b29b      	uxth	r3, r3
    405c:	f023 0307 	bic.w	r3, r3, #7
    4060:	b29a      	uxth	r2, r3
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	811a      	strh	r2, [r3, #8]
}
    4066:	bf00      	nop
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	bc80      	pop	{r7}
    406e:	4770      	bx	lr

00004070 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    4078:	460b      	mov	r3, r1
    407a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    407c:	887b      	ldrh	r3, [r7, #2]
    407e:	4619      	mov	r1, r3
    4080:	6878      	ldr	r0, [r7, #4]
    4082:	f000 f8df 	bl	4244 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	891b      	ldrh	r3, [r3, #8]
    408a:	b29b      	uxth	r3, r3
    408c:	f043 0307 	orr.w	r3, r3, #7
    4090:	b29a      	uxth	r2, r3
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	811a      	strh	r2, [r3, #8]
}
    4096:	bf00      	nop
    4098:	3708      	adds	r7, #8
    409a:	46bd      	mov	sp, r7
    409c:	bd80      	pop	{r7, pc}

0000409e <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    409e:	b580      	push	{r7, lr}
    40a0:	b084      	sub	sp, #16
    40a2:	af00      	add	r7, sp, #0
    40a4:	60f8      	str	r0, [r7, #12]
    40a6:	4608      	mov	r0, r1
    40a8:	4611      	mov	r1, r2
    40aa:	461a      	mov	r2, r3
    40ac:	4603      	mov	r3, r0
    40ae:	817b      	strh	r3, [r7, #10]
    40b0:	460b      	mov	r3, r1
    40b2:	813b      	strh	r3, [r7, #8]
    40b4:	4613      	mov	r3, r2
    40b6:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    40b8:	897b      	ldrh	r3, [r7, #10]
    40ba:	2b60      	cmp	r3, #96	; 0x60
    40bc:	d106      	bne.n	40cc <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    40be:	88fb      	ldrh	r3, [r7, #6]
    40c0:	8939      	ldrh	r1, [r7, #8]
    40c2:	2201      	movs	r2, #1
    40c4:	68f8      	ldr	r0, [r7, #12]
    40c6:	f000 ff97 	bl	4ff8 <TI2_Config>
    40ca:	e005      	b.n	40d8 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    40cc:	88fb      	ldrh	r3, [r7, #6]
    40ce:	8939      	ldrh	r1, [r7, #8]
    40d0:	2201      	movs	r2, #1
    40d2:	68f8      	ldr	r0, [r7, #12]
    40d4:	f000 ff20 	bl	4f18 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    40d8:	897b      	ldrh	r3, [r7, #10]
    40da:	4619      	mov	r1, r3
    40dc:	68f8      	ldr	r0, [r7, #12]
    40de:	f000 f8b1 	bl	4244 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	891b      	ldrh	r3, [r3, #8]
    40e6:	b29b      	uxth	r3, r3
    40e8:	f043 0307 	orr.w	r3, r3, #7
    40ec:	b29a      	uxth	r2, r3
    40ee:	68fb      	ldr	r3, [r7, #12]
    40f0:	811a      	strh	r2, [r3, #8]
}
    40f2:	bf00      	nop
    40f4:	3710      	adds	r7, #16
    40f6:	46bd      	mov	sp, r7
    40f8:	bd80      	pop	{r7, pc}

000040fa <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    40fa:	b580      	push	{r7, lr}
    40fc:	b086      	sub	sp, #24
    40fe:	af00      	add	r7, sp, #0
    4100:	60f8      	str	r0, [r7, #12]
    4102:	4608      	mov	r0, r1
    4104:	4611      	mov	r1, r2
    4106:	461a      	mov	r2, r3
    4108:	4603      	mov	r3, r0
    410a:	817b      	strh	r3, [r7, #10]
    410c:	460b      	mov	r3, r1
    410e:	813b      	strh	r3, [r7, #8]
    4110:	4613      	mov	r3, r2
    4112:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4114:	2300      	movs	r3, #0
    4116:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4118:	88fb      	ldrh	r3, [r7, #6]
    411a:	893a      	ldrh	r2, [r7, #8]
    411c:	8979      	ldrh	r1, [r7, #10]
    411e:	68f8      	ldr	r0, [r7, #12]
    4120:	f000 f839 	bl	4196 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	891b      	ldrh	r3, [r3, #8]
    4128:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    412a:	8afb      	ldrh	r3, [r7, #22]
    412c:	f023 0307 	bic.w	r3, r3, #7
    4130:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    4132:	8afb      	ldrh	r3, [r7, #22]
    4134:	f043 0307 	orr.w	r3, r3, #7
    4138:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    413a:	8afb      	ldrh	r3, [r7, #22]
    413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4140:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    4142:	8afb      	ldrh	r3, [r7, #22]
    4144:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4148:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    414a:	68fb      	ldr	r3, [r7, #12]
    414c:	8afa      	ldrh	r2, [r7, #22]
    414e:	811a      	strh	r2, [r3, #8]
}
    4150:	bf00      	nop
    4152:	3718      	adds	r7, #24
    4154:	46bd      	mov	sp, r7
    4156:	bd80      	pop	{r7, pc}

00004158 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    4158:	b580      	push	{r7, lr}
    415a:	b084      	sub	sp, #16
    415c:	af00      	add	r7, sp, #0
    415e:	60f8      	str	r0, [r7, #12]
    4160:	4608      	mov	r0, r1
    4162:	4611      	mov	r1, r2
    4164:	461a      	mov	r2, r3
    4166:	4603      	mov	r3, r0
    4168:	817b      	strh	r3, [r7, #10]
    416a:	460b      	mov	r3, r1
    416c:	813b      	strh	r3, [r7, #8]
    416e:	4613      	mov	r3, r2
    4170:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4172:	88fb      	ldrh	r3, [r7, #6]
    4174:	893a      	ldrh	r2, [r7, #8]
    4176:	8979      	ldrh	r1, [r7, #10]
    4178:	68f8      	ldr	r0, [r7, #12]
    417a:	f000 f80c 	bl	4196 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    417e:	68fb      	ldr	r3, [r7, #12]
    4180:	891b      	ldrh	r3, [r3, #8]
    4182:	b29b      	uxth	r3, r3
    4184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4188:	b29a      	uxth	r2, r3
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	811a      	strh	r2, [r3, #8]
}
    418e:	bf00      	nop
    4190:	3710      	adds	r7, #16
    4192:	46bd      	mov	sp, r7
    4194:	bd80      	pop	{r7, pc}

00004196 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    4196:	b480      	push	{r7}
    4198:	b087      	sub	sp, #28
    419a:	af00      	add	r7, sp, #0
    419c:	60f8      	str	r0, [r7, #12]
    419e:	4608      	mov	r0, r1
    41a0:	4611      	mov	r1, r2
    41a2:	461a      	mov	r2, r3
    41a4:	4603      	mov	r3, r0
    41a6:	817b      	strh	r3, [r7, #10]
    41a8:	460b      	mov	r3, r1
    41aa:	813b      	strh	r3, [r7, #8]
    41ac:	4613      	mov	r3, r2
    41ae:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    41b0:	2300      	movs	r3, #0
    41b2:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	891b      	ldrh	r3, [r3, #8]
    41b8:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    41ba:	8afb      	ldrh	r3, [r7, #22]
    41bc:	b2db      	uxtb	r3, r3
    41be:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    41c0:	88fb      	ldrh	r3, [r7, #6]
    41c2:	021b      	lsls	r3, r3, #8
    41c4:	b29a      	uxth	r2, r3
    41c6:	893b      	ldrh	r3, [r7, #8]
    41c8:	4313      	orrs	r3, r2
    41ca:	b29a      	uxth	r2, r3
    41cc:	897b      	ldrh	r3, [r7, #10]
    41ce:	4313      	orrs	r3, r2
    41d0:	b29a      	uxth	r2, r3
    41d2:	8afb      	ldrh	r3, [r7, #22]
    41d4:	4313      	orrs	r3, r2
    41d6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    41d8:	68fb      	ldr	r3, [r7, #12]
    41da:	8afa      	ldrh	r2, [r7, #22]
    41dc:	811a      	strh	r2, [r3, #8]
}
    41de:	bf00      	nop
    41e0:	371c      	adds	r7, #28
    41e2:	46bd      	mov	sp, r7
    41e4:	bc80      	pop	{r7}
    41e6:	4770      	bx	lr

000041e8 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	460b      	mov	r3, r1
    41f2:	807b      	strh	r3, [r7, #2]
    41f4:	4613      	mov	r3, r2
    41f6:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	887a      	ldrh	r2, [r7, #2]
    41fc:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	883a      	ldrh	r2, [r7, #0]
    4202:	829a      	strh	r2, [r3, #20]
}
    4204:	bf00      	nop
    4206:	370c      	adds	r7, #12
    4208:	46bd      	mov	sp, r7
    420a:	bc80      	pop	{r7}
    420c:	4770      	bx	lr

0000420e <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    420e:	b480      	push	{r7}
    4210:	b085      	sub	sp, #20
    4212:	af00      	add	r7, sp, #0
    4214:	6078      	str	r0, [r7, #4]
    4216:	460b      	mov	r3, r1
    4218:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    421a:	2300      	movs	r3, #0
    421c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	881b      	ldrh	r3, [r3, #0]
    4222:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4224:	89fb      	ldrh	r3, [r7, #14]
    4226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    422a:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    422c:	89fa      	ldrh	r2, [r7, #14]
    422e:	887b      	ldrh	r3, [r7, #2]
    4230:	4313      	orrs	r3, r2
    4232:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	89fa      	ldrh	r2, [r7, #14]
    4238:	801a      	strh	r2, [r3, #0]
}
    423a:	bf00      	nop
    423c:	3714      	adds	r7, #20
    423e:	46bd      	mov	sp, r7
    4240:	bc80      	pop	{r7}
    4242:	4770      	bx	lr

00004244 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4244:	b480      	push	{r7}
    4246:	b085      	sub	sp, #20
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
    424c:	460b      	mov	r3, r1
    424e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    4250:	2300      	movs	r3, #0
    4252:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	891b      	ldrh	r3, [r3, #8]
    4258:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    425a:	89fb      	ldrh	r3, [r7, #14]
    425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4260:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    4262:	89fa      	ldrh	r2, [r7, #14]
    4264:	887b      	ldrh	r3, [r7, #2]
    4266:	4313      	orrs	r3, r2
    4268:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	89fa      	ldrh	r2, [r7, #14]
    426e:	811a      	strh	r2, [r3, #8]
}
    4270:	bf00      	nop
    4272:	3714      	adds	r7, #20
    4274:	46bd      	mov	sp, r7
    4276:	bc80      	pop	{r7}
    4278:	4770      	bx	lr

0000427a <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    427a:	b480      	push	{r7}
    427c:	b087      	sub	sp, #28
    427e:	af00      	add	r7, sp, #0
    4280:	60f8      	str	r0, [r7, #12]
    4282:	4608      	mov	r0, r1
    4284:	4611      	mov	r1, r2
    4286:	461a      	mov	r2, r3
    4288:	4603      	mov	r3, r0
    428a:	817b      	strh	r3, [r7, #10]
    428c:	460b      	mov	r3, r1
    428e:	813b      	strh	r3, [r7, #8]
    4290:	4613      	mov	r3, r2
    4292:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4294:	2300      	movs	r3, #0
    4296:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    4298:	2300      	movs	r3, #0
    429a:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    429c:	2300      	movs	r3, #0
    429e:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    42a0:	68fb      	ldr	r3, [r7, #12]
    42a2:	891b      	ldrh	r3, [r3, #8]
    42a4:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    42a6:	68fb      	ldr	r3, [r7, #12]
    42a8:	8b1b      	ldrh	r3, [r3, #24]
    42aa:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    42ac:	68fb      	ldr	r3, [r7, #12]
    42ae:	8c1b      	ldrh	r3, [r3, #32]
    42b0:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    42b2:	8afb      	ldrh	r3, [r7, #22]
    42b4:	f023 0307 	bic.w	r3, r3, #7
    42b8:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    42ba:	8afa      	ldrh	r2, [r7, #22]
    42bc:	897b      	ldrh	r3, [r7, #10]
    42be:	4313      	orrs	r3, r2
    42c0:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    42c2:	8abb      	ldrh	r3, [r7, #20]
    42c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    42c8:	f023 0303 	bic.w	r3, r3, #3
    42cc:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    42ce:	8abb      	ldrh	r3, [r7, #20]
    42d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42d4:	f043 0301 	orr.w	r3, r3, #1
    42d8:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    42da:	8a7b      	ldrh	r3, [r7, #18]
    42dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    42e0:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    42e2:	88fb      	ldrh	r3, [r7, #6]
    42e4:	011b      	lsls	r3, r3, #4
    42e6:	b29a      	uxth	r2, r3
    42e8:	893b      	ldrh	r3, [r7, #8]
    42ea:	4313      	orrs	r3, r2
    42ec:	b29a      	uxth	r2, r3
    42ee:	8a7b      	ldrh	r3, [r7, #18]
    42f0:	4313      	orrs	r3, r2
    42f2:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	8afa      	ldrh	r2, [r7, #22]
    42f8:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	8aba      	ldrh	r2, [r7, #20]
    42fe:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	8a7a      	ldrh	r2, [r7, #18]
    4304:	841a      	strh	r2, [r3, #32]
}
    4306:	bf00      	nop
    4308:	371c      	adds	r7, #28
    430a:	46bd      	mov	sp, r7
    430c:	bc80      	pop	{r7}
    430e:	4770      	bx	lr

00004310 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4310:	b480      	push	{r7}
    4312:	b085      	sub	sp, #20
    4314:	af00      	add	r7, sp, #0
    4316:	6078      	str	r0, [r7, #4]
    4318:	460b      	mov	r3, r1
    431a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    431c:	2300      	movs	r3, #0
    431e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	8b1b      	ldrh	r3, [r3, #24]
    4324:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    4326:	89fb      	ldrh	r3, [r7, #14]
    4328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    432c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    432e:	89fa      	ldrh	r2, [r7, #14]
    4330:	887b      	ldrh	r3, [r7, #2]
    4332:	4313      	orrs	r3, r2
    4334:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	89fa      	ldrh	r2, [r7, #14]
    433a:	831a      	strh	r2, [r3, #24]
}
    433c:	bf00      	nop
    433e:	3714      	adds	r7, #20
    4340:	46bd      	mov	sp, r7
    4342:	bc80      	pop	{r7}
    4344:	4770      	bx	lr

00004346 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4346:	b480      	push	{r7}
    4348:	b085      	sub	sp, #20
    434a:	af00      	add	r7, sp, #0
    434c:	6078      	str	r0, [r7, #4]
    434e:	460b      	mov	r3, r1
    4350:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4352:	2300      	movs	r3, #0
    4354:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	8b1b      	ldrh	r3, [r3, #24]
    435a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    435c:	89fb      	ldrh	r3, [r7, #14]
    435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4362:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    4364:	887b      	ldrh	r3, [r7, #2]
    4366:	021b      	lsls	r3, r3, #8
    4368:	b29a      	uxth	r2, r3
    436a:	89fb      	ldrh	r3, [r7, #14]
    436c:	4313      	orrs	r3, r2
    436e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	89fa      	ldrh	r2, [r7, #14]
    4374:	831a      	strh	r2, [r3, #24]
}
    4376:	bf00      	nop
    4378:	3714      	adds	r7, #20
    437a:	46bd      	mov	sp, r7
    437c:	bc80      	pop	{r7}
    437e:	4770      	bx	lr

00004380 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4380:	b480      	push	{r7}
    4382:	b085      	sub	sp, #20
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
    4388:	460b      	mov	r3, r1
    438a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    438c:	2300      	movs	r3, #0
    438e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	8b9b      	ldrh	r3, [r3, #28]
    4394:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    4396:	89fb      	ldrh	r3, [r7, #14]
    4398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    439c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    439e:	89fa      	ldrh	r2, [r7, #14]
    43a0:	887b      	ldrh	r3, [r7, #2]
    43a2:	4313      	orrs	r3, r2
    43a4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	89fa      	ldrh	r2, [r7, #14]
    43aa:	839a      	strh	r2, [r3, #28]
}
    43ac:	bf00      	nop
    43ae:	3714      	adds	r7, #20
    43b0:	46bd      	mov	sp, r7
    43b2:	bc80      	pop	{r7}
    43b4:	4770      	bx	lr

000043b6 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    43b6:	b480      	push	{r7}
    43b8:	b085      	sub	sp, #20
    43ba:	af00      	add	r7, sp, #0
    43bc:	6078      	str	r0, [r7, #4]
    43be:	460b      	mov	r3, r1
    43c0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    43c2:	2300      	movs	r3, #0
    43c4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	8b9b      	ldrh	r3, [r3, #28]
    43ca:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    43cc:	89fb      	ldrh	r3, [r7, #14]
    43ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    43d2:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    43d4:	887b      	ldrh	r3, [r7, #2]
    43d6:	021b      	lsls	r3, r3, #8
    43d8:	b29a      	uxth	r2, r3
    43da:	89fb      	ldrh	r3, [r7, #14]
    43dc:	4313      	orrs	r3, r2
    43de:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	89fa      	ldrh	r2, [r7, #14]
    43e4:	839a      	strh	r2, [r3, #28]
}
    43e6:	bf00      	nop
    43e8:	3714      	adds	r7, #20
    43ea:	46bd      	mov	sp, r7
    43ec:	bc80      	pop	{r7}
    43ee:	4770      	bx	lr

000043f0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    43f0:	b480      	push	{r7}
    43f2:	b083      	sub	sp, #12
    43f4:	af00      	add	r7, sp, #0
    43f6:	6078      	str	r0, [r7, #4]
    43f8:	460b      	mov	r3, r1
    43fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    43fc:	78fb      	ldrb	r3, [r7, #3]
    43fe:	2b00      	cmp	r3, #0
    4400:	d008      	beq.n	4414 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	881b      	ldrh	r3, [r3, #0]
    4406:	b29b      	uxth	r3, r3
    4408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    440c:	b29a      	uxth	r2, r3
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
    4412:	e007      	b.n	4424 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	881b      	ldrh	r3, [r3, #0]
    4418:	b29b      	uxth	r3, r3
    441a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    441e:	b29a      	uxth	r2, r3
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	801a      	strh	r2, [r3, #0]
}
    4424:	bf00      	nop
    4426:	370c      	adds	r7, #12
    4428:	46bd      	mov	sp, r7
    442a:	bc80      	pop	{r7}
    442c:	4770      	bx	lr

0000442e <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    442e:	b480      	push	{r7}
    4430:	b083      	sub	sp, #12
    4432:	af00      	add	r7, sp, #0
    4434:	6078      	str	r0, [r7, #4]
    4436:	460b      	mov	r3, r1
    4438:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    443a:	78fb      	ldrb	r3, [r7, #3]
    443c:	2b00      	cmp	r3, #0
    443e:	d008      	beq.n	4452 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	889b      	ldrh	r3, [r3, #4]
    4444:	b29b      	uxth	r3, r3
    4446:	f043 0304 	orr.w	r3, r3, #4
    444a:	b29a      	uxth	r2, r3
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
  }
}
    4450:	e007      	b.n	4462 <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	889b      	ldrh	r3, [r3, #4]
    4456:	b29b      	uxth	r3, r3
    4458:	f023 0304 	bic.w	r3, r3, #4
    445c:	b29a      	uxth	r2, r3
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	809a      	strh	r2, [r3, #4]
}
    4462:	bf00      	nop
    4464:	370c      	adds	r7, #12
    4466:	46bd      	mov	sp, r7
    4468:	bc80      	pop	{r7}
    446a:	4770      	bx	lr

0000446c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    446c:	b480      	push	{r7}
    446e:	b083      	sub	sp, #12
    4470:	af00      	add	r7, sp, #0
    4472:	6078      	str	r0, [r7, #4]
    4474:	460b      	mov	r3, r1
    4476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4478:	78fb      	ldrb	r3, [r7, #3]
    447a:	2b00      	cmp	r3, #0
    447c:	d008      	beq.n	4490 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	889b      	ldrh	r3, [r3, #4]
    4482:	b29b      	uxth	r3, r3
    4484:	f043 0308 	orr.w	r3, r3, #8
    4488:	b29a      	uxth	r2, r3
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
  }
}
    448e:	e007      	b.n	44a0 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	889b      	ldrh	r3, [r3, #4]
    4494:	b29b      	uxth	r3, r3
    4496:	f023 0308 	bic.w	r3, r3, #8
    449a:	b29a      	uxth	r2, r3
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	809a      	strh	r2, [r3, #4]
}
    44a0:	bf00      	nop
    44a2:	370c      	adds	r7, #12
    44a4:	46bd      	mov	sp, r7
    44a6:	bc80      	pop	{r7}
    44a8:	4770      	bx	lr

000044aa <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    44aa:	b480      	push	{r7}
    44ac:	b083      	sub	sp, #12
    44ae:	af00      	add	r7, sp, #0
    44b0:	6078      	str	r0, [r7, #4]
    44b2:	460b      	mov	r3, r1
    44b4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    44b6:	78fb      	ldrb	r3, [r7, #3]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d008      	beq.n	44ce <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	889b      	ldrh	r3, [r3, #4]
    44c0:	b29b      	uxth	r3, r3
    44c2:	f043 0301 	orr.w	r3, r3, #1
    44c6:	b29a      	uxth	r2, r3
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
  }
}
    44cc:	e007      	b.n	44de <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    44ce:	687b      	ldr	r3, [r7, #4]
    44d0:	889b      	ldrh	r3, [r3, #4]
    44d2:	b29b      	uxth	r3, r3
    44d4:	f023 0301 	bic.w	r3, r3, #1
    44d8:	b29a      	uxth	r2, r3
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	809a      	strh	r2, [r3, #4]
}
    44de:	bf00      	nop
    44e0:	370c      	adds	r7, #12
    44e2:	46bd      	mov	sp, r7
    44e4:	bc80      	pop	{r7}
    44e6:	4770      	bx	lr

000044e8 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    44e8:	b480      	push	{r7}
    44ea:	b085      	sub	sp, #20
    44ec:	af00      	add	r7, sp, #0
    44ee:	6078      	str	r0, [r7, #4]
    44f0:	460b      	mov	r3, r1
    44f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    44f4:	2300      	movs	r3, #0
    44f6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    44f8:	687b      	ldr	r3, [r7, #4]
    44fa:	8b1b      	ldrh	r3, [r3, #24]
    44fc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    44fe:	89fb      	ldrh	r3, [r7, #14]
    4500:	f023 0308 	bic.w	r3, r3, #8
    4504:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    4506:	89fa      	ldrh	r2, [r7, #14]
    4508:	887b      	ldrh	r3, [r7, #2]
    450a:	4313      	orrs	r3, r2
    450c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    450e:	687b      	ldr	r3, [r7, #4]
    4510:	89fa      	ldrh	r2, [r7, #14]
    4512:	831a      	strh	r2, [r3, #24]
}
    4514:	bf00      	nop
    4516:	3714      	adds	r7, #20
    4518:	46bd      	mov	sp, r7
    451a:	bc80      	pop	{r7}
    451c:	4770      	bx	lr

0000451e <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    451e:	b480      	push	{r7}
    4520:	b085      	sub	sp, #20
    4522:	af00      	add	r7, sp, #0
    4524:	6078      	str	r0, [r7, #4]
    4526:	460b      	mov	r3, r1
    4528:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    452a:	2300      	movs	r3, #0
    452c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	8b1b      	ldrh	r3, [r3, #24]
    4532:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    4534:	89fb      	ldrh	r3, [r7, #14]
    4536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    453a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    453c:	887b      	ldrh	r3, [r7, #2]
    453e:	021b      	lsls	r3, r3, #8
    4540:	b29a      	uxth	r2, r3
    4542:	89fb      	ldrh	r3, [r7, #14]
    4544:	4313      	orrs	r3, r2
    4546:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	89fa      	ldrh	r2, [r7, #14]
    454c:	831a      	strh	r2, [r3, #24]
}
    454e:	bf00      	nop
    4550:	3714      	adds	r7, #20
    4552:	46bd      	mov	sp, r7
    4554:	bc80      	pop	{r7}
    4556:	4770      	bx	lr

00004558 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4558:	b480      	push	{r7}
    455a:	b085      	sub	sp, #20
    455c:	af00      	add	r7, sp, #0
    455e:	6078      	str	r0, [r7, #4]
    4560:	460b      	mov	r3, r1
    4562:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4564:	2300      	movs	r3, #0
    4566:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	8b9b      	ldrh	r3, [r3, #28]
    456c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    456e:	89fb      	ldrh	r3, [r7, #14]
    4570:	f023 0308 	bic.w	r3, r3, #8
    4574:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    4576:	89fa      	ldrh	r2, [r7, #14]
    4578:	887b      	ldrh	r3, [r7, #2]
    457a:	4313      	orrs	r3, r2
    457c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	89fa      	ldrh	r2, [r7, #14]
    4582:	839a      	strh	r2, [r3, #28]
}
    4584:	bf00      	nop
    4586:	3714      	adds	r7, #20
    4588:	46bd      	mov	sp, r7
    458a:	bc80      	pop	{r7}
    458c:	4770      	bx	lr

0000458e <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    458e:	b480      	push	{r7}
    4590:	b085      	sub	sp, #20
    4592:	af00      	add	r7, sp, #0
    4594:	6078      	str	r0, [r7, #4]
    4596:	460b      	mov	r3, r1
    4598:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    459a:	2300      	movs	r3, #0
    459c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	8b9b      	ldrh	r3, [r3, #28]
    45a2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    45a4:	89fb      	ldrh	r3, [r7, #14]
    45a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    45aa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    45ac:	887b      	ldrh	r3, [r7, #2]
    45ae:	021b      	lsls	r3, r3, #8
    45b0:	b29a      	uxth	r2, r3
    45b2:	89fb      	ldrh	r3, [r7, #14]
    45b4:	4313      	orrs	r3, r2
    45b6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    45b8:	687b      	ldr	r3, [r7, #4]
    45ba:	89fa      	ldrh	r2, [r7, #14]
    45bc:	839a      	strh	r2, [r3, #28]
}
    45be:	bf00      	nop
    45c0:	3714      	adds	r7, #20
    45c2:	46bd      	mov	sp, r7
    45c4:	bc80      	pop	{r7}
    45c6:	4770      	bx	lr

000045c8 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    45c8:	b480      	push	{r7}
    45ca:	b085      	sub	sp, #20
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
    45d0:	460b      	mov	r3, r1
    45d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    45d4:	2300      	movs	r3, #0
    45d6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	8b1b      	ldrh	r3, [r3, #24]
    45dc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    45de:	89fb      	ldrh	r3, [r7, #14]
    45e0:	f023 0304 	bic.w	r3, r3, #4
    45e4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    45e6:	89fa      	ldrh	r2, [r7, #14]
    45e8:	887b      	ldrh	r3, [r7, #2]
    45ea:	4313      	orrs	r3, r2
    45ec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	89fa      	ldrh	r2, [r7, #14]
    45f2:	831a      	strh	r2, [r3, #24]
}
    45f4:	bf00      	nop
    45f6:	3714      	adds	r7, #20
    45f8:	46bd      	mov	sp, r7
    45fa:	bc80      	pop	{r7}
    45fc:	4770      	bx	lr

000045fe <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    45fe:	b480      	push	{r7}
    4600:	b085      	sub	sp, #20
    4602:	af00      	add	r7, sp, #0
    4604:	6078      	str	r0, [r7, #4]
    4606:	460b      	mov	r3, r1
    4608:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    460a:	2300      	movs	r3, #0
    460c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    460e:	687b      	ldr	r3, [r7, #4]
    4610:	8b1b      	ldrh	r3, [r3, #24]
    4612:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    4614:	89fb      	ldrh	r3, [r7, #14]
    4616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    461a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    461c:	887b      	ldrh	r3, [r7, #2]
    461e:	021b      	lsls	r3, r3, #8
    4620:	b29a      	uxth	r2, r3
    4622:	89fb      	ldrh	r3, [r7, #14]
    4624:	4313      	orrs	r3, r2
    4626:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	89fa      	ldrh	r2, [r7, #14]
    462c:	831a      	strh	r2, [r3, #24]
}
    462e:	bf00      	nop
    4630:	3714      	adds	r7, #20
    4632:	46bd      	mov	sp, r7
    4634:	bc80      	pop	{r7}
    4636:	4770      	bx	lr

00004638 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4638:	b480      	push	{r7}
    463a:	b085      	sub	sp, #20
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
    4640:	460b      	mov	r3, r1
    4642:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4644:	2300      	movs	r3, #0
    4646:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	8b9b      	ldrh	r3, [r3, #28]
    464c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    464e:	89fb      	ldrh	r3, [r7, #14]
    4650:	f023 0304 	bic.w	r3, r3, #4
    4654:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    4656:	89fa      	ldrh	r2, [r7, #14]
    4658:	887b      	ldrh	r3, [r7, #2]
    465a:	4313      	orrs	r3, r2
    465c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	89fa      	ldrh	r2, [r7, #14]
    4662:	839a      	strh	r2, [r3, #28]
}
    4664:	bf00      	nop
    4666:	3714      	adds	r7, #20
    4668:	46bd      	mov	sp, r7
    466a:	bc80      	pop	{r7}
    466c:	4770      	bx	lr

0000466e <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    466e:	b480      	push	{r7}
    4670:	b085      	sub	sp, #20
    4672:	af00      	add	r7, sp, #0
    4674:	6078      	str	r0, [r7, #4]
    4676:	460b      	mov	r3, r1
    4678:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    467a:	2300      	movs	r3, #0
    467c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	8b9b      	ldrh	r3, [r3, #28]
    4682:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    4684:	89fb      	ldrh	r3, [r7, #14]
    4686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    468a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    468c:	887b      	ldrh	r3, [r7, #2]
    468e:	021b      	lsls	r3, r3, #8
    4690:	b29a      	uxth	r2, r3
    4692:	89fb      	ldrh	r3, [r7, #14]
    4694:	4313      	orrs	r3, r2
    4696:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	89fa      	ldrh	r2, [r7, #14]
    469c:	839a      	strh	r2, [r3, #28]
}
    469e:	bf00      	nop
    46a0:	3714      	adds	r7, #20
    46a2:	46bd      	mov	sp, r7
    46a4:	bc80      	pop	{r7}
    46a6:	4770      	bx	lr

000046a8 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    46a8:	b480      	push	{r7}
    46aa:	b085      	sub	sp, #20
    46ac:	af00      	add	r7, sp, #0
    46ae:	6078      	str	r0, [r7, #4]
    46b0:	460b      	mov	r3, r1
    46b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    46b4:	2300      	movs	r3, #0
    46b6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	8b1b      	ldrh	r3, [r3, #24]
    46bc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    46be:	89fb      	ldrh	r3, [r7, #14]
    46c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    46c4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    46c6:	89fa      	ldrh	r2, [r7, #14]
    46c8:	887b      	ldrh	r3, [r7, #2]
    46ca:	4313      	orrs	r3, r2
    46cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    46ce:	687b      	ldr	r3, [r7, #4]
    46d0:	89fa      	ldrh	r2, [r7, #14]
    46d2:	831a      	strh	r2, [r3, #24]
}
    46d4:	bf00      	nop
    46d6:	3714      	adds	r7, #20
    46d8:	46bd      	mov	sp, r7
    46da:	bc80      	pop	{r7}
    46dc:	4770      	bx	lr

000046de <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    46de:	b480      	push	{r7}
    46e0:	b085      	sub	sp, #20
    46e2:	af00      	add	r7, sp, #0
    46e4:	6078      	str	r0, [r7, #4]
    46e6:	460b      	mov	r3, r1
    46e8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    46ea:	2300      	movs	r3, #0
    46ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	8b1b      	ldrh	r3, [r3, #24]
    46f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    46f4:	89fb      	ldrh	r3, [r7, #14]
    46f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    46fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    46fc:	887b      	ldrh	r3, [r7, #2]
    46fe:	021b      	lsls	r3, r3, #8
    4700:	b29a      	uxth	r2, r3
    4702:	89fb      	ldrh	r3, [r7, #14]
    4704:	4313      	orrs	r3, r2
    4706:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	89fa      	ldrh	r2, [r7, #14]
    470c:	831a      	strh	r2, [r3, #24]
}
    470e:	bf00      	nop
    4710:	3714      	adds	r7, #20
    4712:	46bd      	mov	sp, r7
    4714:	bc80      	pop	{r7}
    4716:	4770      	bx	lr

00004718 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4718:	b480      	push	{r7}
    471a:	b085      	sub	sp, #20
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
    4720:	460b      	mov	r3, r1
    4722:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4724:	2300      	movs	r3, #0
    4726:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	8b9b      	ldrh	r3, [r3, #28]
    472c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    472e:	89fb      	ldrh	r3, [r7, #14]
    4730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4734:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    4736:	89fa      	ldrh	r2, [r7, #14]
    4738:	887b      	ldrh	r3, [r7, #2]
    473a:	4313      	orrs	r3, r2
    473c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	89fa      	ldrh	r2, [r7, #14]
    4742:	839a      	strh	r2, [r3, #28]
}
    4744:	bf00      	nop
    4746:	3714      	adds	r7, #20
    4748:	46bd      	mov	sp, r7
    474a:	bc80      	pop	{r7}
    474c:	4770      	bx	lr

0000474e <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    474e:	b480      	push	{r7}
    4750:	b085      	sub	sp, #20
    4752:	af00      	add	r7, sp, #0
    4754:	6078      	str	r0, [r7, #4]
    4756:	460b      	mov	r3, r1
    4758:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    475a:	2300      	movs	r3, #0
    475c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	8b9b      	ldrh	r3, [r3, #28]
    4762:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    4764:	89fb      	ldrh	r3, [r7, #14]
    4766:	f3c3 030e 	ubfx	r3, r3, #0, #15
    476a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    476c:	887b      	ldrh	r3, [r7, #2]
    476e:	021b      	lsls	r3, r3, #8
    4770:	b29a      	uxth	r2, r3
    4772:	89fb      	ldrh	r3, [r7, #14]
    4774:	4313      	orrs	r3, r2
    4776:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	89fa      	ldrh	r2, [r7, #14]
    477c:	839a      	strh	r2, [r3, #28]
}
    477e:	bf00      	nop
    4780:	3714      	adds	r7, #20
    4782:	46bd      	mov	sp, r7
    4784:	bc80      	pop	{r7}
    4786:	4770      	bx	lr

00004788 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4788:	b480      	push	{r7}
    478a:	b085      	sub	sp, #20
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
    4790:	460b      	mov	r3, r1
    4792:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4794:	2300      	movs	r3, #0
    4796:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	8c1b      	ldrh	r3, [r3, #32]
    479c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    479e:	89fb      	ldrh	r3, [r7, #14]
    47a0:	f023 0302 	bic.w	r3, r3, #2
    47a4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    47a6:	89fa      	ldrh	r2, [r7, #14]
    47a8:	887b      	ldrh	r3, [r7, #2]
    47aa:	4313      	orrs	r3, r2
    47ac:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	89fa      	ldrh	r2, [r7, #14]
    47b2:	841a      	strh	r2, [r3, #32]
}
    47b4:	bf00      	nop
    47b6:	3714      	adds	r7, #20
    47b8:	46bd      	mov	sp, r7
    47ba:	bc80      	pop	{r7}
    47bc:	4770      	bx	lr

000047be <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    47be:	b480      	push	{r7}
    47c0:	b085      	sub	sp, #20
    47c2:	af00      	add	r7, sp, #0
    47c4:	6078      	str	r0, [r7, #4]
    47c6:	460b      	mov	r3, r1
    47c8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    47ca:	2300      	movs	r3, #0
    47cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    47ce:	687b      	ldr	r3, [r7, #4]
    47d0:	8c1b      	ldrh	r3, [r3, #32]
    47d2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    47d4:	89fb      	ldrh	r3, [r7, #14]
    47d6:	f023 0308 	bic.w	r3, r3, #8
    47da:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    47dc:	89fa      	ldrh	r2, [r7, #14]
    47de:	887b      	ldrh	r3, [r7, #2]
    47e0:	4313      	orrs	r3, r2
    47e2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	89fa      	ldrh	r2, [r7, #14]
    47e8:	841a      	strh	r2, [r3, #32]
}
    47ea:	bf00      	nop
    47ec:	3714      	adds	r7, #20
    47ee:	46bd      	mov	sp, r7
    47f0:	bc80      	pop	{r7}
    47f2:	4770      	bx	lr

000047f4 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    47f4:	b480      	push	{r7}
    47f6:	b085      	sub	sp, #20
    47f8:	af00      	add	r7, sp, #0
    47fa:	6078      	str	r0, [r7, #4]
    47fc:	460b      	mov	r3, r1
    47fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4800:	2300      	movs	r3, #0
    4802:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	8c1b      	ldrh	r3, [r3, #32]
    4808:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    480a:	89fb      	ldrh	r3, [r7, #14]
    480c:	f023 0320 	bic.w	r3, r3, #32
    4810:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    4812:	887b      	ldrh	r3, [r7, #2]
    4814:	011b      	lsls	r3, r3, #4
    4816:	b29a      	uxth	r2, r3
    4818:	89fb      	ldrh	r3, [r7, #14]
    481a:	4313      	orrs	r3, r2
    481c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	89fa      	ldrh	r2, [r7, #14]
    4822:	841a      	strh	r2, [r3, #32]
}
    4824:	bf00      	nop
    4826:	3714      	adds	r7, #20
    4828:	46bd      	mov	sp, r7
    482a:	bc80      	pop	{r7}
    482c:	4770      	bx	lr

0000482e <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    482e:	b480      	push	{r7}
    4830:	b085      	sub	sp, #20
    4832:	af00      	add	r7, sp, #0
    4834:	6078      	str	r0, [r7, #4]
    4836:	460b      	mov	r3, r1
    4838:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    483a:	2300      	movs	r3, #0
    483c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	8c1b      	ldrh	r3, [r3, #32]
    4842:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    4844:	89fb      	ldrh	r3, [r7, #14]
    4846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    484a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    484c:	887b      	ldrh	r3, [r7, #2]
    484e:	011b      	lsls	r3, r3, #4
    4850:	b29a      	uxth	r2, r3
    4852:	89fb      	ldrh	r3, [r7, #14]
    4854:	4313      	orrs	r3, r2
    4856:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	89fa      	ldrh	r2, [r7, #14]
    485c:	841a      	strh	r2, [r3, #32]
}
    485e:	bf00      	nop
    4860:	3714      	adds	r7, #20
    4862:	46bd      	mov	sp, r7
    4864:	bc80      	pop	{r7}
    4866:	4770      	bx	lr

00004868 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4868:	b480      	push	{r7}
    486a:	b085      	sub	sp, #20
    486c:	af00      	add	r7, sp, #0
    486e:	6078      	str	r0, [r7, #4]
    4870:	460b      	mov	r3, r1
    4872:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4874:	2300      	movs	r3, #0
    4876:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	8c1b      	ldrh	r3, [r3, #32]
    487c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    487e:	89fb      	ldrh	r3, [r7, #14]
    4880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4884:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    4886:	887b      	ldrh	r3, [r7, #2]
    4888:	021b      	lsls	r3, r3, #8
    488a:	b29a      	uxth	r2, r3
    488c:	89fb      	ldrh	r3, [r7, #14]
    488e:	4313      	orrs	r3, r2
    4890:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	89fa      	ldrh	r2, [r7, #14]
    4896:	841a      	strh	r2, [r3, #32]
}
    4898:	bf00      	nop
    489a:	3714      	adds	r7, #20
    489c:	46bd      	mov	sp, r7
    489e:	bc80      	pop	{r7}
    48a0:	4770      	bx	lr

000048a2 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    48a2:	b480      	push	{r7}
    48a4:	b085      	sub	sp, #20
    48a6:	af00      	add	r7, sp, #0
    48a8:	6078      	str	r0, [r7, #4]
    48aa:	460b      	mov	r3, r1
    48ac:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    48ae:	2300      	movs	r3, #0
    48b0:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	8c1b      	ldrh	r3, [r3, #32]
    48b6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    48b8:	89fb      	ldrh	r3, [r7, #14]
    48ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    48be:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    48c0:	887b      	ldrh	r3, [r7, #2]
    48c2:	021b      	lsls	r3, r3, #8
    48c4:	b29a      	uxth	r2, r3
    48c6:	89fb      	ldrh	r3, [r7, #14]
    48c8:	4313      	orrs	r3, r2
    48ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	89fa      	ldrh	r2, [r7, #14]
    48d0:	841a      	strh	r2, [r3, #32]
}
    48d2:	bf00      	nop
    48d4:	3714      	adds	r7, #20
    48d6:	46bd      	mov	sp, r7
    48d8:	bc80      	pop	{r7}
    48da:	4770      	bx	lr

000048dc <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    48dc:	b480      	push	{r7}
    48de:	b085      	sub	sp, #20
    48e0:	af00      	add	r7, sp, #0
    48e2:	6078      	str	r0, [r7, #4]
    48e4:	460b      	mov	r3, r1
    48e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    48e8:	2300      	movs	r3, #0
    48ea:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	8c1b      	ldrh	r3, [r3, #32]
    48f0:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    48f2:	89fb      	ldrh	r3, [r7, #14]
    48f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    48f8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    48fa:	887b      	ldrh	r3, [r7, #2]
    48fc:	031b      	lsls	r3, r3, #12
    48fe:	b29a      	uxth	r2, r3
    4900:	89fb      	ldrh	r3, [r7, #14]
    4902:	4313      	orrs	r3, r2
    4904:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4906:	687b      	ldr	r3, [r7, #4]
    4908:	89fa      	ldrh	r2, [r7, #14]
    490a:	841a      	strh	r2, [r3, #32]
}
    490c:	bf00      	nop
    490e:	3714      	adds	r7, #20
    4910:	46bd      	mov	sp, r7
    4912:	bc80      	pop	{r7}
    4914:	4770      	bx	lr

00004916 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    4916:	b480      	push	{r7}
    4918:	b085      	sub	sp, #20
    491a:	af00      	add	r7, sp, #0
    491c:	6078      	str	r0, [r7, #4]
    491e:	460b      	mov	r3, r1
    4920:	807b      	strh	r3, [r7, #2]
    4922:	4613      	mov	r3, r2
    4924:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    4926:	2300      	movs	r3, #0
    4928:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    492a:	887b      	ldrh	r3, [r7, #2]
    492c:	2201      	movs	r2, #1
    492e:	fa02 f303 	lsl.w	r3, r2, r3
    4932:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	8c1b      	ldrh	r3, [r3, #32]
    4938:	b29a      	uxth	r2, r3
    493a:	89fb      	ldrh	r3, [r7, #14]
    493c:	43db      	mvns	r3, r3
    493e:	b29b      	uxth	r3, r3
    4940:	4013      	ands	r3, r2
    4942:	b29a      	uxth	r2, r3
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	8c1b      	ldrh	r3, [r3, #32]
    494c:	b29a      	uxth	r2, r3
    494e:	8839      	ldrh	r1, [r7, #0]
    4950:	887b      	ldrh	r3, [r7, #2]
    4952:	fa01 f303 	lsl.w	r3, r1, r3
    4956:	b29b      	uxth	r3, r3
    4958:	4313      	orrs	r3, r2
    495a:	b29a      	uxth	r2, r3
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	841a      	strh	r2, [r3, #32]
}
    4960:	bf00      	nop
    4962:	3714      	adds	r7, #20
    4964:	46bd      	mov	sp, r7
    4966:	bc80      	pop	{r7}
    4968:	4770      	bx	lr

0000496a <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    496a:	b480      	push	{r7}
    496c:	b085      	sub	sp, #20
    496e:	af00      	add	r7, sp, #0
    4970:	6078      	str	r0, [r7, #4]
    4972:	460b      	mov	r3, r1
    4974:	807b      	strh	r3, [r7, #2]
    4976:	4613      	mov	r3, r2
    4978:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    497a:	2300      	movs	r3, #0
    497c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    497e:	887b      	ldrh	r3, [r7, #2]
    4980:	2204      	movs	r2, #4
    4982:	fa02 f303 	lsl.w	r3, r2, r3
    4986:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	8c1b      	ldrh	r3, [r3, #32]
    498c:	b29a      	uxth	r2, r3
    498e:	89fb      	ldrh	r3, [r7, #14]
    4990:	43db      	mvns	r3, r3
    4992:	b29b      	uxth	r3, r3
    4994:	4013      	ands	r3, r2
    4996:	b29a      	uxth	r2, r3
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	8c1b      	ldrh	r3, [r3, #32]
    49a0:	b29a      	uxth	r2, r3
    49a2:	8839      	ldrh	r1, [r7, #0]
    49a4:	887b      	ldrh	r3, [r7, #2]
    49a6:	fa01 f303 	lsl.w	r3, r1, r3
    49aa:	b29b      	uxth	r3, r3
    49ac:	4313      	orrs	r3, r2
    49ae:	b29a      	uxth	r2, r3
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	841a      	strh	r2, [r3, #32]
}
    49b4:	bf00      	nop
    49b6:	3714      	adds	r7, #20
    49b8:	46bd      	mov	sp, r7
    49ba:	bc80      	pop	{r7}
    49bc:	4770      	bx	lr

000049be <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    49be:	b480      	push	{r7}
    49c0:	b085      	sub	sp, #20
    49c2:	af00      	add	r7, sp, #0
    49c4:	6078      	str	r0, [r7, #4]
    49c6:	460b      	mov	r3, r1
    49c8:	807b      	strh	r3, [r7, #2]
    49ca:	4613      	mov	r3, r2
    49cc:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    49ce:	2300      	movs	r3, #0
    49d0:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    49d2:	2300      	movs	r3, #0
    49d4:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    49d6:	687b      	ldr	r3, [r7, #4]
    49d8:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    49da:	68fb      	ldr	r3, [r7, #12]
    49dc:	3318      	adds	r3, #24
    49de:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    49e0:	887b      	ldrh	r3, [r7, #2]
    49e2:	2201      	movs	r2, #1
    49e4:	fa02 f303 	lsl.w	r3, r2, r3
    49e8:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	8c1b      	ldrh	r3, [r3, #32]
    49ee:	b29a      	uxth	r2, r3
    49f0:	897b      	ldrh	r3, [r7, #10]
    49f2:	43db      	mvns	r3, r3
    49f4:	b29b      	uxth	r3, r3
    49f6:	4013      	ands	r3, r2
    49f8:	b29a      	uxth	r2, r3
    49fa:	687b      	ldr	r3, [r7, #4]
    49fc:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    49fe:	887b      	ldrh	r3, [r7, #2]
    4a00:	2b00      	cmp	r3, #0
    4a02:	d002      	beq.n	4a0a <TIM_SelectOCxM+0x4c>
    4a04:	887b      	ldrh	r3, [r7, #2]
    4a06:	2b08      	cmp	r3, #8
    4a08:	d113      	bne.n	4a32 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
    4a0a:	887b      	ldrh	r3, [r7, #2]
    4a0c:	085b      	lsrs	r3, r3, #1
    4a0e:	b29b      	uxth	r3, r3
    4a10:	461a      	mov	r2, r3
    4a12:	68fb      	ldr	r3, [r7, #12]
    4a14:	4413      	add	r3, r2
    4a16:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	681a      	ldr	r2, [r3, #0]
    4a1c:	68fb      	ldr	r3, [r7, #12]
    4a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    4a22:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    4a24:	68fb      	ldr	r3, [r7, #12]
    4a26:	6819      	ldr	r1, [r3, #0]
    4a28:	883a      	ldrh	r2, [r7, #0]
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	430a      	orrs	r2, r1
    4a2e:	601a      	str	r2, [r3, #0]
    4a30:	e017      	b.n	4a62 <TIM_SelectOCxM+0xa4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    4a32:	887b      	ldrh	r3, [r7, #2]
    4a34:	3b04      	subs	r3, #4
    4a36:	b29b      	uxth	r3, r3
    4a38:	085b      	lsrs	r3, r3, #1
    4a3a:	b29b      	uxth	r3, r3
    4a3c:	461a      	mov	r2, r3
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	4413      	add	r3, r2
    4a42:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    4a44:	68fb      	ldr	r3, [r7, #12]
    4a46:	681a      	ldr	r2, [r3, #0]
    4a48:	68fb      	ldr	r3, [r7, #12]
    4a4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    4a4e:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    4a50:	68fb      	ldr	r3, [r7, #12]
    4a52:	681a      	ldr	r2, [r3, #0]
    4a54:	883b      	ldrh	r3, [r7, #0]
    4a56:	021b      	lsls	r3, r3, #8
    4a58:	b29b      	uxth	r3, r3
    4a5a:	4619      	mov	r1, r3
    4a5c:	68fb      	ldr	r3, [r7, #12]
    4a5e:	430a      	orrs	r2, r1
    4a60:	601a      	str	r2, [r3, #0]
  }
}
    4a62:	bf00      	nop
    4a64:	3714      	adds	r7, #20
    4a66:	46bd      	mov	sp, r7
    4a68:	bc80      	pop	{r7}
    4a6a:	4770      	bx	lr

00004a6c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4a6c:	b480      	push	{r7}
    4a6e:	b083      	sub	sp, #12
    4a70:	af00      	add	r7, sp, #0
    4a72:	6078      	str	r0, [r7, #4]
    4a74:	460b      	mov	r3, r1
    4a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4a78:	78fb      	ldrb	r3, [r7, #3]
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d008      	beq.n	4a90 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	881b      	ldrh	r3, [r3, #0]
    4a82:	b29b      	uxth	r3, r3
    4a84:	f043 0302 	orr.w	r3, r3, #2
    4a88:	b29a      	uxth	r2, r3
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
  }
}
    4a8e:	e007      	b.n	4aa0 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	881b      	ldrh	r3, [r3, #0]
    4a94:	b29b      	uxth	r3, r3
    4a96:	f023 0302 	bic.w	r3, r3, #2
    4a9a:	b29a      	uxth	r2, r3
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	801a      	strh	r2, [r3, #0]
}
    4aa0:	bf00      	nop
    4aa2:	370c      	adds	r7, #12
    4aa4:	46bd      	mov	sp, r7
    4aa6:	bc80      	pop	{r7}
    4aa8:	4770      	bx	lr

00004aaa <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    4aaa:	b480      	push	{r7}
    4aac:	b083      	sub	sp, #12
    4aae:	af00      	add	r7, sp, #0
    4ab0:	6078      	str	r0, [r7, #4]
    4ab2:	460b      	mov	r3, r1
    4ab4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    4ab6:	887b      	ldrh	r3, [r7, #2]
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d008      	beq.n	4ace <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	881b      	ldrh	r3, [r3, #0]
    4ac0:	b29b      	uxth	r3, r3
    4ac2:	f043 0304 	orr.w	r3, r3, #4
    4ac6:	b29a      	uxth	r2, r3
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
  }
}
    4acc:	e007      	b.n	4ade <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	881b      	ldrh	r3, [r3, #0]
    4ad2:	b29b      	uxth	r3, r3
    4ad4:	f023 0304 	bic.w	r3, r3, #4
    4ad8:	b29a      	uxth	r2, r3
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	801a      	strh	r2, [r3, #0]
}
    4ade:	bf00      	nop
    4ae0:	370c      	adds	r7, #12
    4ae2:	46bd      	mov	sp, r7
    4ae4:	bc80      	pop	{r7}
    4ae6:	4770      	bx	lr

00004ae8 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    4ae8:	b480      	push	{r7}
    4aea:	b083      	sub	sp, #12
    4aec:	af00      	add	r7, sp, #0
    4aee:	6078      	str	r0, [r7, #4]
    4af0:	460b      	mov	r3, r1
    4af2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4af4:	78fb      	ldrb	r3, [r7, #3]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d008      	beq.n	4b0c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	889b      	ldrh	r3, [r3, #4]
    4afe:	b29b      	uxth	r3, r3
    4b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4b04:	b29a      	uxth	r2, r3
    4b06:	687b      	ldr	r3, [r7, #4]
    4b08:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
  }
}
    4b0a:	e007      	b.n	4b1c <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	889b      	ldrh	r3, [r3, #4]
    4b10:	b29b      	uxth	r3, r3
    4b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4b16:	b29a      	uxth	r2, r3
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	809a      	strh	r2, [r3, #4]
}
    4b1c:	bf00      	nop
    4b1e:	370c      	adds	r7, #12
    4b20:	46bd      	mov	sp, r7
    4b22:	bc80      	pop	{r7}
    4b24:	4770      	bx	lr

00004b26 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    4b26:	b480      	push	{r7}
    4b28:	b083      	sub	sp, #12
    4b2a:	af00      	add	r7, sp, #0
    4b2c:	6078      	str	r0, [r7, #4]
    4b2e:	460b      	mov	r3, r1
    4b30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    4b32:	687b      	ldr	r3, [r7, #4]
    4b34:	881b      	ldrh	r3, [r3, #0]
    4b36:	b29b      	uxth	r3, r3
    4b38:	f023 0308 	bic.w	r3, r3, #8
    4b3c:	b29a      	uxth	r2, r3
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	881b      	ldrh	r3, [r3, #0]
    4b46:	b29a      	uxth	r2, r3
    4b48:	887b      	ldrh	r3, [r7, #2]
    4b4a:	4313      	orrs	r3, r2
    4b4c:	b29a      	uxth	r2, r3
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	801a      	strh	r2, [r3, #0]
}
    4b52:	bf00      	nop
    4b54:	370c      	adds	r7, #12
    4b56:	46bd      	mov	sp, r7
    4b58:	bc80      	pop	{r7}
    4b5a:	4770      	bx	lr

00004b5c <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    4b5c:	b480      	push	{r7}
    4b5e:	b083      	sub	sp, #12
    4b60:	af00      	add	r7, sp, #0
    4b62:	6078      	str	r0, [r7, #4]
    4b64:	460b      	mov	r3, r1
    4b66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	889b      	ldrh	r3, [r3, #4]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4b72:	b29a      	uxth	r2, r3
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	889b      	ldrh	r3, [r3, #4]
    4b7c:	b29a      	uxth	r2, r3
    4b7e:	887b      	ldrh	r3, [r7, #2]
    4b80:	4313      	orrs	r3, r2
    4b82:	b29a      	uxth	r2, r3
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	809a      	strh	r2, [r3, #4]
}
    4b88:	bf00      	nop
    4b8a:	370c      	adds	r7, #12
    4b8c:	46bd      	mov	sp, r7
    4b8e:	bc80      	pop	{r7}
    4b90:	4770      	bx	lr

00004b92 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    4b92:	b480      	push	{r7}
    4b94:	b083      	sub	sp, #12
    4b96:	af00      	add	r7, sp, #0
    4b98:	6078      	str	r0, [r7, #4]
    4b9a:	460b      	mov	r3, r1
    4b9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	891b      	ldrh	r3, [r3, #8]
    4ba2:	b29b      	uxth	r3, r3
    4ba4:	f023 0307 	bic.w	r3, r3, #7
    4ba8:	b29a      	uxth	r2, r3
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    4bae:	687b      	ldr	r3, [r7, #4]
    4bb0:	891b      	ldrh	r3, [r3, #8]
    4bb2:	b29a      	uxth	r2, r3
    4bb4:	887b      	ldrh	r3, [r7, #2]
    4bb6:	4313      	orrs	r3, r2
    4bb8:	b29a      	uxth	r2, r3
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	811a      	strh	r2, [r3, #8]
}
    4bbe:	bf00      	nop
    4bc0:	370c      	adds	r7, #12
    4bc2:	46bd      	mov	sp, r7
    4bc4:	bc80      	pop	{r7}
    4bc6:	4770      	bx	lr

00004bc8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    4bc8:	b480      	push	{r7}
    4bca:	b083      	sub	sp, #12
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
    4bd0:	460b      	mov	r3, r1
    4bd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	891b      	ldrh	r3, [r3, #8]
    4bd8:	b29b      	uxth	r3, r3
    4bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4bde:	b29a      	uxth	r2, r3
    4be0:	687b      	ldr	r3, [r7, #4]
    4be2:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	891b      	ldrh	r3, [r3, #8]
    4be8:	b29a      	uxth	r2, r3
    4bea:	887b      	ldrh	r3, [r7, #2]
    4bec:	4313      	orrs	r3, r2
    4bee:	b29a      	uxth	r2, r3
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	811a      	strh	r2, [r3, #8]
}
    4bf4:	bf00      	nop
    4bf6:	370c      	adds	r7, #12
    4bf8:	46bd      	mov	sp, r7
    4bfa:	bc80      	pop	{r7}
    4bfc:	4770      	bx	lr

00004bfe <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    4bfe:	b480      	push	{r7}
    4c00:	b083      	sub	sp, #12
    4c02:	af00      	add	r7, sp, #0
    4c04:	6078      	str	r0, [r7, #4]
    4c06:	460b      	mov	r3, r1
    4c08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	887a      	ldrh	r2, [r7, #2]
    4c0e:	849a      	strh	r2, [r3, #36]	; 0x24
}
    4c10:	bf00      	nop
    4c12:	370c      	adds	r7, #12
    4c14:	46bd      	mov	sp, r7
    4c16:	bc80      	pop	{r7}
    4c18:	4770      	bx	lr

00004c1a <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    4c1a:	b480      	push	{r7}
    4c1c:	b083      	sub	sp, #12
    4c1e:	af00      	add	r7, sp, #0
    4c20:	6078      	str	r0, [r7, #4]
    4c22:	460b      	mov	r3, r1
    4c24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    4c26:	687b      	ldr	r3, [r7, #4]
    4c28:	887a      	ldrh	r2, [r7, #2]
    4c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    4c2c:	bf00      	nop
    4c2e:	370c      	adds	r7, #12
    4c30:	46bd      	mov	sp, r7
    4c32:	bc80      	pop	{r7}
    4c34:	4770      	bx	lr

00004c36 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    4c36:	b480      	push	{r7}
    4c38:	b083      	sub	sp, #12
    4c3a:	af00      	add	r7, sp, #0
    4c3c:	6078      	str	r0, [r7, #4]
    4c3e:	460b      	mov	r3, r1
    4c40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	887a      	ldrh	r2, [r7, #2]
    4c46:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4c48:	bf00      	nop
    4c4a:	370c      	adds	r7, #12
    4c4c:	46bd      	mov	sp, r7
    4c4e:	bc80      	pop	{r7}
    4c50:	4770      	bx	lr

00004c52 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    4c52:	b480      	push	{r7}
    4c54:	b083      	sub	sp, #12
    4c56:	af00      	add	r7, sp, #0
    4c58:	6078      	str	r0, [r7, #4]
    4c5a:	460b      	mov	r3, r1
    4c5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	887a      	ldrh	r2, [r7, #2]
    4c62:	871a      	strh	r2, [r3, #56]	; 0x38
}
    4c64:	bf00      	nop
    4c66:	370c      	adds	r7, #12
    4c68:	46bd      	mov	sp, r7
    4c6a:	bc80      	pop	{r7}
    4c6c:	4770      	bx	lr

00004c6e <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    4c6e:	b480      	push	{r7}
    4c70:	b083      	sub	sp, #12
    4c72:	af00      	add	r7, sp, #0
    4c74:	6078      	str	r0, [r7, #4]
    4c76:	460b      	mov	r3, r1
    4c78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	887a      	ldrh	r2, [r7, #2]
    4c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    4c80:	bf00      	nop
    4c82:	370c      	adds	r7, #12
    4c84:	46bd      	mov	sp, r7
    4c86:	bc80      	pop	{r7}
    4c88:	4770      	bx	lr

00004c8a <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    4c8a:	b480      	push	{r7}
    4c8c:	b083      	sub	sp, #12
    4c8e:	af00      	add	r7, sp, #0
    4c90:	6078      	str	r0, [r7, #4]
    4c92:	460b      	mov	r3, r1
    4c94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	887a      	ldrh	r2, [r7, #2]
    4c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    4c9e:	bf00      	nop
    4ca0:	370c      	adds	r7, #12
    4ca2:	46bd      	mov	sp, r7
    4ca4:	bc80      	pop	{r7}
    4ca6:	4770      	bx	lr

00004ca8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4ca8:	b480      	push	{r7}
    4caa:	b083      	sub	sp, #12
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
    4cb0:	460b      	mov	r3, r1
    4cb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    4cb4:	687b      	ldr	r3, [r7, #4]
    4cb6:	8b1b      	ldrh	r3, [r3, #24]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	f023 030c 	bic.w	r3, r3, #12
    4cbe:	b29a      	uxth	r2, r3
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	8b1b      	ldrh	r3, [r3, #24]
    4cc8:	b29a      	uxth	r2, r3
    4cca:	887b      	ldrh	r3, [r7, #2]
    4ccc:	4313      	orrs	r3, r2
    4cce:	b29a      	uxth	r2, r3
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	831a      	strh	r2, [r3, #24]
}
    4cd4:	bf00      	nop
    4cd6:	370c      	adds	r7, #12
    4cd8:	46bd      	mov	sp, r7
    4cda:	bc80      	pop	{r7}
    4cdc:	4770      	bx	lr

00004cde <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4cde:	b480      	push	{r7}
    4ce0:	b083      	sub	sp, #12
    4ce2:	af00      	add	r7, sp, #0
    4ce4:	6078      	str	r0, [r7, #4]
    4ce6:	460b      	mov	r3, r1
    4ce8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	8b1b      	ldrh	r3, [r3, #24]
    4cee:	b29b      	uxth	r3, r3
    4cf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4cf4:	b29a      	uxth	r2, r3
    4cf6:	687b      	ldr	r3, [r7, #4]
    4cf8:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	8b1b      	ldrh	r3, [r3, #24]
    4cfe:	b29a      	uxth	r2, r3
    4d00:	887b      	ldrh	r3, [r7, #2]
    4d02:	021b      	lsls	r3, r3, #8
    4d04:	b29b      	uxth	r3, r3
    4d06:	4313      	orrs	r3, r2
    4d08:	b29a      	uxth	r2, r3
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	831a      	strh	r2, [r3, #24]
}
    4d0e:	bf00      	nop
    4d10:	370c      	adds	r7, #12
    4d12:	46bd      	mov	sp, r7
    4d14:	bc80      	pop	{r7}
    4d16:	4770      	bx	lr

00004d18 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4d18:	b480      	push	{r7}
    4d1a:	b083      	sub	sp, #12
    4d1c:	af00      	add	r7, sp, #0
    4d1e:	6078      	str	r0, [r7, #4]
    4d20:	460b      	mov	r3, r1
    4d22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	8b9b      	ldrh	r3, [r3, #28]
    4d28:	b29b      	uxth	r3, r3
    4d2a:	f023 030c 	bic.w	r3, r3, #12
    4d2e:	b29a      	uxth	r2, r3
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	8b9b      	ldrh	r3, [r3, #28]
    4d38:	b29a      	uxth	r2, r3
    4d3a:	887b      	ldrh	r3, [r7, #2]
    4d3c:	4313      	orrs	r3, r2
    4d3e:	b29a      	uxth	r2, r3
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	839a      	strh	r2, [r3, #28]
}
    4d44:	bf00      	nop
    4d46:	370c      	adds	r7, #12
    4d48:	46bd      	mov	sp, r7
    4d4a:	bc80      	pop	{r7}
    4d4c:	4770      	bx	lr

00004d4e <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    4d4e:	b480      	push	{r7}
    4d50:	b083      	sub	sp, #12
    4d52:	af00      	add	r7, sp, #0
    4d54:	6078      	str	r0, [r7, #4]
    4d56:	460b      	mov	r3, r1
    4d58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	8b9b      	ldrh	r3, [r3, #28]
    4d5e:	b29b      	uxth	r3, r3
    4d60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    4d64:	b29a      	uxth	r2, r3
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	8b9b      	ldrh	r3, [r3, #28]
    4d6e:	b29a      	uxth	r2, r3
    4d70:	887b      	ldrh	r3, [r7, #2]
    4d72:	021b      	lsls	r3, r3, #8
    4d74:	b29b      	uxth	r3, r3
    4d76:	4313      	orrs	r3, r2
    4d78:	b29a      	uxth	r2, r3
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	839a      	strh	r2, [r3, #28]
}
    4d7e:	bf00      	nop
    4d80:	370c      	adds	r7, #12
    4d82:	46bd      	mov	sp, r7
    4d84:	bc80      	pop	{r7}
    4d86:	4770      	bx	lr

00004d88 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    4d88:	b480      	push	{r7}
    4d8a:	b083      	sub	sp, #12
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
    4d90:	460b      	mov	r3, r1
    4d92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	881b      	ldrh	r3, [r3, #0]
    4d98:	b29b      	uxth	r3, r3
    4d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4d9e:	b29a      	uxth	r2, r3
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	881b      	ldrh	r3, [r3, #0]
    4da8:	b29a      	uxth	r2, r3
    4daa:	887b      	ldrh	r3, [r7, #2]
    4dac:	4313      	orrs	r3, r2
    4dae:	b29a      	uxth	r2, r3
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	801a      	strh	r2, [r3, #0]
}
    4db4:	bf00      	nop
    4db6:	370c      	adds	r7, #12
    4db8:	46bd      	mov	sp, r7
    4dba:	bc80      	pop	{r7}
    4dbc:	4770      	bx	lr

00004dbe <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4dbe:	b480      	push	{r7}
    4dc0:	b083      	sub	sp, #12
    4dc2:	af00      	add	r7, sp, #0
    4dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4dca:	b29b      	uxth	r3, r3
}
    4dcc:	4618      	mov	r0, r3
    4dce:	370c      	adds	r7, #12
    4dd0:	46bd      	mov	sp, r7
    4dd2:	bc80      	pop	{r7}
    4dd4:	4770      	bx	lr

00004dd6 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    4dd6:	b480      	push	{r7}
    4dd8:	b083      	sub	sp, #12
    4dda:	af00      	add	r7, sp, #0
    4ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4dde:	687b      	ldr	r3, [r7, #4]
    4de0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4de2:	b29b      	uxth	r3, r3
}
    4de4:	4618      	mov	r0, r3
    4de6:	370c      	adds	r7, #12
    4de8:	46bd      	mov	sp, r7
    4dea:	bc80      	pop	{r7}
    4dec:	4770      	bx	lr

00004dee <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4dee:	b480      	push	{r7}
    4df0:	b083      	sub	sp, #12
    4df2:	af00      	add	r7, sp, #0
    4df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    4dfa:	b29b      	uxth	r3, r3
}
    4dfc:	4618      	mov	r0, r3
    4dfe:	370c      	adds	r7, #12
    4e00:	46bd      	mov	sp, r7
    4e02:	bc80      	pop	{r7}
    4e04:	4770      	bx	lr

00004e06 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4e06:	b480      	push	{r7}
    4e08:	b083      	sub	sp, #12
    4e0a:	af00      	add	r7, sp, #0
    4e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    4e14:	b29b      	uxth	r3, r3
}
    4e16:	4618      	mov	r0, r3
    4e18:	370c      	adds	r7, #12
    4e1a:	46bd      	mov	sp, r7
    4e1c:	bc80      	pop	{r7}
    4e1e:	4770      	bx	lr

00004e20 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4e20:	b480      	push	{r7}
    4e22:	b083      	sub	sp, #12
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4e2c:	b29b      	uxth	r3, r3
}
    4e2e:	4618      	mov	r0, r3
    4e30:	370c      	adds	r7, #12
    4e32:	46bd      	mov	sp, r7
    4e34:	bc80      	pop	{r7}
    4e36:	4770      	bx	lr

00004e38 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    4e38:	b480      	push	{r7}
    4e3a:	b083      	sub	sp, #12
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e44:	b29b      	uxth	r3, r3
}
    4e46:	4618      	mov	r0, r3
    4e48:	370c      	adds	r7, #12
    4e4a:	46bd      	mov	sp, r7
    4e4c:	bc80      	pop	{r7}
    4e4e:	4770      	bx	lr

00004e50 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    4e50:	b480      	push	{r7}
    4e52:	b085      	sub	sp, #20
    4e54:	af00      	add	r7, sp, #0
    4e56:	6078      	str	r0, [r7, #4]
    4e58:	460b      	mov	r3, r1
    4e5a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4e5c:	2300      	movs	r3, #0
    4e5e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	8a1b      	ldrh	r3, [r3, #16]
    4e64:	b29a      	uxth	r2, r3
    4e66:	887b      	ldrh	r3, [r7, #2]
    4e68:	4013      	ands	r3, r2
    4e6a:	b29b      	uxth	r3, r3
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d002      	beq.n	4e76 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    4e70:	2301      	movs	r3, #1
    4e72:	73fb      	strb	r3, [r7, #15]
    4e74:	e001      	b.n	4e7a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    4e76:	2300      	movs	r3, #0
    4e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4e7a:	7bfb      	ldrb	r3, [r7, #15]
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	3714      	adds	r7, #20
    4e80:	46bd      	mov	sp, r7
    4e82:	bc80      	pop	{r7}
    4e84:	4770      	bx	lr

00004e86 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    4e86:	b480      	push	{r7}
    4e88:	b083      	sub	sp, #12
    4e8a:	af00      	add	r7, sp, #0
    4e8c:	6078      	str	r0, [r7, #4]
    4e8e:	460b      	mov	r3, r1
    4e90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4e92:	887b      	ldrh	r3, [r7, #2]
    4e94:	43db      	mvns	r3, r3
    4e96:	b29a      	uxth	r2, r3
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	821a      	strh	r2, [r3, #16]
}
    4e9c:	bf00      	nop
    4e9e:	370c      	adds	r7, #12
    4ea0:	46bd      	mov	sp, r7
    4ea2:	bc80      	pop	{r7}
    4ea4:	4770      	bx	lr

00004ea6 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4ea6:	b480      	push	{r7}
    4ea8:	b085      	sub	sp, #20
    4eaa:	af00      	add	r7, sp, #0
    4eac:	6078      	str	r0, [r7, #4]
    4eae:	460b      	mov	r3, r1
    4eb0:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4eb2:	2300      	movs	r3, #0
    4eb4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    4eb6:	2300      	movs	r3, #0
    4eb8:	81bb      	strh	r3, [r7, #12]
    4eba:	2300      	movs	r3, #0
    4ebc:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	8a1b      	ldrh	r3, [r3, #16]
    4ec2:	b29a      	uxth	r2, r3
    4ec4:	887b      	ldrh	r3, [r7, #2]
    4ec6:	4013      	ands	r3, r2
    4ec8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	899b      	ldrh	r3, [r3, #12]
    4ece:	b29a      	uxth	r2, r3
    4ed0:	887b      	ldrh	r3, [r7, #2]
    4ed2:	4013      	ands	r3, r2
    4ed4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4ed6:	89bb      	ldrh	r3, [r7, #12]
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d005      	beq.n	4ee8 <TIM_GetITStatus+0x42>
    4edc:	897b      	ldrh	r3, [r7, #10]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d002      	beq.n	4ee8 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
    4ee2:	2301      	movs	r3, #1
    4ee4:	73fb      	strb	r3, [r7, #15]
    4ee6:	e001      	b.n	4eec <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    4ee8:	2300      	movs	r3, #0
    4eea:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4eec:	7bfb      	ldrb	r3, [r7, #15]
}
    4eee:	4618      	mov	r0, r3
    4ef0:	3714      	adds	r7, #20
    4ef2:	46bd      	mov	sp, r7
    4ef4:	bc80      	pop	{r7}
    4ef6:	4770      	bx	lr

00004ef8 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4ef8:	b480      	push	{r7}
    4efa:	b083      	sub	sp, #12
    4efc:	af00      	add	r7, sp, #0
    4efe:	6078      	str	r0, [r7, #4]
    4f00:	460b      	mov	r3, r1
    4f02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    4f04:	887b      	ldrh	r3, [r7, #2]
    4f06:	43db      	mvns	r3, r3
    4f08:	b29a      	uxth	r2, r3
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	821a      	strh	r2, [r3, #16]
}
    4f0e:	bf00      	nop
    4f10:	370c      	adds	r7, #12
    4f12:	46bd      	mov	sp, r7
    4f14:	bc80      	pop	{r7}
    4f16:	4770      	bx	lr

00004f18 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4f18:	b480      	push	{r7}
    4f1a:	b087      	sub	sp, #28
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	60f8      	str	r0, [r7, #12]
    4f20:	4608      	mov	r0, r1
    4f22:	4611      	mov	r1, r2
    4f24:	461a      	mov	r2, r3
    4f26:	4603      	mov	r3, r0
    4f28:	817b      	strh	r3, [r7, #10]
    4f2a:	460b      	mov	r3, r1
    4f2c:	813b      	strh	r3, [r7, #8]
    4f2e:	4613      	mov	r3, r2
    4f30:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    4f32:	2300      	movs	r3, #0
    4f34:	82bb      	strh	r3, [r7, #20]
    4f36:	2300      	movs	r3, #0
    4f38:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    4f3a:	68fb      	ldr	r3, [r7, #12]
    4f3c:	8c1b      	ldrh	r3, [r3, #32]
    4f3e:	b29b      	uxth	r3, r3
    4f40:	f023 0301 	bic.w	r3, r3, #1
    4f44:	b29a      	uxth	r2, r3
    4f46:	68fb      	ldr	r3, [r7, #12]
    4f48:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    4f4a:	68fb      	ldr	r3, [r7, #12]
    4f4c:	8b1b      	ldrh	r3, [r3, #24]
    4f4e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	8c1b      	ldrh	r3, [r3, #32]
    4f54:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    4f56:	8abb      	ldrh	r3, [r7, #20]
    4f58:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4f5c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4f5e:	88fb      	ldrh	r3, [r7, #6]
    4f60:	011b      	lsls	r3, r3, #4
    4f62:	b29a      	uxth	r2, r3
    4f64:	893b      	ldrh	r3, [r7, #8]
    4f66:	4313      	orrs	r3, r2
    4f68:	b29a      	uxth	r2, r3
    4f6a:	8abb      	ldrh	r3, [r7, #20]
    4f6c:	4313      	orrs	r3, r2
    4f6e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    4f70:	68fb      	ldr	r3, [r7, #12]
    4f72:	4a1c      	ldr	r2, [pc, #112]	; (4fe4 <TI1_Config+0xcc>)
    4f74:	4293      	cmp	r3, r2
    4f76:	d013      	beq.n	4fa0 <TI1_Config+0x88>
    4f78:	68fb      	ldr	r3, [r7, #12]
    4f7a:	4a1b      	ldr	r2, [pc, #108]	; (4fe8 <TI1_Config+0xd0>)
    4f7c:	4293      	cmp	r3, r2
    4f7e:	d00f      	beq.n	4fa0 <TI1_Config+0x88>
    4f80:	68fb      	ldr	r3, [r7, #12]
    4f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4f86:	d00b      	beq.n	4fa0 <TI1_Config+0x88>
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	4a18      	ldr	r2, [pc, #96]	; (4fec <TI1_Config+0xd4>)
    4f8c:	4293      	cmp	r3, r2
    4f8e:	d007      	beq.n	4fa0 <TI1_Config+0x88>
    4f90:	68fb      	ldr	r3, [r7, #12]
    4f92:	4a17      	ldr	r2, [pc, #92]	; (4ff0 <TI1_Config+0xd8>)
    4f94:	4293      	cmp	r3, r2
    4f96:	d003      	beq.n	4fa0 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
    4f98:	68fb      	ldr	r3, [r7, #12]
    4f9a:	4a16      	ldr	r2, [pc, #88]	; (4ff4 <TI1_Config+0xdc>)
    4f9c:	4293      	cmp	r3, r2
    4f9e:	d10b      	bne.n	4fb8 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    4fa0:	8afb      	ldrh	r3, [r7, #22]
    4fa2:	f023 0302 	bic.w	r3, r3, #2
    4fa6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4fa8:	897a      	ldrh	r2, [r7, #10]
    4faa:	8afb      	ldrh	r3, [r7, #22]
    4fac:	4313      	orrs	r3, r2
    4fae:	b29b      	uxth	r3, r3
    4fb0:	f043 0301 	orr.w	r3, r3, #1
    4fb4:	82fb      	strh	r3, [r7, #22]
    4fb6:	e00a      	b.n	4fce <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    4fb8:	8afb      	ldrh	r3, [r7, #22]
    4fba:	f023 030a 	bic.w	r3, r3, #10
    4fbe:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    4fc0:	897a      	ldrh	r2, [r7, #10]
    4fc2:	8afb      	ldrh	r3, [r7, #22]
    4fc4:	4313      	orrs	r3, r2
    4fc6:	b29b      	uxth	r3, r3
    4fc8:	f043 0301 	orr.w	r3, r3, #1
    4fcc:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	8aba      	ldrh	r2, [r7, #20]
    4fd2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    4fd4:	68fb      	ldr	r3, [r7, #12]
    4fd6:	8afa      	ldrh	r2, [r7, #22]
    4fd8:	841a      	strh	r2, [r3, #32]
}
    4fda:	bf00      	nop
    4fdc:	371c      	adds	r7, #28
    4fde:	46bd      	mov	sp, r7
    4fe0:	bc80      	pop	{r7}
    4fe2:	4770      	bx	lr
    4fe4:	40012c00 	.word	0x40012c00
    4fe8:	40013400 	.word	0x40013400
    4fec:	40000400 	.word	0x40000400
    4ff0:	40000800 	.word	0x40000800
    4ff4:	40000c00 	.word	0x40000c00

00004ff8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    4ff8:	b480      	push	{r7}
    4ffa:	b087      	sub	sp, #28
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60f8      	str	r0, [r7, #12]
    5000:	4608      	mov	r0, r1
    5002:	4611      	mov	r1, r2
    5004:	461a      	mov	r2, r3
    5006:	4603      	mov	r3, r0
    5008:	817b      	strh	r3, [r7, #10]
    500a:	460b      	mov	r3, r1
    500c:	813b      	strh	r3, [r7, #8]
    500e:	4613      	mov	r3, r2
    5010:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    5012:	2300      	movs	r3, #0
    5014:	82bb      	strh	r3, [r7, #20]
    5016:	2300      	movs	r3, #0
    5018:	82fb      	strh	r3, [r7, #22]
    501a:	2300      	movs	r3, #0
    501c:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    501e:	68fb      	ldr	r3, [r7, #12]
    5020:	8c1b      	ldrh	r3, [r3, #32]
    5022:	b29b      	uxth	r3, r3
    5024:	f023 0310 	bic.w	r3, r3, #16
    5028:	b29a      	uxth	r2, r3
    502a:	68fb      	ldr	r3, [r7, #12]
    502c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    502e:	68fb      	ldr	r3, [r7, #12]
    5030:	8b1b      	ldrh	r3, [r3, #24]
    5032:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5034:	68fb      	ldr	r3, [r7, #12]
    5036:	8c1b      	ldrh	r3, [r3, #32]
    5038:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    503a:	897b      	ldrh	r3, [r7, #10]
    503c:	011b      	lsls	r3, r3, #4
    503e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    5040:	8abb      	ldrh	r3, [r7, #20]
    5042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5046:	051b      	lsls	r3, r3, #20
    5048:	0d1b      	lsrs	r3, r3, #20
    504a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    504c:	88fb      	ldrh	r3, [r7, #6]
    504e:	031b      	lsls	r3, r3, #12
    5050:	b29a      	uxth	r2, r3
    5052:	8abb      	ldrh	r3, [r7, #20]
    5054:	4313      	orrs	r3, r2
    5056:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    5058:	893b      	ldrh	r3, [r7, #8]
    505a:	021b      	lsls	r3, r3, #8
    505c:	b29a      	uxth	r2, r3
    505e:	8abb      	ldrh	r3, [r7, #20]
    5060:	4313      	orrs	r3, r2
    5062:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5064:	68fb      	ldr	r3, [r7, #12]
    5066:	4a1c      	ldr	r2, [pc, #112]	; (50d8 <TI2_Config+0xe0>)
    5068:	4293      	cmp	r3, r2
    506a:	d013      	beq.n	5094 <TI2_Config+0x9c>
    506c:	68fb      	ldr	r3, [r7, #12]
    506e:	4a1b      	ldr	r2, [pc, #108]	; (50dc <TI2_Config+0xe4>)
    5070:	4293      	cmp	r3, r2
    5072:	d00f      	beq.n	5094 <TI2_Config+0x9c>
    5074:	68fb      	ldr	r3, [r7, #12]
    5076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    507a:	d00b      	beq.n	5094 <TI2_Config+0x9c>
    507c:	68fb      	ldr	r3, [r7, #12]
    507e:	4a18      	ldr	r2, [pc, #96]	; (50e0 <TI2_Config+0xe8>)
    5080:	4293      	cmp	r3, r2
    5082:	d007      	beq.n	5094 <TI2_Config+0x9c>
    5084:	68fb      	ldr	r3, [r7, #12]
    5086:	4a17      	ldr	r2, [pc, #92]	; (50e4 <TI2_Config+0xec>)
    5088:	4293      	cmp	r3, r2
    508a:	d003      	beq.n	5094 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    508c:	68fb      	ldr	r3, [r7, #12]
    508e:	4a16      	ldr	r2, [pc, #88]	; (50e8 <TI2_Config+0xf0>)
    5090:	4293      	cmp	r3, r2
    5092:	d10b      	bne.n	50ac <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    5094:	8afb      	ldrh	r3, [r7, #22]
    5096:	f023 0320 	bic.w	r3, r3, #32
    509a:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    509c:	8a7a      	ldrh	r2, [r7, #18]
    509e:	8afb      	ldrh	r3, [r7, #22]
    50a0:	4313      	orrs	r3, r2
    50a2:	b29b      	uxth	r3, r3
    50a4:	f043 0310 	orr.w	r3, r3, #16
    50a8:	82fb      	strh	r3, [r7, #22]
    50aa:	e00a      	b.n	50c2 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    50ac:	8afb      	ldrh	r3, [r7, #22]
    50ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    50b2:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    50b4:	897a      	ldrh	r2, [r7, #10]
    50b6:	8afb      	ldrh	r3, [r7, #22]
    50b8:	4313      	orrs	r3, r2
    50ba:	b29b      	uxth	r3, r3
    50bc:	f043 0310 	orr.w	r3, r3, #16
    50c0:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    50c2:	68fb      	ldr	r3, [r7, #12]
    50c4:	8aba      	ldrh	r2, [r7, #20]
    50c6:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    50c8:	68fb      	ldr	r3, [r7, #12]
    50ca:	8afa      	ldrh	r2, [r7, #22]
    50cc:	841a      	strh	r2, [r3, #32]
}
    50ce:	bf00      	nop
    50d0:	371c      	adds	r7, #28
    50d2:	46bd      	mov	sp, r7
    50d4:	bc80      	pop	{r7}
    50d6:	4770      	bx	lr
    50d8:	40012c00 	.word	0x40012c00
    50dc:	40013400 	.word	0x40013400
    50e0:	40000400 	.word	0x40000400
    50e4:	40000800 	.word	0x40000800
    50e8:	40000c00 	.word	0x40000c00

000050ec <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    50ec:	b480      	push	{r7}
    50ee:	b087      	sub	sp, #28
    50f0:	af00      	add	r7, sp, #0
    50f2:	60f8      	str	r0, [r7, #12]
    50f4:	4608      	mov	r0, r1
    50f6:	4611      	mov	r1, r2
    50f8:	461a      	mov	r2, r3
    50fa:	4603      	mov	r3, r0
    50fc:	817b      	strh	r3, [r7, #10]
    50fe:	460b      	mov	r3, r1
    5100:	813b      	strh	r3, [r7, #8]
    5102:	4613      	mov	r3, r2
    5104:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    5106:	2300      	movs	r3, #0
    5108:	82bb      	strh	r3, [r7, #20]
    510a:	2300      	movs	r3, #0
    510c:	82fb      	strh	r3, [r7, #22]
    510e:	2300      	movs	r3, #0
    5110:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    5112:	68fb      	ldr	r3, [r7, #12]
    5114:	8c1b      	ldrh	r3, [r3, #32]
    5116:	b29b      	uxth	r3, r3
    5118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    511c:	b29a      	uxth	r2, r3
    511e:	68fb      	ldr	r3, [r7, #12]
    5120:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	8b9b      	ldrh	r3, [r3, #28]
    5126:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	8c1b      	ldrh	r3, [r3, #32]
    512c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    512e:	897b      	ldrh	r3, [r7, #10]
    5130:	021b      	lsls	r3, r3, #8
    5132:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    5134:	8abb      	ldrh	r3, [r7, #20]
    5136:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    513a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    513c:	88fb      	ldrh	r3, [r7, #6]
    513e:	011b      	lsls	r3, r3, #4
    5140:	b29a      	uxth	r2, r3
    5142:	893b      	ldrh	r3, [r7, #8]
    5144:	4313      	orrs	r3, r2
    5146:	b29a      	uxth	r2, r3
    5148:	8abb      	ldrh	r3, [r7, #20]
    514a:	4313      	orrs	r3, r2
    514c:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    514e:	68fb      	ldr	r3, [r7, #12]
    5150:	4a1c      	ldr	r2, [pc, #112]	; (51c4 <TI3_Config+0xd8>)
    5152:	4293      	cmp	r3, r2
    5154:	d013      	beq.n	517e <TI3_Config+0x92>
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	4a1b      	ldr	r2, [pc, #108]	; (51c8 <TI3_Config+0xdc>)
    515a:	4293      	cmp	r3, r2
    515c:	d00f      	beq.n	517e <TI3_Config+0x92>
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5164:	d00b      	beq.n	517e <TI3_Config+0x92>
    5166:	68fb      	ldr	r3, [r7, #12]
    5168:	4a18      	ldr	r2, [pc, #96]	; (51cc <TI3_Config+0xe0>)
    516a:	4293      	cmp	r3, r2
    516c:	d007      	beq.n	517e <TI3_Config+0x92>
    516e:	68fb      	ldr	r3, [r7, #12]
    5170:	4a17      	ldr	r2, [pc, #92]	; (51d0 <TI3_Config+0xe4>)
    5172:	4293      	cmp	r3, r2
    5174:	d003      	beq.n	517e <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	4a16      	ldr	r2, [pc, #88]	; (51d4 <TI3_Config+0xe8>)
    517a:	4293      	cmp	r3, r2
    517c:	d10b      	bne.n	5196 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    517e:	8afb      	ldrh	r3, [r7, #22]
    5180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5184:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    5186:	8a7a      	ldrh	r2, [r7, #18]
    5188:	8afb      	ldrh	r3, [r7, #22]
    518a:	4313      	orrs	r3, r2
    518c:	b29b      	uxth	r3, r3
    518e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5192:	82fb      	strh	r3, [r7, #22]
    5194:	e00a      	b.n	51ac <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    5196:	8afb      	ldrh	r3, [r7, #22]
    5198:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    519c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    519e:	897a      	ldrh	r2, [r7, #10]
    51a0:	8afb      	ldrh	r3, [r7, #22]
    51a2:	4313      	orrs	r3, r2
    51a4:	b29b      	uxth	r3, r3
    51a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    51aa:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    51ac:	68fb      	ldr	r3, [r7, #12]
    51ae:	8aba      	ldrh	r2, [r7, #20]
    51b0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    51b2:	68fb      	ldr	r3, [r7, #12]
    51b4:	8afa      	ldrh	r2, [r7, #22]
    51b6:	841a      	strh	r2, [r3, #32]
}
    51b8:	bf00      	nop
    51ba:	371c      	adds	r7, #28
    51bc:	46bd      	mov	sp, r7
    51be:	bc80      	pop	{r7}
    51c0:	4770      	bx	lr
    51c2:	bf00      	nop
    51c4:	40012c00 	.word	0x40012c00
    51c8:	40013400 	.word	0x40013400
    51cc:	40000400 	.word	0x40000400
    51d0:	40000800 	.word	0x40000800
    51d4:	40000c00 	.word	0x40000c00

000051d8 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    51d8:	b480      	push	{r7}
    51da:	b087      	sub	sp, #28
    51dc:	af00      	add	r7, sp, #0
    51de:	60f8      	str	r0, [r7, #12]
    51e0:	4608      	mov	r0, r1
    51e2:	4611      	mov	r1, r2
    51e4:	461a      	mov	r2, r3
    51e6:	4603      	mov	r3, r0
    51e8:	817b      	strh	r3, [r7, #10]
    51ea:	460b      	mov	r3, r1
    51ec:	813b      	strh	r3, [r7, #8]
    51ee:	4613      	mov	r3, r2
    51f0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    51f2:	2300      	movs	r3, #0
    51f4:	82bb      	strh	r3, [r7, #20]
    51f6:	2300      	movs	r3, #0
    51f8:	82fb      	strh	r3, [r7, #22]
    51fa:	2300      	movs	r3, #0
    51fc:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	8c1b      	ldrh	r3, [r3, #32]
    5202:	b29b      	uxth	r3, r3
    5204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5208:	b29a      	uxth	r2, r3
    520a:	68fb      	ldr	r3, [r7, #12]
    520c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    520e:	68fb      	ldr	r3, [r7, #12]
    5210:	8b9b      	ldrh	r3, [r3, #28]
    5212:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5214:	68fb      	ldr	r3, [r7, #12]
    5216:	8c1b      	ldrh	r3, [r3, #32]
    5218:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    521a:	897b      	ldrh	r3, [r7, #10]
    521c:	031b      	lsls	r3, r3, #12
    521e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    5220:	8abb      	ldrh	r3, [r7, #20]
    5222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5226:	051b      	lsls	r3, r3, #20
    5228:	0d1b      	lsrs	r3, r3, #20
    522a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    522c:	893b      	ldrh	r3, [r7, #8]
    522e:	021b      	lsls	r3, r3, #8
    5230:	b29a      	uxth	r2, r3
    5232:	8abb      	ldrh	r3, [r7, #20]
    5234:	4313      	orrs	r3, r2
    5236:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    5238:	88fb      	ldrh	r3, [r7, #6]
    523a:	031b      	lsls	r3, r3, #12
    523c:	b29a      	uxth	r2, r3
    523e:	8abb      	ldrh	r3, [r7, #20]
    5240:	4313      	orrs	r3, r2
    5242:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5244:	68fb      	ldr	r3, [r7, #12]
    5246:	4a1d      	ldr	r2, [pc, #116]	; (52bc <TI4_Config+0xe4>)
    5248:	4293      	cmp	r3, r2
    524a:	d013      	beq.n	5274 <TI4_Config+0x9c>
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	4a1c      	ldr	r2, [pc, #112]	; (52c0 <TI4_Config+0xe8>)
    5250:	4293      	cmp	r3, r2
    5252:	d00f      	beq.n	5274 <TI4_Config+0x9c>
    5254:	68fb      	ldr	r3, [r7, #12]
    5256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    525a:	d00b      	beq.n	5274 <TI4_Config+0x9c>
    525c:	68fb      	ldr	r3, [r7, #12]
    525e:	4a19      	ldr	r2, [pc, #100]	; (52c4 <TI4_Config+0xec>)
    5260:	4293      	cmp	r3, r2
    5262:	d007      	beq.n	5274 <TI4_Config+0x9c>
    5264:	68fb      	ldr	r3, [r7, #12]
    5266:	4a18      	ldr	r2, [pc, #96]	; (52c8 <TI4_Config+0xf0>)
    5268:	4293      	cmp	r3, r2
    526a:	d003      	beq.n	5274 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    526c:	68fb      	ldr	r3, [r7, #12]
    526e:	4a17      	ldr	r2, [pc, #92]	; (52cc <TI4_Config+0xf4>)
    5270:	4293      	cmp	r3, r2
    5272:	d10b      	bne.n	528c <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    5274:	8afb      	ldrh	r3, [r7, #22]
    5276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    527a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    527c:	8a7a      	ldrh	r2, [r7, #18]
    527e:	8afb      	ldrh	r3, [r7, #22]
    5280:	4313      	orrs	r3, r2
    5282:	b29b      	uxth	r3, r3
    5284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5288:	82fb      	strh	r3, [r7, #22]
    528a:	e00c      	b.n	52a6 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    528c:	8afb      	ldrh	r3, [r7, #22]
    528e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5292:	045b      	lsls	r3, r3, #17
    5294:	0c5b      	lsrs	r3, r3, #17
    5296:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    5298:	897a      	ldrh	r2, [r7, #10]
    529a:	8afb      	ldrh	r3, [r7, #22]
    529c:	4313      	orrs	r3, r2
    529e:	b29b      	uxth	r3, r3
    52a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    52a4:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    52a6:	68fb      	ldr	r3, [r7, #12]
    52a8:	8aba      	ldrh	r2, [r7, #20]
    52aa:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    52ac:	68fb      	ldr	r3, [r7, #12]
    52ae:	8afa      	ldrh	r2, [r7, #22]
    52b0:	841a      	strh	r2, [r3, #32]
}
    52b2:	bf00      	nop
    52b4:	371c      	adds	r7, #28
    52b6:	46bd      	mov	sp, r7
    52b8:	bc80      	pop	{r7}
    52ba:	4770      	bx	lr
    52bc:	40012c00 	.word	0x40012c00
    52c0:	40013400 	.word	0x40013400
    52c4:	40000400 	.word	0x40000400
    52c8:	40000800 	.word	0x40000800
    52cc:	40000c00 	.word	0x40000c00

000052d0 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    52d0:	b480      	push	{r7}
    52d2:	b083      	sub	sp, #12
    52d4:	af00      	add	r7, sp, #0
    52d6:	4603      	mov	r3, r0
    52d8:	460a      	mov	r2, r1
    52da:	80fb      	strh	r3, [r7, #6]
    52dc:	4613      	mov	r3, r2
    52de:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    52e0:	797b      	ldrb	r3, [r7, #5]
    52e2:	2b00      	cmp	r3, #0
    52e4:	d008      	beq.n	52f8 <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
    52e6:	4b0c      	ldr	r3, [pc, #48]	; (5318 <RTC_ITConfig+0x48>)
    52e8:	881b      	ldrh	r3, [r3, #0]
    52ea:	b29a      	uxth	r2, r3
    52ec:	490a      	ldr	r1, [pc, #40]	; (5318 <RTC_ITConfig+0x48>)
    52ee:	88fb      	ldrh	r3, [r7, #6]
    52f0:	4313      	orrs	r3, r2
    52f2:	b29b      	uxth	r3, r3
    52f4:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
    52f6:	e009      	b.n	530c <RTC_ITConfig+0x3c>
    RTC->CRH &= (uint16_t)~RTC_IT;
    52f8:	4b07      	ldr	r3, [pc, #28]	; (5318 <RTC_ITConfig+0x48>)
    52fa:	881b      	ldrh	r3, [r3, #0]
    52fc:	b29a      	uxth	r2, r3
    52fe:	88fb      	ldrh	r3, [r7, #6]
    5300:	43db      	mvns	r3, r3
    5302:	b29b      	uxth	r3, r3
    5304:	4904      	ldr	r1, [pc, #16]	; (5318 <RTC_ITConfig+0x48>)
    5306:	4013      	ands	r3, r2
    5308:	b29b      	uxth	r3, r3
    530a:	800b      	strh	r3, [r1, #0]
}
    530c:	bf00      	nop
    530e:	370c      	adds	r7, #12
    5310:	46bd      	mov	sp, r7
    5312:	bc80      	pop	{r7}
    5314:	4770      	bx	lr
    5316:	bf00      	nop
    5318:	40002800 	.word	0x40002800

0000531c <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    531c:	b480      	push	{r7}
    531e:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
    5320:	4b05      	ldr	r3, [pc, #20]	; (5338 <RTC_EnterConfigMode+0x1c>)
    5322:	889b      	ldrh	r3, [r3, #4]
    5324:	b29b      	uxth	r3, r3
    5326:	4a04      	ldr	r2, [pc, #16]	; (5338 <RTC_EnterConfigMode+0x1c>)
    5328:	f043 0310 	orr.w	r3, r3, #16
    532c:	b29b      	uxth	r3, r3
    532e:	8093      	strh	r3, [r2, #4]
}
    5330:	bf00      	nop
    5332:	46bd      	mov	sp, r7
    5334:	bc80      	pop	{r7}
    5336:	4770      	bx	lr
    5338:	40002800 	.word	0x40002800

0000533c <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    533c:	b480      	push	{r7}
    533e:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    5340:	4b05      	ldr	r3, [pc, #20]	; (5358 <RTC_ExitConfigMode+0x1c>)
    5342:	889b      	ldrh	r3, [r3, #4]
    5344:	b29b      	uxth	r3, r3
    5346:	4a04      	ldr	r2, [pc, #16]	; (5358 <RTC_ExitConfigMode+0x1c>)
    5348:	f023 0310 	bic.w	r3, r3, #16
    534c:	b29b      	uxth	r3, r3
    534e:	8093      	strh	r3, [r2, #4]
}
    5350:	bf00      	nop
    5352:	46bd      	mov	sp, r7
    5354:	bc80      	pop	{r7}
    5356:	4770      	bx	lr
    5358:	40002800 	.word	0x40002800

0000535c <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    535c:	b480      	push	{r7}
    535e:	b083      	sub	sp, #12
    5360:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    5362:	2300      	movs	r3, #0
    5364:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
    5366:	4b07      	ldr	r3, [pc, #28]	; (5384 <RTC_GetCounter+0x28>)
    5368:	8b9b      	ldrh	r3, [r3, #28]
    536a:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    536c:	4b05      	ldr	r3, [pc, #20]	; (5384 <RTC_GetCounter+0x28>)
    536e:	8b1b      	ldrh	r3, [r3, #24]
    5370:	b29b      	uxth	r3, r3
    5372:	041a      	lsls	r2, r3, #16
    5374:	88fb      	ldrh	r3, [r7, #6]
    5376:	4313      	orrs	r3, r2
}
    5378:	4618      	mov	r0, r3
    537a:	370c      	adds	r7, #12
    537c:	46bd      	mov	sp, r7
    537e:	bc80      	pop	{r7}
    5380:	4770      	bx	lr
    5382:	bf00      	nop
    5384:	40002800 	.word	0x40002800

00005388 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    5388:	b580      	push	{r7, lr}
    538a:	b082      	sub	sp, #8
    538c:	af00      	add	r7, sp, #0
    538e:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    5390:	f7ff ffc4 	bl	531c <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	0c1a      	lsrs	r2, r3, #16
    5398:	4b06      	ldr	r3, [pc, #24]	; (53b4 <RTC_SetCounter+0x2c>)
    539a:	b292      	uxth	r2, r2
    539c:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    539e:	4b05      	ldr	r3, [pc, #20]	; (53b4 <RTC_SetCounter+0x2c>)
    53a0:	687a      	ldr	r2, [r7, #4]
    53a2:	b292      	uxth	r2, r2
    53a4:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
    53a6:	f7ff ffc9 	bl	533c <RTC_ExitConfigMode>
}
    53aa:	bf00      	nop
    53ac:	3708      	adds	r7, #8
    53ae:	46bd      	mov	sp, r7
    53b0:	bd80      	pop	{r7, pc}
    53b2:	bf00      	nop
    53b4:	40002800 	.word	0x40002800

000053b8 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	b082      	sub	sp, #8
    53bc:	af00      	add	r7, sp, #0
    53be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    53c0:	f7ff ffac 	bl	531c <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	0c1b      	lsrs	r3, r3, #16
    53c8:	b29b      	uxth	r3, r3
    53ca:	4a07      	ldr	r2, [pc, #28]	; (53e8 <RTC_SetPrescaler+0x30>)
    53cc:	f003 030f 	and.w	r3, r3, #15
    53d0:	b29b      	uxth	r3, r3
    53d2:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    53d4:	4b04      	ldr	r3, [pc, #16]	; (53e8 <RTC_SetPrescaler+0x30>)
    53d6:	687a      	ldr	r2, [r7, #4]
    53d8:	b292      	uxth	r2, r2
    53da:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
    53dc:	f7ff ffae 	bl	533c <RTC_ExitConfigMode>
}
    53e0:	bf00      	nop
    53e2:	3708      	adds	r7, #8
    53e4:	46bd      	mov	sp, r7
    53e6:	bd80      	pop	{r7, pc}
    53e8:	40002800 	.word	0x40002800

000053ec <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    53ec:	b580      	push	{r7, lr}
    53ee:	b082      	sub	sp, #8
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    53f4:	f7ff ff92 	bl	531c <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	0c1a      	lsrs	r2, r3, #16
    53fc:	4b06      	ldr	r3, [pc, #24]	; (5418 <RTC_SetAlarm+0x2c>)
    53fe:	b292      	uxth	r2, r2
    5400:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    5402:	4b05      	ldr	r3, [pc, #20]	; (5418 <RTC_SetAlarm+0x2c>)
    5404:	687a      	ldr	r2, [r7, #4]
    5406:	b292      	uxth	r2, r2
    5408:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
    540a:	f7ff ff97 	bl	533c <RTC_ExitConfigMode>
}
    540e:	bf00      	nop
    5410:	3708      	adds	r7, #8
    5412:	46bd      	mov	sp, r7
    5414:	bd80      	pop	{r7, pc}
    5416:	bf00      	nop
    5418:	40002800 	.word	0x40002800

0000541c <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    541c:	b480      	push	{r7}
    541e:	b083      	sub	sp, #12
    5420:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    5422:	2300      	movs	r3, #0
    5424:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    5426:	4b0a      	ldr	r3, [pc, #40]	; (5450 <RTC_GetDivider+0x34>)
    5428:	8a1b      	ldrh	r3, [r3, #16]
    542a:	b29b      	uxth	r3, r3
    542c:	041b      	lsls	r3, r3, #16
    542e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    5432:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
    5434:	4b06      	ldr	r3, [pc, #24]	; (5450 <RTC_GetDivider+0x34>)
    5436:	8a9b      	ldrh	r3, [r3, #20]
    5438:	b29b      	uxth	r3, r3
    543a:	461a      	mov	r2, r3
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	4313      	orrs	r3, r2
    5440:	607b      	str	r3, [r7, #4]
  return tmp;
    5442:	687b      	ldr	r3, [r7, #4]
}
    5444:	4618      	mov	r0, r3
    5446:	370c      	adds	r7, #12
    5448:	46bd      	mov	sp, r7
    544a:	bc80      	pop	{r7}
    544c:	4770      	bx	lr
    544e:	bf00      	nop
    5450:	40002800 	.word	0x40002800

00005454 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    5454:	b480      	push	{r7}
    5456:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    5458:	bf00      	nop
    545a:	4b05      	ldr	r3, [pc, #20]	; (5470 <RTC_WaitForLastTask+0x1c>)
    545c:	889b      	ldrh	r3, [r3, #4]
    545e:	b29b      	uxth	r3, r3
    5460:	f003 0320 	and.w	r3, r3, #32
    5464:	2b00      	cmp	r3, #0
    5466:	d0f8      	beq.n	545a <RTC_WaitForLastTask+0x6>
  {
  }
}
    5468:	bf00      	nop
    546a:	46bd      	mov	sp, r7
    546c:	bc80      	pop	{r7}
    546e:	4770      	bx	lr
    5470:	40002800 	.word	0x40002800

00005474 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    5474:	b480      	push	{r7}
    5476:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    5478:	4b09      	ldr	r3, [pc, #36]	; (54a0 <RTC_WaitForSynchro+0x2c>)
    547a:	889b      	ldrh	r3, [r3, #4]
    547c:	b29b      	uxth	r3, r3
    547e:	4a08      	ldr	r2, [pc, #32]	; (54a0 <RTC_WaitForSynchro+0x2c>)
    5480:	f023 0308 	bic.w	r3, r3, #8
    5484:	b29b      	uxth	r3, r3
    5486:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    5488:	bf00      	nop
    548a:	4b05      	ldr	r3, [pc, #20]	; (54a0 <RTC_WaitForSynchro+0x2c>)
    548c:	889b      	ldrh	r3, [r3, #4]
    548e:	b29b      	uxth	r3, r3
    5490:	f003 0308 	and.w	r3, r3, #8
    5494:	2b00      	cmp	r3, #0
    5496:	d0f8      	beq.n	548a <RTC_WaitForSynchro+0x16>
  {
  }
}
    5498:	bf00      	nop
    549a:	46bd      	mov	sp, r7
    549c:	bc80      	pop	{r7}
    549e:	4770      	bx	lr
    54a0:	40002800 	.word	0x40002800

000054a4 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    54a4:	b480      	push	{r7}
    54a6:	b085      	sub	sp, #20
    54a8:	af00      	add	r7, sp, #0
    54aa:	4603      	mov	r3, r0
    54ac:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
    54ae:	2300      	movs	r3, #0
    54b0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    54b2:	4b09      	ldr	r3, [pc, #36]	; (54d8 <RTC_GetFlagStatus+0x34>)
    54b4:	889b      	ldrh	r3, [r3, #4]
    54b6:	b29a      	uxth	r2, r3
    54b8:	88fb      	ldrh	r3, [r7, #6]
    54ba:	4013      	ands	r3, r2
    54bc:	b29b      	uxth	r3, r3
    54be:	2b00      	cmp	r3, #0
    54c0:	d002      	beq.n	54c8 <RTC_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    54c2:	2301      	movs	r3, #1
    54c4:	73fb      	strb	r3, [r7, #15]
    54c6:	e001      	b.n	54cc <RTC_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    54c8:	2300      	movs	r3, #0
    54ca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    54cc:	7bfb      	ldrb	r3, [r7, #15]
}
    54ce:	4618      	mov	r0, r3
    54d0:	3714      	adds	r7, #20
    54d2:	46bd      	mov	sp, r7
    54d4:	bc80      	pop	{r7}
    54d6:	4770      	bx	lr
    54d8:	40002800 	.word	0x40002800

000054dc <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    54dc:	b480      	push	{r7}
    54de:	b083      	sub	sp, #12
    54e0:	af00      	add	r7, sp, #0
    54e2:	4603      	mov	r3, r0
    54e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    54e6:	4b07      	ldr	r3, [pc, #28]	; (5504 <RTC_ClearFlag+0x28>)
    54e8:	889b      	ldrh	r3, [r3, #4]
    54ea:	b29a      	uxth	r2, r3
    54ec:	88fb      	ldrh	r3, [r7, #6]
    54ee:	43db      	mvns	r3, r3
    54f0:	b29b      	uxth	r3, r3
    54f2:	4904      	ldr	r1, [pc, #16]	; (5504 <RTC_ClearFlag+0x28>)
    54f4:	4013      	ands	r3, r2
    54f6:	b29b      	uxth	r3, r3
    54f8:	808b      	strh	r3, [r1, #4]
}
    54fa:	bf00      	nop
    54fc:	370c      	adds	r7, #12
    54fe:	46bd      	mov	sp, r7
    5500:	bc80      	pop	{r7}
    5502:	4770      	bx	lr
    5504:	40002800 	.word	0x40002800

00005508 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    5508:	b480      	push	{r7}
    550a:	b085      	sub	sp, #20
    550c:	af00      	add	r7, sp, #0
    550e:	4603      	mov	r3, r0
    5510:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
    5512:	2300      	movs	r3, #0
    5514:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    5516:	4b0f      	ldr	r3, [pc, #60]	; (5554 <RTC_GetITStatus+0x4c>)
    5518:	889b      	ldrh	r3, [r3, #4]
    551a:	b29b      	uxth	r3, r3
    551c:	b2da      	uxtb	r2, r3
    551e:	88fb      	ldrh	r3, [r7, #6]
    5520:	b2db      	uxtb	r3, r3
    5522:	4013      	ands	r3, r2
    5524:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    5526:	4b0b      	ldr	r3, [pc, #44]	; (5554 <RTC_GetITStatus+0x4c>)
    5528:	881b      	ldrh	r3, [r3, #0]
    552a:	b29a      	uxth	r2, r3
    552c:	88fb      	ldrh	r3, [r7, #6]
    552e:	4013      	ands	r3, r2
    5530:	b29b      	uxth	r3, r3
    5532:	2b00      	cmp	r3, #0
    5534:	d005      	beq.n	5542 <RTC_GetITStatus+0x3a>
    5536:	7bfb      	ldrb	r3, [r7, #15]
    5538:	2b00      	cmp	r3, #0
    553a:	d002      	beq.n	5542 <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
    553c:	2301      	movs	r3, #1
    553e:	73fb      	strb	r3, [r7, #15]
    5540:	e001      	b.n	5546 <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
    5542:	2300      	movs	r3, #0
    5544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    5546:	7bfb      	ldrb	r3, [r7, #15]
}
    5548:	4618      	mov	r0, r3
    554a:	3714      	adds	r7, #20
    554c:	46bd      	mov	sp, r7
    554e:	bc80      	pop	{r7}
    5550:	4770      	bx	lr
    5552:	bf00      	nop
    5554:	40002800 	.word	0x40002800

00005558 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    5558:	b480      	push	{r7}
    555a:	b083      	sub	sp, #12
    555c:	af00      	add	r7, sp, #0
    555e:	4603      	mov	r3, r0
    5560:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    5562:	4b07      	ldr	r3, [pc, #28]	; (5580 <RTC_ClearITPendingBit+0x28>)
    5564:	889b      	ldrh	r3, [r3, #4]
    5566:	b29a      	uxth	r2, r3
    5568:	88fb      	ldrh	r3, [r7, #6]
    556a:	43db      	mvns	r3, r3
    556c:	b29b      	uxth	r3, r3
    556e:	4904      	ldr	r1, [pc, #16]	; (5580 <RTC_ClearITPendingBit+0x28>)
    5570:	4013      	ands	r3, r2
    5572:	b29b      	uxth	r3, r3
    5574:	808b      	strh	r3, [r1, #4]
}
    5576:	bf00      	nop
    5578:	370c      	adds	r7, #12
    557a:	46bd      	mov	sp, r7
    557c:	bc80      	pop	{r7}
    557e:	4770      	bx	lr
    5580:	40002800 	.word	0x40002800

00005584 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
    5584:	b580      	push	{r7, lr}
    5586:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    5588:	2101      	movs	r1, #1
    558a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    558e:	f7fc f9b1 	bl	18f4 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    5592:	2100      	movs	r1, #0
    5594:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    5598:	f7fc f9ac 	bl	18f4 <RCC_APB1PeriphResetCmd>
}
    559c:	bf00      	nop
    559e:	bd80      	pop	{r7, pc}

000055a0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
    55a0:	b480      	push	{r7}
    55a2:	b085      	sub	sp, #20
    55a4:	af00      	add	r7, sp, #0
    55a6:	6078      	str	r0, [r7, #4]
    55a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    55aa:	2300      	movs	r3, #0
    55ac:	60fb      	str	r3, [r7, #12]
    55ae:	2300      	movs	r3, #0
    55b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
    55b2:	4b13      	ldr	r3, [pc, #76]	; (5600 <DAC_Init+0x60>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    55b8:	f640 72fe 	movw	r2, #4094	; 0xffe
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	fa02 f303 	lsl.w	r3, r2, r3
    55c2:	43db      	mvns	r3, r3
    55c4:	68fa      	ldr	r2, [r7, #12]
    55c6:	4013      	ands	r3, r2
    55c8:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    55ca:	683b      	ldr	r3, [r7, #0]
    55cc:	681a      	ldr	r2, [r3, #0]
    55ce:	683b      	ldr	r3, [r7, #0]
    55d0:	685b      	ldr	r3, [r3, #4]
    55d2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    55d4:	683b      	ldr	r3, [r7, #0]
    55d6:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    55d8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    55da:	683b      	ldr	r3, [r7, #0]
    55dc:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    55de:	4313      	orrs	r3, r2
    55e0:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
    55e2:	68ba      	ldr	r2, [r7, #8]
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	fa02 f303 	lsl.w	r3, r2, r3
    55ea:	68fa      	ldr	r2, [r7, #12]
    55ec:	4313      	orrs	r3, r2
    55ee:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
    55f0:	4a03      	ldr	r2, [pc, #12]	; (5600 <DAC_Init+0x60>)
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	6013      	str	r3, [r2, #0]
}
    55f6:	bf00      	nop
    55f8:	3714      	adds	r7, #20
    55fa:	46bd      	mov	sp, r7
    55fc:	bc80      	pop	{r7}
    55fe:	4770      	bx	lr
    5600:	40007400 	.word	0x40007400

00005604 <DAC_StructInit>:
  * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
    5604:	b480      	push	{r7}
    5606:	b083      	sub	sp, #12
    5608:	af00      	add	r7, sp, #0
    560a:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	2200      	movs	r2, #0
    5610:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	2200      	movs	r2, #0
    5616:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	2200      	movs	r2, #0
    561c:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	2200      	movs	r2, #0
    5622:	60da      	str	r2, [r3, #12]
}
    5624:	bf00      	nop
    5626:	370c      	adds	r7, #12
    5628:	46bd      	mov	sp, r7
    562a:	bc80      	pop	{r7}
    562c:	4770      	bx	lr

0000562e <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    562e:	b480      	push	{r7}
    5630:	b083      	sub	sp, #12
    5632:	af00      	add	r7, sp, #0
    5634:	6078      	str	r0, [r7, #4]
    5636:	460b      	mov	r3, r1
    5638:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    563a:	78fb      	ldrb	r3, [r7, #3]
    563c:	2b00      	cmp	r3, #0
    563e:	d009      	beq.n	5654 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    5640:	4b0c      	ldr	r3, [pc, #48]	; (5674 <DAC_Cmd+0x46>)
    5642:	681a      	ldr	r2, [r3, #0]
    5644:	2101      	movs	r1, #1
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	fa01 f303 	lsl.w	r3, r1, r3
    564c:	4909      	ldr	r1, [pc, #36]	; (5674 <DAC_Cmd+0x46>)
    564e:	4313      	orrs	r3, r2
    5650:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
  }
}
    5652:	e009      	b.n	5668 <DAC_Cmd+0x3a>
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    5654:	4b07      	ldr	r3, [pc, #28]	; (5674 <DAC_Cmd+0x46>)
    5656:	681a      	ldr	r2, [r3, #0]
    5658:	2101      	movs	r1, #1
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	fa01 f303 	lsl.w	r3, r1, r3
    5660:	43db      	mvns	r3, r3
    5662:	4904      	ldr	r1, [pc, #16]	; (5674 <DAC_Cmd+0x46>)
    5664:	4013      	ands	r3, r2
    5666:	600b      	str	r3, [r1, #0]
}
    5668:	bf00      	nop
    566a:	370c      	adds	r7, #12
    566c:	46bd      	mov	sp, r7
    566e:	bc80      	pop	{r7}
    5670:	4770      	bx	lr
    5672:	bf00      	nop
    5674:	40007400 	.word	0x40007400

00005678 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    5678:	b480      	push	{r7}
    567a:	b083      	sub	sp, #12
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
    5680:	460b      	mov	r3, r1
    5682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5684:	78fb      	ldrb	r3, [r7, #3]
    5686:	2b00      	cmp	r3, #0
    5688:	d00a      	beq.n	56a0 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    568a:	4b0d      	ldr	r3, [pc, #52]	; (56c0 <DAC_DMACmd+0x48>)
    568c:	681a      	ldr	r2, [r3, #0]
    568e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	fa01 f303 	lsl.w	r3, r1, r3
    5698:	4909      	ldr	r1, [pc, #36]	; (56c0 <DAC_DMACmd+0x48>)
    569a:	4313      	orrs	r3, r2
    569c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
  }
}
    569e:	e00a      	b.n	56b6 <DAC_DMACmd+0x3e>
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    56a0:	4b07      	ldr	r3, [pc, #28]	; (56c0 <DAC_DMACmd+0x48>)
    56a2:	681a      	ldr	r2, [r3, #0]
    56a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	fa01 f303 	lsl.w	r3, r1, r3
    56ae:	43db      	mvns	r3, r3
    56b0:	4903      	ldr	r1, [pc, #12]	; (56c0 <DAC_DMACmd+0x48>)
    56b2:	4013      	ands	r3, r2
    56b4:	600b      	str	r3, [r1, #0]
}
    56b6:	bf00      	nop
    56b8:	370c      	adds	r7, #12
    56ba:	46bd      	mov	sp, r7
    56bc:	bc80      	pop	{r7}
    56be:	4770      	bx	lr
    56c0:	40007400 	.word	0x40007400

000056c4 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    56c4:	b480      	push	{r7}
    56c6:	b083      	sub	sp, #12
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
    56cc:	460b      	mov	r3, r1
    56ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    56d0:	78fb      	ldrb	r3, [r7, #3]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d00a      	beq.n	56ec <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    56d6:	4b0d      	ldr	r3, [pc, #52]	; (570c <DAC_SoftwareTriggerCmd+0x48>)
    56d8:	685a      	ldr	r2, [r3, #4]
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	091b      	lsrs	r3, r3, #4
    56de:	2101      	movs	r1, #1
    56e0:	fa01 f303 	lsl.w	r3, r1, r3
    56e4:	4909      	ldr	r1, [pc, #36]	; (570c <DAC_SoftwareTriggerCmd+0x48>)
    56e6:	4313      	orrs	r3, r2
    56e8:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
    56ea:	e00a      	b.n	5702 <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    56ec:	4b07      	ldr	r3, [pc, #28]	; (570c <DAC_SoftwareTriggerCmd+0x48>)
    56ee:	685a      	ldr	r2, [r3, #4]
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	091b      	lsrs	r3, r3, #4
    56f4:	2101      	movs	r1, #1
    56f6:	fa01 f303 	lsl.w	r3, r1, r3
    56fa:	43db      	mvns	r3, r3
    56fc:	4903      	ldr	r1, [pc, #12]	; (570c <DAC_SoftwareTriggerCmd+0x48>)
    56fe:	4013      	ands	r3, r2
    5700:	604b      	str	r3, [r1, #4]
}
    5702:	bf00      	nop
    5704:	370c      	adds	r7, #12
    5706:	46bd      	mov	sp, r7
    5708:	bc80      	pop	{r7}
    570a:	4770      	bx	lr
    570c:	40007400 	.word	0x40007400

00005710 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
    5710:	b480      	push	{r7}
    5712:	b083      	sub	sp, #12
    5714:	af00      	add	r7, sp, #0
    5716:	4603      	mov	r3, r0
    5718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    571a:	79fb      	ldrb	r3, [r7, #7]
    571c:	2b00      	cmp	r3, #0
    571e:	d006      	beq.n	572e <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
    5720:	4b08      	ldr	r3, [pc, #32]	; (5744 <DAC_DualSoftwareTriggerCmd+0x34>)
    5722:	685b      	ldr	r3, [r3, #4]
    5724:	4a07      	ldr	r2, [pc, #28]	; (5744 <DAC_DualSoftwareTriggerCmd+0x34>)
    5726:	f043 0303 	orr.w	r3, r3, #3
    572a:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
    572c:	e005      	b.n	573a <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    572e:	4b05      	ldr	r3, [pc, #20]	; (5744 <DAC_DualSoftwareTriggerCmd+0x34>)
    5730:	685b      	ldr	r3, [r3, #4]
    5732:	4a04      	ldr	r2, [pc, #16]	; (5744 <DAC_DualSoftwareTriggerCmd+0x34>)
    5734:	f023 0303 	bic.w	r3, r3, #3
    5738:	6053      	str	r3, [r2, #4]
}
    573a:	bf00      	nop
    573c:	370c      	adds	r7, #12
    573e:	46bd      	mov	sp, r7
    5740:	bc80      	pop	{r7}
    5742:	4770      	bx	lr
    5744:	40007400 	.word	0x40007400

00005748 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
    5748:	b480      	push	{r7}
    574a:	b085      	sub	sp, #20
    574c:	af00      	add	r7, sp, #0
    574e:	60f8      	str	r0, [r7, #12]
    5750:	60b9      	str	r1, [r7, #8]
    5752:	4613      	mov	r3, r2
    5754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5756:	79fb      	ldrb	r3, [r7, #7]
    5758:	2b00      	cmp	r3, #0
    575a:	d009      	beq.n	5770 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
    575c:	4b0c      	ldr	r3, [pc, #48]	; (5790 <DAC_WaveGenerationCmd+0x48>)
    575e:	681a      	ldr	r2, [r3, #0]
    5760:	68b9      	ldr	r1, [r7, #8]
    5762:	68fb      	ldr	r3, [r7, #12]
    5764:	fa01 f303 	lsl.w	r3, r1, r3
    5768:	4909      	ldr	r1, [pc, #36]	; (5790 <DAC_WaveGenerationCmd+0x48>)
    576a:	4313      	orrs	r3, r2
    576c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
    576e:	e009      	b.n	5784 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
    5770:	4b07      	ldr	r3, [pc, #28]	; (5790 <DAC_WaveGenerationCmd+0x48>)
    5772:	681a      	ldr	r2, [r3, #0]
    5774:	68b9      	ldr	r1, [r7, #8]
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	fa01 f303 	lsl.w	r3, r1, r3
    577c:	43db      	mvns	r3, r3
    577e:	4904      	ldr	r1, [pc, #16]	; (5790 <DAC_WaveGenerationCmd+0x48>)
    5780:	4013      	ands	r3, r2
    5782:	600b      	str	r3, [r1, #0]
}
    5784:	bf00      	nop
    5786:	3714      	adds	r7, #20
    5788:	46bd      	mov	sp, r7
    578a:	bc80      	pop	{r7}
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	40007400 	.word	0x40007400

00005794 <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
    5794:	b480      	push	{r7}
    5796:	b085      	sub	sp, #20
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
    579c:	460b      	mov	r3, r1
    579e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    57a0:	2300      	movs	r3, #0
    57a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
    57a4:	4b07      	ldr	r3, [pc, #28]	; (57c4 <DAC_SetChannel1Data+0x30>)
    57a6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
    57a8:	68fa      	ldr	r2, [r7, #12]
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	4413      	add	r3, r2
    57ae:	3308      	adds	r3, #8
    57b0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
    57b2:	68fb      	ldr	r3, [r7, #12]
    57b4:	461a      	mov	r2, r3
    57b6:	887b      	ldrh	r3, [r7, #2]
    57b8:	6013      	str	r3, [r2, #0]
}
    57ba:	bf00      	nop
    57bc:	3714      	adds	r7, #20
    57be:	46bd      	mov	sp, r7
    57c0:	bc80      	pop	{r7}
    57c2:	4770      	bx	lr
    57c4:	40007400 	.word	0x40007400

000057c8 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
    57c8:	b480      	push	{r7}
    57ca:	b085      	sub	sp, #20
    57cc:	af00      	add	r7, sp, #0
    57ce:	6078      	str	r0, [r7, #4]
    57d0:	460b      	mov	r3, r1
    57d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    57d4:	2300      	movs	r3, #0
    57d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
    57d8:	4b07      	ldr	r3, [pc, #28]	; (57f8 <DAC_SetChannel2Data+0x30>)
    57da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
    57dc:	68fa      	ldr	r2, [r7, #12]
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	4413      	add	r3, r2
    57e2:	3314      	adds	r3, #20
    57e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
    57e6:	68fb      	ldr	r3, [r7, #12]
    57e8:	461a      	mov	r2, r3
    57ea:	887b      	ldrh	r3, [r7, #2]
    57ec:	6013      	str	r3, [r2, #0]
}
    57ee:	bf00      	nop
    57f0:	3714      	adds	r7, #20
    57f2:	46bd      	mov	sp, r7
    57f4:	bc80      	pop	{r7}
    57f6:	4770      	bx	lr
    57f8:	40007400 	.word	0x40007400

000057fc <DAC_SetDualChannelData>:
  * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
  *   holding register.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
    57fc:	b480      	push	{r7}
    57fe:	b085      	sub	sp, #20
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	460b      	mov	r3, r1
    5806:	807b      	strh	r3, [r7, #2]
    5808:	4613      	mov	r3, r2
    580a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
    580c:	2300      	movs	r3, #0
    580e:	60fb      	str	r3, [r7, #12]
    5810:	2300      	movs	r3, #0
    5812:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
    5814:	687b      	ldr	r3, [r7, #4]
    5816:	2b08      	cmp	r3, #8
    5818:	d105      	bne.n	5826 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
    581a:	887b      	ldrh	r3, [r7, #2]
    581c:	021a      	lsls	r2, r3, #8
    581e:	883b      	ldrh	r3, [r7, #0]
    5820:	4313      	orrs	r3, r2
    5822:	60fb      	str	r3, [r7, #12]
    5824:	e004      	b.n	5830 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
    5826:	887b      	ldrh	r3, [r7, #2]
    5828:	041a      	lsls	r2, r3, #16
    582a:	883b      	ldrh	r3, [r7, #0]
    582c:	4313      	orrs	r3, r2
    582e:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
    5830:	4b07      	ldr	r3, [pc, #28]	; (5850 <DAC_SetDualChannelData+0x54>)
    5832:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
    5834:	687a      	ldr	r2, [r7, #4]
    5836:	68bb      	ldr	r3, [r7, #8]
    5838:	4413      	add	r3, r2
    583a:	3320      	adds	r3, #32
    583c:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
    583e:	68bb      	ldr	r3, [r7, #8]
    5840:	68fa      	ldr	r2, [r7, #12]
    5842:	601a      	str	r2, [r3, #0]
}
    5844:	bf00      	nop
    5846:	3714      	adds	r7, #20
    5848:	46bd      	mov	sp, r7
    584a:	bc80      	pop	{r7}
    584c:	4770      	bx	lr
    584e:	bf00      	nop
    5850:	40007400 	.word	0x40007400

00005854 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
    5854:	b480      	push	{r7}
    5856:	b085      	sub	sp, #20
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
    585c:	2300      	movs	r3, #0
    585e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
    5860:	4b07      	ldr	r3, [pc, #28]	; (5880 <DAC_GetDataOutputValue+0x2c>)
    5862:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	089a      	lsrs	r2, r3, #2
    5868:	68fb      	ldr	r3, [r7, #12]
    586a:	4413      	add	r3, r2
    586c:	332c      	adds	r3, #44	; 0x2c
    586e:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
    5870:	68fb      	ldr	r3, [r7, #12]
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	b29b      	uxth	r3, r3
}
    5876:	4618      	mov	r0, r3
    5878:	3714      	adds	r7, #20
    587a:	46bd      	mov	sp, r7
    587c:	bc80      	pop	{r7}
    587e:	4770      	bx	lr
    5880:	40007400 	.word	0x40007400

00005884 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    5884:	b480      	push	{r7}
    5886:	b083      	sub	sp, #12
    5888:	af00      	add	r7, sp, #0
    588a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    588c:	4a05      	ldr	r2, [pc, #20]	; (58a4 <NVIC_PriorityGroupConfig+0x20>)
    588e:	687b      	ldr	r3, [r7, #4]
    5890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    5894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5898:	60d3      	str	r3, [r2, #12]
}
    589a:	bf00      	nop
    589c:	370c      	adds	r7, #12
    589e:	46bd      	mov	sp, r7
    58a0:	bc80      	pop	{r7}
    58a2:	4770      	bx	lr
    58a4:	e000ed00 	.word	0xe000ed00

000058a8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    58a8:	b480      	push	{r7}
    58aa:	b087      	sub	sp, #28
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    58b0:	2300      	movs	r3, #0
    58b2:	617b      	str	r3, [r7, #20]
    58b4:	2300      	movs	r3, #0
    58b6:	613b      	str	r3, [r7, #16]
    58b8:	230f      	movs	r3, #15
    58ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	78db      	ldrb	r3, [r3, #3]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d03a      	beq.n	593a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    58c4:	4b27      	ldr	r3, [pc, #156]	; (5964 <NVIC_Init+0xbc>)
    58c6:	68db      	ldr	r3, [r3, #12]
    58c8:	43db      	mvns	r3, r3
    58ca:	0a1b      	lsrs	r3, r3, #8
    58cc:	f003 0307 	and.w	r3, r3, #7
    58d0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    58d2:	697b      	ldr	r3, [r7, #20]
    58d4:	f1c3 0304 	rsb	r3, r3, #4
    58d8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    58da:	68fa      	ldr	r2, [r7, #12]
    58dc:	697b      	ldr	r3, [r7, #20]
    58de:	fa22 f303 	lsr.w	r3, r2, r3
    58e2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    58e4:	687b      	ldr	r3, [r7, #4]
    58e6:	785b      	ldrb	r3, [r3, #1]
    58e8:	461a      	mov	r2, r3
    58ea:	693b      	ldr	r3, [r7, #16]
    58ec:	fa02 f303 	lsl.w	r3, r2, r3
    58f0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	789b      	ldrb	r3, [r3, #2]
    58f6:	461a      	mov	r2, r3
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	4013      	ands	r3, r2
    58fc:	697a      	ldr	r2, [r7, #20]
    58fe:	4313      	orrs	r3, r2
    5900:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    5902:	697b      	ldr	r3, [r7, #20]
    5904:	011b      	lsls	r3, r3, #4
    5906:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    5908:	4a17      	ldr	r2, [pc, #92]	; (5968 <NVIC_Init+0xc0>)
    590a:	687b      	ldr	r3, [r7, #4]
    590c:	781b      	ldrb	r3, [r3, #0]
    590e:	6979      	ldr	r1, [r7, #20]
    5910:	b2c9      	uxtb	r1, r1
    5912:	4413      	add	r3, r2
    5914:	460a      	mov	r2, r1
    5916:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	781b      	ldrb	r3, [r3, #0]
    591e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5922:	4911      	ldr	r1, [pc, #68]	; (5968 <NVIC_Init+0xc0>)
    5924:	687a      	ldr	r2, [r7, #4]
    5926:	7812      	ldrb	r2, [r2, #0]
    5928:	0952      	lsrs	r2, r2, #5
    592a:	b2d2      	uxtb	r2, r2
    592c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    592e:	2201      	movs	r2, #1
    5930:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5934:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    5938:	e00f      	b.n	595a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5942:	4909      	ldr	r1, [pc, #36]	; (5968 <NVIC_Init+0xc0>)
    5944:	687a      	ldr	r2, [r7, #4]
    5946:	7812      	ldrb	r2, [r2, #0]
    5948:	0952      	lsrs	r2, r2, #5
    594a:	b2d2      	uxtb	r2, r2
    594c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    594e:	2201      	movs	r2, #1
    5950:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    5952:	f100 0320 	add.w	r3, r0, #32
    5956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    595a:	bf00      	nop
    595c:	371c      	adds	r7, #28
    595e:	46bd      	mov	sp, r7
    5960:	bc80      	pop	{r7}
    5962:	4770      	bx	lr
    5964:	e000ed00 	.word	0xe000ed00
    5968:	e000e100 	.word	0xe000e100

0000596c <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    596c:	b480      	push	{r7}
    596e:	b083      	sub	sp, #12
    5970:	af00      	add	r7, sp, #0
    5972:	6078      	str	r0, [r7, #4]
    5974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    5976:	683b      	ldr	r3, [r7, #0]
    5978:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    597c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5980:	4904      	ldr	r1, [pc, #16]	; (5994 <NVIC_SetVectorTable+0x28>)
    5982:	687a      	ldr	r2, [r7, #4]
    5984:	4313      	orrs	r3, r2
    5986:	608b      	str	r3, [r1, #8]
}
    5988:	bf00      	nop
    598a:	370c      	adds	r7, #12
    598c:	46bd      	mov	sp, r7
    598e:	bc80      	pop	{r7}
    5990:	4770      	bx	lr
    5992:	bf00      	nop
    5994:	e000ed00 	.word	0xe000ed00

00005998 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    5998:	b480      	push	{r7}
    599a:	b083      	sub	sp, #12
    599c:	af00      	add	r7, sp, #0
    599e:	4603      	mov	r3, r0
    59a0:	460a      	mov	r2, r1
    59a2:	71fb      	strb	r3, [r7, #7]
    59a4:	4613      	mov	r3, r2
    59a6:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    59a8:	79bb      	ldrb	r3, [r7, #6]
    59aa:	2b00      	cmp	r3, #0
    59ac:	d006      	beq.n	59bc <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
    59ae:	4b09      	ldr	r3, [pc, #36]	; (59d4 <NVIC_SystemLPConfig+0x3c>)
    59b0:	691a      	ldr	r2, [r3, #16]
    59b2:	79fb      	ldrb	r3, [r7, #7]
    59b4:	4907      	ldr	r1, [pc, #28]	; (59d4 <NVIC_SystemLPConfig+0x3c>)
    59b6:	4313      	orrs	r3, r2
    59b8:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
    59ba:	e006      	b.n	59ca <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    59bc:	4b05      	ldr	r3, [pc, #20]	; (59d4 <NVIC_SystemLPConfig+0x3c>)
    59be:	691a      	ldr	r2, [r3, #16]
    59c0:	79fb      	ldrb	r3, [r7, #7]
    59c2:	43db      	mvns	r3, r3
    59c4:	4903      	ldr	r1, [pc, #12]	; (59d4 <NVIC_SystemLPConfig+0x3c>)
    59c6:	4013      	ands	r3, r2
    59c8:	610b      	str	r3, [r1, #16]
}
    59ca:	bf00      	nop
    59cc:	370c      	adds	r7, #12
    59ce:	46bd      	mov	sp, r7
    59d0:	bc80      	pop	{r7}
    59d2:	4770      	bx	lr
    59d4:	e000ed00 	.word	0xe000ed00

000059d8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    59d8:	b480      	push	{r7}
    59da:	b083      	sub	sp, #12
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	2b04      	cmp	r3, #4
    59e4:	d106      	bne.n	59f4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    59e6:	4b09      	ldr	r3, [pc, #36]	; (5a0c <SysTick_CLKSourceConfig+0x34>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	4a08      	ldr	r2, [pc, #32]	; (5a0c <SysTick_CLKSourceConfig+0x34>)
    59ec:	f043 0304 	orr.w	r3, r3, #4
    59f0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
    59f2:	e005      	b.n	5a00 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    59f4:	4b05      	ldr	r3, [pc, #20]	; (5a0c <SysTick_CLKSourceConfig+0x34>)
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	4a04      	ldr	r2, [pc, #16]	; (5a0c <SysTick_CLKSourceConfig+0x34>)
    59fa:	f023 0304 	bic.w	r3, r3, #4
    59fe:	6013      	str	r3, [r2, #0]
}
    5a00:	bf00      	nop
    5a02:	370c      	adds	r7, #12
    5a04:	46bd      	mov	sp, r7
    5a06:	bc80      	pop	{r7}
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop
    5a0c:	e000e010 	.word	0xe000e010

00005a10 <EXTI0_IRQHandler>:
 * Note that the interrupt handler is initialized to only
 * fire when the button is pressed, not released.
 */
uint8_t button_pressed = 0;
void EXTI0_IRQHandler(void)
{
    5a10:	b580      	push	{r7, lr}
    5a12:	af00      	add	r7, sp, #0
    /* Make sure the line has a pending interrupt
     * (should this always be true if we are inside the interrupt handle?) */
    if(EXTI_GetITStatus(EXTI_Line0) != RESET) {
    5a14:	2001      	movs	r0, #1
    5a16:	f7fd f861 	bl	2adc <EXTI_GetITStatus>
    5a1a:	4603      	mov	r3, r0
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d005      	beq.n	5a2c <EXTI0_IRQHandler+0x1c>
        button_pressed = 1;
    5a20:	4b03      	ldr	r3, [pc, #12]	; (5a30 <EXTI0_IRQHandler+0x20>)
    5a22:	2201      	movs	r2, #1
    5a24:	701a      	strb	r2, [r3, #0]
        EXTI_ClearITPendingBit(EXTI_Line0);
    5a26:	2001      	movs	r0, #1
    5a28:	f7fd f87c 	bl	2b24 <EXTI_ClearITPendingBit>
    }
}
    5a2c:	bf00      	nop
    5a2e:	bd80      	pop	{r7, pc}
    5a30:	20000028 	.word	0x20000028

00005a34 <send_char>:

/* ADC functions */

void send_char(char x)
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b082      	sub	sp, #8
    5a38:	af00      	add	r7, sp, #0
    5a3a:	4603      	mov	r3, r0
    5a3c:	71fb      	strb	r3, [r7, #7]
   while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    5a3e:	bf00      	nop
    5a40:	2180      	movs	r1, #128	; 0x80
    5a42:	4808      	ldr	r0, [pc, #32]	; (5a64 <send_char+0x30>)
    5a44:	f7fc fece 	bl	27e4 <USART_GetFlagStatus>
    5a48:	4603      	mov	r3, r0
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d0f8      	beq.n	5a40 <send_char+0xc>
   USART_SendData(USART1,x);
    5a4e:	79fb      	ldrb	r3, [r7, #7]
    5a50:	b29b      	uxth	r3, r3
    5a52:	4619      	mov	r1, r3
    5a54:	4803      	ldr	r0, [pc, #12]	; (5a64 <send_char+0x30>)
    5a56:	f7fc fd84 	bl	2562 <USART_SendData>
}
    5a5a:	bf00      	nop
    5a5c:	3708      	adds	r7, #8
    5a5e:	46bd      	mov	sp, r7
    5a60:	bd80      	pop	{r7, pc}
    5a62:	bf00      	nop
    5a64:	40013800 	.word	0x40013800

00005a68 <send_str>:

void send_str(char* str)
{
    5a68:	b580      	push	{r7, lr}
    5a6a:	b084      	sub	sp, #16
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	6078      	str	r0, [r7, #4]
    int x=0;
    5a70:	2300      	movs	r3, #0
    5a72:	60fb      	str	r3, [r7, #12]
    while(str[x]) 
    5a74:	e009      	b.n	5a8a <send_str+0x22>
     send_char(str[x++]);
    5a76:	68fb      	ldr	r3, [r7, #12]
    5a78:	1c5a      	adds	r2, r3, #1
    5a7a:	60fa      	str	r2, [r7, #12]
    5a7c:	461a      	mov	r2, r3
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	4413      	add	r3, r2
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	4618      	mov	r0, r3
    5a86:	f7ff ffd5 	bl	5a34 <send_char>
    while(str[x]) 
    5a8a:	68fb      	ldr	r3, [r7, #12]
    5a8c:	687a      	ldr	r2, [r7, #4]
    5a8e:	4413      	add	r3, r2
    5a90:	781b      	ldrb	r3, [r3, #0]
    5a92:	2b00      	cmp	r3, #0
    5a94:	d1ef      	bne.n	5a76 <send_str+0xe>
}
    5a96:	bf00      	nop
    5a98:	3710      	adds	r7, #16
    5a9a:	46bd      	mov	sp, r7
    5a9c:	bd80      	pop	{r7, pc}

00005a9e <send_nbr>:

void send_nbr(int nbr)
{
    5a9e:	b580      	push	{r7, lr}
    5aa0:	b082      	sub	sp, #8
    5aa2:	af00      	add	r7, sp, #0
    5aa4:	6078      	str	r0, [r7, #4]
   if(nbr/10)
    5aa6:	687b      	ldr	r3, [r7, #4]
    5aa8:	3309      	adds	r3, #9
    5aaa:	2b12      	cmp	r3, #18
    5aac:	d909      	bls.n	5ac2 <send_nbr+0x24>
   send_nbr(nbr/10);
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	4a0f      	ldr	r2, [pc, #60]	; (5af0 <send_nbr+0x52>)
    5ab2:	fb82 1203 	smull	r1, r2, r2, r3
    5ab6:	1092      	asrs	r2, r2, #2
    5ab8:	17db      	asrs	r3, r3, #31
    5aba:	1ad3      	subs	r3, r2, r3
    5abc:	4618      	mov	r0, r3
    5abe:	f7ff ffee 	bl	5a9e <send_nbr>
   send_char((nbr%10)+48);
    5ac2:	687a      	ldr	r2, [r7, #4]
    5ac4:	4b0a      	ldr	r3, [pc, #40]	; (5af0 <send_nbr+0x52>)
    5ac6:	fb83 1302 	smull	r1, r3, r3, r2
    5aca:	1099      	asrs	r1, r3, #2
    5acc:	17d3      	asrs	r3, r2, #31
    5ace:	1ac9      	subs	r1, r1, r3
    5ad0:	460b      	mov	r3, r1
    5ad2:	009b      	lsls	r3, r3, #2
    5ad4:	440b      	add	r3, r1
    5ad6:	005b      	lsls	r3, r3, #1
    5ad8:	1ad1      	subs	r1, r2, r3
    5ada:	b2cb      	uxtb	r3, r1
    5adc:	3330      	adds	r3, #48	; 0x30
    5ade:	b2db      	uxtb	r3, r3
    5ae0:	4618      	mov	r0, r3
    5ae2:	f7ff ffa7 	bl	5a34 <send_char>
}
    5ae6:	bf00      	nop
    5ae8:	3708      	adds	r7, #8
    5aea:	46bd      	mov	sp, r7
    5aec:	bd80      	pop	{r7, pc}
    5aee:	bf00      	nop
    5af0:	66666667 	.word	0x66666667

00005af4 <init_dac>:

void init_dac(void) {
    5af4:	b580      	push	{r7, lr}
    5af6:	b086      	sub	sp, #24
    5af8:	af00      	add	r7, sp, #0

    DAC_InitTypeDef DAC_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 ;
    5afa:	2330      	movs	r3, #48	; 0x30
    5afc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    5afe:	2300      	movs	r3, #0
    5b00:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5b02:	1d3b      	adds	r3, r7, #4
    5b04:	4619      	mov	r1, r3
    5b06:	480d      	ldr	r0, [pc, #52]	; (5b3c <init_dac+0x48>)
    5b08:	f7fc f832 	bl	1b70 <GPIO_Init>

    DAC_InitStructure.DAC_Trigger=DAC_Trigger_Software;
    5b0c:	233c      	movs	r3, #60	; 0x3c
    5b0e:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Noise;//DAC_WaveGeneration_Triangle;//DAC_WaveGeneration_Noise
    5b10:	2340      	movs	r3, #64	; 0x40
    5b12:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude=DAC_LFSRUnmask_Bits3_0;//DAC_TriangleAmplitude_255; //DAC_LFSRUnmask_Bits3_0
    5b14:	f44f 7340 	mov.w	r3, #768	; 0x300
    5b18:	613b      	str	r3, [r7, #16]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    5b1a:	2300      	movs	r3, #0
    5b1c:	617b      	str	r3, [r7, #20]
    DAC_Init(DAC_Channel_2, &DAC_InitStructure);
    5b1e:	f107 0308 	add.w	r3, r7, #8
    5b22:	4619      	mov	r1, r3
    5b24:	2010      	movs	r0, #16
    5b26:	f7ff fd3b 	bl	55a0 <DAC_Init>

    DAC_Cmd(DAC_Channel_2, ENABLE);
    5b2a:	2101      	movs	r1, #1
    5b2c:	2010      	movs	r0, #16
    5b2e:	f7ff fd7e 	bl	562e <DAC_Cmd>

    //set_DAC2_triangle_waveform_amplitude(peak);   
    //enable_DAC2_channel(true);

}
    5b32:	bf00      	nop
    5b34:	3718      	adds	r7, #24
    5b36:	46bd      	mov	sp, r7
    5b38:	bd80      	pop	{r7, pc}
    5b3a:	bf00      	nop
    5b3c:	40010800 	.word	0x40010800

00005b40 <USART1_Init>:
void USART1_Init(void)
{
    5b40:	b580      	push	{r7, lr}
    5b42:	b086      	sub	sp, #24
    5b44:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
   
    /* Configure USART1 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    5b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5b4a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    5b4c:	2304      	movs	r3, #4
    5b4e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5b50:	1d3b      	adds	r3, r7, #4
    5b52:	4619      	mov	r1, r3
    5b54:	4812      	ldr	r0, [pc, #72]	; (5ba0 <USART1_Init+0x60>)
    5b56:	f7fc f80b 	bl	1b70 <GPIO_Init>

    /* Configure USART1 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    5b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
    5b5e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    5b60:	2303      	movs	r3, #3
    5b62:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    5b64:	2318      	movs	r3, #24
    5b66:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5b68:	1d3b      	adds	r3, r7, #4
    5b6a:	4619      	mov	r1, r3
    5b6c:	480c      	ldr	r0, [pc, #48]	; (5ba0 <USART1_Init+0x60>)
    5b6e:	f7fb ffff 	bl	1b70 <GPIO_Init>

 
    /* Configure the USART1 */
    USART_InitStructure.USART_BaudRate = 9600;
    5b72:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    5b76:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    5b78:	2300      	movs	r3, #0
    5b7a:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    5b7c:	2300      	movs	r3, #0
    5b7e:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    5b80:	2300      	movs	r3, #0
    5b82:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    5b84:	2300      	movs	r3, #0
    5b86:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    5b88:	230c      	movs	r3, #12
    5b8a:	827b      	strh	r3, [r7, #18]
    USART_Init(USART1, &USART_InitStructure);
    5b8c:	f107 0308 	add.w	r3, r7, #8
    5b90:	4619      	mov	r1, r3
    5b92:	4804      	ldr	r0, [pc, #16]	; (5ba4 <USART1_Init+0x64>)
    5b94:	f7fc fab6 	bl	2104 <USART_Init>
    
}
    5b98:	bf00      	nop
    5b9a:	3718      	adds	r7, #24
    5b9c:	46bd      	mov	sp, r7
    5b9e:	bd80      	pop	{r7, pc}
    5ba0:	40010800 	.word	0x40010800
    5ba4:	40013800 	.word	0x40013800

00005ba8 <init_RCC>:

void init_RCC()
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO, ENABLE);
    5bac:	2101      	movs	r1, #1
    5bae:	f244 0015 	movw	r0, #16405	; 0x4015
    5bb2:	f7fb fe45 	bl	1840 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC ,ENABLE);
    5bb6:	2101      	movs	r1, #1
    5bb8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    5bbc:	f7fb fe5e 	bl	187c <RCC_APB1PeriphClockCmd>
}
    5bc0:	bf00      	nop
    5bc2:	bd80      	pop	{r7, pc}

00005bc4 <sleep>:

void sleep()
{
    5bc4:	b480      	push	{r7}
    5bc6:	b083      	sub	sp, #12
    5bc8:	af00      	add	r7, sp, #0
   int i=1000000;
    5bca:	4b06      	ldr	r3, [pc, #24]	; (5be4 <sleep+0x20>)
    5bcc:	607b      	str	r3, [r7, #4]
   while(i-->0);
    5bce:	bf00      	nop
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	1e5a      	subs	r2, r3, #1
    5bd4:	607a      	str	r2, [r7, #4]
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	dcfa      	bgt.n	5bd0 <sleep+0xc>
}
    5bda:	bf00      	nop
    5bdc:	370c      	adds	r7, #12
    5bde:	46bd      	mov	sp, r7
    5be0:	bc80      	pop	{r7}
    5be2:	4770      	bx	lr
    5be4:	000f4240 	.word	0x000f4240

00005be8 <main>:


int main(void)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	af00      	add	r7, sp, #0
    /* Initialization */

    init_led();
    5bec:	f7fa fce8 	bl	5c0 <init_led>
    USART1_Init();
    5bf0:	f7ff ffa6 	bl	5b40 <USART1_Init>
    init_dac();
    5bf4:	f7ff ff7e 	bl	5af4 <init_dac>
    init_RCC();
    5bf8:	f7ff ffd6 	bl	5ba8 <init_RCC>
    USART_Cmd(USART1, ENABLE);
    5bfc:	2101      	movs	r1, #1
    5bfe:	4808      	ldr	r0, [pc, #32]	; (5c20 <main+0x38>)
    5c00:	f7fc fb96 	bl	2330 <USART_Cmd>

    send_str("*******DEMO of DAC*******");     
    5c04:	4807      	ldr	r0, [pc, #28]	; (5c24 <main+0x3c>)
    5c06:	f7ff ff2f 	bl	5a68 <send_str>
    DAC_SetChannel2Data(DAC_Align_12b_L,150<<4);
    5c0a:	f44f 6116 	mov.w	r1, #2400	; 0x960
    5c0e:	2004      	movs	r0, #4
    5c10:	f7ff fdda 	bl	57c8 <DAC_SetChannel2Data>

    while(1)
    {
     DAC->SWTRIGR=0x02;
    5c14:	4b04      	ldr	r3, [pc, #16]	; (5c28 <main+0x40>)
    5c16:	2202      	movs	r2, #2
    5c18:	605a      	str	r2, [r3, #4]
     sleep();     
    5c1a:	f7ff ffd3 	bl	5bc4 <sleep>
     DAC->SWTRIGR=0x02;
    5c1e:	e7f9      	b.n	5c14 <main+0x2c>
    5c20:	40013800 	.word	0x40013800
    5c24:	00005d60 	.word	0x00005d60
    5c28:	40007400 	.word	0x40007400

00005c2c <memset>:
    5c2c:	b4f0      	push	{r4, r5, r6, r7}
    5c2e:	0786      	lsls	r6, r0, #30
    5c30:	d043      	beq.n	5cba <memset+0x8e>
    5c32:	1e54      	subs	r4, r2, #1
    5c34:	2a00      	cmp	r2, #0
    5c36:	d03e      	beq.n	5cb6 <memset+0x8a>
    5c38:	b2ca      	uxtb	r2, r1
    5c3a:	4603      	mov	r3, r0
    5c3c:	e002      	b.n	5c44 <memset+0x18>
    5c3e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    5c42:	d338      	bcc.n	5cb6 <memset+0x8a>
    5c44:	f803 2b01 	strb.w	r2, [r3], #1
    5c48:	079d      	lsls	r5, r3, #30
    5c4a:	d1f8      	bne.n	5c3e <memset+0x12>
    5c4c:	2c03      	cmp	r4, #3
    5c4e:	d92b      	bls.n	5ca8 <memset+0x7c>
    5c50:	b2cd      	uxtb	r5, r1
    5c52:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5c56:	2c0f      	cmp	r4, #15
    5c58:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5c5c:	d916      	bls.n	5c8c <memset+0x60>
    5c5e:	f1a4 0710 	sub.w	r7, r4, #16
    5c62:	093f      	lsrs	r7, r7, #4
    5c64:	f103 0620 	add.w	r6, r3, #32
    5c68:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    5c6c:	f103 0210 	add.w	r2, r3, #16
    5c70:	e942 5504 	strd	r5, r5, [r2, #-16]
    5c74:	e942 5502 	strd	r5, r5, [r2, #-8]
    5c78:	3210      	adds	r2, #16
    5c7a:	42b2      	cmp	r2, r6
    5c7c:	d1f8      	bne.n	5c70 <memset+0x44>
    5c7e:	f004 040f 	and.w	r4, r4, #15
    5c82:	3701      	adds	r7, #1
    5c84:	2c03      	cmp	r4, #3
    5c86:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5c8a:	d90d      	bls.n	5ca8 <memset+0x7c>
    5c8c:	461e      	mov	r6, r3
    5c8e:	4622      	mov	r2, r4
    5c90:	3a04      	subs	r2, #4
    5c92:	2a03      	cmp	r2, #3
    5c94:	f846 5b04 	str.w	r5, [r6], #4
    5c98:	d8fa      	bhi.n	5c90 <memset+0x64>
    5c9a:	1f22      	subs	r2, r4, #4
    5c9c:	f022 0203 	bic.w	r2, r2, #3
    5ca0:	3204      	adds	r2, #4
    5ca2:	4413      	add	r3, r2
    5ca4:	f004 0403 	and.w	r4, r4, #3
    5ca8:	b12c      	cbz	r4, 5cb6 <memset+0x8a>
    5caa:	b2c9      	uxtb	r1, r1
    5cac:	441c      	add	r4, r3
    5cae:	f803 1b01 	strb.w	r1, [r3], #1
    5cb2:	429c      	cmp	r4, r3
    5cb4:	d1fb      	bne.n	5cae <memset+0x82>
    5cb6:	bcf0      	pop	{r4, r5, r6, r7}
    5cb8:	4770      	bx	lr
    5cba:	4614      	mov	r4, r2
    5cbc:	4603      	mov	r3, r0
    5cbe:	e7c5      	b.n	5c4c <memset+0x20>

00005cc0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    5cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    5cc2:	e003      	b.n	5ccc <LoopCopyDataInit>

00005cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    5cc4:	4b0a      	ldr	r3, [pc, #40]	; (5cf0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    5cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    5cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    5cca:	3104      	adds	r1, #4

00005ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    5ccc:	4809      	ldr	r0, [pc, #36]	; (5cf4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    5cce:	4b0a      	ldr	r3, [pc, #40]	; (5cf8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    5cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    5cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    5cd4:	d3f6      	bcc.n	5cc4 <CopyDataInit>
	ldr	r2, =_sbss
    5cd6:	4a09      	ldr	r2, [pc, #36]	; (5cfc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    5cd8:	e002      	b.n	5ce0 <LoopFillZerobss>

00005cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    5cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
    5cdc:	f842 3b04 	str.w	r3, [r2], #4

00005ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    5ce0:	4b07      	ldr	r3, [pc, #28]	; (5d00 <LoopFillZerobss+0x20>)
	cmp	r2, r3
    5ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
    5ce4:	d3f9      	bcc.n	5cda <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    5ce6:	f7fa fb3b 	bl	360 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    5cea:	f7ff ff7d 	bl	5be8 <main>
	bx	lr    
    5cee:	4770      	bx	lr
	ldr	r3, =_sidata
    5cf0:	00005d7a 	.word	0x00005d7a
	ldr	r0, =_sdata
    5cf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    5cf8:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
    5cfc:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
    5d00:	20000029 	.word	0x20000029

00005d04 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    5d04:	e7fe      	b.n	5d04 <ADC1_2_IRQHandler>
    5d06:	0000      	movs	r0, r0
    5d08:	33323130 	.word	0x33323130
    5d0c:	37363534 	.word	0x37363534
    5d10:	62613938 	.word	0x62613938
    5d14:	66656463 	.word	0x66656463
    5d18:	6a696867 	.word	0x6a696867
    5d1c:	6e6d6c6b 	.word	0x6e6d6c6b
    5d20:	7271706f 	.word	0x7271706f
    5d24:	76757473 	.word	0x76757473
    5d28:	7a797877 	.word	0x7a797877
    5d2c:	00000000 	.word	0x00000000
    5d30:	33323130 	.word	0x33323130
    5d34:	37363534 	.word	0x37363534
    5d38:	42413938 	.word	0x42413938
    5d3c:	46454443 	.word	0x46454443
    5d40:	4a494847 	.word	0x4a494847
    5d44:	4e4d4c4b 	.word	0x4e4d4c4b
    5d48:	5251504f 	.word	0x5251504f
    5d4c:	56555453 	.word	0x56555453
    5d50:	5a595857 	.word	0x5a595857
    5d54:	00000000 	.word	0x00000000
    5d58:	4c554e3c 	.word	0x4c554e3c
    5d5c:	00003e4c 	.word	0x00003e4c
    5d60:	2a2a2a2a 	.word	0x2a2a2a2a
    5d64:	442a2a2a 	.word	0x442a2a2a
    5d68:	204f4d45 	.word	0x204f4d45
    5d6c:	4420666f 	.word	0x4420666f
    5d70:	2a2a4341 	.word	0x2a2a4341
    5d74:	2a2a2a2a 	.word	0x2a2a2a2a
    5d78:	002a      	.short	0x002a
