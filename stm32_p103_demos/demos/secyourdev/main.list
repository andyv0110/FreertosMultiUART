
demos/secyourdev/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 2d a5 00 00 71 a5 00 00 71 a5 00 00     .P. -...q...q...
      10:	71 a5 00 00 71 a5 00 00 71 a5 00 00 00 00 00 00     q...q...q.......
	...
      2c:	47 a0 00 00 71 a5 00 00 00 00 00 00 41 a1 00 00     G...q.......A...
      3c:	87 a1 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     ....q...q...q...
      4c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      5c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      6c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      7c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      8c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      9c:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      ac:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      bc:	71 a5 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     q...q...q...q...
      cc:	71 a5 00 00 71 a5 00 00 dd 01 00 00 75 02 00 00     q...q.......u...
      dc:	0d 03 00 00 71 a5 00 00 71 a5 00 00 71 a5 00 00     ....q...q...q...
	...
     108:	5f f8 08 f1                                         _...

0000010c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     10c:	b580      	push	{r7, lr}
     10e:	b084      	sub	sp, #16
     110:	af00      	add	r7, sp, #0
     112:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
     114:	2300      	movs	r3, #0
     116:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     118:	687b      	ldr	r3, [r7, #4]
     11a:	f003 0307 	and.w	r3, r3, #7
     11e:	2b00      	cmp	r3, #0
     120:	d004      	beq.n	12c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     122:	687b      	ldr	r3, [r7, #4]
     124:	f023 0307 	bic.w	r3, r3, #7
     128:	3308      	adds	r3, #8
     12a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
     12c:	f008 fad6 	bl	86dc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     130:	4b16      	ldr	r3, [pc, #88]	; (18c <pvPortMalloc+0x80>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2b00      	cmp	r3, #0
     136:	d105      	bne.n	144 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     138:	4b15      	ldr	r3, [pc, #84]	; (190 <pvPortMalloc+0x84>)
     13a:	f023 0307 	bic.w	r3, r3, #7
     13e:	461a      	mov	r2, r3
     140:	4b12      	ldr	r3, [pc, #72]	; (18c <pvPortMalloc+0x80>)
     142:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     144:	4b13      	ldr	r3, [pc, #76]	; (194 <pvPortMalloc+0x88>)
     146:	681a      	ldr	r2, [r3, #0]
     148:	687b      	ldr	r3, [r7, #4]
     14a:	4413      	add	r3, r2
     14c:	f244 32f7 	movw	r2, #17399	; 0x43f7
     150:	4293      	cmp	r3, r2
     152:	d813      	bhi.n	17c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     154:	4b0f      	ldr	r3, [pc, #60]	; (194 <pvPortMalloc+0x88>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	687b      	ldr	r3, [r7, #4]
     15a:	441a      	add	r2, r3
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <pvPortMalloc+0x88>)
     15e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     160:	429a      	cmp	r2, r3
     162:	d90b      	bls.n	17c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <pvPortMalloc+0x80>)
     166:	681a      	ldr	r2, [r3, #0]
     168:	4b0a      	ldr	r3, [pc, #40]	; (194 <pvPortMalloc+0x88>)
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	4413      	add	r3, r2
     16e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <pvPortMalloc+0x88>)
     172:	681a      	ldr	r2, [r3, #0]
     174:	687b      	ldr	r3, [r7, #4]
     176:	4413      	add	r3, r2
     178:	4a06      	ldr	r2, [pc, #24]	; (194 <pvPortMalloc+0x88>)
     17a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     17c:	f008 fabc 	bl	86f8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     180:	68fb      	ldr	r3, [r7, #12]
}
     182:	4618      	mov	r0, r3
     184:	3710      	adds	r7, #16
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	bf00      	nop
     18c:	200048a0 	.word	0x200048a0
     190:	200004a4 	.word	0x200004a4
     194:	2000489c 	.word	0x2000489c

00000198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     198:	b480      	push	{r7}
     19a:	b083      	sub	sp, #12
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     1a0:	bf00      	nop
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	bc80      	pop	{r7}
     1a8:	4770      	bx	lr

000001aa <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     1aa:	b480      	push	{r7}
     1ac:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <vPortInitialiseBlocks+0x12>)
     1b0:	2200      	movs	r2, #0
     1b2:	601a      	str	r2, [r3, #0]
}
     1b4:	bf00      	nop
     1b6:	46bd      	mov	sp, r7
     1b8:	bc80      	pop	{r7}
     1ba:	4770      	bx	lr
     1bc:	2000489c 	.word	0x2000489c

000001c0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     1c0:	b480      	push	{r7}
     1c2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
     1c4:	4b04      	ldr	r3, [pc, #16]	; (1d8 <xPortGetFreeHeapSize+0x18>)
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	f5c3 4387 	rsb	r3, r3, #17280	; 0x4380
     1cc:	3378      	adds	r3, #120	; 0x78
}
     1ce:	4618      	mov	r0, r3
     1d0:	46bd      	mov	sp, r7
     1d2:	bc80      	pop	{r7}
     1d4:	4770      	bx	lr
     1d6:	bf00      	nop
     1d8:	2000489c 	.word	0x2000489c

000001dc <USART1_IRQHandler>:


/* IRQ handler to handle USART1 interrupts (both transmit and receive
 * interrupts). */
void USART1_IRQHandler(void)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b082      	sub	sp, #8
     1e0:	af00      	add	r7, sp, #0
    static signed portBASE_TYPE xHigherPriorityTaskWoken;
    serial_ch_msg rx_msg;

    /* If this interrupt is for a transmit... */
    if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
     1e2:	f240 7127 	movw	r1, #1831	; 0x727
     1e6:	481e      	ldr	r0, [pc, #120]	; (260 <USART1_IRQHandler+0x84>)
     1e8:	f003 fdef 	bl	3dca <USART_GetITStatus>
     1ec:	4603      	mov	r3, r0
     1ee:	2b00      	cmp	r3, #0
     1f0:	d00c      	beq.n	20c <USART1_IRQHandler+0x30>
        /* "give" the serial_tx_wait_sem semaphore to notify processes that
         * the buffer has a spot free for the next byte.
         */
        xSemaphoreGiveFromISR(serial_tx_wait_sem_1, &xHigherPriorityTaskWoken);
     1f2:	4b1c      	ldr	r3, [pc, #112]	; (264 <USART1_IRQHandler+0x88>)
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	491c      	ldr	r1, [pc, #112]	; (268 <USART1_IRQHandler+0x8c>)
     1f8:	4618      	mov	r0, r3
     1fa:	f007 f95c 	bl	74b6 <xQueueGiveFromISR>

        /* Disables the transmit interrupt. */
        USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
     1fe:	2200      	movs	r2, #0
     200:	f240 7127 	movw	r1, #1831	; 0x727
     204:	4816      	ldr	r0, [pc, #88]	; (260 <USART1_IRQHandler+0x84>)
     206:	f003 fb7a 	bl	38fe <USART_ITConfig>
     20a:	e019      	b.n	240 <USART1_IRQHandler+0x64>
    /* If this interrupt is for a receive... */
    } else if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
     20c:	f240 5125 	movw	r1, #1317	; 0x525
     210:	4813      	ldr	r0, [pc, #76]	; (260 <USART1_IRQHandler+0x84>)
     212:	f003 fdda 	bl	3dca <USART_GetITStatus>
     216:	4603      	mov	r3, r0
     218:	2b00      	cmp	r3, #0
     21a:	d010      	beq.n	23e <USART1_IRQHandler+0x62>
        /* Receive the byte from the buffer. */
        rx_msg.ch = USART_ReceiveData(USART1);
     21c:	4810      	ldr	r0, [pc, #64]	; (260 <USART1_IRQHandler+0x84>)
     21e:	f003 fc79 	bl	3b14 <USART_ReceiveData>
     222:	4603      	mov	r3, r0
     224:	b2db      	uxtb	r3, r3
     226:	713b      	strb	r3, [r7, #4]

        /* Queue the received byte. */
        if(!xQueueSendToBackFromISR(serial_rx_queue_1, &rx_msg, &xHigherPriorityTaskWoken)) {
     228:	4b10      	ldr	r3, [pc, #64]	; (26c <USART1_IRQHandler+0x90>)
     22a:	6818      	ldr	r0, [r3, #0]
     22c:	1d39      	adds	r1, r7, #4
     22e:	2300      	movs	r3, #0
     230:	4a0d      	ldr	r2, [pc, #52]	; (268 <USART1_IRQHandler+0x8c>)
     232:	f007 f8e7 	bl	7404 <xQueueGenericSendFromISR>
     236:	4603      	mov	r3, r0
     238:	2b00      	cmp	r3, #0
     23a:	d101      	bne.n	240 <USART1_IRQHandler+0x64>
            /* If there was an error queueing the received byte, freeze. */
            while(1);
     23c:	e7fe      	b.n	23c <USART1_IRQHandler+0x60>
        }
    } else {
        /* Only transmit and receive interrupts should be enabled.  If this is
         * another type of interrupt, freeze.
         */
        while(1);
     23e:	e7fe      	b.n	23e <USART1_IRQHandler+0x62>
    }

    if(xHigherPriorityTaskWoken) {
     240:	4b09      	ldr	r3, [pc, #36]	; (268 <USART1_IRQHandler+0x8c>)
     242:	681b      	ldr	r3, [r3, #0]
     244:	2b00      	cmp	r3, #0
     246:	d007      	beq.n	258 <USART1_IRQHandler+0x7c>
        taskYIELD();
     248:	4b09      	ldr	r3, [pc, #36]	; (270 <USART1_IRQHandler+0x94>)
     24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     24e:	601a      	str	r2, [r3, #0]
     250:	f3bf 8f4f 	dsb	sy
     254:	f3bf 8f6f 	isb	sy
    }
}
     258:	bf00      	nop
     25a:	3708      	adds	r7, #8
     25c:	46bd      	mov	sp, r7
     25e:	bd80      	pop	{r7, pc}
     260:	40013800 	.word	0x40013800
     264:	200048b0 	.word	0x200048b0
     268:	200048d0 	.word	0x200048d0
     26c:	200048bc 	.word	0x200048bc
     270:	e000ed04 	.word	0xe000ed04

00000274 <USART2_IRQHandler>:


/* IRQ handler to handle USART2 interrupts (both transmit and receive
 * interrupts). */
void USART2_IRQHandler(void)
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
    static signed portBASE_TYPE xHigherPriorityTaskWoken;
    serial_ch_msg rx_msg;

    /* If this interrupt is for a transmit... */
    if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
     27a:	f240 7127 	movw	r1, #1831	; 0x727
     27e:	481e      	ldr	r0, [pc, #120]	; (2f8 <USART2_IRQHandler+0x84>)
     280:	f003 fda3 	bl	3dca <USART_GetITStatus>
     284:	4603      	mov	r3, r0
     286:	2b00      	cmp	r3, #0
     288:	d00c      	beq.n	2a4 <USART2_IRQHandler+0x30>
        /* "give" the serial_tx_wait_sem semaphore to notify processes that
         * the buffer has a spot free for the next byte.
         */
        xSemaphoreGiveFromISR(serial_tx_wait_sem_2, &xHigherPriorityTaskWoken);
     28a:	4b1c      	ldr	r3, [pc, #112]	; (2fc <USART2_IRQHandler+0x88>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	491c      	ldr	r1, [pc, #112]	; (300 <USART2_IRQHandler+0x8c>)
     290:	4618      	mov	r0, r3
     292:	f007 f910 	bl	74b6 <xQueueGiveFromISR>

        /* Disables the transmit interrupt. */
        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     296:	2200      	movs	r2, #0
     298:	f240 7127 	movw	r1, #1831	; 0x727
     29c:	4816      	ldr	r0, [pc, #88]	; (2f8 <USART2_IRQHandler+0x84>)
     29e:	f003 fb2e 	bl	38fe <USART_ITConfig>
     2a2:	e019      	b.n	2d8 <USART2_IRQHandler+0x64>
    /* If this interrupt is for a receive... */
    } else if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
     2a4:	f240 5125 	movw	r1, #1317	; 0x525
     2a8:	4813      	ldr	r0, [pc, #76]	; (2f8 <USART2_IRQHandler+0x84>)
     2aa:	f003 fd8e 	bl	3dca <USART_GetITStatus>
     2ae:	4603      	mov	r3, r0
     2b0:	2b00      	cmp	r3, #0
     2b2:	d010      	beq.n	2d6 <USART2_IRQHandler+0x62>
        /* Receive the byte from the buffer. */
        rx_msg.ch = USART_ReceiveData(USART2);
     2b4:	4810      	ldr	r0, [pc, #64]	; (2f8 <USART2_IRQHandler+0x84>)
     2b6:	f003 fc2d 	bl	3b14 <USART_ReceiveData>
     2ba:	4603      	mov	r3, r0
     2bc:	b2db      	uxtb	r3, r3
     2be:	713b      	strb	r3, [r7, #4]

        /* Queue the received byte. */
        if(!xQueueSendToBackFromISR(serial_rx_queue_2, &rx_msg, &xHigherPriorityTaskWoken)) {
     2c0:	4b10      	ldr	r3, [pc, #64]	; (304 <USART2_IRQHandler+0x90>)
     2c2:	6818      	ldr	r0, [r3, #0]
     2c4:	1d39      	adds	r1, r7, #4
     2c6:	2300      	movs	r3, #0
     2c8:	4a0d      	ldr	r2, [pc, #52]	; (300 <USART2_IRQHandler+0x8c>)
     2ca:	f007 f89b 	bl	7404 <xQueueGenericSendFromISR>
     2ce:	4603      	mov	r3, r0
     2d0:	2b00      	cmp	r3, #0
     2d2:	d101      	bne.n	2d8 <USART2_IRQHandler+0x64>
            /* If there was an error queueing the received byte, freeze. */
            while(1);
     2d4:	e7fe      	b.n	2d4 <USART2_IRQHandler+0x60>
        }
    } else {
        /* Only transmit and receive interrupts should be enabled.  If this is
         * another type of interrupt, freeze.
         */
        while(1);
     2d6:	e7fe      	b.n	2d6 <USART2_IRQHandler+0x62>
    }

    if(xHigherPriorityTaskWoken) {
     2d8:	4b09      	ldr	r3, [pc, #36]	; (300 <USART2_IRQHandler+0x8c>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	2b00      	cmp	r3, #0
     2de:	d007      	beq.n	2f0 <USART2_IRQHandler+0x7c>
        taskYIELD();
     2e0:	4b09      	ldr	r3, [pc, #36]	; (308 <USART2_IRQHandler+0x94>)
     2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2e6:	601a      	str	r2, [r3, #0]
     2e8:	f3bf 8f4f 	dsb	sy
     2ec:	f3bf 8f6f 	isb	sy
    }
}
     2f0:	bf00      	nop
     2f2:	3708      	adds	r7, #8
     2f4:	46bd      	mov	sp, r7
     2f6:	bd80      	pop	{r7, pc}
     2f8:	40004400 	.word	0x40004400
     2fc:	200048b4 	.word	0x200048b4
     300:	200048d4 	.word	0x200048d4
     304:	200048c0 	.word	0x200048c0
     308:	e000ed04 	.word	0xe000ed04

0000030c <USART3_IRQHandler>:

/* IRQ handler to handle USART3 interrupts (both transmit and receive
 * interrupts). */
void USART3_IRQHandler(void)
{
     30c:	b580      	push	{r7, lr}
     30e:	b082      	sub	sp, #8
     310:	af00      	add	r7, sp, #0
    static signed portBASE_TYPE xHigherPriorityTaskWoken;
    serial_ch_msg rx_msg;

    /* If this interrupt is for a transmit... */
    if(USART_GetITStatus(USART3, USART_IT_TXE) != RESET) {
     312:	f240 7127 	movw	r1, #1831	; 0x727
     316:	481e      	ldr	r0, [pc, #120]	; (390 <USART3_IRQHandler+0x84>)
     318:	f003 fd57 	bl	3dca <USART_GetITStatus>
     31c:	4603      	mov	r3, r0
     31e:	2b00      	cmp	r3, #0
     320:	d00c      	beq.n	33c <USART3_IRQHandler+0x30>
        /* "give" the serial_tx_wait_sem semaphore to notify processes that
         * the buffer has a spot free for the next byte.
         */
        xSemaphoreGiveFromISR(serial_tx_wait_sem_3, &xHigherPriorityTaskWoken);
     322:	4b1c      	ldr	r3, [pc, #112]	; (394 <USART3_IRQHandler+0x88>)
     324:	681b      	ldr	r3, [r3, #0]
     326:	491c      	ldr	r1, [pc, #112]	; (398 <USART3_IRQHandler+0x8c>)
     328:	4618      	mov	r0, r3
     32a:	f007 f8c4 	bl	74b6 <xQueueGiveFromISR>

        /* Disables the transmit interrupt. */
        USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
     32e:	2200      	movs	r2, #0
     330:	f240 7127 	movw	r1, #1831	; 0x727
     334:	4816      	ldr	r0, [pc, #88]	; (390 <USART3_IRQHandler+0x84>)
     336:	f003 fae2 	bl	38fe <USART_ITConfig>
     33a:	e019      	b.n	370 <USART3_IRQHandler+0x64>
    /* If this interrupt is for a receive... */
    } else if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
     33c:	f240 5125 	movw	r1, #1317	; 0x525
     340:	4813      	ldr	r0, [pc, #76]	; (390 <USART3_IRQHandler+0x84>)
     342:	f003 fd42 	bl	3dca <USART_GetITStatus>
     346:	4603      	mov	r3, r0
     348:	2b00      	cmp	r3, #0
     34a:	d010      	beq.n	36e <USART3_IRQHandler+0x62>
        /* Receive the byte from the buffer. */
        rx_msg.ch = USART_ReceiveData(USART3);
     34c:	4810      	ldr	r0, [pc, #64]	; (390 <USART3_IRQHandler+0x84>)
     34e:	f003 fbe1 	bl	3b14 <USART_ReceiveData>
     352:	4603      	mov	r3, r0
     354:	b2db      	uxtb	r3, r3
     356:	713b      	strb	r3, [r7, #4]

        /* Queue the received byte. */
        if(!xQueueSendToBackFromISR(serial_rx_queue_3, &rx_msg, &xHigherPriorityTaskWoken)) {
     358:	4b10      	ldr	r3, [pc, #64]	; (39c <USART3_IRQHandler+0x90>)
     35a:	6818      	ldr	r0, [r3, #0]
     35c:	1d39      	adds	r1, r7, #4
     35e:	2300      	movs	r3, #0
     360:	4a0d      	ldr	r2, [pc, #52]	; (398 <USART3_IRQHandler+0x8c>)
     362:	f007 f84f 	bl	7404 <xQueueGenericSendFromISR>
     366:	4603      	mov	r3, r0
     368:	2b00      	cmp	r3, #0
     36a:	d101      	bne.n	370 <USART3_IRQHandler+0x64>
            /* If there was an error queueing the received byte, freeze. */
            while(1);
     36c:	e7fe      	b.n	36c <USART3_IRQHandler+0x60>
        }
    } else {
        /* Only transmit and receive interrupts should be enabled.  If this is
         * another type of interrupt, freeze.
         */
        while(1);
     36e:	e7fe      	b.n	36e <USART3_IRQHandler+0x62>
    }

    if(xHigherPriorityTaskWoken) {
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <USART3_IRQHandler+0x8c>)
     372:	681b      	ldr	r3, [r3, #0]
     374:	2b00      	cmp	r3, #0
     376:	d007      	beq.n	388 <USART3_IRQHandler+0x7c>
        taskYIELD();
     378:	4b09      	ldr	r3, [pc, #36]	; (3a0 <USART3_IRQHandler+0x94>)
     37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     37e:	601a      	str	r2, [r3, #0]
     380:	f3bf 8f4f 	dsb	sy
     384:	f3bf 8f6f 	isb	sy
    }
}
     388:	bf00      	nop
     38a:	3708      	adds	r7, #8
     38c:	46bd      	mov	sp, r7
     38e:	bd80      	pop	{r7, pc}
     390:	40004800 	.word	0x40004800
     394:	200048b8 	.word	0x200048b8
     398:	200048d8 	.word	0x200048d8
     39c:	200048c4 	.word	0x200048c4
     3a0:	e000ed04 	.word	0xe000ed04

000003a4 <send_byte_rtos>:


void send_byte_rtos(USART_TypeDef* USARTx,char ch)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	b084      	sub	sp, #16
     3a8:	af00      	add	r7, sp, #0
     3aa:	6078      	str	r0, [r7, #4]
     3ac:	460b      	mov	r3, r1
     3ae:	70fb      	strb	r3, [r7, #3]
    /* Wait until the RS232 port can receive another byte (this semaphore is
     * "given" by the RS232 port interrupt when the buffer has room for another
     * byte.
     */
    volatile xSemaphoreHandle l_serial_tx_wait_sem = NULL;
     3b0:	2300      	movs	r3, #0
     3b2:	60fb      	str	r3, [r7, #12]
    if (USARTx == USART1) {
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	4a19      	ldr	r2, [pc, #100]	; (41c <send_byte_rtos+0x78>)
     3b8:	4293      	cmp	r3, r2
     3ba:	d103      	bne.n	3c4 <send_byte_rtos+0x20>
	l_serial_tx_wait_sem = serial_tx_wait_sem_1;
     3bc:	4b18      	ldr	r3, [pc, #96]	; (420 <send_byte_rtos+0x7c>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	60fb      	str	r3, [r7, #12]
     3c2:	e010      	b.n	3e6 <send_byte_rtos+0x42>
    }
    else if (USARTx == USART2) {
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	4a17      	ldr	r2, [pc, #92]	; (424 <send_byte_rtos+0x80>)
     3c8:	4293      	cmp	r3, r2
     3ca:	d103      	bne.n	3d4 <send_byte_rtos+0x30>
	l_serial_tx_wait_sem = serial_tx_wait_sem_2;
     3cc:	4b16      	ldr	r3, [pc, #88]	; (428 <send_byte_rtos+0x84>)
     3ce:	681b      	ldr	r3, [r3, #0]
     3d0:	60fb      	str	r3, [r7, #12]
     3d2:	e008      	b.n	3e6 <send_byte_rtos+0x42>
    }
    else if (USARTx == USART3) {
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	4a15      	ldr	r2, [pc, #84]	; (42c <send_byte_rtos+0x88>)
     3d8:	4293      	cmp	r3, r2
     3da:	d103      	bne.n	3e4 <send_byte_rtos+0x40>
	l_serial_tx_wait_sem = serial_tx_wait_sem_3;
     3dc:	4b14      	ldr	r3, [pc, #80]	; (430 <send_byte_rtos+0x8c>)
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	60fb      	str	r3, [r7, #12]
     3e2:	e000      	b.n	3e6 <send_byte_rtos+0x42>
    }
    else {
       while (1);   
     3e4:	e7fe      	b.n	3e4 <send_byte_rtos+0x40>
    }
    while(!xSemaphoreTake(l_serial_tx_wait_sem, portMAX_DELAY));
     3e6:	bf00      	nop
     3e8:	68fb      	ldr	r3, [r7, #12]
     3ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     3ee:	4618      	mov	r0, r3
     3f0:	f007 f956 	bl	76a0 <xQueueSemaphoreTake>
     3f4:	4603      	mov	r3, r0
     3f6:	2b00      	cmp	r3, #0
     3f8:	d0f6      	beq.n	3e8 <send_byte_rtos+0x44>

    /* Send the byte and enable the transmit interrupt (it is disabled by the
     * interrupt).
     */
    USART_SendData(USARTx, ch);
     3fa:	78fb      	ldrb	r3, [r7, #3]
     3fc:	b29b      	uxth	r3, r3
     3fe:	4619      	mov	r1, r3
     400:	6878      	ldr	r0, [r7, #4]
     402:	f003 fb76 	bl	3af2 <USART_SendData>
    USART_ITConfig(USARTx, USART_IT_TXE, ENABLE);
     406:	2201      	movs	r2, #1
     408:	f240 7127 	movw	r1, #1831	; 0x727
     40c:	6878      	ldr	r0, [r7, #4]
     40e:	f003 fa76 	bl	38fe <USART_ITConfig>
}
     412:	bf00      	nop
     414:	3710      	adds	r7, #16
     416:	46bd      	mov	sp, r7
     418:	bd80      	pop	{r7, pc}
     41a:	bf00      	nop
     41c:	40013800 	.word	0x40013800
     420:	200048b0 	.word	0x200048b0
     424:	40004400 	.word	0x40004400
     428:	200048b4 	.word	0x200048b4
     42c:	40004800 	.word	0x40004800
     430:	200048b8 	.word	0x200048b8

00000434 <receive_byte_rtos>:



char receive_byte_rtos(void)
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
    serial_ch_msg msg;

    /* Wait for a byte to be queued by the receive interrupt handler. */
    while(!xQueueReceive(serial_rx_queue_3, &msg, portMAX_DELAY));
     43a:	bf00      	nop
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <receive_byte_rtos+0x28>)
     43e:	681b      	ldr	r3, [r3, #0]
     440:	1d39      	adds	r1, r7, #4
     442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     446:	4618      	mov	r0, r3
     448:	f007 f888 	bl	755c <xQueueReceive>
     44c:	4603      	mov	r3, r0
     44e:	2b00      	cmp	r3, #0
     450:	d0f4      	beq.n	43c <receive_byte_rtos+0x8>

    return msg.ch;
     452:	793b      	ldrb	r3, [r7, #4]
}
     454:	4618      	mov	r0, r3
     456:	3708      	adds	r7, #8
     458:	46bd      	mov	sp, r7
     45a:	bd80      	pop	{r7, pc}
     45c:	200048c4 	.word	0x200048c4

00000460 <led_flash_task>:

void led_flash_task( void *pvParameters )
{
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
    while(1) {
        /* Toggle the LED. */
        GPIOC->ODR = GPIOC->ODR ^ 0x00001000;
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <led_flash_task+0x1c>)
     46a:	68db      	ldr	r3, [r3, #12]
     46c:	4a03      	ldr	r2, [pc, #12]	; (47c <led_flash_task+0x1c>)
     46e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     472:	60d3      	str	r3, [r2, #12]

        /* Wait one second. */
        vTaskDelay(100);
     474:	2064      	movs	r0, #100	; 0x64
     476:	f007 fe7d 	bl	8174 <vTaskDelay>
        GPIOC->ODR = GPIOC->ODR ^ 0x00001000;
     47a:	e7f5      	b.n	468 <led_flash_task+0x8>
     47c:	40011000 	.word	0x40011000

00000480 <rs232_xmit_msg_task_1>:
    }
}

void rs232_xmit_msg_task_1(void *pvParameters )
{
     480:	b580      	push	{r7, lr}
     482:	b090      	sub	sp, #64	; 0x40
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue_1, &msg, portMAX_DELAY));
     488:	bf00      	nop
     48a:	4b11      	ldr	r3, [pc, #68]	; (4d0 <rs232_xmit_msg_task_1+0x50>)
     48c:	681b      	ldr	r3, [r3, #0]
     48e:	f107 0108 	add.w	r1, r7, #8
     492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     496:	4618      	mov	r0, r3
     498:	f007 f860 	bl	755c <xQueueReceive>
     49c:	4603      	mov	r3, r0
     49e:	2b00      	cmp	r3, #0
     4a0:	d0f3      	beq.n	48a <rs232_xmit_msg_task_1+0xa>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     4a6:	e00b      	b.n	4c0 <rs232_xmit_msg_task_1+0x40>
            send_byte_rtos(USART1, msg.str[curr_char]);
     4a8:	f107 0208 	add.w	r2, r7, #8
     4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     4ae:	4413      	add	r3, r2
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	4619      	mov	r1, r3
     4b4:	4807      	ldr	r0, [pc, #28]	; (4d4 <rs232_xmit_msg_task_1+0x54>)
     4b6:	f7ff ff75 	bl	3a4 <send_byte_rtos>
            curr_char++;
     4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     4bc:	3301      	adds	r3, #1
     4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     4c0:	f107 0208 	add.w	r2, r7, #8
     4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     4c6:	4413      	add	r3, r2
     4c8:	781b      	ldrb	r3, [r3, #0]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d1ec      	bne.n	4a8 <rs232_xmit_msg_task_1+0x28>
        while(!xQueueReceive(serial_str_queue_1, &msg, portMAX_DELAY));
     4ce:	e7db      	b.n	488 <rs232_xmit_msg_task_1+0x8>
     4d0:	200048a4 	.word	0x200048a4
     4d4:	40013800 	.word	0x40013800

000004d8 <rs232_xmit_msg_task_2>:
        }
    }
}

void rs232_xmit_msg_task_2( void *pvParameters )
{
     4d8:	b580      	push	{r7, lr}
     4da:	b090      	sub	sp, #64	; 0x40
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue_2, &msg, portMAX_DELAY));
     4e0:	bf00      	nop
     4e2:	4b11      	ldr	r3, [pc, #68]	; (528 <rs232_xmit_msg_task_2+0x50>)
     4e4:	681b      	ldr	r3, [r3, #0]
     4e6:	f107 0108 	add.w	r1, r7, #8
     4ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     4ee:	4618      	mov	r0, r3
     4f0:	f007 f834 	bl	755c <xQueueReceive>
     4f4:	4603      	mov	r3, r0
     4f6:	2b00      	cmp	r3, #0
     4f8:	d0f3      	beq.n	4e2 <rs232_xmit_msg_task_2+0xa>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
     4fa:	2300      	movs	r3, #0
     4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     4fe:	e00b      	b.n	518 <rs232_xmit_msg_task_2+0x40>
            send_byte_rtos(USART2,msg.str[curr_char]);
     500:	f107 0208 	add.w	r2, r7, #8
     504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     506:	4413      	add	r3, r2
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	4619      	mov	r1, r3
     50c:	4807      	ldr	r0, [pc, #28]	; (52c <rs232_xmit_msg_task_2+0x54>)
     50e:	f7ff ff49 	bl	3a4 <send_byte_rtos>
            curr_char++;
     512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     514:	3301      	adds	r3, #1
     516:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     518:	f107 0208 	add.w	r2, r7, #8
     51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     51e:	4413      	add	r3, r2
     520:	781b      	ldrb	r3, [r3, #0]
     522:	2b00      	cmp	r3, #0
     524:	d1ec      	bne.n	500 <rs232_xmit_msg_task_2+0x28>
        while(!xQueueReceive(serial_str_queue_2, &msg, portMAX_DELAY));
     526:	e7db      	b.n	4e0 <rs232_xmit_msg_task_2+0x8>
     528:	200048a8 	.word	0x200048a8
     52c:	40004400 	.word	0x40004400

00000530 <rs232_xmit_msg_task_3>:
    }
}


void rs232_xmit_msg_task_3( void *pvParameters )
{
     530:	b580      	push	{r7, lr}
     532:	b090      	sub	sp, #64	; 0x40
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue_3, &msg, portMAX_DELAY));
     538:	bf00      	nop
     53a:	4b11      	ldr	r3, [pc, #68]	; (580 <rs232_xmit_msg_task_3+0x50>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	f107 0108 	add.w	r1, r7, #8
     542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     546:	4618      	mov	r0, r3
     548:	f007 f808 	bl	755c <xQueueReceive>
     54c:	4603      	mov	r3, r0
     54e:	2b00      	cmp	r3, #0
     550:	d0f3      	beq.n	53a <rs232_xmit_msg_task_3+0xa>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
     552:	2300      	movs	r3, #0
     554:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     556:	e00b      	b.n	570 <rs232_xmit_msg_task_3+0x40>
            send_byte_rtos(USART3,msg.str[curr_char]);
     558:	f107 0208 	add.w	r2, r7, #8
     55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     55e:	4413      	add	r3, r2
     560:	781b      	ldrb	r3, [r3, #0]
     562:	4619      	mov	r1, r3
     564:	4807      	ldr	r0, [pc, #28]	; (584 <rs232_xmit_msg_task_3+0x54>)
     566:	f7ff ff1d 	bl	3a4 <send_byte_rtos>
            curr_char++;
     56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     56c:	3301      	adds	r3, #1
     56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        while(msg.str[curr_char] != '\0') {
     570:	f107 0208 	add.w	r2, r7, #8
     574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     576:	4413      	add	r3, r2
     578:	781b      	ldrb	r3, [r3, #0]
     57a:	2b00      	cmp	r3, #0
     57c:	d1ec      	bne.n	558 <rs232_xmit_msg_task_3+0x28>
        while(!xQueueReceive(serial_str_queue_3, &msg, portMAX_DELAY));
     57e:	e7db      	b.n	538 <rs232_xmit_msg_task_3+0x8>
     580:	200048ac 	.word	0x200048ac
     584:	40004800 	.word	0x40004800

00000588 <queue_str_to_send>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_to_send(USART_TypeDef* USARTx,const char *str, int delay)
{
     588:	b580      	push	{r7, lr}
     58a:	b092      	sub	sp, #72	; 0x48
     58c:	af00      	add	r7, sp, #0
     58e:	60f8      	str	r0, [r7, #12]
     590:	60b9      	str	r1, [r7, #8]
     592:	607a      	str	r2, [r7, #4]
    serial_str_msg msg;
    volatile xQueueHandle l_serial_str_queue = NULL;
     594:	2300      	movs	r3, #0
     596:	613b      	str	r3, [r7, #16]

    if (USARTx == USART1) {
     598:	68fb      	ldr	r3, [r7, #12]
     59a:	4a19      	ldr	r2, [pc, #100]	; (600 <queue_str_to_send+0x78>)
     59c:	4293      	cmp	r3, r2
     59e:	d103      	bne.n	5a8 <queue_str_to_send+0x20>
	l_serial_str_queue = serial_str_queue_1;
     5a0:	4b18      	ldr	r3, [pc, #96]	; (604 <queue_str_to_send+0x7c>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	613b      	str	r3, [r7, #16]
     5a6:	e010      	b.n	5ca <queue_str_to_send+0x42>
    }
    else if (USARTx == USART2) {
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	4a17      	ldr	r2, [pc, #92]	; (608 <queue_str_to_send+0x80>)
     5ac:	4293      	cmp	r3, r2
     5ae:	d103      	bne.n	5b8 <queue_str_to_send+0x30>
	l_serial_str_queue = serial_str_queue_2;
     5b0:	4b16      	ldr	r3, [pc, #88]	; (60c <queue_str_to_send+0x84>)
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	613b      	str	r3, [r7, #16]
     5b6:	e008      	b.n	5ca <queue_str_to_send+0x42>
    }
    else if (USARTx == USART3) {
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	4a15      	ldr	r2, [pc, #84]	; (610 <queue_str_to_send+0x88>)
     5bc:	4293      	cmp	r3, r2
     5be:	d103      	bne.n	5c8 <queue_str_to_send+0x40>
	l_serial_str_queue = serial_str_queue_3;
     5c0:	4b14      	ldr	r3, [pc, #80]	; (614 <queue_str_to_send+0x8c>)
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	613b      	str	r3, [r7, #16]
     5c6:	e000      	b.n	5ca <queue_str_to_send+0x42>
    }
    else {
       while (1);   
     5c8:	e7fe      	b.n	5c8 <queue_str_to_send+0x40>
    }

    /* Prepare the message to be queued. */
    strcpy(msg.str, str);
     5ca:	f107 0314 	add.w	r3, r7, #20
     5ce:	68b9      	ldr	r1, [r7, #8]
     5d0:	4618      	mov	r0, r3
     5d2:	f009 fed5 	bl	a380 <strcpy>
 
   // while(0) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(l_serial_str_queue, &msg, portMAX_DELAY));
     5d6:	bf00      	nop
     5d8:	6938      	ldr	r0, [r7, #16]
     5da:	f107 0114 	add.w	r1, r7, #20
     5de:	2300      	movs	r3, #0
     5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     5e4:	f006 fe63 	bl	72ae <xQueueGenericSend>
     5e8:	4603      	mov	r3, r0
     5ea:	2b00      	cmp	r3, #0
     5ec:	d0f4      	beq.n	5d8 <queue_str_to_send+0x50>

        /* Wait. */
        vTaskDelay(delay);
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	4618      	mov	r0, r3
     5f2:	f007 fdbf 	bl	8174 <vTaskDelay>
  //  }
}
     5f6:	bf00      	nop
     5f8:	3748      	adds	r7, #72	; 0x48
     5fa:	46bd      	mov	sp, r7
     5fc:	bd80      	pop	{r7, pc}
     5fe:	bf00      	nop
     600:	40013800 	.word	0x40013800
     604:	200048a4 	.word	0x200048a4
     608:	40004400 	.word	0x40004400
     60c:	200048a8 	.word	0x200048a8
     610:	40004800 	.word	0x40004800
     614:	200048ac 	.word	0x200048ac

00000618 <queue_str_task1>:

void queue_str_task1( void *pvParameters )
{
     618:	b580      	push	{r7, lr}
     61a:	b086      	sub	sp, #24
     61c:	af00      	add	r7, sp, #0
     61e:	6078      	str	r0, [r7, #4]
    unsigned char l_way = H_EAU_UP;
     620:	2300      	movs	r3, #0
     622:	75fb      	strb	r3, [r7, #23]
    char str[10];
    while (1) {
	if (g_e_State_System == E_STATE_ON) {
     624:	4b2e      	ldr	r3, [pc, #184]	; (6e0 <queue_str_task1+0xc8>)
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b01      	cmp	r3, #1
     62a:	d1fb      	bne.n	624 <queue_str_task1+0xc>
		/* Step 1 : Identify if the way should change */
		if (l_way == H_EAU_UP) {
     62c:	7dfb      	ldrb	r3, [r7, #23]
     62e:	2b00      	cmp	r3, #0
     630:	d10e      	bne.n	650 <queue_str_task1+0x38>
		    if ((g_H_EAU + H_EAU_STEP) > g_H_EAU_MAX) {
     632:	4b2c      	ldr	r3, [pc, #176]	; (6e4 <queue_str_task1+0xcc>)
     634:	781b      	ldrb	r3, [r3, #0]
     636:	330a      	adds	r3, #10
     638:	4a2b      	ldr	r2, [pc, #172]	; (6e8 <queue_str_task1+0xd0>)
     63a:	7812      	ldrb	r2, [r2, #0]
     63c:	4293      	cmp	r3, r2
     63e:	dd16      	ble.n	66e <queue_str_task1+0x56>
			l_way = H_EAU_DOWN;
     640:	2301      	movs	r3, #1
     642:	75fb      	strb	r3, [r7, #23]
			queue_str_to_send(USART1, "Down\r\n", 10);
     644:	220a      	movs	r2, #10
     646:	4929      	ldr	r1, [pc, #164]	; (6ec <queue_str_task1+0xd4>)
     648:	4829      	ldr	r0, [pc, #164]	; (6f0 <queue_str_task1+0xd8>)
     64a:	f7ff ff9d 	bl	588 <queue_str_to_send>
     64e:	e00e      	b.n	66e <queue_str_task1+0x56>
		    }
		    else {
			/* Si le niveau d'eau ne depasse pas le max, le sens ne change pas*/
		    }
		}
		else if (l_way == H_EAU_DOWN) {
     650:	7dfb      	ldrb	r3, [r7, #23]
     652:	2b01      	cmp	r3, #1
     654:	d10b      	bne.n	66e <queue_str_task1+0x56>
		    if ((g_H_EAU - H_EAU_STEP) < H_EAU_MIN) {
     656:	4b23      	ldr	r3, [pc, #140]	; (6e4 <queue_str_task1+0xcc>)
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	3b0a      	subs	r3, #10
     65c:	2b00      	cmp	r3, #0
     65e:	da06      	bge.n	66e <queue_str_task1+0x56>
			l_way = H_EAU_UP;
     660:	2300      	movs	r3, #0
     662:	75fb      	strb	r3, [r7, #23]
			queue_str_to_send(USART1, "Up\r\n", 10);
     664:	220a      	movs	r2, #10
     666:	4923      	ldr	r1, [pc, #140]	; (6f4 <queue_str_task1+0xdc>)
     668:	4821      	ldr	r0, [pc, #132]	; (6f0 <queue_str_task1+0xd8>)
     66a:	f7ff ff8d 	bl	588 <queue_str_to_send>
		    /* Erreur */
		    //while (1);
		}

		/* Step 2 : Update de value of the height pf the water */
		if (l_way == H_EAU_UP) {
     66e:	7dfb      	ldrb	r3, [r7, #23]
     670:	2b00      	cmp	r3, #0
     672:	d10b      	bne.n	68c <queue_str_task1+0x74>
		    g_H_EAU += H_EAU_STEP;
     674:	4b1b      	ldr	r3, [pc, #108]	; (6e4 <queue_str_task1+0xcc>)
     676:	781b      	ldrb	r3, [r3, #0]
     678:	330a      	adds	r3, #10
     67a:	b2da      	uxtb	r2, r3
     67c:	4b19      	ldr	r3, [pc, #100]	; (6e4 <queue_str_task1+0xcc>)
     67e:	701a      	strb	r2, [r3, #0]
	    	    queue_str_to_send(USART1, "CMD_H_EAU_++\r\n", 200);
     680:	22c8      	movs	r2, #200	; 0xc8
     682:	491d      	ldr	r1, [pc, #116]	; (6f8 <queue_str_task1+0xe0>)
     684:	481a      	ldr	r0, [pc, #104]	; (6f0 <queue_str_task1+0xd8>)
     686:	f7ff ff7f 	bl	588 <queue_str_to_send>
     68a:	e00d      	b.n	6a8 <queue_str_task1+0x90>
		}
		else if (l_way == H_EAU_DOWN) {
     68c:	7dfb      	ldrb	r3, [r7, #23]
     68e:	2b01      	cmp	r3, #1
     690:	d10a      	bne.n	6a8 <queue_str_task1+0x90>
		    g_H_EAU -= H_EAU_STEP;
     692:	4b14      	ldr	r3, [pc, #80]	; (6e4 <queue_str_task1+0xcc>)
     694:	781b      	ldrb	r3, [r3, #0]
     696:	3b0a      	subs	r3, #10
     698:	b2da      	uxtb	r2, r3
     69a:	4b12      	ldr	r3, [pc, #72]	; (6e4 <queue_str_task1+0xcc>)
     69c:	701a      	strb	r2, [r3, #0]
	    	    queue_str_to_send(USART1, "CMD_H_EAU_--\r\n", 200);
     69e:	22c8      	movs	r2, #200	; 0xc8
     6a0:	4916      	ldr	r1, [pc, #88]	; (6fc <queue_str_task1+0xe4>)
     6a2:	4813      	ldr	r0, [pc, #76]	; (6f0 <queue_str_task1+0xd8>)
     6a4:	f7ff ff70 	bl	588 <queue_str_to_send>
		   /*Erreur*/
		   //while (1);
		}

		/* Step 3 : Display value of g_H_EAU*/
		str[0] = hex_to_char(g_H_EAU/10);
     6a8:	4b0e      	ldr	r3, [pc, #56]	; (6e4 <queue_str_task1+0xcc>)
     6aa:	781b      	ldrb	r3, [r3, #0]
     6ac:	4a14      	ldr	r2, [pc, #80]	; (700 <queue_str_task1+0xe8>)
     6ae:	fba2 2303 	umull	r2, r3, r2, r3
     6b2:	08db      	lsrs	r3, r3, #3
     6b4:	b2db      	uxtb	r3, r3
     6b6:	4618      	mov	r0, r3
     6b8:	f001 fbd8 	bl	1e6c <hex_to_char>
     6bc:	4603      	mov	r3, r0
     6be:	b2db      	uxtb	r3, r3
     6c0:	733b      	strb	r3, [r7, #12]
		str[1] = '\n';
     6c2:	230a      	movs	r3, #10
     6c4:	737b      	strb	r3, [r7, #13]
		str[2] = '\r';
     6c6:	230d      	movs	r3, #13
     6c8:	73bb      	strb	r3, [r7, #14]
		str[3] = '\0';
     6ca:	2300      	movs	r3, #0
     6cc:	73fb      	strb	r3, [r7, #15]
		queue_str_to_send(USART1, str, 10);
     6ce:	f107 030c 	add.w	r3, r7, #12
     6d2:	220a      	movs	r2, #10
     6d4:	4619      	mov	r1, r3
     6d6:	4806      	ldr	r0, [pc, #24]	; (6f0 <queue_str_task1+0xd8>)
     6d8:	f7ff ff56 	bl	588 <queue_str_to_send>
	if (g_e_State_System == E_STATE_ON) {
     6dc:	e7a2      	b.n	624 <queue_str_task1+0xc>
     6de:	bf00      	nop
     6e0:	200048cc 	.word	0x200048cc
     6e4:	2000046b 	.word	0x2000046b
     6e8:	2000046c 	.word	0x2000046c
     6ec:	0000a574 	.word	0x0000a574
     6f0:	40013800 	.word	0x40013800
     6f4:	0000a57c 	.word	0x0000a57c
     6f8:	0000a584 	.word	0x0000a584
     6fc:	0000a594 	.word	0x0000a594
     700:	cccccccd 	.word	0xcccccccd

00000704 <queue_str_task2>:
	}
    }
}

void queue_str_task2( void *pvParameters )
{
     704:	b580      	push	{r7, lr}
     706:	b082      	sub	sp, #8
     708:	af00      	add	r7, sp, #0
     70a:	6078      	str	r0, [r7, #4]
   while (1) { 
      // queue_str_to_send(USART2,"\033[2J", 10);
      // queue_str_to_send(USART2,"\033[H", 10);
       queue_str_to_send(USART2,"USART2\r\n", 400);
     70c:	f44f 72c8 	mov.w	r2, #400	; 0x190
     710:	4902      	ldr	r1, [pc, #8]	; (71c <queue_str_task2+0x18>)
     712:	4803      	ldr	r0, [pc, #12]	; (720 <queue_str_task2+0x1c>)
     714:	f7ff ff38 	bl	588 <queue_str_to_send>
     718:	e7f8      	b.n	70c <queue_str_task2+0x8>
     71a:	bf00      	nop
     71c:	0000a5a4 	.word	0x0000a5a4
     720:	40004400 	.word	0x40004400

00000724 <strtouc>:
    }
}

unsigned char strtouc(char * str) {
     724:	b580      	push	{r7, lr}
     726:	b084      	sub	sp, #16
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
	unsigned char l_ucVar = 0;
     72c:	2300      	movs	r3, #0
     72e:	73fb      	strb	r3, [r7, #15]
	char l_char[4];
	l_char[0]= strlen(str) + '0'-3;
     730:	6878      	ldr	r0, [r7, #4]
     732:	f009 fe83 	bl	a43c <strlen>
     736:	4603      	mov	r3, r0
     738:	b2db      	uxtb	r3, r3
     73a:	332d      	adds	r3, #45	; 0x2d
     73c:	b2db      	uxtb	r3, r3
     73e:	723b      	strb	r3, [r7, #8]
	l_char[1]='\r';
     740:	230d      	movs	r3, #13
     742:	727b      	strb	r3, [r7, #9]
	l_char[2]='\n';
     744:	230a      	movs	r3, #10
     746:	72bb      	strb	r3, [r7, #10]
	l_char[3]='\0';
     748:	2300      	movs	r3, #0
     74a:	72fb      	strb	r3, [r7, #11]
	while(!xQueueSendToBack(serial_str_queue_3, l_char, portMAX_DELAY));
     74c:	bf00      	nop
     74e:	4b2e      	ldr	r3, [pc, #184]	; (808 <strtouc+0xe4>)
     750:	6818      	ldr	r0, [r3, #0]
     752:	f107 0108 	add.w	r1, r7, #8
     756:	2300      	movs	r3, #0
     758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     75c:	f006 fda7 	bl	72ae <xQueueGenericSend>
     760:	4603      	mov	r3, r0
     762:	2b00      	cmp	r3, #0
     764:	d0f3      	beq.n	74e <strtouc+0x2a>
	/* Wait. */
        vTaskDelay(100);
     766:	2064      	movs	r0, #100	; 0x64
     768:	f007 fd04 	bl	8174 <vTaskDelay>

	if (strlen(str) == 4) {
     76c:	6878      	ldr	r0, [r7, #4]
     76e:	f009 fe65 	bl	a43c <strlen>
     772:	4603      	mov	r3, r0
     774:	2b04      	cmp	r3, #4
     776:	d104      	bne.n	782 <strtouc+0x5e>
		l_ucVar = str[0]-'0';
     778:	687b      	ldr	r3, [r7, #4]
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	3b30      	subs	r3, #48	; 0x30
     77e:	73fb      	strb	r3, [r7, #15]
     780:	e03d      	b.n	7fe <strtouc+0xda>
	}
	else if (strlen(str) == 5) {
     782:	6878      	ldr	r0, [r7, #4]
     784:	f009 fe5a 	bl	a43c <strlen>
     788:	4603      	mov	r3, r0
     78a:	2b05      	cmp	r3, #5
     78c:	d110      	bne.n	7b0 <strtouc+0x8c>
		l_ucVar = (str[0]-'0')*10 +str[1]-'0';
     78e:	687b      	ldr	r3, [r7, #4]
     790:	781b      	ldrb	r3, [r3, #0]
     792:	3b30      	subs	r3, #48	; 0x30
     794:	b2db      	uxtb	r3, r3
     796:	461a      	mov	r2, r3
     798:	0092      	lsls	r2, r2, #2
     79a:	4413      	add	r3, r2
     79c:	005b      	lsls	r3, r3, #1
     79e:	b2da      	uxtb	r2, r3
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	3301      	adds	r3, #1
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	4413      	add	r3, r2
     7a8:	b2db      	uxtb	r3, r3
     7aa:	3b30      	subs	r3, #48	; 0x30
     7ac:	73fb      	strb	r3, [r7, #15]
     7ae:	e026      	b.n	7fe <strtouc+0xda>
	}
	else if (strlen(str) == 6) {
     7b0:	6878      	ldr	r0, [r7, #4]
     7b2:	f009 fe43 	bl	a43c <strlen>
     7b6:	4603      	mov	r3, r0
     7b8:	2b06      	cmp	r3, #6
     7ba:	d120      	bne.n	7fe <strtouc+0xda>
		l_ucVar = (str[0]-'0')*100 +(str[1]-'0')*10 +str[2]-'0';
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	781b      	ldrb	r3, [r3, #0]
     7c0:	3b30      	subs	r3, #48	; 0x30
     7c2:	b2db      	uxtb	r3, r3
     7c4:	461a      	mov	r2, r3
     7c6:	0092      	lsls	r2, r2, #2
     7c8:	4413      	add	r3, r2
     7ca:	461a      	mov	r2, r3
     7cc:	0091      	lsls	r1, r2, #2
     7ce:	461a      	mov	r2, r3
     7d0:	460b      	mov	r3, r1
     7d2:	4413      	add	r3, r2
     7d4:	009b      	lsls	r3, r3, #2
     7d6:	b2da      	uxtb	r2, r3
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	3301      	adds	r3, #1
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	3b30      	subs	r3, #48	; 0x30
     7e0:	b2db      	uxtb	r3, r3
     7e2:	4619      	mov	r1, r3
     7e4:	0089      	lsls	r1, r1, #2
     7e6:	440b      	add	r3, r1
     7e8:	005b      	lsls	r3, r3, #1
     7ea:	b2db      	uxtb	r3, r3
     7ec:	4413      	add	r3, r2
     7ee:	b2da      	uxtb	r2, r3
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	3302      	adds	r3, #2
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	4413      	add	r3, r2
     7f8:	b2db      	uxtb	r3, r3
     7fa:	3b30      	subs	r3, #48	; 0x30
     7fc:	73fb      	strb	r3, [r7, #15]
	}	
	return l_ucVar;
     7fe:	7bfb      	ldrb	r3, [r7, #15]
}
     800:	4618      	mov	r0, r3
     802:	3710      	adds	r7, #16
     804:	46bd      	mov	sp, r7
     806:	bd80      	pop	{r7, pc}
     808:	200048ac 	.word	0x200048ac

0000080c <uctostr>:


void uctostr(unsigned char data, char str[]) {
     80c:	b480      	push	{r7}
     80e:	b083      	sub	sp, #12
     810:	af00      	add	r7, sp, #0
     812:	4603      	mov	r3, r0
     814:	6039      	str	r1, [r7, #0]
     816:	71fb      	strb	r3, [r7, #7]
	str[0] = data/100 +'0'; 
     818:	79fb      	ldrb	r3, [r7, #7]
     81a:	4a1f      	ldr	r2, [pc, #124]	; (898 <uctostr+0x8c>)
     81c:	fba2 2303 	umull	r2, r3, r2, r3
     820:	095b      	lsrs	r3, r3, #5
     822:	b2db      	uxtb	r3, r3
     824:	3330      	adds	r3, #48	; 0x30
     826:	b2da      	uxtb	r2, r3
     828:	683b      	ldr	r3, [r7, #0]
     82a:	701a      	strb	r2, [r3, #0]
	str[1] = (data%100)/10 +'0'; 
     82c:	79fb      	ldrb	r3, [r7, #7]
     82e:	4a1a      	ldr	r2, [pc, #104]	; (898 <uctostr+0x8c>)
     830:	fba2 1203 	umull	r1, r2, r2, r3
     834:	0952      	lsrs	r2, r2, #5
     836:	2164      	movs	r1, #100	; 0x64
     838:	fb01 f202 	mul.w	r2, r1, r2
     83c:	1a9b      	subs	r3, r3, r2
     83e:	b2db      	uxtb	r3, r3
     840:	4a16      	ldr	r2, [pc, #88]	; (89c <uctostr+0x90>)
     842:	fba2 2303 	umull	r2, r3, r2, r3
     846:	08db      	lsrs	r3, r3, #3
     848:	b2da      	uxtb	r2, r3
     84a:	683b      	ldr	r3, [r7, #0]
     84c:	3301      	adds	r3, #1
     84e:	3230      	adds	r2, #48	; 0x30
     850:	b2d2      	uxtb	r2, r2
     852:	701a      	strb	r2, [r3, #0]
	str[2] = (data%10) +'0'; 
     854:	79fa      	ldrb	r2, [r7, #7]
     856:	4b11      	ldr	r3, [pc, #68]	; (89c <uctostr+0x90>)
     858:	fba3 1302 	umull	r1, r3, r3, r2
     85c:	08d9      	lsrs	r1, r3, #3
     85e:	460b      	mov	r3, r1
     860:	009b      	lsls	r3, r3, #2
     862:	440b      	add	r3, r1
     864:	005b      	lsls	r3, r3, #1
     866:	1ad3      	subs	r3, r2, r3
     868:	b2da      	uxtb	r2, r3
     86a:	683b      	ldr	r3, [r7, #0]
     86c:	3302      	adds	r3, #2
     86e:	3230      	adds	r2, #48	; 0x30
     870:	b2d2      	uxtb	r2, r2
     872:	701a      	strb	r2, [r3, #0]
	str[3] = '\r'; 
     874:	683b      	ldr	r3, [r7, #0]
     876:	3303      	adds	r3, #3
     878:	220d      	movs	r2, #13
     87a:	701a      	strb	r2, [r3, #0]
	str[4] = '\n'; 
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	3304      	adds	r3, #4
     880:	220a      	movs	r2, #10
     882:	701a      	strb	r2, [r3, #0]
	str[5] = '\0'; 
     884:	683b      	ldr	r3, [r7, #0]
     886:	3305      	adds	r3, #5
     888:	2200      	movs	r2, #0
     88a:	701a      	strb	r2, [r3, #0]
}
     88c:	bf00      	nop
     88e:	370c      	adds	r7, #12
     890:	46bd      	mov	sp, r7
     892:	bc80      	pop	{r7}
     894:	4770      	bx	lr
     896:	bf00      	nop
     898:	51eb851f 	.word	0x51eb851f
     89c:	cccccccd 	.word	0xcccccccd

000008a0 <Handle_Cmd>:


void Handle_Cmd(serial_str_msg * msg) {
     8a0:	b580      	push	{r7, lr}
     8a2:	b086      	sub	sp, #24
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
         * be sent to the RS232 port.
         */
	t_s_cmd ls_cmd;
	char l_tcParam[6];
	
        while(!xQueueSendToBack(serial_str_queue_3, msg, portMAX_DELAY));
     8a8:	bf00      	nop
     8aa:	4bb8      	ldr	r3, [pc, #736]	; (b8c <Handle_Cmd+0x2ec>)
     8ac:	6818      	ldr	r0, [r3, #0]
     8ae:	2300      	movs	r3, #0
     8b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     8b4:	6879      	ldr	r1, [r7, #4]
     8b6:	f006 fcfa 	bl	72ae <xQueueGenericSend>
     8ba:	4603      	mov	r3, r0
     8bc:	2b00      	cmp	r3, #0
     8be:	d0f4      	beq.n	8aa <Handle_Cmd+0xa>
	if (g_e_Menu_Current == E_MENU_PRINCIPAL) {
     8c0:	4bb3      	ldr	r3, [pc, #716]	; (b90 <Handle_Cmd+0x2f0>)
     8c2:	781b      	ldrb	r3, [r3, #0]
     8c4:	2b00      	cmp	r3, #0
     8c6:	f040 8150 	bne.w	b6a <Handle_Cmd+0x2ca>
		if (strncmp(msg->str,"10",2) == 0) {
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2202      	movs	r2, #2
     8ce:	49b1      	ldr	r1, [pc, #708]	; (b94 <Handle_Cmd+0x2f4>)
     8d0:	4618      	mov	r0, r3
     8d2:	f009 fde1 	bl	a498 <strncmp>
     8d6:	4603      	mov	r3, r0
     8d8:	2b00      	cmp	r3, #0
     8da:	d10f      	bne.n	8fc <Handle_Cmd+0x5c>
			while(!xQueueSendToBack(serial_str_queue_3, "Command System ON received", portMAX_DELAY));	
     8dc:	bf00      	nop
     8de:	4bab      	ldr	r3, [pc, #684]	; (b8c <Handle_Cmd+0x2ec>)
     8e0:	6818      	ldr	r0, [r3, #0]
     8e2:	2300      	movs	r3, #0
     8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     8e8:	49ab      	ldr	r1, [pc, #684]	; (b98 <Handle_Cmd+0x2f8>)
     8ea:	f006 fce0 	bl	72ae <xQueueGenericSend>
     8ee:	4603      	mov	r3, r0
     8f0:	2b00      	cmp	r3, #0
     8f2:	d0f4      	beq.n	8de <Handle_Cmd+0x3e>
			g_e_State_System = E_STATE_ON;
     8f4:	4ba9      	ldr	r3, [pc, #676]	; (b9c <Handle_Cmd+0x2fc>)
     8f6:	2201      	movs	r2, #1
     8f8:	701a      	strb	r2, [r3, #0]
		g_e_Menu_Current = E_MENU_PRINCIPAL;
	}
	else {
		g_e_Menu_Current = E_MENU_PRINCIPAL;
	}
}
     8fa:	e1e8      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"11",2) == 0) {
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2202      	movs	r2, #2
     900:	49a7      	ldr	r1, [pc, #668]	; (ba0 <Handle_Cmd+0x300>)
     902:	4618      	mov	r0, r3
     904:	f009 fdc8 	bl	a498 <strncmp>
     908:	4603      	mov	r3, r0
     90a:	2b00      	cmp	r3, #0
     90c:	d10f      	bne.n	92e <Handle_Cmd+0x8e>
			while(!xQueueSendToBack(serial_str_queue_3, "Command System OFF received", portMAX_DELAY));
     90e:	bf00      	nop
     910:	4b9e      	ldr	r3, [pc, #632]	; (b8c <Handle_Cmd+0x2ec>)
     912:	6818      	ldr	r0, [r3, #0]
     914:	2300      	movs	r3, #0
     916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     91a:	49a2      	ldr	r1, [pc, #648]	; (ba4 <Handle_Cmd+0x304>)
     91c:	f006 fcc7 	bl	72ae <xQueueGenericSend>
     920:	4603      	mov	r3, r0
     922:	2b00      	cmp	r3, #0
     924:	d0f4      	beq.n	910 <Handle_Cmd+0x70>
			g_e_State_System = E_STATE_OFF;	
     926:	4b9d      	ldr	r3, [pc, #628]	; (b9c <Handle_Cmd+0x2fc>)
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
}
     92c:	e1cf      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"20",2) == 0) {
     92e:	687b      	ldr	r3, [r7, #4]
     930:	2202      	movs	r2, #2
     932:	499d      	ldr	r1, [pc, #628]	; (ba8 <Handle_Cmd+0x308>)
     934:	4618      	mov	r0, r3
     936:	f009 fdaf 	bl	a498 <strncmp>
     93a:	4603      	mov	r3, r0
     93c:	2b00      	cmp	r3, #0
     93e:	d10f      	bne.n	960 <Handle_Cmd+0xc0>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Change Height max received", portMAX_DELAY));
     940:	bf00      	nop
     942:	4b92      	ldr	r3, [pc, #584]	; (b8c <Handle_Cmd+0x2ec>)
     944:	6818      	ldr	r0, [r3, #0]
     946:	2300      	movs	r3, #0
     948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     94c:	4997      	ldr	r1, [pc, #604]	; (bac <Handle_Cmd+0x30c>)
     94e:	f006 fcae 	bl	72ae <xQueueGenericSend>
     952:	4603      	mov	r3, r0
     954:	2b00      	cmp	r3, #0
     956:	d0f4      	beq.n	942 <Handle_Cmd+0xa2>
		    	g_e_Menu_Current = E_MENU_CHANGE_H_EAU_MAX; 
     958:	4b8d      	ldr	r3, [pc, #564]	; (b90 <Handle_Cmd+0x2f0>)
     95a:	2214      	movs	r2, #20
     95c:	701a      	strb	r2, [r3, #0]
}
     95e:	e1b6      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"21",2) == 0) {
     960:	687b      	ldr	r3, [r7, #4]
     962:	2202      	movs	r2, #2
     964:	4992      	ldr	r1, [pc, #584]	; (bb0 <Handle_Cmd+0x310>)
     966:	4618      	mov	r0, r3
     968:	f009 fd96 	bl	a498 <strncmp>
     96c:	4603      	mov	r3, r0
     96e:	2b00      	cmp	r3, #0
     970:	d10f      	bne.n	992 <Handle_Cmd+0xf2>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Change Temperature max received", portMAX_DELAY));	
     972:	bf00      	nop
     974:	4b85      	ldr	r3, [pc, #532]	; (b8c <Handle_Cmd+0x2ec>)
     976:	6818      	ldr	r0, [r3, #0]
     978:	2300      	movs	r3, #0
     97a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     97e:	498d      	ldr	r1, [pc, #564]	; (bb4 <Handle_Cmd+0x314>)
     980:	f006 fc95 	bl	72ae <xQueueGenericSend>
     984:	4603      	mov	r3, r0
     986:	2b00      	cmp	r3, #0
     988:	d0f4      	beq.n	974 <Handle_Cmd+0xd4>
			g_e_Menu_Current = E_MENU_CHANGE_T_EAU_MAX; 
     98a:	4b81      	ldr	r3, [pc, #516]	; (b90 <Handle_Cmd+0x2f0>)
     98c:	2215      	movs	r2, #21
     98e:	701a      	strb	r2, [r3, #0]
}
     990:	e19d      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"22",2) == 0) {
     992:	687b      	ldr	r3, [r7, #4]
     994:	2202      	movs	r2, #2
     996:	4988      	ldr	r1, [pc, #544]	; (bb8 <Handle_Cmd+0x318>)
     998:	4618      	mov	r0, r3
     99a:	f009 fd7d 	bl	a498 <strncmp>
     99e:	4603      	mov	r3, r0
     9a0:	2b00      	cmp	r3, #0
     9a2:	d10f      	bne.n	9c4 <Handle_Cmd+0x124>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Change Speed max received", portMAX_DELAY));	
     9a4:	bf00      	nop
     9a6:	4b79      	ldr	r3, [pc, #484]	; (b8c <Handle_Cmd+0x2ec>)
     9a8:	6818      	ldr	r0, [r3, #0]
     9aa:	2300      	movs	r3, #0
     9ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9b0:	4982      	ldr	r1, [pc, #520]	; (bbc <Handle_Cmd+0x31c>)
     9b2:	f006 fc7c 	bl	72ae <xQueueGenericSend>
     9b6:	4603      	mov	r3, r0
     9b8:	2b00      	cmp	r3, #0
     9ba:	d0f4      	beq.n	9a6 <Handle_Cmd+0x106>
			g_e_Menu_Current = E_MENU_CHANGE_V_VENT_MAX;
     9bc:	4b74      	ldr	r3, [pc, #464]	; (b90 <Handle_Cmd+0x2f0>)
     9be:	2216      	movs	r2, #22
     9c0:	701a      	strb	r2, [r3, #0]
}
     9c2:	e184      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"30",2) == 0) {
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2202      	movs	r2, #2
     9c8:	497d      	ldr	r1, [pc, #500]	; (bc0 <Handle_Cmd+0x320>)
     9ca:	4618      	mov	r0, r3
     9cc:	f009 fd64 	bl	a498 <strncmp>
     9d0:	4603      	mov	r3, r0
     9d2:	2b00      	cmp	r3, #0
     9d4:	d10f      	bne.n	9f6 <Handle_Cmd+0x156>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Change Temperature received", portMAX_DELAY));
     9d6:	bf00      	nop
     9d8:	4b6c      	ldr	r3, [pc, #432]	; (b8c <Handle_Cmd+0x2ec>)
     9da:	6818      	ldr	r0, [r3, #0]
     9dc:	2300      	movs	r3, #0
     9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9e2:	4978      	ldr	r1, [pc, #480]	; (bc4 <Handle_Cmd+0x324>)
     9e4:	f006 fc63 	bl	72ae <xQueueGenericSend>
     9e8:	4603      	mov	r3, r0
     9ea:	2b00      	cmp	r3, #0
     9ec:	d0f4      	beq.n	9d8 <Handle_Cmd+0x138>
			g_e_Menu_Current = E_MENU_CHANGE_T_EAU; 
     9ee:	4b68      	ldr	r3, [pc, #416]	; (b90 <Handle_Cmd+0x2f0>)
     9f0:	221e      	movs	r2, #30
     9f2:	701a      	strb	r2, [r3, #0]
}
     9f4:	e16b      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"31",2) == 0) {
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	2202      	movs	r2, #2
     9fa:	4973      	ldr	r1, [pc, #460]	; (bc8 <Handle_Cmd+0x328>)
     9fc:	4618      	mov	r0, r3
     9fe:	f009 fd4b 	bl	a498 <strncmp>
     a02:	4603      	mov	r3, r0
     a04:	2b00      	cmp	r3, #0
     a06:	d10f      	bne.n	a28 <Handle_Cmd+0x188>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Change Speed received", portMAX_DELAY));
     a08:	bf00      	nop
     a0a:	4b60      	ldr	r3, [pc, #384]	; (b8c <Handle_Cmd+0x2ec>)
     a0c:	6818      	ldr	r0, [r3, #0]
     a0e:	2300      	movs	r3, #0
     a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a14:	496d      	ldr	r1, [pc, #436]	; (bcc <Handle_Cmd+0x32c>)
     a16:	f006 fc4a 	bl	72ae <xQueueGenericSend>
     a1a:	4603      	mov	r3, r0
     a1c:	2b00      	cmp	r3, #0
     a1e:	d0f4      	beq.n	a0a <Handle_Cmd+0x16a>
			g_e_Menu_Current = E_MENU_CHANGE_V_VENT;		
     a20:	4b5b      	ldr	r3, [pc, #364]	; (b90 <Handle_Cmd+0x2f0>)
     a22:	221f      	movs	r2, #31
     a24:	701a      	strb	r2, [r3, #0]
}
     a26:	e152      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"40",2) == 0) {
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	2202      	movs	r2, #2
     a2c:	4968      	ldr	r1, [pc, #416]	; (bd0 <Handle_Cmd+0x330>)
     a2e:	4618      	mov	r0, r3
     a30:	f009 fd32 	bl	a498 <strncmp>
     a34:	4603      	mov	r3, r0
     a36:	2b00      	cmp	r3, #0
     a38:	d10f      	bne.n	a5a <Handle_Cmd+0x1ba>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Light ON received", portMAX_DELAY));
     a3a:	bf00      	nop
     a3c:	4b53      	ldr	r3, [pc, #332]	; (b8c <Handle_Cmd+0x2ec>)
     a3e:	6818      	ldr	r0, [r3, #0]
     a40:	2300      	movs	r3, #0
     a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a46:	4963      	ldr	r1, [pc, #396]	; (bd4 <Handle_Cmd+0x334>)
     a48:	f006 fc31 	bl	72ae <xQueueGenericSend>
     a4c:	4603      	mov	r3, r0
     a4e:	2b00      	cmp	r3, #0
     a50:	d0f4      	beq.n	a3c <Handle_Cmd+0x19c>
			g_e_State_Light = E_STATE_ON;		
     a52:	4b61      	ldr	r3, [pc, #388]	; (bd8 <Handle_Cmd+0x338>)
     a54:	2201      	movs	r2, #1
     a56:	701a      	strb	r2, [r3, #0]
}
     a58:	e139      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"41",2) == 0) {
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	2202      	movs	r2, #2
     a5e:	495f      	ldr	r1, [pc, #380]	; (bdc <Handle_Cmd+0x33c>)
     a60:	4618      	mov	r0, r3
     a62:	f009 fd19 	bl	a498 <strncmp>
     a66:	4603      	mov	r3, r0
     a68:	2b00      	cmp	r3, #0
     a6a:	d10f      	bne.n	a8c <Handle_Cmd+0x1ec>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Light OFF received", portMAX_DELAY));
     a6c:	bf00      	nop
     a6e:	4b47      	ldr	r3, [pc, #284]	; (b8c <Handle_Cmd+0x2ec>)
     a70:	6818      	ldr	r0, [r3, #0]
     a72:	2300      	movs	r3, #0
     a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a78:	4959      	ldr	r1, [pc, #356]	; (be0 <Handle_Cmd+0x340>)
     a7a:	f006 fc18 	bl	72ae <xQueueGenericSend>
     a7e:	4603      	mov	r3, r0
     a80:	2b00      	cmp	r3, #0
     a82:	d0f4      	beq.n	a6e <Handle_Cmd+0x1ce>
			g_e_State_Light = E_STATE_OFF;		
     a84:	4b54      	ldr	r3, [pc, #336]	; (bd8 <Handle_Cmd+0x338>)
     a86:	2200      	movs	r2, #0
     a88:	701a      	strb	r2, [r3, #0]
}
     a8a:	e120      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"50",2) == 0) {
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	2202      	movs	r2, #2
     a90:	4954      	ldr	r1, [pc, #336]	; (be4 <Handle_Cmd+0x344>)
     a92:	4618      	mov	r0, r3
     a94:	f009 fd00 	bl	a498 <strncmp>
     a98:	4603      	mov	r3, r0
     a9a:	2b00      	cmp	r3, #0
     a9c:	d10f      	bne.n	abe <Handle_Cmd+0x21e>
			while(!xQueueSendToBack(serial_str_queue_3, "Command HP ON received", portMAX_DELAY));	
     a9e:	bf00      	nop
     aa0:	4b3a      	ldr	r3, [pc, #232]	; (b8c <Handle_Cmd+0x2ec>)
     aa2:	6818      	ldr	r0, [r3, #0]
     aa4:	2300      	movs	r3, #0
     aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     aaa:	494f      	ldr	r1, [pc, #316]	; (be8 <Handle_Cmd+0x348>)
     aac:	f006 fbff 	bl	72ae <xQueueGenericSend>
     ab0:	4603      	mov	r3, r0
     ab2:	2b00      	cmp	r3, #0
     ab4:	d0f4      	beq.n	aa0 <Handle_Cmd+0x200>
			g_e_State_HP = E_STATE_ON;
     ab6:	4b4d      	ldr	r3, [pc, #308]	; (bec <Handle_Cmd+0x34c>)
     ab8:	2201      	movs	r2, #1
     aba:	701a      	strb	r2, [r3, #0]
}
     abc:	e107      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"51",2) == 0) {
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	2202      	movs	r2, #2
     ac2:	494b      	ldr	r1, [pc, #300]	; (bf0 <Handle_Cmd+0x350>)
     ac4:	4618      	mov	r0, r3
     ac6:	f009 fce7 	bl	a498 <strncmp>
     aca:	4603      	mov	r3, r0
     acc:	2b00      	cmp	r3, #0
     ace:	d10f      	bne.n	af0 <Handle_Cmd+0x250>
			while(!xQueueSendToBack(serial_str_queue_3, "Command HP OFF received", portMAX_DELAY));	
     ad0:	bf00      	nop
     ad2:	4b2e      	ldr	r3, [pc, #184]	; (b8c <Handle_Cmd+0x2ec>)
     ad4:	6818      	ldr	r0, [r3, #0]
     ad6:	2300      	movs	r3, #0
     ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     adc:	4945      	ldr	r1, [pc, #276]	; (bf4 <Handle_Cmd+0x354>)
     ade:	f006 fbe6 	bl	72ae <xQueueGenericSend>
     ae2:	4603      	mov	r3, r0
     ae4:	2b00      	cmp	r3, #0
     ae6:	d0f4      	beq.n	ad2 <Handle_Cmd+0x232>
			g_e_State_HP = E_STATE_OFF;
     ae8:	4b40      	ldr	r3, [pc, #256]	; (bec <Handle_Cmd+0x34c>)
     aea:	2200      	movs	r2, #0
     aec:	701a      	strb	r2, [r3, #0]
}
     aee:	e0ee      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"60",2) == 0) {
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	2202      	movs	r2, #2
     af4:	4940      	ldr	r1, [pc, #256]	; (bf8 <Handle_Cmd+0x358>)
     af6:	4618      	mov	r0, r3
     af8:	f009 fcce 	bl	a498 <strncmp>
     afc:	4603      	mov	r3, r0
     afe:	2b00      	cmp	r3, #0
     b00:	d10f      	bne.n	b22 <Handle_Cmd+0x282>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Value received", portMAX_DELAY));	
     b02:	bf00      	nop
     b04:	4b21      	ldr	r3, [pc, #132]	; (b8c <Handle_Cmd+0x2ec>)
     b06:	6818      	ldr	r0, [r3, #0]
     b08:	2300      	movs	r3, #0
     b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b0e:	493b      	ldr	r1, [pc, #236]	; (bfc <Handle_Cmd+0x35c>)
     b10:	f006 fbcd 	bl	72ae <xQueueGenericSend>
     b14:	4603      	mov	r3, r0
     b16:	2b00      	cmp	r3, #0
     b18:	d0f4      	beq.n	b04 <Handle_Cmd+0x264>
			g_e_Menu_Current = E_MENU_SHOW_VALUE;
     b1a:	4b1d      	ldr	r3, [pc, #116]	; (b90 <Handle_Cmd+0x2f0>)
     b1c:	223c      	movs	r2, #60	; 0x3c
     b1e:	701a      	strb	r2, [r3, #0]
}
     b20:	e0d5      	b.n	cce <Handle_Cmd+0x42e>
		else if (strncmp(msg->str,"q",1) == 0) {
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	781a      	ldrb	r2, [r3, #0]
     b26:	4b36      	ldr	r3, [pc, #216]	; (c00 <Handle_Cmd+0x360>)
     b28:	781b      	ldrb	r3, [r3, #0]
     b2a:	1ad3      	subs	r3, r2, r3
     b2c:	2b00      	cmp	r3, #0
     b2e:	d10f      	bne.n	b50 <Handle_Cmd+0x2b0>
			while(!xQueueSendToBack(serial_str_queue_3, "Command Value received", portMAX_DELAY));	
     b30:	bf00      	nop
     b32:	4b16      	ldr	r3, [pc, #88]	; (b8c <Handle_Cmd+0x2ec>)
     b34:	6818      	ldr	r0, [r3, #0]
     b36:	2300      	movs	r3, #0
     b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b3c:	492f      	ldr	r1, [pc, #188]	; (bfc <Handle_Cmd+0x35c>)
     b3e:	f006 fbb6 	bl	72ae <xQueueGenericSend>
     b42:	4603      	mov	r3, r0
     b44:	2b00      	cmp	r3, #0
     b46:	d0f4      	beq.n	b32 <Handle_Cmd+0x292>
			g_e_Menu_Current = E_MENU_PRINCIPAL;
     b48:	4b11      	ldr	r3, [pc, #68]	; (b90 <Handle_Cmd+0x2f0>)
     b4a:	2200      	movs	r2, #0
     b4c:	701a      	strb	r2, [r3, #0]
}
     b4e:	e0be      	b.n	cce <Handle_Cmd+0x42e>
			while(!xQueueSendToBack(serial_str_queue_3, "Error : Invalid command\r\n", portMAX_DELAY));
     b50:	bf00      	nop
     b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <Handle_Cmd+0x2ec>)
     b54:	6818      	ldr	r0, [r3, #0]
     b56:	2300      	movs	r3, #0
     b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b5c:	4929      	ldr	r1, [pc, #164]	; (c04 <Handle_Cmd+0x364>)
     b5e:	f006 fba6 	bl	72ae <xQueueGenericSend>
     b62:	4603      	mov	r3, r0
     b64:	2b00      	cmp	r3, #0
     b66:	d0f4      	beq.n	b52 <Handle_Cmd+0x2b2>
}
     b68:	e0b1      	b.n	cce <Handle_Cmd+0x42e>
	else if (g_e_Menu_Current == E_MENU_CHANGE_H_EAU_MAX) {
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <Handle_Cmd+0x2f0>)
     b6c:	781b      	ldrb	r3, [r3, #0]
     b6e:	2b14      	cmp	r3, #20
     b70:	d14c      	bne.n	c0c <Handle_Cmd+0x36c>
		g_H_EAU_MAX = strtouc(msg->str);
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	4618      	mov	r0, r3
     b76:	f7ff fdd5 	bl	724 <strtouc>
     b7a:	4603      	mov	r3, r0
     b7c:	461a      	mov	r2, r3
     b7e:	4b22      	ldr	r3, [pc, #136]	; (c08 <Handle_Cmd+0x368>)
     b80:	701a      	strb	r2, [r3, #0]
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     b82:	4b03      	ldr	r3, [pc, #12]	; (b90 <Handle_Cmd+0x2f0>)
     b84:	2200      	movs	r2, #0
     b86:	701a      	strb	r2, [r3, #0]
}
     b88:	e0a1      	b.n	cce <Handle_Cmd+0x42e>
     b8a:	bf00      	nop
     b8c:	200048ac 	.word	0x200048ac
     b90:	200048c9 	.word	0x200048c9
     b94:	0000a5b0 	.word	0x0000a5b0
     b98:	0000a5b4 	.word	0x0000a5b4
     b9c:	200048cc 	.word	0x200048cc
     ba0:	0000a5d0 	.word	0x0000a5d0
     ba4:	0000a5d4 	.word	0x0000a5d4
     ba8:	0000a5f0 	.word	0x0000a5f0
     bac:	0000a5f4 	.word	0x0000a5f4
     bb0:	0000a618 	.word	0x0000a618
     bb4:	0000a61c 	.word	0x0000a61c
     bb8:	0000a644 	.word	0x0000a644
     bbc:	0000a648 	.word	0x0000a648
     bc0:	0000a66c 	.word	0x0000a66c
     bc4:	0000a670 	.word	0x0000a670
     bc8:	0000a694 	.word	0x0000a694
     bcc:	0000a698 	.word	0x0000a698
     bd0:	0000a6b8 	.word	0x0000a6b8
     bd4:	0000a6bc 	.word	0x0000a6bc
     bd8:	200048cb 	.word	0x200048cb
     bdc:	0000a6d8 	.word	0x0000a6d8
     be0:	0000a6dc 	.word	0x0000a6dc
     be4:	0000a6f8 	.word	0x0000a6f8
     be8:	0000a6fc 	.word	0x0000a6fc
     bec:	200048ca 	.word	0x200048ca
     bf0:	0000a714 	.word	0x0000a714
     bf4:	0000a718 	.word	0x0000a718
     bf8:	0000a730 	.word	0x0000a730
     bfc:	0000a734 	.word	0x0000a734
     c00:	0000a74c 	.word	0x0000a74c
     c04:	0000a750 	.word	0x0000a750
     c08:	2000046c 	.word	0x2000046c
	else if (g_e_Menu_Current == E_MENU_CHANGE_T_EAU_MAX) {
     c0c:	4b32      	ldr	r3, [pc, #200]	; (cd8 <Handle_Cmd+0x438>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b15      	cmp	r3, #21
     c12:	d10b      	bne.n	c2c <Handle_Cmd+0x38c>
		g_T_EAU_MAX = strtouc(msg->str);
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	4618      	mov	r0, r3
     c18:	f7ff fd84 	bl	724 <strtouc>
     c1c:	4603      	mov	r3, r0
     c1e:	461a      	mov	r2, r3
     c20:	4b2e      	ldr	r3, [pc, #184]	; (cdc <Handle_Cmd+0x43c>)
     c22:	701a      	strb	r2, [r3, #0]
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     c24:	4b2c      	ldr	r3, [pc, #176]	; (cd8 <Handle_Cmd+0x438>)
     c26:	2200      	movs	r2, #0
     c28:	701a      	strb	r2, [r3, #0]
}
     c2a:	e050      	b.n	cce <Handle_Cmd+0x42e>
	else if (g_e_Menu_Current == E_MENU_CHANGE_V_VENT_MAX) {
     c2c:	4b2a      	ldr	r3, [pc, #168]	; (cd8 <Handle_Cmd+0x438>)
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	2b16      	cmp	r3, #22
     c32:	d10b      	bne.n	c4c <Handle_Cmd+0x3ac>
		g_V_VENT_MAX = strtouc(msg->str);
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	4618      	mov	r0, r3
     c38:	f7ff fd74 	bl	724 <strtouc>
     c3c:	4603      	mov	r3, r0
     c3e:	461a      	mov	r2, r3
     c40:	4b27      	ldr	r3, [pc, #156]	; (ce0 <Handle_Cmd+0x440>)
     c42:	701a      	strb	r2, [r3, #0]
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     c44:	4b24      	ldr	r3, [pc, #144]	; (cd8 <Handle_Cmd+0x438>)
     c46:	2200      	movs	r2, #0
     c48:	701a      	strb	r2, [r3, #0]
}
     c4a:	e040      	b.n	cce <Handle_Cmd+0x42e>
	else if (g_e_Menu_Current == E_MENU_CHANGE_T_EAU) {
     c4c:	4b22      	ldr	r3, [pc, #136]	; (cd8 <Handle_Cmd+0x438>)
     c4e:	781b      	ldrb	r3, [r3, #0]
     c50:	2b1e      	cmp	r3, #30
     c52:	d11a      	bne.n	c8a <Handle_Cmd+0x3ea>
		g_T_EAU = strtouc(msg->str);
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	4618      	mov	r0, r3
     c58:	f7ff fd64 	bl	724 <strtouc>
     c5c:	4603      	mov	r3, r0
     c5e:	461a      	mov	r2, r3
     c60:	4b20      	ldr	r3, [pc, #128]	; (ce4 <Handle_Cmd+0x444>)
     c62:	701a      	strb	r2, [r3, #0]
		uctostr(g_T_EAU,l_tcParam);
     c64:	4b1f      	ldr	r3, [pc, #124]	; (ce4 <Handle_Cmd+0x444>)
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	f107 020c 	add.w	r2, r7, #12
     c6c:	4611      	mov	r1, r2
     c6e:	4618      	mov	r0, r3
     c70:	f7ff fdcc 	bl	80c <uctostr>
		queue_str_to_send(USART1, l_tcParam, 10);
     c74:	f107 030c 	add.w	r3, r7, #12
     c78:	220a      	movs	r2, #10
     c7a:	4619      	mov	r1, r3
     c7c:	481a      	ldr	r0, [pc, #104]	; (ce8 <Handle_Cmd+0x448>)
     c7e:	f7ff fc83 	bl	588 <queue_str_to_send>
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     c82:	4b15      	ldr	r3, [pc, #84]	; (cd8 <Handle_Cmd+0x438>)
     c84:	2200      	movs	r2, #0
     c86:	701a      	strb	r2, [r3, #0]
}
     c88:	e021      	b.n	cce <Handle_Cmd+0x42e>
	else if (g_e_Menu_Current == E_MENU_CHANGE_V_VENT) {
     c8a:	4b13      	ldr	r3, [pc, #76]	; (cd8 <Handle_Cmd+0x438>)
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b1f      	cmp	r3, #31
     c90:	d11a      	bne.n	cc8 <Handle_Cmd+0x428>
		g_V_VENT = strtouc(msg->str);
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	4618      	mov	r0, r3
     c96:	f7ff fd45 	bl	724 <strtouc>
     c9a:	4603      	mov	r3, r0
     c9c:	461a      	mov	r2, r3
     c9e:	4b13      	ldr	r3, [pc, #76]	; (cec <Handle_Cmd+0x44c>)
     ca0:	701a      	strb	r2, [r3, #0]
		uctostr(g_V_VENT,l_tcParam);
     ca2:	4b12      	ldr	r3, [pc, #72]	; (cec <Handle_Cmd+0x44c>)
     ca4:	781b      	ldrb	r3, [r3, #0]
     ca6:	f107 020c 	add.w	r2, r7, #12
     caa:	4611      	mov	r1, r2
     cac:	4618      	mov	r0, r3
     cae:	f7ff fdad 	bl	80c <uctostr>
		queue_str_to_send(USART2, l_tcParam, 10);
     cb2:	f107 030c 	add.w	r3, r7, #12
     cb6:	220a      	movs	r2, #10
     cb8:	4619      	mov	r1, r3
     cba:	480d      	ldr	r0, [pc, #52]	; (cf0 <Handle_Cmd+0x450>)
     cbc:	f7ff fc64 	bl	588 <queue_str_to_send>
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     cc0:	4b05      	ldr	r3, [pc, #20]	; (cd8 <Handle_Cmd+0x438>)
     cc2:	2200      	movs	r2, #0
     cc4:	701a      	strb	r2, [r3, #0]
}
     cc6:	e002      	b.n	cce <Handle_Cmd+0x42e>
		g_e_Menu_Current = E_MENU_PRINCIPAL;
     cc8:	4b03      	ldr	r3, [pc, #12]	; (cd8 <Handle_Cmd+0x438>)
     cca:	2200      	movs	r2, #0
     ccc:	701a      	strb	r2, [r3, #0]
}
     cce:	bf00      	nop
     cd0:	3718      	adds	r7, #24
     cd2:	46bd      	mov	sp, r7
     cd4:	bd80      	pop	{r7, pc}
     cd6:	bf00      	nop
     cd8:	200048c9 	.word	0x200048c9
     cdc:	2000046e 	.word	0x2000046e
     ce0:	2000046f 	.word	0x2000046f
     ce4:	2000046d 	.word	0x2000046d
     ce8:	40013800 	.word	0x40013800
     cec:	200048c8 	.word	0x200048c8
     cf0:	40004400 	.word	0x40004400

00000cf4 <Print_Menu_Main>:

void Print_Menu_Main(void){
     cf4:	b580      	push	{r7, lr}
     cf6:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
     cf8:	2200      	movs	r2, #0
     cfa:	4928      	ldr	r1, [pc, #160]	; (d9c <Print_Menu_Main+0xa8>)
     cfc:	4828      	ldr	r0, [pc, #160]	; (da0 <Print_Menu_Main+0xac>)
     cfe:	f7ff fc43 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L1, TEMPO_SEND);
     d02:	2200      	movs	r2, #0
     d04:	4927      	ldr	r1, [pc, #156]	; (da4 <Print_Menu_Main+0xb0>)
     d06:	4826      	ldr	r0, [pc, #152]	; (da0 <Print_Menu_Main+0xac>)
     d08:	f7ff fc3e 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L2, TEMPO_SEND);
     d0c:	2200      	movs	r2, #0
     d0e:	4926      	ldr	r1, [pc, #152]	; (da8 <Print_Menu_Main+0xb4>)
     d10:	4823      	ldr	r0, [pc, #140]	; (da0 <Print_Menu_Main+0xac>)
     d12:	f7ff fc39 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L3, TEMPO_SEND);
     d16:	2200      	movs	r2, #0
     d18:	4924      	ldr	r1, [pc, #144]	; (dac <Print_Menu_Main+0xb8>)
     d1a:	4821      	ldr	r0, [pc, #132]	; (da0 <Print_Menu_Main+0xac>)
     d1c:	f7ff fc34 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L4, TEMPO_SEND);
     d20:	2200      	movs	r2, #0
     d22:	4923      	ldr	r1, [pc, #140]	; (db0 <Print_Menu_Main+0xbc>)
     d24:	481e      	ldr	r0, [pc, #120]	; (da0 <Print_Menu_Main+0xac>)
     d26:	f7ff fc2f 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L5, TEMPO_SEND);
     d2a:	2200      	movs	r2, #0
     d2c:	4921      	ldr	r1, [pc, #132]	; (db4 <Print_Menu_Main+0xc0>)
     d2e:	481c      	ldr	r0, [pc, #112]	; (da0 <Print_Menu_Main+0xac>)
     d30:	f7ff fc2a 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L6, TEMPO_SEND);
     d34:	2200      	movs	r2, #0
     d36:	4920      	ldr	r1, [pc, #128]	; (db8 <Print_Menu_Main+0xc4>)
     d38:	4819      	ldr	r0, [pc, #100]	; (da0 <Print_Menu_Main+0xac>)
     d3a:	f7ff fc25 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L7, TEMPO_SEND);
     d3e:	2200      	movs	r2, #0
     d40:	491e      	ldr	r1, [pc, #120]	; (dbc <Print_Menu_Main+0xc8>)
     d42:	4817      	ldr	r0, [pc, #92]	; (da0 <Print_Menu_Main+0xac>)
     d44:	f7ff fc20 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L8, TEMPO_SEND);
     d48:	2200      	movs	r2, #0
     d4a:	491d      	ldr	r1, [pc, #116]	; (dc0 <Print_Menu_Main+0xcc>)
     d4c:	4814      	ldr	r0, [pc, #80]	; (da0 <Print_Menu_Main+0xac>)
     d4e:	f7ff fc1b 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L9, TEMPO_SEND);
     d52:	2200      	movs	r2, #0
     d54:	491b      	ldr	r1, [pc, #108]	; (dc4 <Print_Menu_Main+0xd0>)
     d56:	4812      	ldr	r0, [pc, #72]	; (da0 <Print_Menu_Main+0xac>)
     d58:	f7ff fc16 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L10, TEMPO_SEND);
     d5c:	2200      	movs	r2, #0
     d5e:	491a      	ldr	r1, [pc, #104]	; (dc8 <Print_Menu_Main+0xd4>)
     d60:	480f      	ldr	r0, [pc, #60]	; (da0 <Print_Menu_Main+0xac>)
     d62:	f7ff fc11 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L11, TEMPO_SEND);
     d66:	2200      	movs	r2, #0
     d68:	4918      	ldr	r1, [pc, #96]	; (dcc <Print_Menu_Main+0xd8>)
     d6a:	480d      	ldr	r0, [pc, #52]	; (da0 <Print_Menu_Main+0xac>)
     d6c:	f7ff fc0c 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L12, TEMPO_SEND);
     d70:	2200      	movs	r2, #0
     d72:	4917      	ldr	r1, [pc, #92]	; (dd0 <Print_Menu_Main+0xdc>)
     d74:	480a      	ldr	r0, [pc, #40]	; (da0 <Print_Menu_Main+0xac>)
     d76:	f7ff fc07 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L13, TEMPO_SEND);
     d7a:	2200      	movs	r2, #0
     d7c:	4915      	ldr	r1, [pc, #84]	; (dd4 <Print_Menu_Main+0xe0>)
     d7e:	4808      	ldr	r0, [pc, #32]	; (da0 <Print_Menu_Main+0xac>)
     d80:	f7ff fc02 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L14, TEMPO_SEND);
     d84:	2200      	movs	r2, #0
     d86:	4914      	ldr	r1, [pc, #80]	; (dd8 <Print_Menu_Main+0xe4>)
     d88:	4805      	ldr	r0, [pc, #20]	; (da0 <Print_Menu_Main+0xac>)
     d8a:	f7ff fbfd 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M0_L15, TEMPO_SEND);
     d8e:	2200      	movs	r2, #0
     d90:	4912      	ldr	r1, [pc, #72]	; (ddc <Print_Menu_Main+0xe8>)
     d92:	4803      	ldr	r0, [pc, #12]	; (da0 <Print_Menu_Main+0xac>)
     d94:	f7ff fbf8 	bl	588 <queue_str_to_send>
}
     d98:	bf00      	nop
     d9a:	bd80      	pop	{r7, pc}
     d9c:	20000000 	.word	0x20000000
     da0:	40004800 	.word	0x40004800
     da4:	20000008 	.word	0x20000008
     da8:	2000003c 	.word	0x2000003c
     dac:	20000050 	.word	0x20000050
     db0:	2000006c 	.word	0x2000006c
     db4:	20000088 	.word	0x20000088
     db8:	200000a8 	.word	0x200000a8
     dbc:	200000cc 	.word	0x200000cc
     dc0:	200000ec 	.word	0x200000ec
     dc4:	2000010c 	.word	0x2000010c
     dc8:	20000128 	.word	0x20000128
     dcc:	20000140 	.word	0x20000140
     dd0:	20000158 	.word	0x20000158
     dd4:	20000178 	.word	0x20000178
     dd8:	20000198 	.word	0x20000198
     ddc:	200001c8 	.word	0x200001c8

00000de0 <string_to_uchar>:


/* Functions for sending numbers through the UART */
unsigned char string_to_uchar(char p_t_char[], unsigned char size)
{
     de0:	b480      	push	{r7}
     de2:	b083      	sub	sp, #12
     de4:	af00      	add	r7, sp, #0
     de6:	6078      	str	r0, [r7, #4]
     de8:	460b      	mov	r3, r1
     dea:	70fb      	strb	r3, [r7, #3]
    return (p_t_char[1]-'0')*16 + (p_t_char[1]-'0');
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	3301      	adds	r3, #1
     df0:	781b      	ldrb	r3, [r3, #0]
     df2:	3b30      	subs	r3, #48	; 0x30
     df4:	b2db      	uxtb	r3, r3
     df6:	461a      	mov	r2, r3
     df8:	0112      	lsls	r2, r2, #4
     dfa:	4413      	add	r3, r2
     dfc:	b2db      	uxtb	r3, r3
}
     dfe:	4618      	mov	r0, r3
     e00:	370c      	adds	r7, #12
     e02:	46bd      	mov	sp, r7
     e04:	bc80      	pop	{r7}
     e06:	4770      	bx	lr

00000e08 <Print_Menu_Value>:





void Print_Menu_Value(void){
     e08:	b580      	push	{r7, lr}
     e0a:	b082      	sub	sp, #8
     e0c:	af00      	add	r7, sp, #0
	char var[6];
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
     e0e:	2200      	movs	r2, #0
     e10:	49bd      	ldr	r1, [pc, #756]	; (1108 <Print_Menu_Value+0x300>)
     e12:	48be      	ldr	r0, [pc, #760]	; (110c <Print_Menu_Value+0x304>)
     e14:	f7ff fbb8 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M60_L1, TEMPO_SEND);
     e18:	4bbd      	ldr	r3, [pc, #756]	; (1110 <Print_Menu_Value+0x308>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	2200      	movs	r2, #0
     e1e:	4619      	mov	r1, r3
     e20:	48ba      	ldr	r0, [pc, #744]	; (110c <Print_Menu_Value+0x304>)
     e22:	f7ff fbb1 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M60_L2, TEMPO_SEND); 
     e26:	2200      	movs	r2, #0
     e28:	49ba      	ldr	r1, [pc, #744]	; (1114 <Print_Menu_Value+0x30c>)
     e2a:	48b8      	ldr	r0, [pc, #736]	; (110c <Print_Menu_Value+0x304>)
     e2c:	f7ff fbac 	bl	588 <queue_str_to_send>
	/* H_EAU_MAX */
        queue_str_to_send(USART3,g_M60_L3, TEMPO_SEND);
     e30:	2200      	movs	r2, #0
     e32:	49b9      	ldr	r1, [pc, #740]	; (1118 <Print_Menu_Value+0x310>)
     e34:	48b5      	ldr	r0, [pc, #724]	; (110c <Print_Menu_Value+0x304>)
     e36:	f7ff fba7 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_H_EAU_MAX/100;
     e3a:	4bb8      	ldr	r3, [pc, #736]	; (111c <Print_Menu_Value+0x314>)
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	4ab8      	ldr	r2, [pc, #736]	; (1120 <Print_Menu_Value+0x318>)
     e40:	fba2 2303 	umull	r2, r3, r2, r3
     e44:	095b      	lsrs	r3, r3, #5
     e46:	b2db      	uxtb	r3, r3
     e48:	3330      	adds	r3, #48	; 0x30
     e4a:	b2db      	uxtb	r3, r3
     e4c:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_H_EAU_MAX%100)/10;
     e4e:	4bb3      	ldr	r3, [pc, #716]	; (111c <Print_Menu_Value+0x314>)
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	4ab3      	ldr	r2, [pc, #716]	; (1120 <Print_Menu_Value+0x318>)
     e54:	fba2 1203 	umull	r1, r2, r2, r3
     e58:	0952      	lsrs	r2, r2, #5
     e5a:	2164      	movs	r1, #100	; 0x64
     e5c:	fb01 f202 	mul.w	r2, r1, r2
     e60:	1a9b      	subs	r3, r3, r2
     e62:	b2db      	uxtb	r3, r3
     e64:	4aaf      	ldr	r2, [pc, #700]	; (1124 <Print_Menu_Value+0x31c>)
     e66:	fba2 2303 	umull	r2, r3, r2, r3
     e6a:	08db      	lsrs	r3, r3, #3
     e6c:	b2db      	uxtb	r3, r3
     e6e:	3330      	adds	r3, #48	; 0x30
     e70:	b2db      	uxtb	r3, r3
     e72:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_H_EAU_MAX%10;
     e74:	4ba9      	ldr	r3, [pc, #676]	; (111c <Print_Menu_Value+0x314>)
     e76:	781a      	ldrb	r2, [r3, #0]
     e78:	4baa      	ldr	r3, [pc, #680]	; (1124 <Print_Menu_Value+0x31c>)
     e7a:	fba3 1302 	umull	r1, r3, r3, r2
     e7e:	08d9      	lsrs	r1, r3, #3
     e80:	460b      	mov	r3, r1
     e82:	009b      	lsls	r3, r3, #2
     e84:	440b      	add	r3, r1
     e86:	005b      	lsls	r3, r3, #1
     e88:	1ad3      	subs	r3, r2, r3
     e8a:	b2db      	uxtb	r3, r3
     e8c:	3330      	adds	r3, #48	; 0x30
     e8e:	b2db      	uxtb	r3, r3
     e90:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
     e92:	230d      	movs	r3, #13
     e94:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
     e96:	230a      	movs	r3, #10
     e98:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
     e9a:	2300      	movs	r3, #0
     e9c:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
     e9e:	463b      	mov	r3, r7
     ea0:	2200      	movs	r2, #0
     ea2:	4619      	mov	r1, r3
     ea4:	4899      	ldr	r0, [pc, #612]	; (110c <Print_Menu_Value+0x304>)
     ea6:	f7ff fb6f 	bl	588 <queue_str_to_send>
	/* T_EAU_MAX */
        queue_str_to_send(USART3,g_M60_L4, TEMPO_SEND);
     eaa:	2200      	movs	r2, #0
     eac:	499e      	ldr	r1, [pc, #632]	; (1128 <Print_Menu_Value+0x320>)
     eae:	4897      	ldr	r0, [pc, #604]	; (110c <Print_Menu_Value+0x304>)
     eb0:	f7ff fb6a 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_T_EAU_MAX/100;
     eb4:	4b9d      	ldr	r3, [pc, #628]	; (112c <Print_Menu_Value+0x324>)
     eb6:	781b      	ldrb	r3, [r3, #0]
     eb8:	4a99      	ldr	r2, [pc, #612]	; (1120 <Print_Menu_Value+0x318>)
     eba:	fba2 2303 	umull	r2, r3, r2, r3
     ebe:	095b      	lsrs	r3, r3, #5
     ec0:	b2db      	uxtb	r3, r3
     ec2:	3330      	adds	r3, #48	; 0x30
     ec4:	b2db      	uxtb	r3, r3
     ec6:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_T_EAU_MAX%100)/10;
     ec8:	4b98      	ldr	r3, [pc, #608]	; (112c <Print_Menu_Value+0x324>)
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	4a94      	ldr	r2, [pc, #592]	; (1120 <Print_Menu_Value+0x318>)
     ece:	fba2 1203 	umull	r1, r2, r2, r3
     ed2:	0952      	lsrs	r2, r2, #5
     ed4:	2164      	movs	r1, #100	; 0x64
     ed6:	fb01 f202 	mul.w	r2, r1, r2
     eda:	1a9b      	subs	r3, r3, r2
     edc:	b2db      	uxtb	r3, r3
     ede:	4a91      	ldr	r2, [pc, #580]	; (1124 <Print_Menu_Value+0x31c>)
     ee0:	fba2 2303 	umull	r2, r3, r2, r3
     ee4:	08db      	lsrs	r3, r3, #3
     ee6:	b2db      	uxtb	r3, r3
     ee8:	3330      	adds	r3, #48	; 0x30
     eea:	b2db      	uxtb	r3, r3
     eec:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_T_EAU_MAX%10;
     eee:	4b8f      	ldr	r3, [pc, #572]	; (112c <Print_Menu_Value+0x324>)
     ef0:	781a      	ldrb	r2, [r3, #0]
     ef2:	4b8c      	ldr	r3, [pc, #560]	; (1124 <Print_Menu_Value+0x31c>)
     ef4:	fba3 1302 	umull	r1, r3, r3, r2
     ef8:	08d9      	lsrs	r1, r3, #3
     efa:	460b      	mov	r3, r1
     efc:	009b      	lsls	r3, r3, #2
     efe:	440b      	add	r3, r1
     f00:	005b      	lsls	r3, r3, #1
     f02:	1ad3      	subs	r3, r2, r3
     f04:	b2db      	uxtb	r3, r3
     f06:	3330      	adds	r3, #48	; 0x30
     f08:	b2db      	uxtb	r3, r3
     f0a:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
     f0c:	230d      	movs	r3, #13
     f0e:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
     f10:	230a      	movs	r3, #10
     f12:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
     f14:	2300      	movs	r3, #0
     f16:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
     f18:	463b      	mov	r3, r7
     f1a:	2200      	movs	r2, #0
     f1c:	4619      	mov	r1, r3
     f1e:	487b      	ldr	r0, [pc, #492]	; (110c <Print_Menu_Value+0x304>)
     f20:	f7ff fb32 	bl	588 <queue_str_to_send>
	/* V_VENT_MAX */
        queue_str_to_send(USART3,g_M60_L5, TEMPO_SEND);
     f24:	2200      	movs	r2, #0
     f26:	4982      	ldr	r1, [pc, #520]	; (1130 <Print_Menu_Value+0x328>)
     f28:	4878      	ldr	r0, [pc, #480]	; (110c <Print_Menu_Value+0x304>)
     f2a:	f7ff fb2d 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_V_VENT_MAX/100;
     f2e:	4b81      	ldr	r3, [pc, #516]	; (1134 <Print_Menu_Value+0x32c>)
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	4a7b      	ldr	r2, [pc, #492]	; (1120 <Print_Menu_Value+0x318>)
     f34:	fba2 2303 	umull	r2, r3, r2, r3
     f38:	095b      	lsrs	r3, r3, #5
     f3a:	b2db      	uxtb	r3, r3
     f3c:	3330      	adds	r3, #48	; 0x30
     f3e:	b2db      	uxtb	r3, r3
     f40:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_V_VENT_MAX%100)/10;
     f42:	4b7c      	ldr	r3, [pc, #496]	; (1134 <Print_Menu_Value+0x32c>)
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	4a76      	ldr	r2, [pc, #472]	; (1120 <Print_Menu_Value+0x318>)
     f48:	fba2 1203 	umull	r1, r2, r2, r3
     f4c:	0952      	lsrs	r2, r2, #5
     f4e:	2164      	movs	r1, #100	; 0x64
     f50:	fb01 f202 	mul.w	r2, r1, r2
     f54:	1a9b      	subs	r3, r3, r2
     f56:	b2db      	uxtb	r3, r3
     f58:	4a72      	ldr	r2, [pc, #456]	; (1124 <Print_Menu_Value+0x31c>)
     f5a:	fba2 2303 	umull	r2, r3, r2, r3
     f5e:	08db      	lsrs	r3, r3, #3
     f60:	b2db      	uxtb	r3, r3
     f62:	3330      	adds	r3, #48	; 0x30
     f64:	b2db      	uxtb	r3, r3
     f66:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_V_VENT_MAX%10;
     f68:	4b72      	ldr	r3, [pc, #456]	; (1134 <Print_Menu_Value+0x32c>)
     f6a:	781a      	ldrb	r2, [r3, #0]
     f6c:	4b6d      	ldr	r3, [pc, #436]	; (1124 <Print_Menu_Value+0x31c>)
     f6e:	fba3 1302 	umull	r1, r3, r3, r2
     f72:	08d9      	lsrs	r1, r3, #3
     f74:	460b      	mov	r3, r1
     f76:	009b      	lsls	r3, r3, #2
     f78:	440b      	add	r3, r1
     f7a:	005b      	lsls	r3, r3, #1
     f7c:	1ad3      	subs	r3, r2, r3
     f7e:	b2db      	uxtb	r3, r3
     f80:	3330      	adds	r3, #48	; 0x30
     f82:	b2db      	uxtb	r3, r3
     f84:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
     f86:	230d      	movs	r3, #13
     f88:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
     f8a:	230a      	movs	r3, #10
     f8c:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
     f8e:	2300      	movs	r3, #0
     f90:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
     f92:	463b      	mov	r3, r7
     f94:	2200      	movs	r2, #0
     f96:	4619      	mov	r1, r3
     f98:	485c      	ldr	r0, [pc, #368]	; (110c <Print_Menu_Value+0x304>)
     f9a:	f7ff faf5 	bl	588 <queue_str_to_send>
	/* H_EAU */
        queue_str_to_send(USART3,g_M60_L6, TEMPO_SEND);
     f9e:	2200      	movs	r2, #0
     fa0:	4965      	ldr	r1, [pc, #404]	; (1138 <Print_Menu_Value+0x330>)
     fa2:	485a      	ldr	r0, [pc, #360]	; (110c <Print_Menu_Value+0x304>)
     fa4:	f7ff faf0 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_H_EAU/100;
     fa8:	4b64      	ldr	r3, [pc, #400]	; (113c <Print_Menu_Value+0x334>)
     faa:	781b      	ldrb	r3, [r3, #0]
     fac:	4a5c      	ldr	r2, [pc, #368]	; (1120 <Print_Menu_Value+0x318>)
     fae:	fba2 2303 	umull	r2, r3, r2, r3
     fb2:	095b      	lsrs	r3, r3, #5
     fb4:	b2db      	uxtb	r3, r3
     fb6:	3330      	adds	r3, #48	; 0x30
     fb8:	b2db      	uxtb	r3, r3
     fba:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_H_EAU%100)/10;
     fbc:	4b5f      	ldr	r3, [pc, #380]	; (113c <Print_Menu_Value+0x334>)
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	4a57      	ldr	r2, [pc, #348]	; (1120 <Print_Menu_Value+0x318>)
     fc2:	fba2 1203 	umull	r1, r2, r2, r3
     fc6:	0952      	lsrs	r2, r2, #5
     fc8:	2164      	movs	r1, #100	; 0x64
     fca:	fb01 f202 	mul.w	r2, r1, r2
     fce:	1a9b      	subs	r3, r3, r2
     fd0:	b2db      	uxtb	r3, r3
     fd2:	4a54      	ldr	r2, [pc, #336]	; (1124 <Print_Menu_Value+0x31c>)
     fd4:	fba2 2303 	umull	r2, r3, r2, r3
     fd8:	08db      	lsrs	r3, r3, #3
     fda:	b2db      	uxtb	r3, r3
     fdc:	3330      	adds	r3, #48	; 0x30
     fde:	b2db      	uxtb	r3, r3
     fe0:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_H_EAU%10;
     fe2:	4b56      	ldr	r3, [pc, #344]	; (113c <Print_Menu_Value+0x334>)
     fe4:	781a      	ldrb	r2, [r3, #0]
     fe6:	4b4f      	ldr	r3, [pc, #316]	; (1124 <Print_Menu_Value+0x31c>)
     fe8:	fba3 1302 	umull	r1, r3, r3, r2
     fec:	08d9      	lsrs	r1, r3, #3
     fee:	460b      	mov	r3, r1
     ff0:	009b      	lsls	r3, r3, #2
     ff2:	440b      	add	r3, r1
     ff4:	005b      	lsls	r3, r3, #1
     ff6:	1ad3      	subs	r3, r2, r3
     ff8:	b2db      	uxtb	r3, r3
     ffa:	3330      	adds	r3, #48	; 0x30
     ffc:	b2db      	uxtb	r3, r3
     ffe:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
    1000:	230d      	movs	r3, #13
    1002:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
    1004:	230a      	movs	r3, #10
    1006:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
    1008:	2300      	movs	r3, #0
    100a:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
    100c:	463b      	mov	r3, r7
    100e:	2200      	movs	r2, #0
    1010:	4619      	mov	r1, r3
    1012:	483e      	ldr	r0, [pc, #248]	; (110c <Print_Menu_Value+0x304>)
    1014:	f7ff fab8 	bl	588 <queue_str_to_send>
	/* T_EAU */
        queue_str_to_send(USART3,g_M60_L7, TEMPO_SEND);
    1018:	2200      	movs	r2, #0
    101a:	4949      	ldr	r1, [pc, #292]	; (1140 <Print_Menu_Value+0x338>)
    101c:	483b      	ldr	r0, [pc, #236]	; (110c <Print_Menu_Value+0x304>)
    101e:	f7ff fab3 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_T_EAU/100;
    1022:	4b48      	ldr	r3, [pc, #288]	; (1144 <Print_Menu_Value+0x33c>)
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	4a3e      	ldr	r2, [pc, #248]	; (1120 <Print_Menu_Value+0x318>)
    1028:	fba2 2303 	umull	r2, r3, r2, r3
    102c:	095b      	lsrs	r3, r3, #5
    102e:	b2db      	uxtb	r3, r3
    1030:	3330      	adds	r3, #48	; 0x30
    1032:	b2db      	uxtb	r3, r3
    1034:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_T_EAU%100)/10;
    1036:	4b43      	ldr	r3, [pc, #268]	; (1144 <Print_Menu_Value+0x33c>)
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	4a39      	ldr	r2, [pc, #228]	; (1120 <Print_Menu_Value+0x318>)
    103c:	fba2 1203 	umull	r1, r2, r2, r3
    1040:	0952      	lsrs	r2, r2, #5
    1042:	2164      	movs	r1, #100	; 0x64
    1044:	fb01 f202 	mul.w	r2, r1, r2
    1048:	1a9b      	subs	r3, r3, r2
    104a:	b2db      	uxtb	r3, r3
    104c:	4a35      	ldr	r2, [pc, #212]	; (1124 <Print_Menu_Value+0x31c>)
    104e:	fba2 2303 	umull	r2, r3, r2, r3
    1052:	08db      	lsrs	r3, r3, #3
    1054:	b2db      	uxtb	r3, r3
    1056:	3330      	adds	r3, #48	; 0x30
    1058:	b2db      	uxtb	r3, r3
    105a:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_T_EAU%10;
    105c:	4b39      	ldr	r3, [pc, #228]	; (1144 <Print_Menu_Value+0x33c>)
    105e:	781a      	ldrb	r2, [r3, #0]
    1060:	4b30      	ldr	r3, [pc, #192]	; (1124 <Print_Menu_Value+0x31c>)
    1062:	fba3 1302 	umull	r1, r3, r3, r2
    1066:	08d9      	lsrs	r1, r3, #3
    1068:	460b      	mov	r3, r1
    106a:	009b      	lsls	r3, r3, #2
    106c:	440b      	add	r3, r1
    106e:	005b      	lsls	r3, r3, #1
    1070:	1ad3      	subs	r3, r2, r3
    1072:	b2db      	uxtb	r3, r3
    1074:	3330      	adds	r3, #48	; 0x30
    1076:	b2db      	uxtb	r3, r3
    1078:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
    107a:	230d      	movs	r3, #13
    107c:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
    107e:	230a      	movs	r3, #10
    1080:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
    1082:	2300      	movs	r3, #0
    1084:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
    1086:	463b      	mov	r3, r7
    1088:	2200      	movs	r2, #0
    108a:	4619      	mov	r1, r3
    108c:	481f      	ldr	r0, [pc, #124]	; (110c <Print_Menu_Value+0x304>)
    108e:	f7ff fa7b 	bl	588 <queue_str_to_send>
	/* V_VENT */
        queue_str_to_send(USART3,g_M60_L8, TEMPO_SEND);
    1092:	2200      	movs	r2, #0
    1094:	492c      	ldr	r1, [pc, #176]	; (1148 <Print_Menu_Value+0x340>)
    1096:	481d      	ldr	r0, [pc, #116]	; (110c <Print_Menu_Value+0x304>)
    1098:	f7ff fa76 	bl	588 <queue_str_to_send>
	var[0] = '0'+g_V_VENT/100;
    109c:	4b2b      	ldr	r3, [pc, #172]	; (114c <Print_Menu_Value+0x344>)
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	4a1f      	ldr	r2, [pc, #124]	; (1120 <Print_Menu_Value+0x318>)
    10a2:	fba2 2303 	umull	r2, r3, r2, r3
    10a6:	095b      	lsrs	r3, r3, #5
    10a8:	b2db      	uxtb	r3, r3
    10aa:	3330      	adds	r3, #48	; 0x30
    10ac:	b2db      	uxtb	r3, r3
    10ae:	703b      	strb	r3, [r7, #0]
	var[1] = '0'+(g_V_VENT%100)/10;
    10b0:	4b26      	ldr	r3, [pc, #152]	; (114c <Print_Menu_Value+0x344>)
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	4a1a      	ldr	r2, [pc, #104]	; (1120 <Print_Menu_Value+0x318>)
    10b6:	fba2 1203 	umull	r1, r2, r2, r3
    10ba:	0952      	lsrs	r2, r2, #5
    10bc:	2164      	movs	r1, #100	; 0x64
    10be:	fb01 f202 	mul.w	r2, r1, r2
    10c2:	1a9b      	subs	r3, r3, r2
    10c4:	b2db      	uxtb	r3, r3
    10c6:	4a17      	ldr	r2, [pc, #92]	; (1124 <Print_Menu_Value+0x31c>)
    10c8:	fba2 2303 	umull	r2, r3, r2, r3
    10cc:	08db      	lsrs	r3, r3, #3
    10ce:	b2db      	uxtb	r3, r3
    10d0:	3330      	adds	r3, #48	; 0x30
    10d2:	b2db      	uxtb	r3, r3
    10d4:	707b      	strb	r3, [r7, #1]
	var[2] = '0'+g_V_VENT%10;
    10d6:	4b1d      	ldr	r3, [pc, #116]	; (114c <Print_Menu_Value+0x344>)
    10d8:	781a      	ldrb	r2, [r3, #0]
    10da:	4b12      	ldr	r3, [pc, #72]	; (1124 <Print_Menu_Value+0x31c>)
    10dc:	fba3 1302 	umull	r1, r3, r3, r2
    10e0:	08d9      	lsrs	r1, r3, #3
    10e2:	460b      	mov	r3, r1
    10e4:	009b      	lsls	r3, r3, #2
    10e6:	440b      	add	r3, r1
    10e8:	005b      	lsls	r3, r3, #1
    10ea:	1ad3      	subs	r3, r2, r3
    10ec:	b2db      	uxtb	r3, r3
    10ee:	3330      	adds	r3, #48	; 0x30
    10f0:	b2db      	uxtb	r3, r3
    10f2:	70bb      	strb	r3, [r7, #2]
	var[3] = '\r';
    10f4:	230d      	movs	r3, #13
    10f6:	70fb      	strb	r3, [r7, #3]
	var[4] = '\n';
    10f8:	230a      	movs	r3, #10
    10fa:	713b      	strb	r3, [r7, #4]
	var[5] = '\0';
    10fc:	2300      	movs	r3, #0
    10fe:	717b      	strb	r3, [r7, #5]
	queue_str_to_send(USART3, var, TEMPO_SEND);
    1100:	463b      	mov	r3, r7
    1102:	2200      	movs	r2, #0
    1104:	4619      	mov	r1, r3
    1106:	e023      	b.n	1150 <Print_Menu_Value+0x348>
    1108:	20000000 	.word	0x20000000
    110c:	40004800 	.word	0x40004800
    1110:	200001e4 	.word	0x200001e4
    1114:	200001e8 	.word	0x200001e8
    1118:	20000218 	.word	0x20000218
    111c:	2000046c 	.word	0x2000046c
    1120:	51eb851f 	.word	0x51eb851f
    1124:	cccccccd 	.word	0xcccccccd
    1128:	20000228 	.word	0x20000228
    112c:	2000046e 	.word	0x2000046e
    1130:	20000234 	.word	0x20000234
    1134:	2000046f 	.word	0x2000046f
    1138:	20000244 	.word	0x20000244
    113c:	2000046b 	.word	0x2000046b
    1140:	2000024c 	.word	0x2000024c
    1144:	2000046d 	.word	0x2000046d
    1148:	20000254 	.word	0x20000254
    114c:	200048c8 	.word	0x200048c8
    1150:	4823      	ldr	r0, [pc, #140]	; (11e0 <Print_Menu_Value+0x3d8>)
    1152:	f7ff fa19 	bl	588 <queue_str_to_send>
	/* Lumiere */
        queue_str_to_send(USART3,g_M60_L9, TEMPO_SEND);
    1156:	2200      	movs	r2, #0
    1158:	4922      	ldr	r1, [pc, #136]	; (11e4 <Print_Menu_Value+0x3dc>)
    115a:	4821      	ldr	r0, [pc, #132]	; (11e0 <Print_Menu_Value+0x3d8>)
    115c:	f7ff fa14 	bl	588 <queue_str_to_send>
	if (g_e_State_Light == E_STATE_OFF) {
    1160:	4b21      	ldr	r3, [pc, #132]	; (11e8 <Print_Menu_Value+0x3e0>)
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d105      	bne.n	1174 <Print_Menu_Value+0x36c>
	    queue_str_to_send(USART3,"OFF\r\n", TEMPO_SEND);
    1168:	2200      	movs	r2, #0
    116a:	4920      	ldr	r1, [pc, #128]	; (11ec <Print_Menu_Value+0x3e4>)
    116c:	481c      	ldr	r0, [pc, #112]	; (11e0 <Print_Menu_Value+0x3d8>)
    116e:	f7ff fa0b 	bl	588 <queue_str_to_send>
    1172:	e004      	b.n	117e <Print_Menu_Value+0x376>
	}
	else {
	    queue_str_to_send(USART3,"ON\r\n", TEMPO_SEND);
    1174:	2200      	movs	r2, #0
    1176:	491e      	ldr	r1, [pc, #120]	; (11f0 <Print_Menu_Value+0x3e8>)
    1178:	4819      	ldr	r0, [pc, #100]	; (11e0 <Print_Menu_Value+0x3d8>)
    117a:	f7ff fa05 	bl	588 <queue_str_to_send>
	}
	/* HP */
        queue_str_to_send(USART3,g_M60_L10, TEMPO_SEND);
    117e:	2200      	movs	r2, #0
    1180:	491c      	ldr	r1, [pc, #112]	; (11f4 <Print_Menu_Value+0x3ec>)
    1182:	4817      	ldr	r0, [pc, #92]	; (11e0 <Print_Menu_Value+0x3d8>)
    1184:	f7ff fa00 	bl	588 <queue_str_to_send>
	if (g_e_State_HP == E_STATE_OFF) {
    1188:	4b1b      	ldr	r3, [pc, #108]	; (11f8 <Print_Menu_Value+0x3f0>)
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	2b00      	cmp	r3, #0
    118e:	d105      	bne.n	119c <Print_Menu_Value+0x394>
	    queue_str_to_send(USART3,"OFF\r\n", TEMPO_SEND);
    1190:	2200      	movs	r2, #0
    1192:	4916      	ldr	r1, [pc, #88]	; (11ec <Print_Menu_Value+0x3e4>)
    1194:	4812      	ldr	r0, [pc, #72]	; (11e0 <Print_Menu_Value+0x3d8>)
    1196:	f7ff f9f7 	bl	588 <queue_str_to_send>
    119a:	e004      	b.n	11a6 <Print_Menu_Value+0x39e>
	}
	else {
	    queue_str_to_send(USART3,"ON\r\n", TEMPO_SEND);
    119c:	2200      	movs	r2, #0
    119e:	4914      	ldr	r1, [pc, #80]	; (11f0 <Print_Menu_Value+0x3e8>)
    11a0:	480f      	ldr	r0, [pc, #60]	; (11e0 <Print_Menu_Value+0x3d8>)
    11a2:	f7ff f9f1 	bl	588 <queue_str_to_send>
	}
	/* SYS */
        queue_str_to_send(USART3,g_M60_L11, TEMPO_SEND);
    11a6:	2200      	movs	r2, #0
    11a8:	4914      	ldr	r1, [pc, #80]	; (11fc <Print_Menu_Value+0x3f4>)
    11aa:	480d      	ldr	r0, [pc, #52]	; (11e0 <Print_Menu_Value+0x3d8>)
    11ac:	f7ff f9ec 	bl	588 <queue_str_to_send>
	if (g_e_State_System == E_STATE_OFF) {
    11b0:	4b13      	ldr	r3, [pc, #76]	; (1200 <Print_Menu_Value+0x3f8>)
    11b2:	781b      	ldrb	r3, [r3, #0]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d105      	bne.n	11c4 <Print_Menu_Value+0x3bc>
	    queue_str_to_send(USART3,"OFF\r\n", TEMPO_SEND);
    11b8:	2200      	movs	r2, #0
    11ba:	490c      	ldr	r1, [pc, #48]	; (11ec <Print_Menu_Value+0x3e4>)
    11bc:	4808      	ldr	r0, [pc, #32]	; (11e0 <Print_Menu_Value+0x3d8>)
    11be:	f7ff f9e3 	bl	588 <queue_str_to_send>
    11c2:	e004      	b.n	11ce <Print_Menu_Value+0x3c6>
	}
	else {
	    queue_str_to_send(USART3,"ON\r\n", TEMPO_SEND);
    11c4:	2200      	movs	r2, #0
    11c6:	490a      	ldr	r1, [pc, #40]	; (11f0 <Print_Menu_Value+0x3e8>)
    11c8:	4805      	ldr	r0, [pc, #20]	; (11e0 <Print_Menu_Value+0x3d8>)
    11ca:	f7ff f9dd 	bl	588 <queue_str_to_send>
	}
	/* Toucher une touche pour quitter */
        queue_str_to_send(USART3,g_M60_L12, TEMPO_SEND);
    11ce:	2200      	movs	r2, #0
    11d0:	490c      	ldr	r1, [pc, #48]	; (1204 <Print_Menu_Value+0x3fc>)
    11d2:	4803      	ldr	r0, [pc, #12]	; (11e0 <Print_Menu_Value+0x3d8>)
    11d4:	f7ff f9d8 	bl	588 <queue_str_to_send>

}
    11d8:	bf00      	nop
    11da:	3708      	adds	r7, #8
    11dc:	46bd      	mov	sp, r7
    11de:	bd80      	pop	{r7, pc}
    11e0:	40004800 	.word	0x40004800
    11e4:	20000260 	.word	0x20000260
    11e8:	200048cb 	.word	0x200048cb
    11ec:	0000a76c 	.word	0x0000a76c
    11f0:	0000a774 	.word	0x0000a774
    11f4:	20000268 	.word	0x20000268
    11f8:	200048ca 	.word	0x200048ca
    11fc:	20000270 	.word	0x20000270
    1200:	200048cc 	.word	0x200048cc
    1204:	20000278 	.word	0x20000278

00001208 <Print_Menu_Change_H_EAU_MAX>:

void Print_Menu_Change_H_EAU_MAX(void){
    1208:	b580      	push	{r7, lr}
    120a:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
    120c:	2200      	movs	r2, #0
    120e:	490b      	ldr	r1, [pc, #44]	; (123c <Print_Menu_Change_H_EAU_MAX+0x34>)
    1210:	480b      	ldr	r0, [pc, #44]	; (1240 <Print_Menu_Change_H_EAU_MAX+0x38>)
    1212:	f7ff f9b9 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M20_L1, TEMPO_SEND);
    1216:	4b0b      	ldr	r3, [pc, #44]	; (1244 <Print_Menu_Change_H_EAU_MAX+0x3c>)
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	2200      	movs	r2, #0
    121c:	4619      	mov	r1, r3
    121e:	4808      	ldr	r0, [pc, #32]	; (1240 <Print_Menu_Change_H_EAU_MAX+0x38>)
    1220:	f7ff f9b2 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M20_L2, TEMPO_SEND);
    1224:	2200      	movs	r2, #0
    1226:	4908      	ldr	r1, [pc, #32]	; (1248 <Print_Menu_Change_H_EAU_MAX+0x40>)
    1228:	4805      	ldr	r0, [pc, #20]	; (1240 <Print_Menu_Change_H_EAU_MAX+0x38>)
    122a:	f7ff f9ad 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M20_L3, TEMPO_SEND);
    122e:	2200      	movs	r2, #0
    1230:	4906      	ldr	r1, [pc, #24]	; (124c <Print_Menu_Change_H_EAU_MAX+0x44>)
    1232:	4803      	ldr	r0, [pc, #12]	; (1240 <Print_Menu_Change_H_EAU_MAX+0x38>)
    1234:	f7ff f9a8 	bl	588 <queue_str_to_send>
}
    1238:	bf00      	nop
    123a:	bd80      	pop	{r7, pc}
    123c:	20000000 	.word	0x20000000
    1240:	40004800 	.word	0x40004800
    1244:	200002a0 	.word	0x200002a0
    1248:	200002a4 	.word	0x200002a4
    124c:	200002d0 	.word	0x200002d0

00001250 <Print_Menu_Change_T_EAU_MAX>:

void Print_Menu_Change_T_EAU_MAX(void){
    1250:	b580      	push	{r7, lr}
    1252:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
    1254:	2200      	movs	r2, #0
    1256:	490b      	ldr	r1, [pc, #44]	; (1284 <Print_Menu_Change_T_EAU_MAX+0x34>)
    1258:	480b      	ldr	r0, [pc, #44]	; (1288 <Print_Menu_Change_T_EAU_MAX+0x38>)
    125a:	f7ff f995 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M21_L1, TEMPO_SEND);
    125e:	4b0b      	ldr	r3, [pc, #44]	; (128c <Print_Menu_Change_T_EAU_MAX+0x3c>)
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	2200      	movs	r2, #0
    1264:	4619      	mov	r1, r3
    1266:	4808      	ldr	r0, [pc, #32]	; (1288 <Print_Menu_Change_T_EAU_MAX+0x38>)
    1268:	f7ff f98e 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M21_L2, TEMPO_SEND);
    126c:	2200      	movs	r2, #0
    126e:	4908      	ldr	r1, [pc, #32]	; (1290 <Print_Menu_Change_T_EAU_MAX+0x40>)
    1270:	4805      	ldr	r0, [pc, #20]	; (1288 <Print_Menu_Change_T_EAU_MAX+0x38>)
    1272:	f7ff f989 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M21_L3, TEMPO_SEND);
    1276:	2200      	movs	r2, #0
    1278:	4906      	ldr	r1, [pc, #24]	; (1294 <Print_Menu_Change_T_EAU_MAX+0x44>)
    127a:	4803      	ldr	r0, [pc, #12]	; (1288 <Print_Menu_Change_T_EAU_MAX+0x38>)
    127c:	f7ff f984 	bl	588 <queue_str_to_send>
}
    1280:	bf00      	nop
    1282:	bd80      	pop	{r7, pc}
    1284:	20000000 	.word	0x20000000
    1288:	40004800 	.word	0x40004800
    128c:	20000300 	.word	0x20000300
    1290:	20000304 	.word	0x20000304
    1294:	20000334 	.word	0x20000334

00001298 <Print_Menu_Change_V_VENT_MAX>:

void Print_Menu_Change_V_VENT_MAX(void){
    1298:	b580      	push	{r7, lr}
    129a:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
    129c:	2200      	movs	r2, #0
    129e:	490b      	ldr	r1, [pc, #44]	; (12cc <Print_Menu_Change_V_VENT_MAX+0x34>)
    12a0:	480b      	ldr	r0, [pc, #44]	; (12d0 <Print_Menu_Change_V_VENT_MAX+0x38>)
    12a2:	f7ff f971 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M22_L1, TEMPO_SEND);
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <Print_Menu_Change_V_VENT_MAX+0x3c>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	2200      	movs	r2, #0
    12ac:	4619      	mov	r1, r3
    12ae:	4808      	ldr	r0, [pc, #32]	; (12d0 <Print_Menu_Change_V_VENT_MAX+0x38>)
    12b0:	f7ff f96a 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M22_L2, TEMPO_SEND);
    12b4:	2200      	movs	r2, #0
    12b6:	4908      	ldr	r1, [pc, #32]	; (12d8 <Print_Menu_Change_V_VENT_MAX+0x40>)
    12b8:	4805      	ldr	r0, [pc, #20]	; (12d0 <Print_Menu_Change_V_VENT_MAX+0x38>)
    12ba:	f7ff f965 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M22_L3, TEMPO_SEND);
    12be:	2200      	movs	r2, #0
    12c0:	4906      	ldr	r1, [pc, #24]	; (12dc <Print_Menu_Change_V_VENT_MAX+0x44>)
    12c2:	4803      	ldr	r0, [pc, #12]	; (12d0 <Print_Menu_Change_V_VENT_MAX+0x38>)
    12c4:	f7ff f960 	bl	588 <queue_str_to_send>
}
    12c8:	bf00      	nop
    12ca:	bd80      	pop	{r7, pc}
    12cc:	20000000 	.word	0x20000000
    12d0:	40004800 	.word	0x40004800
    12d4:	2000036c 	.word	0x2000036c
    12d8:	20000370 	.word	0x20000370
    12dc:	2000039c 	.word	0x2000039c

000012e0 <Print_Menu_Change_T_EAU>:

void Print_Menu_Change_T_EAU(void){
    12e0:	b580      	push	{r7, lr}
    12e2:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
    12e4:	2200      	movs	r2, #0
    12e6:	490b      	ldr	r1, [pc, #44]	; (1314 <Print_Menu_Change_T_EAU+0x34>)
    12e8:	480b      	ldr	r0, [pc, #44]	; (1318 <Print_Menu_Change_T_EAU+0x38>)
    12ea:	f7ff f94d 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M30_L1, TEMPO_SEND);
    12ee:	4b0b      	ldr	r3, [pc, #44]	; (131c <Print_Menu_Change_T_EAU+0x3c>)
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	2200      	movs	r2, #0
    12f4:	4619      	mov	r1, r3
    12f6:	4808      	ldr	r0, [pc, #32]	; (1318 <Print_Menu_Change_T_EAU+0x38>)
    12f8:	f7ff f946 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M30_L2, TEMPO_SEND);
    12fc:	2200      	movs	r2, #0
    12fe:	4908      	ldr	r1, [pc, #32]	; (1320 <Print_Menu_Change_T_EAU+0x40>)
    1300:	4805      	ldr	r0, [pc, #20]	; (1318 <Print_Menu_Change_T_EAU+0x38>)
    1302:	f7ff f941 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M30_L3, TEMPO_SEND);
    1306:	2200      	movs	r2, #0
    1308:	4906      	ldr	r1, [pc, #24]	; (1324 <Print_Menu_Change_T_EAU+0x44>)
    130a:	4803      	ldr	r0, [pc, #12]	; (1318 <Print_Menu_Change_T_EAU+0x38>)
    130c:	f7ff f93c 	bl	588 <queue_str_to_send>
}
    1310:	bf00      	nop
    1312:	bd80      	pop	{r7, pc}
    1314:	20000000 	.word	0x20000000
    1318:	40004800 	.word	0x40004800
    131c:	200003cc 	.word	0x200003cc
    1320:	200003d0 	.word	0x200003d0
    1324:	200003fc 	.word	0x200003fc

00001328 <Print_Menu_Change_V_VENT>:

void Print_Menu_Change_V_VENT(void){
    1328:	b580      	push	{r7, lr}
    132a:	af00      	add	r7, sp, #0
        queue_str_to_send(USART3,g_CLEAR_SCREEN,TEMPO_SEND);
    132c:	2200      	movs	r2, #0
    132e:	490b      	ldr	r1, [pc, #44]	; (135c <Print_Menu_Change_V_VENT+0x34>)
    1330:	480b      	ldr	r0, [pc, #44]	; (1360 <Print_Menu_Change_V_VENT+0x38>)
    1332:	f7ff f929 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M31_L1, TEMPO_SEND);
    1336:	4b0b      	ldr	r3, [pc, #44]	; (1364 <Print_Menu_Change_V_VENT+0x3c>)
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	2200      	movs	r2, #0
    133c:	4619      	mov	r1, r3
    133e:	4808      	ldr	r0, [pc, #32]	; (1360 <Print_Menu_Change_V_VENT+0x38>)
    1340:	f7ff f922 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M31_L2, TEMPO_SEND);
    1344:	2200      	movs	r2, #0
    1346:	4908      	ldr	r1, [pc, #32]	; (1368 <Print_Menu_Change_V_VENT+0x40>)
    1348:	4805      	ldr	r0, [pc, #20]	; (1360 <Print_Menu_Change_V_VENT+0x38>)
    134a:	f7ff f91d 	bl	588 <queue_str_to_send>
        queue_str_to_send(USART3,g_M31_L3, TEMPO_SEND);
    134e:	2200      	movs	r2, #0
    1350:	4906      	ldr	r1, [pc, #24]	; (136c <Print_Menu_Change_V_VENT+0x44>)
    1352:	4803      	ldr	r0, [pc, #12]	; (1360 <Print_Menu_Change_V_VENT+0x38>)
    1354:	f7ff f918 	bl	588 <queue_str_to_send>
}
    1358:	bf00      	nop
    135a:	bd80      	pop	{r7, pc}
    135c:	20000000 	.word	0x20000000
    1360:	40004800 	.word	0x40004800
    1364:	20000420 	.word	0x20000420
    1368:	20000424 	.word	0x20000424
    136c:	2000044c 	.word	0x2000044c

00001370 <serial_readwrite_task>:

void serial_readwrite_task( void *pvParameters )
{
    1370:	b580      	push	{r7, lr}
    1372:	b092      	sub	sp, #72	; 0x48
    1374:	af00      	add	r7, sp, #0
    1376:	6078      	str	r0, [r7, #4]
    char ch;
    int curr_char;
    int done;

    /* Prepare the response message to be queued. */
     if (g_e_Menu_Current == E_MENU_PRINCIPAL) {
    1378:	4b48      	ldr	r3, [pc, #288]	; (149c <serial_readwrite_task+0x12c>)
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	2b00      	cmp	r3, #0
    137e:	d101      	bne.n	1384 <serial_readwrite_task+0x14>
	Print_Menu_Main();
    1380:	f7ff fcb8 	bl	cf4 <Print_Menu_Main>
    }
    while(1) {
        curr_char = 0;
    1384:	2300      	movs	r3, #0
    1386:	647b      	str	r3, [r7, #68]	; 0x44
        done = 0;
    1388:	2300      	movs	r3, #0
    138a:	643b      	str	r3, [r7, #64]	; 0x40
        do {

            /* Receive a byte from the RS232 port (this call will block). */
            ch = receive_byte_rtos();
    138c:	f7ff f852 	bl	434 <receive_byte_rtos>
    1390:	4603      	mov	r3, r0
    1392:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

            /* If the byte is an end-of-line type character, then finish the
             * string and indicate we are done.
             */
            if((ch == '\r') || (ch == '\n')) {
    1396:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    139a:	2b0d      	cmp	r3, #13
    139c:	d003      	beq.n	13a6 <serial_readwrite_task+0x36>
    139e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    13a2:	2b0a      	cmp	r3, #10
    13a4:	d125      	bne.n	13f2 <serial_readwrite_task+0x82>
		msg.str[curr_char] = curr_char+'0';                
    13a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13a8:	b2db      	uxtb	r3, r3
    13aa:	3330      	adds	r3, #48	; 0x30
    13ac:	b2d9      	uxtb	r1, r3
    13ae:	f107 020c 	add.w	r2, r7, #12
    13b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13b4:	4413      	add	r3, r2
    13b6:	460a      	mov	r2, r1
    13b8:	701a      	strb	r2, [r3, #0]
		msg.str[curr_char+1] = '\n';
    13ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13bc:	3301      	adds	r3, #1
    13be:	f107 0248 	add.w	r2, r7, #72	; 0x48
    13c2:	4413      	add	r3, r2
    13c4:	220a      	movs	r2, #10
    13c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
		msg.str[curr_char+2] = '\r';
    13ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13cc:	3302      	adds	r3, #2
    13ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
    13d2:	4413      	add	r3, r2
    13d4:	220d      	movs	r2, #13
    13d6:	f803 2c3c 	strb.w	r2, [r3, #-60]
                msg.str[curr_char+3] = '\0';
    13da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13dc:	3303      	adds	r3, #3
    13de:	f107 0248 	add.w	r2, r7, #72	; 0x48
    13e2:	4413      	add	r3, r2
    13e4:	2200      	movs	r2, #0
    13e6:	f803 2c3c 	strb.w	r2, [r3, #-60]
                done = -1;
    13ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13ee:	643b      	str	r3, [r7, #64]	; 0x40
    13f0:	e009      	b.n	1406 <serial_readwrite_task+0x96>

            /* Otherwise, add the character to the response string. */
            } else {
                msg.str[curr_char++] = ch;
    13f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13f4:	1c5a      	adds	r2, r3, #1
    13f6:	647a      	str	r2, [r7, #68]	; 0x44
    13f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
    13fc:	4413      	add	r3, r2
    13fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
    1402:	f803 2c3c 	strb.w	r2, [r3, #-60]
            }
        } while(!done);
    1406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1408:	2b00      	cmp	r3, #0
    140a:	d0bf      	beq.n	138c <serial_readwrite_task+0x1c>

        /* Once we are done building the response string, queue the response to
         * be sent to the RS232 port.
         */
        while(!xQueueSendToBack(serial_str_queue_3, &msg, portMAX_DELAY));
    140c:	bf00      	nop
    140e:	4b24      	ldr	r3, [pc, #144]	; (14a0 <serial_readwrite_task+0x130>)
    1410:	6818      	ldr	r0, [r3, #0]
    1412:	f107 010c 	add.w	r1, r7, #12
    1416:	2300      	movs	r3, #0
    1418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    141c:	f005 ff47 	bl	72ae <xQueueGenericSend>
    1420:	4603      	mov	r3, r0
    1422:	2b00      	cmp	r3, #0
    1424:	d0f3      	beq.n	140e <serial_readwrite_task+0x9e>

        /* Wait. */
        vTaskDelay(100);
    1426:	2064      	movs	r0, #100	; 0x64
    1428:	f006 fea4 	bl	8174 <vTaskDelay>

	/* Handle received command */
	Handle_Cmd(msg.str);
    142c:	f107 030c 	add.w	r3, r7, #12
    1430:	4618      	mov	r0, r3
    1432:	f7ff fa35 	bl	8a0 <Handle_Cmd>

	/* Afficher le menu */
        if (g_e_Menu_Current == E_MENU_PRINCIPAL) {
    1436:	4b19      	ldr	r3, [pc, #100]	; (149c <serial_readwrite_task+0x12c>)
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	2b00      	cmp	r3, #0
    143c:	d102      	bne.n	1444 <serial_readwrite_task+0xd4>
	    Print_Menu_Main();
    143e:	f7ff fc59 	bl	cf4 <Print_Menu_Main>
    1442:	e79f      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_SHOW_VALUE ) {
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <serial_readwrite_task+0x12c>)
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	2b3c      	cmp	r3, #60	; 0x3c
    144a:	d102      	bne.n	1452 <serial_readwrite_task+0xe2>
	    Print_Menu_Value();
    144c:	f7ff fcdc 	bl	e08 <Print_Menu_Value>
    1450:	e798      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_CHANGE_H_EAU_MAX ) {
    1452:	4b12      	ldr	r3, [pc, #72]	; (149c <serial_readwrite_task+0x12c>)
    1454:	781b      	ldrb	r3, [r3, #0]
    1456:	2b14      	cmp	r3, #20
    1458:	d102      	bne.n	1460 <serial_readwrite_task+0xf0>
	    Print_Menu_Change_H_EAU_MAX();
    145a:	f7ff fed5 	bl	1208 <Print_Menu_Change_H_EAU_MAX>
    145e:	e791      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_CHANGE_T_EAU_MAX ) {
    1460:	4b0e      	ldr	r3, [pc, #56]	; (149c <serial_readwrite_task+0x12c>)
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	2b15      	cmp	r3, #21
    1466:	d102      	bne.n	146e <serial_readwrite_task+0xfe>
	    Print_Menu_Change_T_EAU_MAX();
    1468:	f7ff fef2 	bl	1250 <Print_Menu_Change_T_EAU_MAX>
    146c:	e78a      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_CHANGE_V_VENT_MAX ) {
    146e:	4b0b      	ldr	r3, [pc, #44]	; (149c <serial_readwrite_task+0x12c>)
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	2b16      	cmp	r3, #22
    1474:	d102      	bne.n	147c <serial_readwrite_task+0x10c>
	    Print_Menu_Change_V_VENT_MAX();
    1476:	f7ff ff0f 	bl	1298 <Print_Menu_Change_V_VENT_MAX>
    147a:	e783      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_CHANGE_T_EAU ) {
    147c:	4b07      	ldr	r3, [pc, #28]	; (149c <serial_readwrite_task+0x12c>)
    147e:	781b      	ldrb	r3, [r3, #0]
    1480:	2b1e      	cmp	r3, #30
    1482:	d102      	bne.n	148a <serial_readwrite_task+0x11a>
	    Print_Menu_Change_T_EAU();
    1484:	f7ff ff2c 	bl	12e0 <Print_Menu_Change_T_EAU>
    1488:	e77c      	b.n	1384 <serial_readwrite_task+0x14>
        }
        else if (g_e_Menu_Current == E_MENU_CHANGE_V_VENT ) {
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <serial_readwrite_task+0x12c>)
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	2b1f      	cmp	r3, #31
    1490:	f47f af78 	bne.w	1384 <serial_readwrite_task+0x14>
	    Print_Menu_Change_V_VENT();
    1494:	f7ff ff48 	bl	1328 <Print_Menu_Change_V_VENT>
        curr_char = 0;
    1498:	e774      	b.n	1384 <serial_readwrite_task+0x14>
    149a:	bf00      	nop
    149c:	200048c9 	.word	0x200048c9
    14a0:	200048ac 	.word	0x200048ac

000014a4 <main>:
        }
    }
}

int main(void)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af02      	add	r7, sp, #8
    init_led();
    14aa:	f000 fb51 	bl	1b50 <init_led>

    init_button();
    14ae:	f000 fb6f 	bl	1b90 <init_button>
    enable_button_interrupts();
    14b2:	f000 fb85 	bl	1bc0 <enable_button_interrupts>

    init_rs232();
    14b6:	f000 fbab 	bl	1c10 <init_rs232>
    enable_rs232_interrupts();
    14ba:	f000 fc4d 	bl	1d58 <enable_rs232_interrupts>
    enable_rs232();
    14be:	f000 fc9b 	bl	1df8 <enable_rs232>


    /* Create the queue to hold messages to be written to the RS232. */
    serial_str_queue_1 = xQueueCreate( 10, sizeof( serial_str_msg ) );
    14c2:	2200      	movs	r2, #0
    14c4:	2132      	movs	r1, #50	; 0x32
    14c6:	200a      	movs	r0, #10
    14c8:	f005 fe74 	bl	71b4 <xQueueGenericCreate>
    14cc:	4602      	mov	r2, r0
    14ce:	4b5b      	ldr	r3, [pc, #364]	; (163c <main+0x198>)
    14d0:	601a      	str	r2, [r3, #0]
    vSemaphoreCreateBinary(serial_tx_wait_sem_1);
    14d2:	2203      	movs	r2, #3
    14d4:	2100      	movs	r1, #0
    14d6:	2001      	movs	r0, #1
    14d8:	f005 fe6c 	bl	71b4 <xQueueGenericCreate>
    14dc:	4602      	mov	r2, r0
    14de:	4b58      	ldr	r3, [pc, #352]	; (1640 <main+0x19c>)
    14e0:	601a      	str	r2, [r3, #0]
    14e2:	4b57      	ldr	r3, [pc, #348]	; (1640 <main+0x19c>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d006      	beq.n	14f8 <main+0x54>
    14ea:	4b55      	ldr	r3, [pc, #340]	; (1640 <main+0x19c>)
    14ec:	6818      	ldr	r0, [r3, #0]
    14ee:	2300      	movs	r3, #0
    14f0:	2200      	movs	r2, #0
    14f2:	2100      	movs	r1, #0
    14f4:	f005 fedb 	bl	72ae <xQueueGenericSend>
    serial_rx_queue_1 = xQueueCreate( 1, sizeof( serial_ch_msg ) );
    14f8:	2200      	movs	r2, #0
    14fa:	2101      	movs	r1, #1
    14fc:	2001      	movs	r0, #1
    14fe:	f005 fe59 	bl	71b4 <xQueueGenericCreate>
    1502:	4602      	mov	r2, r0
    1504:	4b4f      	ldr	r3, [pc, #316]	; (1644 <main+0x1a0>)
    1506:	601a      	str	r2, [r3, #0]
    /* Create the queue to hold messages to be written to the RS232. */
    serial_str_queue_2 = xQueueCreate( 10, sizeof( serial_str_msg ) );
    1508:	2200      	movs	r2, #0
    150a:	2132      	movs	r1, #50	; 0x32
    150c:	200a      	movs	r0, #10
    150e:	f005 fe51 	bl	71b4 <xQueueGenericCreate>
    1512:	4602      	mov	r2, r0
    1514:	4b4c      	ldr	r3, [pc, #304]	; (1648 <main+0x1a4>)
    1516:	601a      	str	r2, [r3, #0]
    vSemaphoreCreateBinary(serial_tx_wait_sem_2);
    1518:	2203      	movs	r2, #3
    151a:	2100      	movs	r1, #0
    151c:	2001      	movs	r0, #1
    151e:	f005 fe49 	bl	71b4 <xQueueGenericCreate>
    1522:	4602      	mov	r2, r0
    1524:	4b49      	ldr	r3, [pc, #292]	; (164c <main+0x1a8>)
    1526:	601a      	str	r2, [r3, #0]
    1528:	4b48      	ldr	r3, [pc, #288]	; (164c <main+0x1a8>)
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d006      	beq.n	153e <main+0x9a>
    1530:	4b46      	ldr	r3, [pc, #280]	; (164c <main+0x1a8>)
    1532:	6818      	ldr	r0, [r3, #0]
    1534:	2300      	movs	r3, #0
    1536:	2200      	movs	r2, #0
    1538:	2100      	movs	r1, #0
    153a:	f005 feb8 	bl	72ae <xQueueGenericSend>
    serial_rx_queue_2 = xQueueCreate( 1, sizeof( serial_ch_msg ) );
    153e:	2200      	movs	r2, #0
    1540:	2101      	movs	r1, #1
    1542:	2001      	movs	r0, #1
    1544:	f005 fe36 	bl	71b4 <xQueueGenericCreate>
    1548:	4602      	mov	r2, r0
    154a:	4b41      	ldr	r3, [pc, #260]	; (1650 <main+0x1ac>)
    154c:	601a      	str	r2, [r3, #0]
   /* Create the queue to hold messages to be written to the RS232. */
    serial_str_queue_3 = xQueueCreate( 20, sizeof( serial_str_msg ) );
    154e:	2200      	movs	r2, #0
    1550:	2132      	movs	r1, #50	; 0x32
    1552:	2014      	movs	r0, #20
    1554:	f005 fe2e 	bl	71b4 <xQueueGenericCreate>
    1558:	4602      	mov	r2, r0
    155a:	4b3e      	ldr	r3, [pc, #248]	; (1654 <main+0x1b0>)
    155c:	601a      	str	r2, [r3, #0]
    vSemaphoreCreateBinary(serial_tx_wait_sem_3);
    155e:	2203      	movs	r2, #3
    1560:	2100      	movs	r1, #0
    1562:	2001      	movs	r0, #1
    1564:	f005 fe26 	bl	71b4 <xQueueGenericCreate>
    1568:	4602      	mov	r2, r0
    156a:	4b3b      	ldr	r3, [pc, #236]	; (1658 <main+0x1b4>)
    156c:	601a      	str	r2, [r3, #0]
    156e:	4b3a      	ldr	r3, [pc, #232]	; (1658 <main+0x1b4>)
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	2b00      	cmp	r3, #0
    1574:	d006      	beq.n	1584 <main+0xe0>
    1576:	4b38      	ldr	r3, [pc, #224]	; (1658 <main+0x1b4>)
    1578:	6818      	ldr	r0, [r3, #0]
    157a:	2300      	movs	r3, #0
    157c:	2200      	movs	r2, #0
    157e:	2100      	movs	r1, #0
    1580:	f005 fe95 	bl	72ae <xQueueGenericSend>
    serial_rx_queue_3 = xQueueCreate( 1, sizeof( serial_ch_msg ) );
    1584:	2200      	movs	r2, #0
    1586:	2101      	movs	r1, #1
    1588:	2001      	movs	r0, #1
    158a:	f005 fe13 	bl	71b4 <xQueueGenericCreate>
    158e:	4602      	mov	r2, r0
    1590:	4b32      	ldr	r3, [pc, #200]	; (165c <main+0x1b8>)
    1592:	601a      	str	r2, [r3, #0]

    /* Create a task to flash the LED. */
    xTaskCreate( led_flash_task, ( signed portCHAR * ) "LED Flash", 256/* stack size */, NULL, tskIDLE_PRIORITY + 5, NULL );
    1594:	2300      	movs	r3, #0
    1596:	9301      	str	r3, [sp, #4]
    1598:	2305      	movs	r3, #5
    159a:	9300      	str	r3, [sp, #0]
    159c:	2300      	movs	r3, #0
    159e:	f44f 7280 	mov.w	r2, #256	; 0x100
    15a2:	492f      	ldr	r1, [pc, #188]	; (1660 <main+0x1bc>)
    15a4:	482f      	ldr	r0, [pc, #188]	; (1664 <main+0x1c0>)
    15a6:	f006 fbfd 	bl	7da4 <xTaskCreate>

    /* Create tasks to queue a string to be written to the RS232 port. */
    xTaskCreate( queue_str_task1, ( signed portCHAR * ) "Serial Write 1", 256 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
    15aa:	2300      	movs	r3, #0
    15ac:	9301      	str	r3, [sp, #4]
    15ae:	230a      	movs	r3, #10
    15b0:	9300      	str	r3, [sp, #0]
    15b2:	2300      	movs	r3, #0
    15b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    15b8:	492b      	ldr	r1, [pc, #172]	; (1668 <main+0x1c4>)
    15ba:	482c      	ldr	r0, [pc, #176]	; (166c <main+0x1c8>)
    15bc:	f006 fbf2 	bl	7da4 <xTaskCreate>
    xTaskCreate( queue_str_task2, ( signed portCHAR * ) "Serial Write 2", 256 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
    15c0:	2300      	movs	r3, #0
    15c2:	9301      	str	r3, [sp, #4]
    15c4:	230a      	movs	r3, #10
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	2300      	movs	r3, #0
    15ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    15ce:	4928      	ldr	r1, [pc, #160]	; (1670 <main+0x1cc>)
    15d0:	4828      	ldr	r0, [pc, #160]	; (1674 <main+0x1d0>)
    15d2:	f006 fbe7 	bl	7da4 <xTaskCreate>

    /* Create a task to write messages from the queue to the RS232 port. */
    xTaskCreate(rs232_xmit_msg_task_1, ( signed portCHAR * ) "Serial Xmit Str 1", 256 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL );
    15d6:	2300      	movs	r3, #0
    15d8:	9301      	str	r3, [sp, #4]
    15da:	2302      	movs	r3, #2
    15dc:	9300      	str	r3, [sp, #0]
    15de:	2300      	movs	r3, #0
    15e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    15e4:	4924      	ldr	r1, [pc, #144]	; (1678 <main+0x1d4>)
    15e6:	4825      	ldr	r0, [pc, #148]	; (167c <main+0x1d8>)
    15e8:	f006 fbdc 	bl	7da4 <xTaskCreate>
    /* Create a task to write messages from the queue to the RS232 port. */
    xTaskCreate(rs232_xmit_msg_task_2, ( signed portCHAR * ) "Serial Xmit Str 1", 256 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL );
    15ec:	2300      	movs	r3, #0
    15ee:	9301      	str	r3, [sp, #4]
    15f0:	2302      	movs	r3, #2
    15f2:	9300      	str	r3, [sp, #0]
    15f4:	2300      	movs	r3, #0
    15f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    15fa:	491f      	ldr	r1, [pc, #124]	; (1678 <main+0x1d4>)
    15fc:	4820      	ldr	r0, [pc, #128]	; (1680 <main+0x1dc>)
    15fe:	f006 fbd1 	bl	7da4 <xTaskCreate>
    /* Create a task to write messages from the queue to the RS232 port. */
    xTaskCreate(rs232_xmit_msg_task_3, ( signed portCHAR * ) "Serial Xmit Str 1", 256 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL );
    1602:	2300      	movs	r3, #0
    1604:	9301      	str	r3, [sp, #4]
    1606:	2302      	movs	r3, #2
    1608:	9300      	str	r3, [sp, #0]
    160a:	2300      	movs	r3, #0
    160c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1610:	4919      	ldr	r1, [pc, #100]	; (1678 <main+0x1d4>)
    1612:	481c      	ldr	r0, [pc, #112]	; (1684 <main+0x1e0>)
    1614:	f006 fbc6 	bl	7da4 <xTaskCreate>

    /* Create a task to receive characters from the RS232 port and echo them back to the RS232 port. */
    xTaskCreate(serial_readwrite_task, ( signed portCHAR * ) "Serial Read/Write", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
    1618:	2300      	movs	r3, #0
    161a:	9301      	str	r3, [sp, #4]
    161c:	230a      	movs	r3, #10
    161e:	9300      	str	r3, [sp, #0]
    1620:	2300      	movs	r3, #0
    1622:	f44f 7200 	mov.w	r2, #512	; 0x200
    1626:	4918      	ldr	r1, [pc, #96]	; (1688 <main+0x1e4>)
    1628:	4818      	ldr	r0, [pc, #96]	; (168c <main+0x1e8>)
    162a:	f006 fbbb 	bl	7da4 <xTaskCreate>



    /* Start running the tasks. */
    vTaskStartScheduler();
    162e:	f007 f807 	bl	8640 <vTaskStartScheduler>

    return 0;
    1632:	2300      	movs	r3, #0
}
    1634:	4618      	mov	r0, r3
    1636:	46bd      	mov	sp, r7
    1638:	bd80      	pop	{r7, pc}
    163a:	bf00      	nop
    163c:	200048a4 	.word	0x200048a4
    1640:	200048b0 	.word	0x200048b0
    1644:	200048bc 	.word	0x200048bc
    1648:	200048a8 	.word	0x200048a8
    164c:	200048b4 	.word	0x200048b4
    1650:	200048c0 	.word	0x200048c0
    1654:	200048ac 	.word	0x200048ac
    1658:	200048b8 	.word	0x200048b8
    165c:	200048c4 	.word	0x200048c4
    1660:	0000a77c 	.word	0x0000a77c
    1664:	00000461 	.word	0x00000461
    1668:	0000a788 	.word	0x0000a788
    166c:	00000619 	.word	0x00000619
    1670:	0000a798 	.word	0x0000a798
    1674:	00000705 	.word	0x00000705
    1678:	0000a7a8 	.word	0x0000a7a8
    167c:	00000481 	.word	0x00000481
    1680:	000004d9 	.word	0x000004d9
    1684:	00000531 	.word	0x00000531
    1688:	0000a7bc 	.word	0x0000a7bc
    168c:	00001371 	.word	0x00001371

00001690 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
    1690:	b480      	push	{r7}
    1692:	af00      	add	r7, sp, #0
}
    1694:	bf00      	nop
    1696:	46bd      	mov	sp, r7
    1698:	bc80      	pop	{r7}
    169a:	4770      	bx	lr

0000169c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
    169c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
    169e:	f3ef 8309 	mrs	r3, PSP
    16a2:	4618      	mov	r0, r3
    16a4:	4770      	bx	lr
    16a6:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
    16a8:	4623      	mov	r3, r4
}
    16aa:	4618      	mov	r0, r3

000016ac <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
    16ac:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
    16ae:	f383 8809 	msr	PSP, r3
    16b2:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
}
    16b4:	bf00      	nop

000016b6 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
    16b6:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
    16b8:	f3ef 8308 	mrs	r3, MSP
    16bc:	4618      	mov	r0, r3
    16be:	4770      	bx	lr
    16c0:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
    16c2:	4623      	mov	r3, r4
}
    16c4:	4618      	mov	r0, r3

000016c6 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
    16c6:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
    16c8:	f383 8808 	msr	MSP, r3
    16cc:	4770      	bx	lr
                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
}
    16ce:	bf00      	nop

000016d0 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
    16d0:	b480      	push	{r7}
    16d2:	b083      	sub	sp, #12
    16d4:	af00      	add	r7, sp, #0
  uint32_t result=0;
    16d6:	2300      	movs	r3, #0
    16d8:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
    16da:	f3ef 8312 	mrs	r3, BASEPRI_MAX
    16de:	607b      	str	r3, [r7, #4]
  return(result);
    16e0:	687b      	ldr	r3, [r7, #4]
}
    16e2:	4618      	mov	r0, r3
    16e4:	370c      	adds	r7, #12
    16e6:	46bd      	mov	sp, r7
    16e8:	bc80      	pop	{r7}
    16ea:	4770      	bx	lr

000016ec <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
    16ec:	b480      	push	{r7}
    16ee:	b083      	sub	sp, #12
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	f383 8811 	msr	BASEPRI, r3
}
    16fa:	bf00      	nop
    16fc:	370c      	adds	r7, #12
    16fe:	46bd      	mov	sp, r7
    1700:	bc80      	pop	{r7}
    1702:	4770      	bx	lr

00001704 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
    1704:	b480      	push	{r7}
    1706:	b083      	sub	sp, #12
    1708:	af00      	add	r7, sp, #0
  uint32_t result=0;
    170a:	2300      	movs	r3, #0
    170c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    170e:	f3ef 8310 	mrs	r3, PRIMASK
    1712:	607b      	str	r3, [r7, #4]
  return(result);
    1714:	687b      	ldr	r3, [r7, #4]
}
    1716:	4618      	mov	r0, r3
    1718:	370c      	adds	r7, #12
    171a:	46bd      	mov	sp, r7
    171c:	bc80      	pop	{r7}
    171e:	4770      	bx	lr

00001720 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
    1720:	b480      	push	{r7}
    1722:	b083      	sub	sp, #12
    1724:	af00      	add	r7, sp, #0
    1726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	f383 8810 	msr	PRIMASK, r3
}
    172e:	bf00      	nop
    1730:	370c      	adds	r7, #12
    1732:	46bd      	mov	sp, r7
    1734:	bc80      	pop	{r7}
    1736:	4770      	bx	lr

00001738 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
    1738:	b480      	push	{r7}
    173a:	b083      	sub	sp, #12
    173c:	af00      	add	r7, sp, #0
  uint32_t result=0;
    173e:	2300      	movs	r3, #0
    1740:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
    1742:	f3ef 8313 	mrs	r3, FAULTMASK
    1746:	607b      	str	r3, [r7, #4]
  return(result);
    1748:	687b      	ldr	r3, [r7, #4]
}
    174a:	4618      	mov	r0, r3
    174c:	370c      	adds	r7, #12
    174e:	46bd      	mov	sp, r7
    1750:	bc80      	pop	{r7}
    1752:	4770      	bx	lr

00001754 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
    1754:	b480      	push	{r7}
    1756:	b083      	sub	sp, #12
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	f383 8813 	msr	FAULTMASK, r3
}
    1762:	bf00      	nop
    1764:	370c      	adds	r7, #12
    1766:	46bd      	mov	sp, r7
    1768:	bc80      	pop	{r7}
    176a:	4770      	bx	lr

0000176c <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
    176c:	b480      	push	{r7}
    176e:	b083      	sub	sp, #12
    1770:	af00      	add	r7, sp, #0
  uint32_t result=0;
    1772:	2300      	movs	r3, #0
    1774:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1776:	f3ef 8314 	mrs	r3, CONTROL
    177a:	607b      	str	r3, [r7, #4]
  return(result);
    177c:	687b      	ldr	r3, [r7, #4]
}
    177e:	4618      	mov	r0, r3
    1780:	370c      	adds	r7, #12
    1782:	46bd      	mov	sp, r7
    1784:	bc80      	pop	{r7}
    1786:	4770      	bx	lr

00001788 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
    1788:	b480      	push	{r7}
    178a:	b083      	sub	sp, #12
    178c:	af00      	add	r7, sp, #0
    178e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	f383 8814 	msr	CONTROL, r3
}
    1796:	bf00      	nop
    1798:	370c      	adds	r7, #12
    179a:	46bd      	mov	sp, r7
    179c:	bc80      	pop	{r7}
    179e:	4770      	bx	lr

000017a0 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
    17a0:	b480      	push	{r7}
    17a2:	b085      	sub	sp, #20
    17a4:	af00      	add	r7, sp, #0
    17a6:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
    17a8:	2300      	movs	r3, #0
    17aa:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	ba1b      	rev	r3, r3
    17b0:	60fb      	str	r3, [r7, #12]
  return(result);
    17b2:	68fb      	ldr	r3, [r7, #12]
}
    17b4:	4618      	mov	r0, r3
    17b6:	3714      	adds	r7, #20
    17b8:	46bd      	mov	sp, r7
    17ba:	bc80      	pop	{r7}
    17bc:	4770      	bx	lr

000017be <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
    17be:	b480      	push	{r7}
    17c0:	b085      	sub	sp, #20
    17c2:	af00      	add	r7, sp, #0
    17c4:	4603      	mov	r3, r0
    17c6:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
    17c8:	2300      	movs	r3, #0
    17ca:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
    17cc:	88fb      	ldrh	r3, [r7, #6]
    17ce:	ba5b      	rev16	r3, r3
    17d0:	60fb      	str	r3, [r7, #12]
  return(result);
    17d2:	68fb      	ldr	r3, [r7, #12]
}
    17d4:	4618      	mov	r0, r3
    17d6:	3714      	adds	r7, #20
    17d8:	46bd      	mov	sp, r7
    17da:	bc80      	pop	{r7}
    17dc:	4770      	bx	lr

000017de <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
    17de:	b480      	push	{r7}
    17e0:	b085      	sub	sp, #20
    17e2:	af00      	add	r7, sp, #0
    17e4:	4603      	mov	r3, r0
    17e6:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
    17e8:	2300      	movs	r3, #0
    17ea:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
    17ec:	88fb      	ldrh	r3, [r7, #6]
    17ee:	badb      	revsh	r3, r3
    17f0:	60fb      	str	r3, [r7, #12]
  return(result);
    17f2:	68fb      	ldr	r3, [r7, #12]
}
    17f4:	4618      	mov	r0, r3
    17f6:	3714      	adds	r7, #20
    17f8:	46bd      	mov	sp, r7
    17fa:	bc80      	pop	{r7}
    17fc:	4770      	bx	lr

000017fe <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
    17fe:	b480      	push	{r7}
    1800:	b085      	sub	sp, #20
    1802:	af00      	add	r7, sp, #0
    1804:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
    1806:	2300      	movs	r3, #0
    1808:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    180a:	687b      	ldr	r3, [r7, #4]
    180c:	fa93 f3a3 	rbit	r3, r3
    1810:	60fb      	str	r3, [r7, #12]
   return(result);
    1812:	68fb      	ldr	r3, [r7, #12]
}
    1814:	4618      	mov	r0, r3
    1816:	3714      	adds	r7, #20
    1818:	46bd      	mov	sp, r7
    181a:	bc80      	pop	{r7}
    181c:	4770      	bx	lr

0000181e <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
    181e:	b480      	push	{r7}
    1820:	b085      	sub	sp, #20
    1822:	af00      	add	r7, sp, #0
    1824:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
    1826:	2300      	movs	r3, #0
    1828:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	e8d3 3f4f 	ldrexb	r3, [r3]
    1830:	73fb      	strb	r3, [r7, #15]
   return(result);
    1832:	7bfb      	ldrb	r3, [r7, #15]
}
    1834:	4618      	mov	r0, r3
    1836:	3714      	adds	r7, #20
    1838:	46bd      	mov	sp, r7
    183a:	bc80      	pop	{r7}
    183c:	4770      	bx	lr

0000183e <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
    183e:	b480      	push	{r7}
    1840:	b085      	sub	sp, #20
    1842:	af00      	add	r7, sp, #0
    1844:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
    1846:	2300      	movs	r3, #0
    1848:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	e8d3 3f5f 	ldrexh	r3, [r3]
    1850:	81fb      	strh	r3, [r7, #14]
   return(result);
    1852:	89fb      	ldrh	r3, [r7, #14]
}
    1854:	4618      	mov	r0, r3
    1856:	3714      	adds	r7, #20
    1858:	46bd      	mov	sp, r7
    185a:	bc80      	pop	{r7}
    185c:	4770      	bx	lr

0000185e <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
    185e:	b480      	push	{r7}
    1860:	b085      	sub	sp, #20
    1862:	af00      	add	r7, sp, #0
    1864:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
    1866:	2300      	movs	r3, #0
    1868:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	e853 3f00 	ldrex	r3, [r3]
    1870:	60fb      	str	r3, [r7, #12]
   return(result);
    1872:	68fb      	ldr	r3, [r7, #12]
}
    1874:	4618      	mov	r0, r3
    1876:	3714      	adds	r7, #20
    1878:	46bd      	mov	sp, r7
    187a:	bc80      	pop	{r7}
    187c:	4770      	bx	lr

0000187e <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
    187e:	b480      	push	{r7}
    1880:	b085      	sub	sp, #20
    1882:	af00      	add	r7, sp, #0
    1884:	4603      	mov	r3, r0
    1886:	6039      	str	r1, [r7, #0]
    1888:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
    188a:	2300      	movs	r3, #0
    188c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    188e:	683a      	ldr	r2, [r7, #0]
    1890:	79f9      	ldrb	r1, [r7, #7]
    1892:	e8c2 1f43 	strexb	r3, r1, [r2]
    1896:	60fb      	str	r3, [r7, #12]
   return(result);
    1898:	68fb      	ldr	r3, [r7, #12]
}
    189a:	4618      	mov	r0, r3
    189c:	3714      	adds	r7, #20
    189e:	46bd      	mov	sp, r7
    18a0:	bc80      	pop	{r7}
    18a2:	4770      	bx	lr

000018a4 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	4603      	mov	r3, r0
    18ac:	6039      	str	r1, [r7, #0]
    18ae:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
    18b0:	2300      	movs	r3, #0
    18b2:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    18b4:	683a      	ldr	r2, [r7, #0]
    18b6:	88f9      	ldrh	r1, [r7, #6]
    18b8:	e8c2 1f53 	strexh	r3, r1, [r2]
    18bc:	60fb      	str	r3, [r7, #12]
   return(result);
    18be:	68fb      	ldr	r3, [r7, #12]
}
    18c0:	4618      	mov	r0, r3
    18c2:	3714      	adds	r7, #20
    18c4:	46bd      	mov	sp, r7
    18c6:	bc80      	pop	{r7}
    18c8:	4770      	bx	lr

000018ca <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
    18ca:	b480      	push	{r7}
    18cc:	b085      	sub	sp, #20
    18ce:	af00      	add	r7, sp, #0
    18d0:	6078      	str	r0, [r7, #4]
    18d2:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
    18d4:	2300      	movs	r3, #0
    18d6:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
    18d8:	683b      	ldr	r3, [r7, #0]
    18da:	687a      	ldr	r2, [r7, #4]
    18dc:	e843 2300 	strex	r3, r2, [r3]
    18e0:	60fb      	str	r3, [r7, #12]
   return(result);
    18e2:	68fb      	ldr	r3, [r7, #12]
}
    18e4:	4618      	mov	r0, r3
    18e6:	3714      	adds	r7, #20
    18e8:	46bd      	mov	sp, r7
    18ea:	bc80      	pop	{r7}
    18ec:	4770      	bx	lr
	...

000018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    18f4:	4b15      	ldr	r3, [pc, #84]	; (194c <SystemInit+0x5c>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	4a14      	ldr	r2, [pc, #80]	; (194c <SystemInit+0x5c>)
    18fa:	f043 0301 	orr.w	r3, r3, #1
    18fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    1900:	4b12      	ldr	r3, [pc, #72]	; (194c <SystemInit+0x5c>)
    1902:	685a      	ldr	r2, [r3, #4]
    1904:	4911      	ldr	r1, [pc, #68]	; (194c <SystemInit+0x5c>)
    1906:	4b12      	ldr	r3, [pc, #72]	; (1950 <SystemInit+0x60>)
    1908:	4013      	ands	r3, r2
    190a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    190c:	4b0f      	ldr	r3, [pc, #60]	; (194c <SystemInit+0x5c>)
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	4a0e      	ldr	r2, [pc, #56]	; (194c <SystemInit+0x5c>)
    1912:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    191a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    191c:	4b0b      	ldr	r3, [pc, #44]	; (194c <SystemInit+0x5c>)
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	4a0a      	ldr	r2, [pc, #40]	; (194c <SystemInit+0x5c>)
    1922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1926:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1928:	4b08      	ldr	r3, [pc, #32]	; (194c <SystemInit+0x5c>)
    192a:	685b      	ldr	r3, [r3, #4]
    192c:	4a07      	ldr	r2, [pc, #28]	; (194c <SystemInit+0x5c>)
    192e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1932:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <SystemInit+0x5c>)
    1936:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    193a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
    193c:	f000 f878 	bl	1a30 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <SystemInit+0x64>)
    1942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1946:	609a      	str	r2, [r3, #8]
#endif 
}
    1948:	bf00      	nop
    194a:	bd80      	pop	{r7, pc}
    194c:	40021000 	.word	0x40021000
    1950:	f8ff0000 	.word	0xf8ff0000
    1954:	e000ed00 	.word	0xe000ed00

00001958 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
    1958:	b480      	push	{r7}
    195a:	b085      	sub	sp, #20
    195c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
    195e:	2300      	movs	r3, #0
    1960:	60fb      	str	r3, [r7, #12]
    1962:	2300      	movs	r3, #0
    1964:	60bb      	str	r3, [r7, #8]
    1966:	2300      	movs	r3, #0
    1968:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
    196a:	4b2c      	ldr	r3, [pc, #176]	; (1a1c <SystemCoreClockUpdate+0xc4>)
    196c:	685b      	ldr	r3, [r3, #4]
    196e:	f003 030c 	and.w	r3, r3, #12
    1972:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
    1974:	68fb      	ldr	r3, [r7, #12]
    1976:	2b04      	cmp	r3, #4
    1978:	d007      	beq.n	198a <SystemCoreClockUpdate+0x32>
    197a:	2b08      	cmp	r3, #8
    197c:	d009      	beq.n	1992 <SystemCoreClockUpdate+0x3a>
    197e:	2b00      	cmp	r3, #0
    1980:	d133      	bne.n	19ea <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
    1982:	4b27      	ldr	r3, [pc, #156]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    1984:	4a27      	ldr	r2, [pc, #156]	; (1a24 <SystemCoreClockUpdate+0xcc>)
    1986:	601a      	str	r2, [r3, #0]
      break;
    1988:	e033      	b.n	19f2 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
    198a:	4b25      	ldr	r3, [pc, #148]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    198c:	4a25      	ldr	r2, [pc, #148]	; (1a24 <SystemCoreClockUpdate+0xcc>)
    198e:	601a      	str	r2, [r3, #0]
      break;
    1990:	e02f      	b.n	19f2 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
    1992:	4b22      	ldr	r3, [pc, #136]	; (1a1c <SystemCoreClockUpdate+0xc4>)
    1994:	685b      	ldr	r3, [r3, #4]
    1996:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    199a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    199c:	4b1f      	ldr	r3, [pc, #124]	; (1a1c <SystemCoreClockUpdate+0xc4>)
    199e:	685b      	ldr	r3, [r3, #4]
    19a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    19a4:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    19a6:	68bb      	ldr	r3, [r7, #8]
    19a8:	0c9b      	lsrs	r3, r3, #18
    19aa:	3302      	adds	r3, #2
    19ac:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
    19ae:	687b      	ldr	r3, [r7, #4]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d106      	bne.n	19c2 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    19b4:	68bb      	ldr	r3, [r7, #8]
    19b6:	4a1c      	ldr	r2, [pc, #112]	; (1a28 <SystemCoreClockUpdate+0xd0>)
    19b8:	fb02 f303 	mul.w	r3, r2, r3
    19bc:	4a18      	ldr	r2, [pc, #96]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    19be:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    19c0:	e017      	b.n	19f2 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
    19c2:	4b16      	ldr	r3, [pc, #88]	; (1a1c <SystemCoreClockUpdate+0xc4>)
    19c4:	685b      	ldr	r3, [r3, #4]
    19c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    19ca:	2b00      	cmp	r3, #0
    19cc:	d006      	beq.n	19dc <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
    19ce:	68bb      	ldr	r3, [r7, #8]
    19d0:	4a15      	ldr	r2, [pc, #84]	; (1a28 <SystemCoreClockUpdate+0xd0>)
    19d2:	fb02 f303 	mul.w	r3, r2, r3
    19d6:	4a12      	ldr	r2, [pc, #72]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    19d8:	6013      	str	r3, [r2, #0]
      break;
    19da:	e00a      	b.n	19f2 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
    19dc:	68bb      	ldr	r3, [r7, #8]
    19de:	4a11      	ldr	r2, [pc, #68]	; (1a24 <SystemCoreClockUpdate+0xcc>)
    19e0:	fb02 f303 	mul.w	r3, r2, r3
    19e4:	4a0e      	ldr	r2, [pc, #56]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    19e6:	6013      	str	r3, [r2, #0]
      break;
    19e8:	e003      	b.n	19f2 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
    19ea:	4b0d      	ldr	r3, [pc, #52]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    19ec:	4a0d      	ldr	r2, [pc, #52]	; (1a24 <SystemCoreClockUpdate+0xcc>)
    19ee:	601a      	str	r2, [r3, #0]
      break;
    19f0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    19f2:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <SystemCoreClockUpdate+0xc4>)
    19f4:	685b      	ldr	r3, [r3, #4]
    19f6:	091b      	lsrs	r3, r3, #4
    19f8:	f003 030f 	and.w	r3, r3, #15
    19fc:	4a0b      	ldr	r2, [pc, #44]	; (1a2c <SystemCoreClockUpdate+0xd4>)
    19fe:	5cd3      	ldrb	r3, [r2, r3]
    1a00:	b2db      	uxtb	r3, r3
    1a02:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
    1a04:	4b06      	ldr	r3, [pc, #24]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    1a06:	681a      	ldr	r2, [r3, #0]
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	fa22 f303 	lsr.w	r3, r2, r3
    1a0e:	4a04      	ldr	r2, [pc, #16]	; (1a20 <SystemCoreClockUpdate+0xc8>)
    1a10:	6013      	str	r3, [r2, #0]
}
    1a12:	bf00      	nop
    1a14:	3714      	adds	r7, #20
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr
    1a1c:	40021000 	.word	0x40021000
    1a20:	20000470 	.word	0x20000470
    1a24:	007a1200 	.word	0x007a1200
    1a28:	003d0900 	.word	0x003d0900
    1a2c:	20000474 	.word	0x20000474

00001a30 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
    1a34:	f000 f802 	bl	1a3c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
    1a38:	bf00      	nop
    1a3a:	bd80      	pop	{r7, pc}

00001a3c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
    1a3c:	b480      	push	{r7}
    1a3e:	b083      	sub	sp, #12
    1a40:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    1a42:	2300      	movs	r3, #0
    1a44:	607b      	str	r3, [r7, #4]
    1a46:	2300      	movs	r3, #0
    1a48:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    1a4a:	4b3a      	ldr	r3, [pc, #232]	; (1b34 <SetSysClockTo72+0xf8>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	4a39      	ldr	r2, [pc, #228]	; (1b34 <SetSysClockTo72+0xf8>)
    1a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1a54:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    1a56:	4b37      	ldr	r3, [pc, #220]	; (1b34 <SetSysClockTo72+0xf8>)
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1a5e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	3301      	adds	r3, #1
    1a64:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    1a66:	683b      	ldr	r3, [r7, #0]
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d103      	bne.n	1a74 <SetSysClockTo72+0x38>
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1a72:	d1f0      	bne.n	1a56 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    1a74:	4b2f      	ldr	r3, [pc, #188]	; (1b34 <SetSysClockTo72+0xf8>)
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d002      	beq.n	1a86 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
    1a80:	2301      	movs	r3, #1
    1a82:	603b      	str	r3, [r7, #0]
    1a84:	e001      	b.n	1a8a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
    1a86:	2300      	movs	r3, #0
    1a88:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
    1a8a:	683b      	ldr	r3, [r7, #0]
    1a8c:	2b01      	cmp	r3, #1
    1a8e:	d14b      	bne.n	1b28 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
    1a90:	4b29      	ldr	r3, [pc, #164]	; (1b38 <SetSysClockTo72+0xfc>)
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	4a28      	ldr	r2, [pc, #160]	; (1b38 <SetSysClockTo72+0xfc>)
    1a96:	f043 0310 	orr.w	r3, r3, #16
    1a9a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    1a9c:	4b26      	ldr	r3, [pc, #152]	; (1b38 <SetSysClockTo72+0xfc>)
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	4a25      	ldr	r2, [pc, #148]	; (1b38 <SetSysClockTo72+0xfc>)
    1aa2:	f023 0303 	bic.w	r3, r3, #3
    1aa6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
    1aa8:	4b23      	ldr	r3, [pc, #140]	; (1b38 <SetSysClockTo72+0xfc>)
    1aaa:	681b      	ldr	r3, [r3, #0]
    1aac:	4a22      	ldr	r2, [pc, #136]	; (1b38 <SetSysClockTo72+0xfc>)
    1aae:	f043 0302 	orr.w	r3, r3, #2
    1ab2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    1ab4:	4b1f      	ldr	r3, [pc, #124]	; (1b34 <SetSysClockTo72+0xf8>)
    1ab6:	4a1f      	ldr	r2, [pc, #124]	; (1b34 <SetSysClockTo72+0xf8>)
    1ab8:	685b      	ldr	r3, [r3, #4]
    1aba:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    1abc:	4b1d      	ldr	r3, [pc, #116]	; (1b34 <SetSysClockTo72+0xf8>)
    1abe:	4a1d      	ldr	r2, [pc, #116]	; (1b34 <SetSysClockTo72+0xf8>)
    1ac0:	685b      	ldr	r3, [r3, #4]
    1ac2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
    1ac4:	4b1b      	ldr	r3, [pc, #108]	; (1b34 <SetSysClockTo72+0xf8>)
    1ac6:	685b      	ldr	r3, [r3, #4]
    1ac8:	4a1a      	ldr	r2, [pc, #104]	; (1b34 <SetSysClockTo72+0xf8>)
    1aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1ace:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
    1ad0:	4b18      	ldr	r3, [pc, #96]	; (1b34 <SetSysClockTo72+0xf8>)
    1ad2:	685b      	ldr	r3, [r3, #4]
    1ad4:	4a17      	ldr	r2, [pc, #92]	; (1b34 <SetSysClockTo72+0xf8>)
    1ad6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1ada:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
    1adc:	4b15      	ldr	r3, [pc, #84]	; (1b34 <SetSysClockTo72+0xf8>)
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	4a14      	ldr	r2, [pc, #80]	; (1b34 <SetSysClockTo72+0xf8>)
    1ae2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
    1ae6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
    1ae8:	4b12      	ldr	r3, [pc, #72]	; (1b34 <SetSysClockTo72+0xf8>)
    1aea:	681b      	ldr	r3, [r3, #0]
    1aec:	4a11      	ldr	r2, [pc, #68]	; (1b34 <SetSysClockTo72+0xf8>)
    1aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1af2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    1af4:	bf00      	nop
    1af6:	4b0f      	ldr	r3, [pc, #60]	; (1b34 <SetSysClockTo72+0xf8>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    1afe:	2b00      	cmp	r3, #0
    1b00:	d0f9      	beq.n	1af6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    1b02:	4b0c      	ldr	r3, [pc, #48]	; (1b34 <SetSysClockTo72+0xf8>)
    1b04:	685b      	ldr	r3, [r3, #4]
    1b06:	4a0b      	ldr	r2, [pc, #44]	; (1b34 <SetSysClockTo72+0xf8>)
    1b08:	f023 0303 	bic.w	r3, r3, #3
    1b0c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    1b0e:	4b09      	ldr	r3, [pc, #36]	; (1b34 <SetSysClockTo72+0xf8>)
    1b10:	685b      	ldr	r3, [r3, #4]
    1b12:	4a08      	ldr	r2, [pc, #32]	; (1b34 <SetSysClockTo72+0xf8>)
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    1b1a:	bf00      	nop
    1b1c:	4b05      	ldr	r3, [pc, #20]	; (1b34 <SetSysClockTo72+0xf8>)
    1b1e:	685b      	ldr	r3, [r3, #4]
    1b20:	f003 030c 	and.w	r3, r3, #12
    1b24:	2b08      	cmp	r3, #8
    1b26:	d1f9      	bne.n	1b1c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
    1b28:	bf00      	nop
    1b2a:	370c      	adds	r7, #12
    1b2c:	46bd      	mov	sp, r7
    1b2e:	bc80      	pop	{r7}
    1b30:	4770      	bx	lr
    1b32:	bf00      	nop
    1b34:	40021000 	.word	0x40021000
    1b38:	40022000 	.word	0x40022000
    1b3c:	0000a82d 	.word	0x0000a82d
    1b40:	20000000 	.word	0x20000000
    1b44:	2000049c 	.word	0x2000049c
    1b48:	2000049c 	.word	0x2000049c
    1b4c:	200049e0 	.word	0x200049e0

00001b50 <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	b082      	sub	sp, #8
    1b54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1b56:	2101      	movs	r1, #1
    1b58:	2010      	movs	r0, #16
    1b5a:	f001 f939 	bl	2dd0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    1b5e:	2201      	movs	r2, #1
    1b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1b64:	4809      	ldr	r0, [pc, #36]	; (1b8c <init_led+0x3c>)
    1b66:	f001 fc00 	bl	336a <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    1b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1b6e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    1b70:	2310      	movs	r3, #16
    1b72:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1b74:	2303      	movs	r3, #3
    1b76:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    1b78:	1d3b      	adds	r3, r7, #4
    1b7a:	4619      	mov	r1, r3
    1b7c:	4803      	ldr	r0, [pc, #12]	; (1b8c <init_led+0x3c>)
    1b7e:	f001 fabf 	bl	3100 <GPIO_Init>
}
    1b82:	bf00      	nop
    1b84:	3708      	adds	r7, #8
    1b86:	46bd      	mov	sp, r7
    1b88:	bd80      	pop	{r7, pc}
    1b8a:	bf00      	nop
    1b8c:	40011000 	.word	0x40011000

00001b90 <init_button>:

void init_button(void)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	b082      	sub	sp, #8
    1b94:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1b96:	2101      	movs	r1, #1
    1b98:	2004      	movs	r0, #4
    1b9a:	f001 f919 	bl	2dd0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    1b9e:	2301      	movs	r3, #1
    1ba0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1ba2:	2304      	movs	r3, #4
    1ba4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1ba6:	2303      	movs	r3, #3
    1ba8:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    1baa:	1d3b      	adds	r3, r7, #4
    1bac:	4619      	mov	r1, r3
    1bae:	4803      	ldr	r0, [pc, #12]	; (1bbc <init_button+0x2c>)
    1bb0:	f001 faa6 	bl	3100 <GPIO_Init>
}
    1bb4:	bf00      	nop
    1bb6:	3708      	adds	r7, #8
    1bb8:	46bd      	mov	sp, r7
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	40011000 	.word	0x40011000

00001bc0 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	b084      	sub	sp, #16
    1bc4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    1bc6:	2101      	movs	r1, #1
    1bc8:	2001      	movs	r0, #1
    1bca:	f001 f901 	bl	2dd0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    1bce:	2100      	movs	r1, #0
    1bd0:	2000      	movs	r0, #0
    1bd2:	f001 fcb5 	bl	3540 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    1bd6:	2301      	movs	r3, #1
    1bd8:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    1bda:	2300      	movs	r3, #0
    1bdc:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    1bde:	2308      	movs	r3, #8
    1be0:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    1be2:	2301      	movs	r3, #1
    1be4:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    1be6:	f107 0308 	add.w	r3, r7, #8
    1bea:	4618      	mov	r0, r3
    1bec:	f002 f97e 	bl	3eec <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    1bf0:	2306      	movs	r3, #6
    1bf2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    1bf4:	230f      	movs	r3, #15
    1bf6:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    1bf8:	230f      	movs	r3, #15
    1bfa:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    1bfc:	2301      	movs	r3, #1
    1bfe:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    1c00:	1d3b      	adds	r3, r7, #4
    1c02:	4618      	mov	r0, r3
    1c04:	f005 f918 	bl	6e38 <NVIC_Init>
}
    1c08:	bf00      	nop
    1c0a:	3710      	adds	r7, #16
    1c0c:	46bd      	mov	sp, r7
    1c0e:	bd80      	pop	{r7, pc}

00001c10 <init_rs232>:

void init_rs232(void)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b086      	sub	sp, #24
    1c14:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO | RCC_APB2Periph_USART1, ENABLE);
    1c16:	2101      	movs	r1, #1
    1c18:	f244 000d 	movw	r0, #16397	; 0x400d
    1c1c:	f001 f8d8 	bl	2dd0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3, ENABLE);
    1c20:	2101      	movs	r1, #1
    1c22:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
    1c26:	f001 f8f1 	bl	2e0c <RCC_APB1PeriphClockCmd>
	
    /* DMA clock enable */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    1c2a:	2101      	movs	r1, #1
    1c2c:	2001      	movs	r0, #1
    1c2e:	f001 f8b1 	bl	2d94 <RCC_AHBPeriphClockCmd>
 
    /* Configure USART1 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    1c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1c36:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1c38:	2304      	movs	r3, #4
    1c3a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1c3c:	1d3b      	adds	r3, r7, #4
    1c3e:	4619      	mov	r1, r3
    1c40:	4840      	ldr	r0, [pc, #256]	; (1d44 <init_rs232+0x134>)
    1c42:	f001 fa5d 	bl	3100 <GPIO_Init>
    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    1c46:	2308      	movs	r3, #8
    1c48:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1c4a:	2304      	movs	r3, #4
    1c4c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1c4e:	1d3b      	adds	r3, r7, #4
    1c50:	4619      	mov	r1, r3
    1c52:	483c      	ldr	r0, [pc, #240]	; (1d44 <init_rs232+0x134>)
    1c54:	f001 fa54 	bl	3100 <GPIO_Init>
    /* Configure USART3 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    1c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1c5c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1c5e:	2304      	movs	r3, #4
    1c60:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    1c62:	1d3b      	adds	r3, r7, #4
    1c64:	4619      	mov	r1, r3
    1c66:	4838      	ldr	r0, [pc, #224]	; (1d48 <init_rs232+0x138>)
    1c68:	f001 fa4a 	bl	3100 <GPIO_Init>

    /* Configure USART1 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    1c6c:	2304      	movs	r3, #4
    1c6e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1c70:	2303      	movs	r3, #3
    1c72:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    1c74:	2318      	movs	r3, #24
    1c76:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1c78:	1d3b      	adds	r3, r7, #4
    1c7a:	4619      	mov	r1, r3
    1c7c:	4831      	ldr	r0, [pc, #196]	; (1d44 <init_rs232+0x134>)
    1c7e:	f001 fa3f 	bl	3100 <GPIO_Init>
    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    1c82:	f44f 7300 	mov.w	r3, #512	; 0x200
    1c86:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1c88:	2303      	movs	r3, #3
    1c8a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    1c8c:	2318      	movs	r3, #24
    1c8e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1c90:	1d3b      	adds	r3, r7, #4
    1c92:	4619      	mov	r1, r3
    1c94:	482b      	ldr	r0, [pc, #172]	; (1d44 <init_rs232+0x134>)
    1c96:	f001 fa33 	bl	3100 <GPIO_Init>
    /* Configure USAR3 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    1c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1c9e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1ca0:	2303      	movs	r3, #3
    1ca2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    1ca4:	2318      	movs	r3, #24
    1ca6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    1ca8:	1d3b      	adds	r3, r7, #4
    1caa:	4619      	mov	r1, r3
    1cac:	4826      	ldr	r0, [pc, #152]	; (1d48 <init_rs232+0x138>)
    1cae:	f001 fa27 	bl	3100 <GPIO_Init>

    /* Configure the USART1 */
    USART_InitStructure.USART_BaudRate = 115200;
    1cb2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    1cb6:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    1cb8:	2300      	movs	r3, #0
    1cba:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    1cbc:	2300      	movs	r3, #0
    1cbe:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    1cc0:	2300      	movs	r3, #0
    1cc2:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1cc4:	2300      	movs	r3, #0
    1cc6:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1cc8:	230c      	movs	r3, #12
    1cca:	827b      	strh	r3, [r7, #18]
    USART_Init(USART1, &USART_InitStructure);
    1ccc:	f107 0308 	add.w	r3, r7, #8
    1cd0:	4619      	mov	r1, r3
    1cd2:	481e      	ldr	r0, [pc, #120]	; (1d4c <init_rs232+0x13c>)
    1cd4:	f001 fcde 	bl	3694 <USART_Init>
    USART_Cmd(USART1, ENABLE);
    1cd8:	2101      	movs	r1, #1
    1cda:	481c      	ldr	r0, [pc, #112]	; (1d4c <init_rs232+0x13c>)
    1cdc:	f001 fdf0 	bl	38c0 <USART_Cmd>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 115200;
    1ce0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    1ce4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    1ce6:	2300      	movs	r3, #0
    1ce8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    1cea:	2300      	movs	r3, #0
    1cec:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    1cee:	2300      	movs	r3, #0
    1cf0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1cf2:	2300      	movs	r3, #0
    1cf4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1cf6:	230c      	movs	r3, #12
    1cf8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    1cfa:	f107 0308 	add.w	r3, r7, #8
    1cfe:	4619      	mov	r1, r3
    1d00:	4813      	ldr	r0, [pc, #76]	; (1d50 <init_rs232+0x140>)
    1d02:	f001 fcc7 	bl	3694 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    1d06:	2101      	movs	r1, #1
    1d08:	4811      	ldr	r0, [pc, #68]	; (1d50 <init_rs232+0x140>)
    1d0a:	f001 fdd9 	bl	38c0 <USART_Cmd>

    /* Configure the USART3 */
    USART_InitStructure.USART_BaudRate = 115200;
    1d0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    1d12:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    1d14:	2300      	movs	r3, #0
    1d16:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    1d18:	2300      	movs	r3, #0
    1d1a:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    1d1c:	2300      	movs	r3, #0
    1d1e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1d20:	2300      	movs	r3, #0
    1d22:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1d24:	230c      	movs	r3, #12
    1d26:	827b      	strh	r3, [r7, #18]
    USART_Init(USART3, &USART_InitStructure);
    1d28:	f107 0308 	add.w	r3, r7, #8
    1d2c:	4619      	mov	r1, r3
    1d2e:	4809      	ldr	r0, [pc, #36]	; (1d54 <init_rs232+0x144>)
    1d30:	f001 fcb0 	bl	3694 <USART_Init>
    USART_Cmd(USART3, ENABLE);
    1d34:	2101      	movs	r1, #1
    1d36:	4807      	ldr	r0, [pc, #28]	; (1d54 <init_rs232+0x144>)
    1d38:	f001 fdc2 	bl	38c0 <USART_Cmd>

}
    1d3c:	bf00      	nop
    1d3e:	3718      	adds	r7, #24
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}
    1d44:	40010800 	.word	0x40010800
    1d48:	40010c00 	.word	0x40010c00
    1d4c:	40013800 	.word	0x40013800
    1d50:	40004400 	.word	0x40004400
    1d54:	40004800 	.word	0x40004800

00001d58 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART1. */
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    1d5e:	2200      	movs	r2, #0
    1d60:	f240 7127 	movw	r1, #1831	; 0x727
    1d64:	4821      	ldr	r0, [pc, #132]	; (1dec <enable_rs232_interrupts+0x94>)
    1d66:	f001 fdca 	bl	38fe <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
    1d6a:	2201      	movs	r2, #1
    1d6c:	f240 5125 	movw	r1, #1317	; 0x525
    1d70:	481e      	ldr	r0, [pc, #120]	; (1dec <enable_rs232_interrupts+0x94>)
    1d72:	f001 fdc4 	bl	38fe <USART_ITConfig>

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    1d76:	2200      	movs	r2, #0
    1d78:	f240 7127 	movw	r1, #1831	; 0x727
    1d7c:	481c      	ldr	r0, [pc, #112]	; (1df0 <enable_rs232_interrupts+0x98>)
    1d7e:	f001 fdbe 	bl	38fe <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    1d82:	2201      	movs	r2, #1
    1d84:	f240 5125 	movw	r1, #1317	; 0x525
    1d88:	4819      	ldr	r0, [pc, #100]	; (1df0 <enable_rs232_interrupts+0x98>)
    1d8a:	f001 fdb8 	bl	38fe <USART_ITConfig>

    /* Enable transmit and receive interrupts for the USART3. */
    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
    1d8e:	2200      	movs	r2, #0
    1d90:	f240 7127 	movw	r1, #1831	; 0x727
    1d94:	4817      	ldr	r0, [pc, #92]	; (1df4 <enable_rs232_interrupts+0x9c>)
    1d96:	f001 fdb2 	bl	38fe <USART_ITConfig>
    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
    1d9a:	2201      	movs	r2, #1
    1d9c:	f240 5125 	movw	r1, #1317	; 0x525
    1da0:	4814      	ldr	r0, [pc, #80]	; (1df4 <enable_rs232_interrupts+0x9c>)
    1da2:	f001 fdac 	bl	38fe <USART_ITConfig>

    /* Enable the USART1 IRQ in the NVIC module (so that the USART1 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    1da6:	2325      	movs	r3, #37	; 0x25
    1da8:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    1daa:	2300      	movs	r3, #0
    1dac:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    1dae:	2301      	movs	r3, #1
    1db0:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    1db2:	1d3b      	adds	r3, r7, #4
    1db4:	4618      	mov	r0, r3
    1db6:	f005 f83f 	bl	6e38 <NVIC_Init>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    1dba:	2326      	movs	r3, #38	; 0x26
    1dbc:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    1dbe:	2300      	movs	r3, #0
    1dc0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    1dc2:	2301      	movs	r3, #1
    1dc4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    1dc6:	1d3b      	adds	r3, r7, #4
    1dc8:	4618      	mov	r0, r3
    1dca:	f005 f835 	bl	6e38 <NVIC_Init>

    /* Enable the USART3 IRQ in the NVIC module (so that the USART3 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
    1dce:	2327      	movs	r3, #39	; 0x27
    1dd0:	713b      	strb	r3, [r7, #4]
    	//NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x04;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    1dd2:	2300      	movs	r3, #0
    1dd4:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    1dd6:	2301      	movs	r3, #1
    1dd8:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    1dda:	1d3b      	adds	r3, r7, #4
    1ddc:	4618      	mov	r0, r3
    1dde:	f005 f82b 	bl	6e38 <NVIC_Init>
}
    1de2:	bf00      	nop
    1de4:	3708      	adds	r7, #8
    1de6:	46bd      	mov	sp, r7
    1de8:	bd80      	pop	{r7, pc}
    1dea:	bf00      	nop
    1dec:	40013800 	.word	0x40013800
    1df0:	40004400 	.word	0x40004400
    1df4:	40004800 	.word	0x40004800

00001df8 <enable_rs232>:

void enable_rs232(void)
{
    1df8:	b580      	push	{r7, lr}
    1dfa:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART1, ENABLE);
    1dfc:	2101      	movs	r1, #1
    1dfe:	4806      	ldr	r0, [pc, #24]	; (1e18 <enable_rs232+0x20>)
    1e00:	f001 fd5e 	bl	38c0 <USART_Cmd>
    USART_Cmd(USART2, ENABLE);
    1e04:	2101      	movs	r1, #1
    1e06:	4805      	ldr	r0, [pc, #20]	; (1e1c <enable_rs232+0x24>)
    1e08:	f001 fd5a 	bl	38c0 <USART_Cmd>
    USART_Cmd(USART3, ENABLE);
    1e0c:	2101      	movs	r1, #1
    1e0e:	4804      	ldr	r0, [pc, #16]	; (1e20 <enable_rs232+0x28>)
    1e10:	f001 fd56 	bl	38c0 <USART_Cmd>
}
    1e14:	bf00      	nop
    1e16:	bd80      	pop	{r7, pc}
    1e18:	40013800 	.word	0x40013800
    1e1c:	40004400 	.word	0x40004400
    1e20:	40004800 	.word	0x40004800

00001e24 <rs232_print_str>:

void rs232_print_str(const char *str)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b084      	sub	sp, #16
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
    1e30:	e011      	b.n	1e56 <rs232_print_str+0x32>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1e32:	bf00      	nop
    1e34:	2180      	movs	r1, #128	; 0x80
    1e36:	480c      	ldr	r0, [pc, #48]	; (1e68 <rs232_print_str+0x44>)
    1e38:	f001 ff9c 	bl	3d74 <USART_GetFlagStatus>
    1e3c:	4603      	mov	r3, r0
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d0f8      	beq.n	1e34 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	781b      	ldrb	r3, [r3, #0]
    1e46:	b29b      	uxth	r3, r3
    1e48:	4619      	mov	r1, r3
    1e4a:	4807      	ldr	r0, [pc, #28]	; (1e68 <rs232_print_str+0x44>)
    1e4c:	f001 fe51 	bl	3af2 <USART_SendData>
        curr_char++;
    1e50:	68fb      	ldr	r3, [r7, #12]
    1e52:	3301      	adds	r3, #1
    1e54:	60fb      	str	r3, [r7, #12]
    while(*curr_char != '\0') {
    1e56:	68fb      	ldr	r3, [r7, #12]
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d1e9      	bne.n	1e32 <rs232_print_str+0xe>
    }
}
    1e5e:	bf00      	nop
    1e60:	3710      	adds	r7, #16
    1e62:	46bd      	mov	sp, r7
    1e64:	bd80      	pop	{r7, pc}
    1e66:	bf00      	nop
    1e68:	40004400 	.word	0x40004400

00001e6c <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
    1e6c:	b480      	push	{r7}
    1e6e:	b083      	sub	sp, #12
    1e70:	af00      	add	r7, sp, #0
    1e72:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	2b09      	cmp	r3, #9
    1e78:	d804      	bhi.n	1e84 <hex_to_char+0x18>
        return hex_number + '0';
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	b2db      	uxtb	r3, r3
    1e7e:	3330      	adds	r3, #48	; 0x30
    1e80:	b2db      	uxtb	r3, r3
    1e82:	e003      	b.n	1e8c <hex_to_char+0x20>
    } else {
        return hex_number - 0xA + 'A';
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	b2db      	uxtb	r3, r3
    1e88:	3337      	adds	r3, #55	; 0x37
    1e8a:	b2db      	uxtb	r3, r3
    }
}
    1e8c:	4618      	mov	r0, r3
    1e8e:	370c      	adds	r7, #12
    1e90:	46bd      	mov	sp, r7
    1e92:	bc80      	pop	{r7}
    1e94:	4770      	bx	lr

00001e96 <send_byte>:

void send_byte(uint8_t b)
{
    1e96:	b580      	push	{r7, lr}
    1e98:	b082      	sub	sp, #8
    1e9a:	af00      	add	r7, sp, #0
    1e9c:	4603      	mov	r3, r0
    1e9e:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1ea0:	bf00      	nop
    1ea2:	2180      	movs	r1, #128	; 0x80
    1ea4:	480a      	ldr	r0, [pc, #40]	; (1ed0 <send_byte+0x3a>)
    1ea6:	f001 ff65 	bl	3d74 <USART_GetFlagStatus>
    1eaa:	4603      	mov	r3, r0
    1eac:	2b00      	cmp	r3, #0
    1eae:	d0f8      	beq.n	1ea2 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
    1eb0:	4b08      	ldr	r3, [pc, #32]	; (1ed4 <send_byte+0x3e>)
    1eb2:	68db      	ldr	r3, [r3, #12]
    1eb4:	4a07      	ldr	r2, [pc, #28]	; (1ed4 <send_byte+0x3e>)
    1eb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
    1eba:	60d3      	str	r3, [r2, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
    1ebc:	79fb      	ldrb	r3, [r7, #7]
    1ebe:	b29b      	uxth	r3, r3
    1ec0:	4619      	mov	r1, r3
    1ec2:	4803      	ldr	r0, [pc, #12]	; (1ed0 <send_byte+0x3a>)
    1ec4:	f001 fe15 	bl	3af2 <USART_SendData>
}
    1ec8:	bf00      	nop
    1eca:	3708      	adds	r7, #8
    1ecc:	46bd      	mov	sp, r7
    1ece:	bd80      	pop	{r7, pc}
    1ed0:	40004400 	.word	0x40004400
    1ed4:	40011000 	.word	0x40011000

00001ed8 <send_byte_uart>:




void send_byte_uart(USART_TypeDef* USARTx,uint8_t b)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b082      	sub	sp, #8
    1edc:	af00      	add	r7, sp, #0
    1ede:	6078      	str	r0, [r7, #4]
    1ee0:	460b      	mov	r3, r1
    1ee2:	70fb      	strb	r3, [r7, #3]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);
    1ee4:	bf00      	nop
    1ee6:	2180      	movs	r1, #128	; 0x80
    1ee8:	6878      	ldr	r0, [r7, #4]
    1eea:	f001 ff43 	bl	3d74 <USART_GetFlagStatus>
    1eee:	4603      	mov	r3, r0
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d0f8      	beq.n	1ee6 <send_byte_uart+0xe>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
    1ef4:	4b07      	ldr	r3, [pc, #28]	; (1f14 <send_byte_uart+0x3c>)
    1ef6:	68db      	ldr	r3, [r3, #12]
    1ef8:	4a06      	ldr	r2, [pc, #24]	; (1f14 <send_byte_uart+0x3c>)
    1efa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
    1efe:	60d3      	str	r3, [r2, #12]

    /* Send the byte */
    USART_SendData(USARTx, b);
    1f00:	78fb      	ldrb	r3, [r7, #3]
    1f02:	b29b      	uxth	r3, r3
    1f04:	4619      	mov	r1, r3
    1f06:	6878      	ldr	r0, [r7, #4]
    1f08:	f001 fdf3 	bl	3af2 <USART_SendData>
}
    1f0c:	bf00      	nop
    1f0e:	3708      	adds	r7, #8
    1f10:	46bd      	mov	sp, r7
    1f12:	bd80      	pop	{r7, pc}
    1f14:	40011000 	.word	0x40011000

00001f18 <send_number>:

void send_number(unsigned long sample, int radix)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b09e      	sub	sp, #120	; 0x78
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	6078      	str	r0, [r7, #4]
    1f20:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
    1f22:	2300      	movs	r3, #0
    1f24:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
    1f26:	683a      	ldr	r2, [r7, #0]
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	fbb3 f1f2 	udiv	r1, r3, r2
    1f2e:	fb02 f201 	mul.w	r2, r2, r1
    1f32:	1a9b      	subs	r3, r3, r2
    1f34:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
    1f36:	6f38      	ldr	r0, [r7, #112]	; 0x70
    1f38:	f7ff ff98 	bl	1e6c <hex_to_char>
    1f3c:	4603      	mov	r3, r0
    1f3e:	4619      	mov	r1, r3
    1f40:	f107 020c 	add.w	r2, r7, #12
    1f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f46:	4413      	add	r3, r2
    1f48:	460a      	mov	r2, r1
    1f4a:	701a      	strb	r2, [r3, #0]
        sample /= radix;
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	687a      	ldr	r2, [r7, #4]
    1f50:	fbb2 f3f3 	udiv	r3, r2, r3
    1f54:	607b      	str	r3, [r7, #4]
        digit++;
    1f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f58:	3301      	adds	r3, #1
    1f5a:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
    1f5c:	687b      	ldr	r3, [r7, #4]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d1e1      	bne.n	1f26 <send_number+0xe>

    while(digit != 0) {
    1f62:	e014      	b.n	1f8e <send_number+0x76>
        digit--;
    1f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f66:	3b01      	subs	r3, #1
    1f68:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1f6a:	bf00      	nop
    1f6c:	2180      	movs	r1, #128	; 0x80
    1f6e:	480b      	ldr	r0, [pc, #44]	; (1f9c <send_number+0x84>)
    1f70:	f001 ff00 	bl	3d74 <USART_GetFlagStatus>
    1f74:	4603      	mov	r3, r0
    1f76:	2b00      	cmp	r3, #0
    1f78:	d0f8      	beq.n	1f6c <send_number+0x54>
        USART_SendData(USART2, str[digit]);
    1f7a:	f107 020c 	add.w	r2, r7, #12
    1f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f80:	4413      	add	r3, r2
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	b29b      	uxth	r3, r3
    1f86:	4619      	mov	r1, r3
    1f88:	4804      	ldr	r0, [pc, #16]	; (1f9c <send_number+0x84>)
    1f8a:	f001 fdb2 	bl	3af2 <USART_SendData>
    while(digit != 0) {
    1f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f90:	2b00      	cmp	r3, #0
    1f92:	d1e7      	bne.n	1f64 <send_number+0x4c>
    }
}
    1f94:	bf00      	nop
    1f96:	3778      	adds	r7, #120	; 0x78
    1f98:	46bd      	mov	sp, r7
    1f9a:	bd80      	pop	{r7, pc}
    1f9c:	40004400 	.word	0x40004400

00001fa0 <myprintf_init>:
#define LARGE  	64		/* use 'ABCDEF' instead of 'abcdef' */
#define SMALL  	64		/* use 'abcdef' instead of 'ABCDEF' */
#define PBSIZE 128 /* Print Buffer Size  */

void myprintf_init()
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
    init_rs232();
    1fa4:	f7ff fe34 	bl	1c10 <init_rs232>
    enable_rs232_interrupts();
    1fa8:	f7ff fed6 	bl	1d58 <enable_rs232_interrupts>
    enable_rs232();
    1fac:	f7ff ff24 	bl	1df8 <enable_rs232>
}
    1fb0:	bf00      	nop
    1fb2:	bd80      	pop	{r7, pc}

00001fb4 <usart_send_bytes>:

void usart_send_bytes(uint8_t data)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b082      	sub	sp, #8
    1fb8:	af00      	add	r7, sp, #0
    1fba:	4603      	mov	r3, r0
    1fbc:	71fb      	strb	r3, [r7, #7]
    while(!USART_GetFlagStatus(USART2 ,USART_FLAG_TXE)) {
    1fbe:	bf00      	nop
    1fc0:	2180      	movs	r1, #128	; 0x80
    1fc2:	4808      	ldr	r0, [pc, #32]	; (1fe4 <usart_send_bytes+0x30>)
    1fc4:	f001 fed6 	bl	3d74 <USART_GetFlagStatus>
    1fc8:	4603      	mov	r3, r0
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d0f8      	beq.n	1fc0 <usart_send_bytes+0xc>
    }
    USART_SendData( USART2, data);
    1fce:	79fb      	ldrb	r3, [r7, #7]
    1fd0:	b29b      	uxth	r3, r3
    1fd2:	4619      	mov	r1, r3
    1fd4:	4803      	ldr	r0, [pc, #12]	; (1fe4 <usart_send_bytes+0x30>)
    1fd6:	f001 fd8c 	bl	3af2 <USART_SendData>
}
    1fda:	bf00      	nop
    1fdc:	3708      	adds	r7, #8
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	bf00      	nop
    1fe4:	40004400 	.word	0x40004400

00001fe8 <mystrnlen>:


signed int mystrnlen (const char * s, signed int count)
{
    1fe8:	b480      	push	{r7}
    1fea:	b085      	sub	sp, #20
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
    1ff0:	6039      	str	r1, [r7, #0]
    const char *sc;

    for (sc = s; count-- && *sc != '\0'; ++sc) {
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	60fb      	str	r3, [r7, #12]
    1ff6:	e002      	b.n	1ffe <mystrnlen+0x16>
    1ff8:	68fb      	ldr	r3, [r7, #12]
    1ffa:	3301      	adds	r3, #1
    1ffc:	60fb      	str	r3, [r7, #12]
    1ffe:	683b      	ldr	r3, [r7, #0]
    2000:	1e5a      	subs	r2, r3, #1
    2002:	603a      	str	r2, [r7, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d003      	beq.n	2010 <mystrnlen+0x28>
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	781b      	ldrb	r3, [r3, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d1f3      	bne.n	1ff8 <mystrnlen+0x10>
        /* nothing */
    }
    return sc - s;
    2010:	68fa      	ldr	r2, [r7, #12]
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	1ad3      	subs	r3, r2, r3
}
    2016:	4618      	mov	r0, r3
    2018:	3714      	adds	r7, #20
    201a:	46bd      	mov	sp, r7
    201c:	bc80      	pop	{r7}
    201e:	4770      	bx	lr

00002020 <myskip_atoi>:

static int myskip_atoi (const char **s)
{
    2020:	b480      	push	{r7}
    2022:	b085      	sub	sp, #20
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
    int i = 0;
    2028:	2300      	movs	r3, #0
    202a:	60fb      	str	r3, [r7, #12]

    while (isdigit(**s) != 0) {
    202c:	e00e      	b.n	204c <myskip_atoi+0x2c>
        i = i * 10 + *((*s)++) - '0';
    202e:	68fa      	ldr	r2, [r7, #12]
    2030:	4613      	mov	r3, r2
    2032:	009b      	lsls	r3, r3, #2
    2034:	4413      	add	r3, r2
    2036:	005b      	lsls	r3, r3, #1
    2038:	4618      	mov	r0, r3
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	1c59      	adds	r1, r3, #1
    2040:	687a      	ldr	r2, [r7, #4]
    2042:	6011      	str	r1, [r2, #0]
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	4403      	add	r3, r0
    2048:	3b30      	subs	r3, #48	; 0x30
    204a:	60fb      	str	r3, [r7, #12]
    while (isdigit(**s) != 0) {
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	3b30      	subs	r3, #48	; 0x30
    2054:	2b09      	cmp	r3, #9
    2056:	d9ea      	bls.n	202e <myskip_atoi+0xe>
    }
    return i;
    2058:	68fb      	ldr	r3, [r7, #12]
}
    205a:	4618      	mov	r0, r3
    205c:	3714      	adds	r7, #20
    205e:	46bd      	mov	sp, r7
    2060:	bc80      	pop	{r7}
    2062:	4770      	bx	lr

00002064 <mynumber>:

static char * mynumber (char * str, long num, int base, int size, int precision ,int type)
{
    2064:	b580      	push	{r7, lr}
    2066:	b09a      	sub	sp, #104	; 0x68
    2068:	af00      	add	r7, sp, #0
    206a:	60f8      	str	r0, [r7, #12]
    206c:	60b9      	str	r1, [r7, #8]
    206e:	607a      	str	r2, [r7, #4]
    2070:	603b      	str	r3, [r7, #0]
    char c = 0;
    2072:	2300      	movs	r3, #0
    2074:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    char sign = 0;
    2078:	2300      	movs	r3, #0
    207a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    char tmp[66] = {0};
    207e:	f107 0310 	add.w	r3, r7, #16
    2082:	2242      	movs	r2, #66	; 0x42
    2084:	2100      	movs	r1, #0
    2086:	4618      	mov	r0, r3
    2088:	f008 f930 	bl	a2ec <memset>
    int  i = 0;
    208c:	2300      	movs	r3, #0
    208e:	663b      	str	r3, [r7, #96]	; 0x60
    const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    2090:	4b85      	ldr	r3, [pc, #532]	; (22a8 <mynumber+0x244>)
    2092:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((type & LARGE) != 0) {
    2094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2096:	f003 0340 	and.w	r3, r3, #64	; 0x40
    209a:	2b00      	cmp	r3, #0
    209c:	d001      	beq.n	20a2 <mynumber+0x3e>
        digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    209e:	4b83      	ldr	r3, [pc, #524]	; (22ac <mynumber+0x248>)
    20a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    }
    if ((type & LEFT) != 0) {
    20a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    20a4:	f003 0310 	and.w	r3, r3, #16
    20a8:	2b00      	cmp	r3, #0
    20aa:	d003      	beq.n	20b4 <mynumber+0x50>
        type &= ~ZEROPAD;
    20ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    20ae:	f023 0301 	bic.w	r3, r3, #1
    20b2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((base < 2) || (base > 36)) {
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	2b01      	cmp	r3, #1
    20b8:	dd02      	ble.n	20c0 <mynumber+0x5c>
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	2b24      	cmp	r3, #36	; 0x24
    20be:	dd01      	ble.n	20c4 <mynumber+0x60>
        return 0;
    20c0:	2300      	movs	r3, #0
    20c2:	e0ec      	b.n	229e <mynumber+0x23a>
    }

    c = (type & ZEROPAD) ? '0' : ' ';
    20c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    20c6:	f003 0301 	and.w	r3, r3, #1
    20ca:	2b00      	cmp	r3, #0
    20cc:	d001      	beq.n	20d2 <mynumber+0x6e>
    20ce:	2330      	movs	r3, #48	; 0x30
    20d0:	e000      	b.n	20d4 <mynumber+0x70>
    20d2:	2320      	movs	r3, #32
    20d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    sign = 0;
    20d8:	2300      	movs	r3, #0
    20da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if ((type & SIGN) != 0) {
    20de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    20e0:	f003 0302 	and.w	r3, r3, #2
    20e4:	2b00      	cmp	r3, #0
    20e6:	d023      	beq.n	2130 <mynumber+0xcc>
        if (num < 0) {
    20e8:	68bb      	ldr	r3, [r7, #8]
    20ea:	2b00      	cmp	r3, #0
    20ec:	da09      	bge.n	2102 <mynumber+0x9e>
            sign = '-';
    20ee:	232d      	movs	r3, #45	; 0x2d
    20f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            num = -num;
    20f4:	68bb      	ldr	r3, [r7, #8]
    20f6:	425b      	negs	r3, r3
    20f8:	60bb      	str	r3, [r7, #8]
            size--;
    20fa:	683b      	ldr	r3, [r7, #0]
    20fc:	3b01      	subs	r3, #1
    20fe:	603b      	str	r3, [r7, #0]
    2100:	e016      	b.n	2130 <mynumber+0xcc>
        } else if ((type & PLUS) != 0) {
    2102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2104:	f003 0304 	and.w	r3, r3, #4
    2108:	2b00      	cmp	r3, #0
    210a:	d006      	beq.n	211a <mynumber+0xb6>
            sign = '+';
    210c:	232b      	movs	r3, #43	; 0x2b
    210e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
    2112:	683b      	ldr	r3, [r7, #0]
    2114:	3b01      	subs	r3, #1
    2116:	603b      	str	r3, [r7, #0]
    2118:	e00a      	b.n	2130 <mynumber+0xcc>
        } else if ((type & SPACE) != 0) {
    211a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    211c:	f003 0308 	and.w	r3, r3, #8
    2120:	2b00      	cmp	r3, #0
    2122:	d005      	beq.n	2130 <mynumber+0xcc>
            sign = ' ';
    2124:	2320      	movs	r3, #32
    2126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            size--;
    212a:	683b      	ldr	r3, [r7, #0]
    212c:	3b01      	subs	r3, #1
    212e:	603b      	str	r3, [r7, #0]
        }
    }
    if ((type & SPECIAL) != 0) {
    2130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2132:	f003 0320 	and.w	r3, r3, #32
    2136:	2b00      	cmp	r3, #0
    2138:	d00c      	beq.n	2154 <mynumber+0xf0>
        if (16 == base) {
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	2b10      	cmp	r3, #16
    213e:	d103      	bne.n	2148 <mynumber+0xe4>
            size -= 2;
    2140:	683b      	ldr	r3, [r7, #0]
    2142:	3b02      	subs	r3, #2
    2144:	603b      	str	r3, [r7, #0]
    2146:	e005      	b.n	2154 <mynumber+0xf0>
        } else if (8 == base) {
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	2b08      	cmp	r3, #8
    214c:	d102      	bne.n	2154 <mynumber+0xf0>
            size--;
    214e:	683b      	ldr	r3, [r7, #0]
    2150:	3b01      	subs	r3, #1
    2152:	603b      	str	r3, [r7, #0]
        }
    }
    i = 0;
    2154:	2300      	movs	r3, #0
    2156:	663b      	str	r3, [r7, #96]	; 0x60
    if (0 == num) {
    2158:	68bb      	ldr	r3, [r7, #8]
    215a:	2b00      	cmp	r3, #0
    215c:	d123      	bne.n	21a6 <mynumber+0x142>
        tmp[i++] = '0';
    215e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2160:	1c5a      	adds	r2, r3, #1
    2162:	663a      	str	r2, [r7, #96]	; 0x60
    2164:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2168:	4413      	add	r3, r2
    216a:	2230      	movs	r2, #48	; 0x30
    216c:	f803 2c58 	strb.w	r2, [r3, #-88]
    2170:	e01c      	b.n	21ac <mynumber+0x148>
    } else {
        while (num != 0) {
            tmp[i++] = digits[mydo_div(num,base)];
    2172:	68bb      	ldr	r3, [r7, #8]
    2174:	687a      	ldr	r2, [r7, #4]
    2176:	fbb3 f1f2 	udiv	r1, r3, r2
    217a:	fb02 f201 	mul.w	r2, r2, r1
    217e:	1a9b      	subs	r3, r3, r2
    2180:	657b      	str	r3, [r7, #84]	; 0x54
    2182:	68ba      	ldr	r2, [r7, #8]
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	fbb2 f3f3 	udiv	r3, r2, r3
    218a:	60bb      	str	r3, [r7, #8]
    218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    218e:	461a      	mov	r2, r3
    2190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2192:	441a      	add	r2, r3
    2194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2196:	1c59      	adds	r1, r3, #1
    2198:	6639      	str	r1, [r7, #96]	; 0x60
    219a:	7812      	ldrb	r2, [r2, #0]
    219c:	f107 0168 	add.w	r1, r7, #104	; 0x68
    21a0:	440b      	add	r3, r1
    21a2:	f803 2c58 	strb.w	r2, [r3, #-88]
        while (num != 0) {
    21a6:	68bb      	ldr	r3, [r7, #8]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d1e2      	bne.n	2172 <mynumber+0x10e>
        }
    }
    if (i > precision) {
    21ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    21ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    21b0:	429a      	cmp	r2, r3
    21b2:	dd01      	ble.n	21b8 <mynumber+0x154>
        precision = i;
    21b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    21b6:	673b      	str	r3, [r7, #112]	; 0x70
    }
    size -= precision;
    21b8:	683a      	ldr	r2, [r7, #0]
    21ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    21bc:	1ad3      	subs	r3, r2, r3
    21be:	603b      	str	r3, [r7, #0]
    if (0 == (type & (ZEROPAD + LEFT))) {
    21c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    21c2:	f003 0311 	and.w	r3, r3, #17
    21c6:	2b00      	cmp	r3, #0
    21c8:	d10a      	bne.n	21e0 <mynumber+0x17c>
        while (size-- > 0) {
    21ca:	e004      	b.n	21d6 <mynumber+0x172>
            *str++ = ' ';
    21cc:	68fb      	ldr	r3, [r7, #12]
    21ce:	1c5a      	adds	r2, r3, #1
    21d0:	60fa      	str	r2, [r7, #12]
    21d2:	2220      	movs	r2, #32
    21d4:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
    21d6:	683b      	ldr	r3, [r7, #0]
    21d8:	1e5a      	subs	r2, r3, #1
    21da:	603a      	str	r2, [r7, #0]
    21dc:	2b00      	cmp	r3, #0
    21de:	dcf5      	bgt.n	21cc <mynumber+0x168>
        }
    }
    if (sign != 0) {
    21e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    21e4:	2b00      	cmp	r3, #0
    21e6:	d005      	beq.n	21f4 <mynumber+0x190>
        *str++ = sign;
    21e8:	68fb      	ldr	r3, [r7, #12]
    21ea:	1c5a      	adds	r2, r3, #1
    21ec:	60fa      	str	r2, [r7, #12]
    21ee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    21f2:	701a      	strb	r2, [r3, #0]
    }
    if ((type & SPECIAL) != 0) {
    21f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    21f6:	f003 0320 	and.w	r3, r3, #32
    21fa:	2b00      	cmp	r3, #0
    21fc:	d017      	beq.n	222e <mynumber+0x1ca>
        if (8 == base) {
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	2b08      	cmp	r3, #8
    2202:	d105      	bne.n	2210 <mynumber+0x1ac>
            *str++ = '0';
    2204:	68fb      	ldr	r3, [r7, #12]
    2206:	1c5a      	adds	r2, r3, #1
    2208:	60fa      	str	r2, [r7, #12]
    220a:	2230      	movs	r2, #48	; 0x30
    220c:	701a      	strb	r2, [r3, #0]
    220e:	e00e      	b.n	222e <mynumber+0x1ca>
        } else if (16 == base) {
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	2b10      	cmp	r3, #16
    2214:	d10b      	bne.n	222e <mynumber+0x1ca>
            *str++ = '0';
    2216:	68fb      	ldr	r3, [r7, #12]
    2218:	1c5a      	adds	r2, r3, #1
    221a:	60fa      	str	r2, [r7, #12]
    221c:	2230      	movs	r2, #48	; 0x30
    221e:	701a      	strb	r2, [r3, #0]
            *str++ = digits[33];
    2220:	68fb      	ldr	r3, [r7, #12]
    2222:	1c5a      	adds	r2, r3, #1
    2224:	60fa      	str	r2, [r7, #12]
    2226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2228:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
    222c:	701a      	strb	r2, [r3, #0]
        }
    }
    if (0 == (type & LEFT)) {
    222e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2230:	f003 0310 	and.w	r3, r3, #16
    2234:	2b00      	cmp	r3, #0
    2236:	d111      	bne.n	225c <mynumber+0x1f8>
        while (size-- > 0) {
    2238:	e005      	b.n	2246 <mynumber+0x1e2>
            *str++ = c;
    223a:	68fb      	ldr	r3, [r7, #12]
    223c:	1c5a      	adds	r2, r3, #1
    223e:	60fa      	str	r2, [r7, #12]
    2240:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
    2244:	701a      	strb	r2, [r3, #0]
        while (size-- > 0) {
    2246:	683b      	ldr	r3, [r7, #0]
    2248:	1e5a      	subs	r2, r3, #1
    224a:	603a      	str	r2, [r7, #0]
    224c:	2b00      	cmp	r3, #0
    224e:	dcf4      	bgt.n	223a <mynumber+0x1d6>
        }
    }
    while (i < precision--) {
    2250:	e004      	b.n	225c <mynumber+0x1f8>
        *str++ = '0';
    2252:	68fb      	ldr	r3, [r7, #12]
    2254:	1c5a      	adds	r2, r3, #1
    2256:	60fa      	str	r2, [r7, #12]
    2258:	2230      	movs	r2, #48	; 0x30
    225a:	701a      	strb	r2, [r3, #0]
    while (i < precision--) {
    225c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    225e:	1e5a      	subs	r2, r3, #1
    2260:	673a      	str	r2, [r7, #112]	; 0x70
    2262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2264:	429a      	cmp	r2, r3
    2266:	dbf4      	blt.n	2252 <mynumber+0x1ee>
    }
    while (i-- > 0) {
    2268:	e008      	b.n	227c <mynumber+0x218>
        *str++ = tmp[i];
    226a:	68fb      	ldr	r3, [r7, #12]
    226c:	1c5a      	adds	r2, r3, #1
    226e:	60fa      	str	r2, [r7, #12]
    2270:	f107 0110 	add.w	r1, r7, #16
    2274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2276:	440a      	add	r2, r1
    2278:	7812      	ldrb	r2, [r2, #0]
    227a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
    227c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    227e:	1e5a      	subs	r2, r3, #1
    2280:	663a      	str	r2, [r7, #96]	; 0x60
    2282:	2b00      	cmp	r3, #0
    2284:	dcf1      	bgt.n	226a <mynumber+0x206>
    }
    while (size-- > 0) {
    2286:	e004      	b.n	2292 <mynumber+0x22e>
        *str++ = ' ';
    2288:	68fb      	ldr	r3, [r7, #12]
    228a:	1c5a      	adds	r2, r3, #1
    228c:	60fa      	str	r2, [r7, #12]
    228e:	2220      	movs	r2, #32
    2290:	701a      	strb	r2, [r3, #0]
    while (size-- > 0) {
    2292:	683b      	ldr	r3, [r7, #0]
    2294:	1e5a      	subs	r2, r3, #1
    2296:	603a      	str	r2, [r7, #0]
    2298:	2b00      	cmp	r3, #0
    229a:	dcf5      	bgt.n	2288 <mynumber+0x224>
    }

    return str;
    229c:	68fb      	ldr	r3, [r7, #12]
}
    229e:	4618      	mov	r0, r3
    22a0:	3768      	adds	r7, #104	; 0x68
    22a2:	46bd      	mov	sp, r7
    22a4:	bd80      	pop	{r7, pc}
    22a6:	bf00      	nop
    22a8:	0000a7d0 	.word	0x0000a7d0
    22ac:	0000a7f8 	.word	0x0000a7f8

000022b0 <myvsprintf>:
 *
 * If you're not already dealing with a va_list consider using sprintf().
 */

int myvsprintf (char *buf, const char *fmt, va_list args)
{
    22b0:	b580      	push	{r7, lr}
    22b2:	b092      	sub	sp, #72	; 0x48
    22b4:	af02      	add	r7, sp, #8
    22b6:	60f8      	str	r0, [r7, #12]
    22b8:	60b9      	str	r1, [r7, #8]
    22ba:	607a      	str	r2, [r7, #4]
    int qualifier;		//'h', 'l', or 'q' for integer fields
    char * str;
    const char *s;
    unsigned long num;

    for (str = buf; *fmt; ++fmt) {
    22bc:	68fb      	ldr	r3, [r7, #12]
    22be:	627b      	str	r3, [r7, #36]	; 0x24
    22c0:	e264      	b.n	278c <myvsprintf+0x4dc>
        if (*fmt != '%') {
    22c2:	68bb      	ldr	r3, [r7, #8]
    22c4:	781b      	ldrb	r3, [r3, #0]
    22c6:	2b25      	cmp	r3, #37	; 0x25
    22c8:	d006      	beq.n	22d8 <myvsprintf+0x28>
            *str++ = *fmt;
    22ca:	68ba      	ldr	r2, [r7, #8]
    22cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22ce:	1c59      	adds	r1, r3, #1
    22d0:	6279      	str	r1, [r7, #36]	; 0x24
    22d2:	7812      	ldrb	r2, [r2, #0]
    22d4:	701a      	strb	r2, [r3, #0]
            continue;
    22d6:	e256      	b.n	2786 <myvsprintf+0x4d6>
        }

        flags = 0;     //process flags
    22d8:	2300      	movs	r3, #0
    22da:	63bb      	str	r3, [r7, #56]	; 0x38

repeat:
        ++fmt;		   //this also skips first '%'
    22dc:	68bb      	ldr	r3, [r7, #8]
    22de:	3301      	adds	r3, #1
    22e0:	60bb      	str	r3, [r7, #8]
        switch (*fmt) {
    22e2:	68bb      	ldr	r3, [r7, #8]
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	3b20      	subs	r3, #32
    22e8:	2b10      	cmp	r3, #16
    22ea:	d83e      	bhi.n	236a <myvsprintf+0xba>
    22ec:	a201      	add	r2, pc, #4	; (adr r2, 22f4 <myvsprintf+0x44>)
    22ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    22f2:	bf00      	nop
    22f4:	0000234d 	.word	0x0000234d
    22f8:	0000236b 	.word	0x0000236b
    22fc:	0000236b 	.word	0x0000236b
    2300:	00002357 	.word	0x00002357
    2304:	0000236b 	.word	0x0000236b
    2308:	0000236b 	.word	0x0000236b
    230c:	0000236b 	.word	0x0000236b
    2310:	0000236b 	.word	0x0000236b
    2314:	0000236b 	.word	0x0000236b
    2318:	0000236b 	.word	0x0000236b
    231c:	0000236b 	.word	0x0000236b
    2320:	00002343 	.word	0x00002343
    2324:	0000236b 	.word	0x0000236b
    2328:	00002339 	.word	0x00002339
    232c:	0000236b 	.word	0x0000236b
    2330:	0000236b 	.word	0x0000236b
    2334:	00002361 	.word	0x00002361
        case '-':
            flags |= LEFT;
    2338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    233a:	f043 0310 	orr.w	r3, r3, #16
    233e:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
    2340:	e7cc      	b.n	22dc <myvsprintf+0x2c>
        case '+':
            flags |= PLUS;
    2342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2344:	f043 0304 	orr.w	r3, r3, #4
    2348:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
    234a:	e7c7      	b.n	22dc <myvsprintf+0x2c>
        case ' ':
            flags |= SPACE;
    234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    234e:	f043 0308 	orr.w	r3, r3, #8
    2352:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
    2354:	e7c2      	b.n	22dc <myvsprintf+0x2c>
        case '#':
            flags |= SPECIAL;
    2356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2358:	f043 0320 	orr.w	r3, r3, #32
    235c:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
    235e:	e7bd      	b.n	22dc <myvsprintf+0x2c>
        case '0':
            flags |= ZEROPAD;
    2360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2362:	f043 0301 	orr.w	r3, r3, #1
    2366:	63bb      	str	r3, [r7, #56]	; 0x38
            goto repeat;
    2368:	e7b8      	b.n	22dc <myvsprintf+0x2c>
        }

        field_width = -1;  //get field width
    236a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    236e:	633b      	str	r3, [r7, #48]	; 0x30
        if (isdigit(*fmt) != 0) {
    2370:	68bb      	ldr	r3, [r7, #8]
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	3b30      	subs	r3, #48	; 0x30
    2376:	2b09      	cmp	r3, #9
    2378:	d806      	bhi.n	2388 <myvsprintf+0xd8>

            field_width = myskip_atoi(&fmt);
    237a:	f107 0308 	add.w	r3, r7, #8
    237e:	4618      	mov	r0, r3
    2380:	f7ff fe4e 	bl	2020 <myskip_atoi>
    2384:	6338      	str	r0, [r7, #48]	; 0x30
    2386:	e015      	b.n	23b4 <myvsprintf+0x104>
        } else if ('*' == *fmt) {
    2388:	68bb      	ldr	r3, [r7, #8]
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	2b2a      	cmp	r3, #42	; 0x2a
    238e:	d111      	bne.n	23b4 <myvsprintf+0x104>
            ++fmt;
    2390:	68bb      	ldr	r3, [r7, #8]
    2392:	3301      	adds	r3, #1
    2394:	60bb      	str	r3, [r7, #8]
            field_width = va_arg(args, int); //it's the next argument
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	1d1a      	adds	r2, r3, #4
    239a:	607a      	str	r2, [r7, #4]
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	633b      	str	r3, [r7, #48]	; 0x30
            if (field_width < 0) {
    23a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23a2:	2b00      	cmp	r3, #0
    23a4:	da06      	bge.n	23b4 <myvsprintf+0x104>
                field_width = -field_width;
    23a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23a8:	425b      	negs	r3, r3
    23aa:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= LEFT;
    23ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23ae:	f043 0310 	orr.w	r3, r3, #16
    23b2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        precision = -1;      //get the precision
    23b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ('.' == *fmt) {
    23ba:	68bb      	ldr	r3, [r7, #8]
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	2b2e      	cmp	r3, #46	; 0x2e
    23c0:	d11f      	bne.n	2402 <myvsprintf+0x152>
            ++fmt;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	3301      	adds	r3, #1
    23c6:	60bb      	str	r3, [r7, #8]
            if (isdigit(*fmt)) {
    23c8:	68bb      	ldr	r3, [r7, #8]
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	3b30      	subs	r3, #48	; 0x30
    23ce:	2b09      	cmp	r3, #9
    23d0:	d806      	bhi.n	23e0 <myvsprintf+0x130>
                precision = myskip_atoi(&fmt);
    23d2:	f107 0308 	add.w	r3, r7, #8
    23d6:	4618      	mov	r0, r3
    23d8:	f7ff fe22 	bl	2020 <myskip_atoi>
    23dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    23de:	e00b      	b.n	23f8 <myvsprintf+0x148>
            } else if ('*' == *fmt) {
    23e0:	68bb      	ldr	r3, [r7, #8]
    23e2:	781b      	ldrb	r3, [r3, #0]
    23e4:	2b2a      	cmp	r3, #42	; 0x2a
    23e6:	d107      	bne.n	23f8 <myvsprintf+0x148>
                ++fmt;
    23e8:	68bb      	ldr	r3, [r7, #8]
    23ea:	3301      	adds	r3, #1
    23ec:	60bb      	str	r3, [r7, #8]
                precision = va_arg(args, int); //it's the next argument
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	1d1a      	adds	r2, r3, #4
    23f2:	607a      	str	r2, [r7, #4]
    23f4:	681b      	ldr	r3, [r3, #0]
    23f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (precision < 0) {
    23f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    23fa:	2b00      	cmp	r3, #0
    23fc:	da01      	bge.n	2402 <myvsprintf+0x152>
                precision = 0;
    23fe:	2300      	movs	r3, #0
    2400:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        qualifier = -1;         //get the conversion qualifier
    2402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2406:	62bb      	str	r3, [r7, #40]	; 0x28
        if (('h' == *fmt) || ('l' == *fmt) || ('q' == *fmt)) {
    2408:	68bb      	ldr	r3, [r7, #8]
    240a:	781b      	ldrb	r3, [r3, #0]
    240c:	2b68      	cmp	r3, #104	; 0x68
    240e:	d007      	beq.n	2420 <myvsprintf+0x170>
    2410:	68bb      	ldr	r3, [r7, #8]
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b6c      	cmp	r3, #108	; 0x6c
    2416:	d003      	beq.n	2420 <myvsprintf+0x170>
    2418:	68bb      	ldr	r3, [r7, #8]
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	2b71      	cmp	r3, #113	; 0x71
    241e:	d105      	bne.n	242c <myvsprintf+0x17c>
            qualifier = *fmt;
    2420:	68bb      	ldr	r3, [r7, #8]
    2422:	781b      	ldrb	r3, [r3, #0]
    2424:	62bb      	str	r3, [r7, #40]	; 0x28
            ++fmt;
    2426:	68bb      	ldr	r3, [r7, #8]
    2428:	3301      	adds	r3, #1
    242a:	60bb      	str	r3, [r7, #8]
        }

        base = 10;          //default base
    242c:	230a      	movs	r3, #10
    242e:	637b      	str	r3, [r7, #52]	; 0x34
        switch (*fmt) {
    2430:	68bb      	ldr	r3, [r7, #8]
    2432:	781b      	ldrb	r3, [r3, #0]
    2434:	3b25      	subs	r3, #37	; 0x25
    2436:	2b53      	cmp	r3, #83	; 0x53
    2438:	f200 815a 	bhi.w	26f0 <myvsprintf+0x440>
    243c:	a201      	add	r2, pc, #4	; (adr r2, 2444 <myvsprintf+0x194>)
    243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2442:	bf00      	nop
    2444:	000026c7 	.word	0x000026c7
    2448:	000026f1 	.word	0x000026f1
    244c:	000026f1 	.word	0x000026f1
    2450:	000026f1 	.word	0x000026f1
    2454:	000026f1 	.word	0x000026f1
    2458:	000026f1 	.word	0x000026f1
    245c:	000026f1 	.word	0x000026f1
    2460:	000026f1 	.word	0x000026f1
    2464:	000026f1 	.word	0x000026f1
    2468:	000026f1 	.word	0x000026f1
    246c:	000026f1 	.word	0x000026f1
    2470:	000026f1 	.word	0x000026f1
    2474:	000026f1 	.word	0x000026f1
    2478:	000026f1 	.word	0x000026f1
    247c:	000026f1 	.word	0x000026f1
    2480:	000026f1 	.word	0x000026f1
    2484:	000026f1 	.word	0x000026f1
    2488:	000026f1 	.word	0x000026f1
    248c:	000026f1 	.word	0x000026f1
    2490:	000026f1 	.word	0x000026f1
    2494:	000026f1 	.word	0x000026f1
    2498:	000026f1 	.word	0x000026f1
    249c:	000026f1 	.word	0x000026f1
    24a0:	000026f1 	.word	0x000026f1
    24a4:	000026f1 	.word	0x000026f1
    24a8:	000026f1 	.word	0x000026f1
    24ac:	000026f1 	.word	0x000026f1
    24b0:	000026f1 	.word	0x000026f1
    24b4:	000026f1 	.word	0x000026f1
    24b8:	000026f1 	.word	0x000026f1
    24bc:	000026f1 	.word	0x000026f1
    24c0:	000026f1 	.word	0x000026f1
    24c4:	000026f1 	.word	0x000026f1
    24c8:	000026f1 	.word	0x000026f1
    24cc:	000026f1 	.word	0x000026f1
    24d0:	000026f1 	.word	0x000026f1
    24d4:	000026f1 	.word	0x000026f1
    24d8:	000026f1 	.word	0x000026f1
    24dc:	000026f1 	.word	0x000026f1
    24e0:	000026f1 	.word	0x000026f1
    24e4:	000026f1 	.word	0x000026f1
    24e8:	000026f1 	.word	0x000026f1
    24ec:	000026f1 	.word	0x000026f1
    24f0:	000026f1 	.word	0x000026f1
    24f4:	000026f1 	.word	0x000026f1
    24f8:	000026f1 	.word	0x000026f1
    24fc:	000026f1 	.word	0x000026f1
    2500:	000026f1 	.word	0x000026f1
    2504:	000026f1 	.word	0x000026f1
    2508:	000026f1 	.word	0x000026f1
    250c:	000026f1 	.word	0x000026f1
    2510:	000026d9 	.word	0x000026d9
    2514:	000026f1 	.word	0x000026f1
    2518:	000026f1 	.word	0x000026f1
    251c:	000026f1 	.word	0x000026f1
    2520:	000026f1 	.word	0x000026f1
    2524:	000026f1 	.word	0x000026f1
    2528:	000026f1 	.word	0x000026f1
    252c:	000026f1 	.word	0x000026f1
    2530:	000026f1 	.word	0x000026f1
    2534:	000026f1 	.word	0x000026f1
    2538:	000026f1 	.word	0x000026f1
    253c:	00002595 	.word	0x00002595
    2540:	000026e7 	.word	0x000026e7
    2544:	000026f1 	.word	0x000026f1
    2548:	000026f1 	.word	0x000026f1
    254c:	000026f1 	.word	0x000026f1
    2550:	000026f1 	.word	0x000026f1
    2554:	000026e7 	.word	0x000026e7
    2558:	000026f1 	.word	0x000026f1
    255c:	000026f1 	.word	0x000026f1
    2560:	000026f1 	.word	0x000026f1
    2564:	000026f1 	.word	0x000026f1
    2568:	00002695 	.word	0x00002695
    256c:	000026d3 	.word	0x000026d3
    2570:	00002661 	.word	0x00002661
    2574:	000026f1 	.word	0x000026f1
    2578:	000026f1 	.word	0x000026f1
    257c:	000025e3 	.word	0x000025e3
    2580:	000026f1 	.word	0x000026f1
    2584:	00002719 	.word	0x00002719
    2588:	000026f1 	.word	0x000026f1
    258c:	000026f1 	.word	0x000026f1
    2590:	000026e1 	.word	0x000026e1
        case 'c': {
            if (0 == (flags & LEFT)) {
    2594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2596:	f003 0310 	and.w	r3, r3, #16
    259a:	2b00      	cmp	r3, #0
    259c:	d10b      	bne.n	25b6 <myvsprintf+0x306>
                while (--field_width > 0) {
    259e:	e004      	b.n	25aa <myvsprintf+0x2fa>
                    *str++ = ' ';
    25a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25a2:	1c5a      	adds	r2, r3, #1
    25a4:	627a      	str	r2, [r7, #36]	; 0x24
    25a6:	2220      	movs	r2, #32
    25a8:	701a      	strb	r2, [r3, #0]
                while (--field_width > 0) {
    25aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    25ac:	3b01      	subs	r3, #1
    25ae:	633b      	str	r3, [r7, #48]	; 0x30
    25b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    25b2:	2b00      	cmp	r3, #0
    25b4:	dcf4      	bgt.n	25a0 <myvsprintf+0x2f0>
                }
            }
            *str++ = (unsigned char) va_arg(args, int);
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	1d1a      	adds	r2, r3, #4
    25ba:	607a      	str	r2, [r7, #4]
    25bc:	6819      	ldr	r1, [r3, #0]
    25be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25c0:	1c5a      	adds	r2, r3, #1
    25c2:	627a      	str	r2, [r7, #36]	; 0x24
    25c4:	b2ca      	uxtb	r2, r1
    25c6:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    25c8:	e004      	b.n	25d4 <myvsprintf+0x324>
                *str++ = ' ';
    25ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25cc:	1c5a      	adds	r2, r3, #1
    25ce:	627a      	str	r2, [r7, #36]	; 0x24
    25d0:	2220      	movs	r2, #32
    25d2:	701a      	strb	r2, [r3, #0]
            while (--field_width > 0) {
    25d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    25d6:	3b01      	subs	r3, #1
    25d8:	633b      	str	r3, [r7, #48]	; 0x30
    25da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    25dc:	2b00      	cmp	r3, #0
    25de:	dcf4      	bgt.n	25ca <myvsprintf+0x31a>
            }
            continue;
    25e0:	e0d1      	b.n	2786 <myvsprintf+0x4d6>
        }
        case 's': {
            s = va_arg(args, char *);
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	1d1a      	adds	r2, r3, #4
    25e6:	607a      	str	r2, [r7, #4]
    25e8:	681b      	ldr	r3, [r3, #0]
    25ea:	623b      	str	r3, [r7, #32]
            if (!s) {
    25ec:	6a3b      	ldr	r3, [r7, #32]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d101      	bne.n	25f6 <myvsprintf+0x346>
                s = "<NULL>";
    25f2:	4b6e      	ldr	r3, [pc, #440]	; (27ac <myvsprintf+0x4fc>)
    25f4:	623b      	str	r3, [r7, #32]
            }
            len = mystrnlen(s, precision);
    25f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    25f8:	6a38      	ldr	r0, [r7, #32]
    25fa:	f7ff fcf5 	bl	1fe8 <mystrnlen>
    25fe:	61b8      	str	r0, [r7, #24]
            if (0 == (flags & LEFT)) {
    2600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2602:	f003 0310 	and.w	r3, r3, #16
    2606:	2b00      	cmp	r3, #0
    2608:	d10b      	bne.n	2622 <myvsprintf+0x372>
                while (len < field_width--) {
    260a:	e004      	b.n	2616 <myvsprintf+0x366>
                    *str++ = ' ';
    260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    260e:	1c5a      	adds	r2, r3, #1
    2610:	627a      	str	r2, [r7, #36]	; 0x24
    2612:	2220      	movs	r2, #32
    2614:	701a      	strb	r2, [r3, #0]
                while (len < field_width--) {
    2616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2618:	1e5a      	subs	r2, r3, #1
    261a:	633a      	str	r2, [r7, #48]	; 0x30
    261c:	69ba      	ldr	r2, [r7, #24]
    261e:	429a      	cmp	r2, r3
    2620:	dbf4      	blt.n	260c <myvsprintf+0x35c>
                }
            }
            for (i = 0; i < len; ++i) {
    2622:	2300      	movs	r3, #0
    2624:	63fb      	str	r3, [r7, #60]	; 0x3c
    2626:	e00a      	b.n	263e <myvsprintf+0x38e>
                *str++ = *s++;
    2628:	6a3a      	ldr	r2, [r7, #32]
    262a:	1c53      	adds	r3, r2, #1
    262c:	623b      	str	r3, [r7, #32]
    262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2630:	1c59      	adds	r1, r3, #1
    2632:	6279      	str	r1, [r7, #36]	; 0x24
    2634:	7812      	ldrb	r2, [r2, #0]
    2636:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < len; ++i) {
    2638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    263a:	3301      	adds	r3, #1
    263c:	63fb      	str	r3, [r7, #60]	; 0x3c
    263e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2640:	69bb      	ldr	r3, [r7, #24]
    2642:	429a      	cmp	r2, r3
    2644:	dbf0      	blt.n	2628 <myvsprintf+0x378>
            }
            while (len < field_width--) {
    2646:	e004      	b.n	2652 <myvsprintf+0x3a2>
                *str++ = ' ';
    2648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    264a:	1c5a      	adds	r2, r3, #1
    264c:	627a      	str	r2, [r7, #36]	; 0x24
    264e:	2220      	movs	r2, #32
    2650:	701a      	strb	r2, [r3, #0]
            while (len < field_width--) {
    2652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2654:	1e5a      	subs	r2, r3, #1
    2656:	633a      	str	r2, [r7, #48]	; 0x30
    2658:	69ba      	ldr	r2, [r7, #24]
    265a:	429a      	cmp	r2, r3
    265c:	dbf4      	blt.n	2648 <myvsprintf+0x398>
            }
            continue;
    265e:	e092      	b.n	2786 <myvsprintf+0x4d6>
        }
        case 'p': {
            if (-1 == field_width) {
    2660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2666:	d105      	bne.n	2674 <myvsprintf+0x3c4>
                field_width = 2 * sizeof(void *);
    2668:	2308      	movs	r3, #8
    266a:	633b      	str	r3, [r7, #48]	; 0x30
                flags |= ZEROPAD;
    266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    266e:	f043 0301 	orr.w	r3, r3, #1
    2672:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            str = mynumber(str, (unsigned long)va_arg(args, void *), 16, field_width, precision, flags);
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	1d1a      	adds	r2, r3, #4
    2678:	607a      	str	r2, [r7, #4]
    267a:	681b      	ldr	r3, [r3, #0]
    267c:	4619      	mov	r1, r3
    267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2680:	9301      	str	r3, [sp, #4]
    2682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2684:	9300      	str	r3, [sp, #0]
    2686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2688:	2210      	movs	r2, #16
    268a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    268c:	f7ff fcea 	bl	2064 <mynumber>
    2690:	6278      	str	r0, [r7, #36]	; 0x24
            continue;
    2692:	e078      	b.n	2786 <myvsprintf+0x4d6>
        }
        case 'n': {
            if ('l' == qualifier) {
    2694:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2696:	2b6c      	cmp	r3, #108	; 0x6c
    2698:	d10a      	bne.n	26b0 <myvsprintf+0x400>
                long * ip = va_arg(args, long *);
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	1d1a      	adds	r2, r3, #4
    269e:	607a      	str	r2, [r7, #4]
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	613b      	str	r3, [r7, #16]
                *ip = (str - buf);
    26a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	1ad2      	subs	r2, r2, r3
    26aa:	693b      	ldr	r3, [r7, #16]
    26ac:	601a      	str	r2, [r3, #0]
            } else {
                int * ip = va_arg(args, int *);
                *ip = (str - buf);
            }
            continue;
    26ae:	e06a      	b.n	2786 <myvsprintf+0x4d6>
                int * ip = va_arg(args, int *);
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	1d1a      	adds	r2, r3, #4
    26b4:	607a      	str	r2, [r7, #4]
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	617b      	str	r3, [r7, #20]
                *ip = (str - buf);
    26ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	1ad2      	subs	r2, r2, r3
    26c0:	697b      	ldr	r3, [r7, #20]
    26c2:	601a      	str	r2, [r3, #0]
            continue;
    26c4:	e05f      	b.n	2786 <myvsprintf+0x4d6>
        }
        case '%': {
            *str++ = '%';
    26c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26c8:	1c5a      	adds	r2, r3, #1
    26ca:	627a      	str	r2, [r7, #36]	; 0x24
    26cc:	2225      	movs	r2, #37	; 0x25
    26ce:	701a      	strb	r2, [r3, #0]
            continue;
    26d0:	e059      	b.n	2786 <myvsprintf+0x4d6>
        }

        case 'o': { //integer number formats - set up the flags and "break"
            base = 8;
    26d2:	2308      	movs	r3, #8
    26d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    26d6:	e020      	b.n	271a <myvsprintf+0x46a>
        }

        case 'X': {
            flags |= LARGE;
    26d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    26da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26de:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'x': {
            base = 16;
    26e0:	2310      	movs	r3, #16
    26e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
    26e4:	e019      	b.n	271a <myvsprintf+0x46a>
        }
        case 'd':
        case 'i': {
            flags |= SIGN;
    26e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    26e8:	f043 0302 	orr.w	r3, r3, #2
    26ec:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        case 'u': {
            break;
    26ee:	e013      	b.n	2718 <myvsprintf+0x468>
        }
        default: {
            *str++ = '%';
    26f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26f2:	1c5a      	adds	r2, r3, #1
    26f4:	627a      	str	r2, [r7, #36]	; 0x24
    26f6:	2225      	movs	r2, #37	; 0x25
    26f8:	701a      	strb	r2, [r3, #0]
            if (0 == *fmt) {
    26fa:	68bb      	ldr	r3, [r7, #8]
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	2b00      	cmp	r3, #0
    2700:	d106      	bne.n	2710 <myvsprintf+0x460>
                *str++ = *fmt;
    2702:	68ba      	ldr	r2, [r7, #8]
    2704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2706:	1c59      	adds	r1, r3, #1
    2708:	6279      	str	r1, [r7, #36]	; 0x24
    270a:	7812      	ldrb	r2, [r2, #0]
    270c:	701a      	strb	r2, [r3, #0]
            } else {
                --fmt;
            }
            continue;
    270e:	e03a      	b.n	2786 <myvsprintf+0x4d6>
                --fmt;
    2710:	68bb      	ldr	r3, [r7, #8]
    2712:	3b01      	subs	r3, #1
    2714:	60bb      	str	r3, [r7, #8]
            continue;
    2716:	e036      	b.n	2786 <myvsprintf+0x4d6>
            break;
    2718:	bf00      	nop
        }
        }

        if ('l' == qualifier) {
    271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    271c:	2b6c      	cmp	r3, #108	; 0x6c
    271e:	d105      	bne.n	272c <myvsprintf+0x47c>
            num = va_arg(args, unsigned long);
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	1d1a      	adds	r2, r3, #4
    2724:	607a      	str	r2, [r7, #4]
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	61fb      	str	r3, [r7, #28]
    272a:	e021      	b.n	2770 <myvsprintf+0x4c0>
        } else if ('h' == qualifier) {
    272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    272e:	2b68      	cmp	r3, #104	; 0x68
    2730:	d10e      	bne.n	2750 <myvsprintf+0x4a0>
            num = (unsigned short) va_arg(args, int);
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	1d1a      	adds	r2, r3, #4
    2736:	607a      	str	r2, [r7, #4]
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	b29b      	uxth	r3, r3
    273c:	61fb      	str	r3, [r7, #28]
            if (0 == (flags & SIGN)) {
    273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2740:	f003 0302 	and.w	r3, r3, #2
    2744:	2b00      	cmp	r3, #0
    2746:	d113      	bne.n	2770 <myvsprintf+0x4c0>
                num = (short) num;
    2748:	69fb      	ldr	r3, [r7, #28]
    274a:	b21b      	sxth	r3, r3
    274c:	61fb      	str	r3, [r7, #28]
    274e:	e00f      	b.n	2770 <myvsprintf+0x4c0>
            }
        } else if (0 == (flags & SIGN)) {
    2750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2752:	f003 0302 	and.w	r3, r3, #2
    2756:	2b00      	cmp	r3, #0
    2758:	d105      	bne.n	2766 <myvsprintf+0x4b6>
            num = va_arg(args, int);
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	1d1a      	adds	r2, r3, #4
    275e:	607a      	str	r2, [r7, #4]
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	61fb      	str	r3, [r7, #28]
    2764:	e004      	b.n	2770 <myvsprintf+0x4c0>
        } else {
            num = va_arg(args, unsigned int);
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	1d1a      	adds	r2, r3, #4
    276a:	607a      	str	r2, [r7, #4]
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	61fb      	str	r3, [r7, #28]
        }

        str = mynumber(str, num, base, field_width, precision, flags);
    2770:	69f9      	ldr	r1, [r7, #28]
    2772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2774:	9301      	str	r3, [sp, #4]
    2776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2778:	9300      	str	r3, [sp, #0]
    277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    277c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    277e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2780:	f7ff fc70 	bl	2064 <mynumber>
    2784:	6278      	str	r0, [r7, #36]	; 0x24
    for (str = buf; *fmt; ++fmt) {
    2786:	68bb      	ldr	r3, [r7, #8]
    2788:	3301      	adds	r3, #1
    278a:	60bb      	str	r3, [r7, #8]
    278c:	68bb      	ldr	r3, [r7, #8]
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	2b00      	cmp	r3, #0
    2792:	f47f ad96 	bne.w	22c2 <myvsprintf+0x12>

    }
    *str = '\0';
    2796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2798:	2200      	movs	r2, #0
    279a:	701a      	strb	r2, [r3, #0]

    return str-buf;
    279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    279e:	68fb      	ldr	r3, [r7, #12]
    27a0:	1ad3      	subs	r3, r2, r3
}
    27a2:	4618      	mov	r0, r3
    27a4:	3740      	adds	r7, #64	; 0x40
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}
    27aa:	bf00      	nop
    27ac:	0000a820 	.word	0x0000a820

000027b0 <myputc>:

void myputc (const char c)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	af00      	add	r7, sp, #0
    27b6:	4603      	mov	r3, r0
    27b8:	71fb      	strb	r3, [r7, #7]
    if (c == '\n')
    27ba:	79fb      	ldrb	r3, [r7, #7]
    27bc:	2b0a      	cmp	r3, #10
    27be:	d102      	bne.n	27c6 <myputc+0x16>
        usart_send_bytes('\r');
    27c0:	200d      	movs	r0, #13
    27c2:	f7ff fbf7 	bl	1fb4 <usart_send_bytes>
    usart_send_bytes(c);
    27c6:	79fb      	ldrb	r3, [r7, #7]
    27c8:	4618      	mov	r0, r3
    27ca:	f7ff fbf3 	bl	1fb4 <usart_send_bytes>
}
    27ce:	bf00      	nop
    27d0:	3708      	adds	r7, #8
    27d2:	46bd      	mov	sp, r7
    27d4:	bd80      	pop	{r7, pc}

000027d6 <myputs>:

void myputs (const unsigned char *s)
{
    27d6:	b580      	push	{r7, lr}
    27d8:	b082      	sub	sp, #8
    27da:	af00      	add	r7, sp, #0
    27dc:	6078      	str	r0, [r7, #4]
    while (*s) {
    27de:	e006      	b.n	27ee <myputs+0x18>
        myputc (*s++);
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	1c5a      	adds	r2, r3, #1
    27e4:	607a      	str	r2, [r7, #4]
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	4618      	mov	r0, r3
    27ea:	f7ff ffe1 	bl	27b0 <myputc>
    while (*s) {
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	781b      	ldrb	r3, [r3, #0]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d1f4      	bne.n	27e0 <myputs+0xa>
    }
}
    27f6:	bf00      	nop
    27f8:	3708      	adds	r7, #8
    27fa:	46bd      	mov	sp, r7
    27fc:	bd80      	pop	{r7, pc}

000027fe <myprintf>:

void myprintf (const char *fmt,...)
{
    27fe:	b40f      	push	{r0, r1, r2, r3}
    2800:	b580      	push	{r7, lr}
    2802:	b0a2      	sub	sp, #136	; 0x88
    2804:	af00      	add	r7, sp, #0
    va_list args;
    char printbuffer[PBSIZE];

    va_start(args, fmt);
    2806:	f107 0394 	add.w	r3, r7, #148	; 0x94
    280a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    myvsprintf(printbuffer, fmt, args);
    280e:	1d3b      	adds	r3, r7, #4
    2810:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    2814:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    2818:	4618      	mov	r0, r3
    281a:	f7ff fd49 	bl	22b0 <myvsprintf>
    va_end(args);

    myputs((const unsigned char *)printbuffer);  // Print the string
    281e:	1d3b      	adds	r3, r7, #4
    2820:	4618      	mov	r0, r3
    2822:	f7ff ffd8 	bl	27d6 <myputs>
}
    2826:	bf00      	nop
    2828:	3788      	adds	r7, #136	; 0x88
    282a:	46bd      	mov	sp, r7
    282c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2830:	b004      	add	sp, #16
    2832:	4770      	bx	lr

00002834 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    2834:	b480      	push	{r7}
    2836:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    2838:	4b13      	ldr	r3, [pc, #76]	; (2888 <RCC_DeInit+0x54>)
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	4a12      	ldr	r2, [pc, #72]	; (2888 <RCC_DeInit+0x54>)
    283e:	f043 0301 	orr.w	r3, r3, #1
    2842:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    2844:	4b10      	ldr	r3, [pc, #64]	; (2888 <RCC_DeInit+0x54>)
    2846:	685a      	ldr	r2, [r3, #4]
    2848:	490f      	ldr	r1, [pc, #60]	; (2888 <RCC_DeInit+0x54>)
    284a:	4b10      	ldr	r3, [pc, #64]	; (288c <RCC_DeInit+0x58>)
    284c:	4013      	ands	r3, r2
    284e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    2850:	4b0d      	ldr	r3, [pc, #52]	; (2888 <RCC_DeInit+0x54>)
    2852:	681b      	ldr	r3, [r3, #0]
    2854:	4a0c      	ldr	r2, [pc, #48]	; (2888 <RCC_DeInit+0x54>)
    2856:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    285e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    2860:	4b09      	ldr	r3, [pc, #36]	; (2888 <RCC_DeInit+0x54>)
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	4a08      	ldr	r2, [pc, #32]	; (2888 <RCC_DeInit+0x54>)
    2866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    286a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    286c:	4b06      	ldr	r3, [pc, #24]	; (2888 <RCC_DeInit+0x54>)
    286e:	685b      	ldr	r3, [r3, #4]
    2870:	4a05      	ldr	r2, [pc, #20]	; (2888 <RCC_DeInit+0x54>)
    2872:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    2876:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    2878:	4b03      	ldr	r3, [pc, #12]	; (2888 <RCC_DeInit+0x54>)
    287a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    287e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    2880:	bf00      	nop
    2882:	46bd      	mov	sp, r7
    2884:	bc80      	pop	{r7}
    2886:	4770      	bx	lr
    2888:	40021000 	.word	0x40021000
    288c:	f8ff0000 	.word	0xf8ff0000

00002890 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    2890:	b480      	push	{r7}
    2892:	b083      	sub	sp, #12
    2894:	af00      	add	r7, sp, #0
    2896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    2898:	4b13      	ldr	r3, [pc, #76]	; (28e8 <RCC_HSEConfig+0x58>)
    289a:	681b      	ldr	r3, [r3, #0]
    289c:	4a12      	ldr	r2, [pc, #72]	; (28e8 <RCC_HSEConfig+0x58>)
    289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    28a2:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    28a4:	4b10      	ldr	r3, [pc, #64]	; (28e8 <RCC_HSEConfig+0x58>)
    28a6:	681b      	ldr	r3, [r3, #0]
    28a8:	4a0f      	ldr	r2, [pc, #60]	; (28e8 <RCC_HSEConfig+0x58>)
    28aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    28ae:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    28b6:	d003      	beq.n	28c0 <RCC_HSEConfig+0x30>
    28b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    28bc:	d007      	beq.n	28ce <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
    28be:	e00d      	b.n	28dc <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
    28c0:	4b09      	ldr	r3, [pc, #36]	; (28e8 <RCC_HSEConfig+0x58>)
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	4a08      	ldr	r2, [pc, #32]	; (28e8 <RCC_HSEConfig+0x58>)
    28c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    28ca:	6013      	str	r3, [r2, #0]
      break;
    28cc:	e006      	b.n	28dc <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    28ce:	4b06      	ldr	r3, [pc, #24]	; (28e8 <RCC_HSEConfig+0x58>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	4a05      	ldr	r2, [pc, #20]	; (28e8 <RCC_HSEConfig+0x58>)
    28d4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    28d8:	6013      	str	r3, [r2, #0]
      break;
    28da:	bf00      	nop
  }
}
    28dc:	bf00      	nop
    28de:	370c      	adds	r7, #12
    28e0:	46bd      	mov	sp, r7
    28e2:	bc80      	pop	{r7}
    28e4:	4770      	bx	lr
    28e6:	bf00      	nop
    28e8:	40021000 	.word	0x40021000

000028ec <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    28ec:	b580      	push	{r7, lr}
    28ee:	b082      	sub	sp, #8
    28f0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    28f2:	2300      	movs	r3, #0
    28f4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    28f6:	2300      	movs	r3, #0
    28f8:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    28fa:	2300      	movs	r3, #0
    28fc:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    28fe:	2031      	movs	r0, #49	; 0x31
    2900:	f000 fb0e 	bl	2f20 <RCC_GetFlagStatus>
    2904:	4603      	mov	r3, r0
    2906:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    2908:	683b      	ldr	r3, [r7, #0]
    290a:	3301      	adds	r3, #1
    290c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    290e:	683b      	ldr	r3, [r7, #0]
    2910:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    2914:	d002      	beq.n	291c <RCC_WaitForHSEStartUp+0x30>
    2916:	79bb      	ldrb	r3, [r7, #6]
    2918:	2b00      	cmp	r3, #0
    291a:	d0f0      	beq.n	28fe <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    291c:	2031      	movs	r0, #49	; 0x31
    291e:	f000 faff 	bl	2f20 <RCC_GetFlagStatus>
    2922:	4603      	mov	r3, r0
    2924:	2b00      	cmp	r3, #0
    2926:	d002      	beq.n	292e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
    2928:	2301      	movs	r3, #1
    292a:	71fb      	strb	r3, [r7, #7]
    292c:	e001      	b.n	2932 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
    292e:	2300      	movs	r3, #0
    2930:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    2932:	79fb      	ldrb	r3, [r7, #7]
}
    2934:	4618      	mov	r0, r3
    2936:	3708      	adds	r7, #8
    2938:	46bd      	mov	sp, r7
    293a:	bd80      	pop	{r7, pc}

0000293c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    293c:	b480      	push	{r7}
    293e:	b085      	sub	sp, #20
    2940:	af00      	add	r7, sp, #0
    2942:	4603      	mov	r3, r0
    2944:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    2946:	2300      	movs	r3, #0
    2948:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    294a:	4b0a      	ldr	r3, [pc, #40]	; (2974 <RCC_AdjustHSICalibrationValue+0x38>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    2950:	68fb      	ldr	r3, [r7, #12]
    2952:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    2956:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    2958:	79fb      	ldrb	r3, [r7, #7]
    295a:	00db      	lsls	r3, r3, #3
    295c:	68fa      	ldr	r2, [r7, #12]
    295e:	4313      	orrs	r3, r2
    2960:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    2962:	4a04      	ldr	r2, [pc, #16]	; (2974 <RCC_AdjustHSICalibrationValue+0x38>)
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	6013      	str	r3, [r2, #0]
}
    2968:	bf00      	nop
    296a:	3714      	adds	r7, #20
    296c:	46bd      	mov	sp, r7
    296e:	bc80      	pop	{r7}
    2970:	4770      	bx	lr
    2972:	bf00      	nop
    2974:	40021000 	.word	0x40021000

00002978 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    2978:	b480      	push	{r7}
    297a:	b083      	sub	sp, #12
    297c:	af00      	add	r7, sp, #0
    297e:	4603      	mov	r3, r0
    2980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    2982:	4a04      	ldr	r2, [pc, #16]	; (2994 <RCC_HSICmd+0x1c>)
    2984:	79fb      	ldrb	r3, [r7, #7]
    2986:	6013      	str	r3, [r2, #0]
}
    2988:	bf00      	nop
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	bc80      	pop	{r7}
    2990:	4770      	bx	lr
    2992:	bf00      	nop
    2994:	42420000 	.word	0x42420000

00002998 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    2998:	b480      	push	{r7}
    299a:	b085      	sub	sp, #20
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    29a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    29a2:	2300      	movs	r3, #0
    29a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    29a6:	4b0a      	ldr	r3, [pc, #40]	; (29d0 <RCC_PLLConfig+0x38>)
    29a8:	685b      	ldr	r3, [r3, #4]
    29aa:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    29ac:	68fb      	ldr	r3, [r7, #12]
    29ae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    29b2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    29b4:	687a      	ldr	r2, [r7, #4]
    29b6:	683b      	ldr	r3, [r7, #0]
    29b8:	4313      	orrs	r3, r2
    29ba:	68fa      	ldr	r2, [r7, #12]
    29bc:	4313      	orrs	r3, r2
    29be:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    29c0:	4a03      	ldr	r2, [pc, #12]	; (29d0 <RCC_PLLConfig+0x38>)
    29c2:	68fb      	ldr	r3, [r7, #12]
    29c4:	6053      	str	r3, [r2, #4]
}
    29c6:	bf00      	nop
    29c8:	3714      	adds	r7, #20
    29ca:	46bd      	mov	sp, r7
    29cc:	bc80      	pop	{r7}
    29ce:	4770      	bx	lr
    29d0:	40021000 	.word	0x40021000

000029d4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    29d4:	b480      	push	{r7}
    29d6:	b083      	sub	sp, #12
    29d8:	af00      	add	r7, sp, #0
    29da:	4603      	mov	r3, r0
    29dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    29de:	4a04      	ldr	r2, [pc, #16]	; (29f0 <RCC_PLLCmd+0x1c>)
    29e0:	79fb      	ldrb	r3, [r7, #7]
    29e2:	6013      	str	r3, [r2, #0]
}
    29e4:	bf00      	nop
    29e6:	370c      	adds	r7, #12
    29e8:	46bd      	mov	sp, r7
    29ea:	bc80      	pop	{r7}
    29ec:	4770      	bx	lr
    29ee:	bf00      	nop
    29f0:	42420060 	.word	0x42420060

000029f4 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    29f4:	b480      	push	{r7}
    29f6:	b085      	sub	sp, #20
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    29fc:	2300      	movs	r3, #0
    29fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    2a00:	4b09      	ldr	r3, [pc, #36]	; (2a28 <RCC_SYSCLKConfig+0x34>)
    2a02:	685b      	ldr	r3, [r3, #4]
    2a04:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    2a06:	68fb      	ldr	r3, [r7, #12]
    2a08:	f023 0303 	bic.w	r3, r3, #3
    2a0c:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    2a0e:	68fa      	ldr	r2, [r7, #12]
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	4313      	orrs	r3, r2
    2a14:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2a16:	4a04      	ldr	r2, [pc, #16]	; (2a28 <RCC_SYSCLKConfig+0x34>)
    2a18:	68fb      	ldr	r3, [r7, #12]
    2a1a:	6053      	str	r3, [r2, #4]
}
    2a1c:	bf00      	nop
    2a1e:	3714      	adds	r7, #20
    2a20:	46bd      	mov	sp, r7
    2a22:	bc80      	pop	{r7}
    2a24:	4770      	bx	lr
    2a26:	bf00      	nop
    2a28:	40021000 	.word	0x40021000

00002a2c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    2a2c:	b480      	push	{r7}
    2a2e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    2a30:	4b04      	ldr	r3, [pc, #16]	; (2a44 <RCC_GetSYSCLKSource+0x18>)
    2a32:	685b      	ldr	r3, [r3, #4]
    2a34:	b2db      	uxtb	r3, r3
    2a36:	f003 030c 	and.w	r3, r3, #12
    2a3a:	b2db      	uxtb	r3, r3
}
    2a3c:	4618      	mov	r0, r3
    2a3e:	46bd      	mov	sp, r7
    2a40:	bc80      	pop	{r7}
    2a42:	4770      	bx	lr
    2a44:	40021000 	.word	0x40021000

00002a48 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    2a48:	b480      	push	{r7}
    2a4a:	b085      	sub	sp, #20
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2a50:	2300      	movs	r3, #0
    2a52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    2a54:	4b09      	ldr	r3, [pc, #36]	; (2a7c <RCC_HCLKConfig+0x34>)
    2a56:	685b      	ldr	r3, [r3, #4]
    2a58:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2a60:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    2a62:	68fa      	ldr	r2, [r7, #12]
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	4313      	orrs	r3, r2
    2a68:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2a6a:	4a04      	ldr	r2, [pc, #16]	; (2a7c <RCC_HCLKConfig+0x34>)
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	6053      	str	r3, [r2, #4]
}
    2a70:	bf00      	nop
    2a72:	3714      	adds	r7, #20
    2a74:	46bd      	mov	sp, r7
    2a76:	bc80      	pop	{r7}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	40021000 	.word	0x40021000

00002a80 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2a80:	b480      	push	{r7}
    2a82:	b085      	sub	sp, #20
    2a84:	af00      	add	r7, sp, #0
    2a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2a88:	2300      	movs	r3, #0
    2a8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2a8c:	4b09      	ldr	r3, [pc, #36]	; (2ab4 <RCC_PCLK1Config+0x34>)
    2a8e:	685b      	ldr	r3, [r3, #4]
    2a90:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2a92:	68fb      	ldr	r3, [r7, #12]
    2a94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2a98:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2a9a:	68fa      	ldr	r2, [r7, #12]
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	4313      	orrs	r3, r2
    2aa0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2aa2:	4a04      	ldr	r2, [pc, #16]	; (2ab4 <RCC_PCLK1Config+0x34>)
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	6053      	str	r3, [r2, #4]
}
    2aa8:	bf00      	nop
    2aaa:	3714      	adds	r7, #20
    2aac:	46bd      	mov	sp, r7
    2aae:	bc80      	pop	{r7}
    2ab0:	4770      	bx	lr
    2ab2:	bf00      	nop
    2ab4:	40021000 	.word	0x40021000

00002ab8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2ab8:	b480      	push	{r7}
    2aba:	b085      	sub	sp, #20
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2ac0:	2300      	movs	r3, #0
    2ac2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2ac4:	4b09      	ldr	r3, [pc, #36]	; (2aec <RCC_PCLK2Config+0x34>)
    2ac6:	685b      	ldr	r3, [r3, #4]
    2ac8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2aca:	68fb      	ldr	r3, [r7, #12]
    2acc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    2ad0:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	00db      	lsls	r3, r3, #3
    2ad6:	68fa      	ldr	r2, [r7, #12]
    2ad8:	4313      	orrs	r3, r2
    2ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2adc:	4a03      	ldr	r2, [pc, #12]	; (2aec <RCC_PCLK2Config+0x34>)
    2ade:	68fb      	ldr	r3, [r7, #12]
    2ae0:	6053      	str	r3, [r2, #4]
}
    2ae2:	bf00      	nop
    2ae4:	3714      	adds	r7, #20
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bc80      	pop	{r7}
    2aea:	4770      	bx	lr
    2aec:	40021000 	.word	0x40021000

00002af0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2af0:	b480      	push	{r7}
    2af2:	b083      	sub	sp, #12
    2af4:	af00      	add	r7, sp, #0
    2af6:	4603      	mov	r3, r0
    2af8:	460a      	mov	r2, r1
    2afa:	71fb      	strb	r3, [r7, #7]
    2afc:	4613      	mov	r3, r2
    2afe:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2b00:	79bb      	ldrb	r3, [r7, #6]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d008      	beq.n	2b18 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2b06:	4b0c      	ldr	r3, [pc, #48]	; (2b38 <RCC_ITConfig+0x48>)
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	b2da      	uxtb	r2, r3
    2b0c:	490a      	ldr	r1, [pc, #40]	; (2b38 <RCC_ITConfig+0x48>)
    2b0e:	79fb      	ldrb	r3, [r7, #7]
    2b10:	4313      	orrs	r3, r2
    2b12:	b2db      	uxtb	r3, r3
    2b14:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
    2b16:	e009      	b.n	2b2c <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    2b18:	4b07      	ldr	r3, [pc, #28]	; (2b38 <RCC_ITConfig+0x48>)
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	b2da      	uxtb	r2, r3
    2b1e:	79fb      	ldrb	r3, [r7, #7]
    2b20:	43db      	mvns	r3, r3
    2b22:	b2db      	uxtb	r3, r3
    2b24:	4904      	ldr	r1, [pc, #16]	; (2b38 <RCC_ITConfig+0x48>)
    2b26:	4013      	ands	r3, r2
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	700b      	strb	r3, [r1, #0]
}
    2b2c:	bf00      	nop
    2b2e:	370c      	adds	r7, #12
    2b30:	46bd      	mov	sp, r7
    2b32:	bc80      	pop	{r7}
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	40021009 	.word	0x40021009

00002b3c <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    2b3c:	b480      	push	{r7}
    2b3e:	b083      	sub	sp, #12
    2b40:	af00      	add	r7, sp, #0
    2b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    2b44:	4a03      	ldr	r2, [pc, #12]	; (2b54 <RCC_USBCLKConfig+0x18>)
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	6013      	str	r3, [r2, #0]
}
    2b4a:	bf00      	nop
    2b4c:	370c      	adds	r7, #12
    2b4e:	46bd      	mov	sp, r7
    2b50:	bc80      	pop	{r7}
    2b52:	4770      	bx	lr
    2b54:	424200d8 	.word	0x424200d8

00002b58 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    2b58:	b480      	push	{r7}
    2b5a:	b085      	sub	sp, #20
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2b60:	2300      	movs	r3, #0
    2b62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    2b64:	4b09      	ldr	r3, [pc, #36]	; (2b8c <RCC_ADCCLKConfig+0x34>)
    2b66:	685b      	ldr	r3, [r3, #4]
    2b68:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2b70:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2b72:	68fa      	ldr	r2, [r7, #12]
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	4313      	orrs	r3, r2
    2b78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2b7a:	4a04      	ldr	r2, [pc, #16]	; (2b8c <RCC_ADCCLKConfig+0x34>)
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	6053      	str	r3, [r2, #4]
}
    2b80:	bf00      	nop
    2b82:	3714      	adds	r7, #20
    2b84:	46bd      	mov	sp, r7
    2b86:	bc80      	pop	{r7}
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop
    2b8c:	40021000 	.word	0x40021000

00002b90 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2b90:	b480      	push	{r7}
    2b92:	b083      	sub	sp, #12
    2b94:	af00      	add	r7, sp, #0
    2b96:	4603      	mov	r3, r0
    2b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2b9a:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <RCC_LSEConfig+0x3c>)
    2b9c:	2200      	movs	r2, #0
    2b9e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2ba0:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <RCC_LSEConfig+0x3c>)
    2ba2:	2200      	movs	r2, #0
    2ba4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    2ba6:	79fb      	ldrb	r3, [r7, #7]
    2ba8:	2b01      	cmp	r3, #1
    2baa:	d002      	beq.n	2bb2 <RCC_LSEConfig+0x22>
    2bac:	2b04      	cmp	r3, #4
    2bae:	d004      	beq.n	2bba <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
    2bb0:	e007      	b.n	2bc2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    2bb2:	4b06      	ldr	r3, [pc, #24]	; (2bcc <RCC_LSEConfig+0x3c>)
    2bb4:	2201      	movs	r2, #1
    2bb6:	701a      	strb	r2, [r3, #0]
      break;
    2bb8:	e003      	b.n	2bc2 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2bba:	4b04      	ldr	r3, [pc, #16]	; (2bcc <RCC_LSEConfig+0x3c>)
    2bbc:	2205      	movs	r2, #5
    2bbe:	701a      	strb	r2, [r3, #0]
      break;            
    2bc0:	bf00      	nop
  }
}
    2bc2:	bf00      	nop
    2bc4:	370c      	adds	r7, #12
    2bc6:	46bd      	mov	sp, r7
    2bc8:	bc80      	pop	{r7}
    2bca:	4770      	bx	lr
    2bcc:	40021020 	.word	0x40021020

00002bd0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    2bd0:	b480      	push	{r7}
    2bd2:	b083      	sub	sp, #12
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	4603      	mov	r3, r0
    2bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    2bda:	4a04      	ldr	r2, [pc, #16]	; (2bec <RCC_LSICmd+0x1c>)
    2bdc:	79fb      	ldrb	r3, [r7, #7]
    2bde:	6013      	str	r3, [r2, #0]
}
    2be0:	bf00      	nop
    2be2:	370c      	adds	r7, #12
    2be4:	46bd      	mov	sp, r7
    2be6:	bc80      	pop	{r7}
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop
    2bec:	42420480 	.word	0x42420480

00002bf0 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    2bf0:	b480      	push	{r7}
    2bf2:	b083      	sub	sp, #12
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    2bf8:	4b05      	ldr	r3, [pc, #20]	; (2c10 <RCC_RTCCLKConfig+0x20>)
    2bfa:	6a1a      	ldr	r2, [r3, #32]
    2bfc:	4904      	ldr	r1, [pc, #16]	; (2c10 <RCC_RTCCLKConfig+0x20>)
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	4313      	orrs	r3, r2
    2c02:	620b      	str	r3, [r1, #32]
}
    2c04:	bf00      	nop
    2c06:	370c      	adds	r7, #12
    2c08:	46bd      	mov	sp, r7
    2c0a:	bc80      	pop	{r7}
    2c0c:	4770      	bx	lr
    2c0e:	bf00      	nop
    2c10:	40021000 	.word	0x40021000

00002c14 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    2c14:	b480      	push	{r7}
    2c16:	b083      	sub	sp, #12
    2c18:	af00      	add	r7, sp, #0
    2c1a:	4603      	mov	r3, r0
    2c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    2c1e:	4a04      	ldr	r2, [pc, #16]	; (2c30 <RCC_RTCCLKCmd+0x1c>)
    2c20:	79fb      	ldrb	r3, [r7, #7]
    2c22:	6013      	str	r3, [r2, #0]
}
    2c24:	bf00      	nop
    2c26:	370c      	adds	r7, #12
    2c28:	46bd      	mov	sp, r7
    2c2a:	bc80      	pop	{r7}
    2c2c:	4770      	bx	lr
    2c2e:	bf00      	nop
    2c30:	4242043c 	.word	0x4242043c

00002c34 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2c34:	b480      	push	{r7}
    2c36:	b087      	sub	sp, #28
    2c38:	af00      	add	r7, sp, #0
    2c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2c3c:	2300      	movs	r3, #0
    2c3e:	617b      	str	r3, [r7, #20]
    2c40:	2300      	movs	r3, #0
    2c42:	613b      	str	r3, [r7, #16]
    2c44:	2300      	movs	r3, #0
    2c46:	60fb      	str	r3, [r7, #12]
    2c48:	2300      	movs	r3, #0
    2c4a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2c4c:	4b4c      	ldr	r3, [pc, #304]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2c4e:	685b      	ldr	r3, [r3, #4]
    2c50:	f003 030c 	and.w	r3, r3, #12
    2c54:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    2c56:	697b      	ldr	r3, [r7, #20]
    2c58:	2b04      	cmp	r3, #4
    2c5a:	d007      	beq.n	2c6c <RCC_GetClocksFreq+0x38>
    2c5c:	2b08      	cmp	r3, #8
    2c5e:	d009      	beq.n	2c74 <RCC_GetClocksFreq+0x40>
    2c60:	2b00      	cmp	r3, #0
    2c62:	d133      	bne.n	2ccc <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	4a47      	ldr	r2, [pc, #284]	; (2d84 <RCC_GetClocksFreq+0x150>)
    2c68:	601a      	str	r2, [r3, #0]
      break;
    2c6a:	e033      	b.n	2cd4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	4a45      	ldr	r2, [pc, #276]	; (2d84 <RCC_GetClocksFreq+0x150>)
    2c70:	601a      	str	r2, [r3, #0]
      break;
    2c72:	e02f      	b.n	2cd4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2c74:	4b42      	ldr	r3, [pc, #264]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2c76:	685b      	ldr	r3, [r3, #4]
    2c78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2c7c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2c7e:	4b40      	ldr	r3, [pc, #256]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2c80:	685b      	ldr	r3, [r3, #4]
    2c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    2c86:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    2c88:	693b      	ldr	r3, [r7, #16]
    2c8a:	0c9b      	lsrs	r3, r3, #18
    2c8c:	3302      	adds	r3, #2
    2c8e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d106      	bne.n	2ca4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    2c96:	693b      	ldr	r3, [r7, #16]
    2c98:	4a3b      	ldr	r2, [pc, #236]	; (2d88 <RCC_GetClocksFreq+0x154>)
    2c9a:	fb02 f203 	mul.w	r2, r2, r3
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    2ca2:	e017      	b.n	2cd4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    2ca4:	4b36      	ldr	r3, [pc, #216]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    2cac:	2b00      	cmp	r3, #0
    2cae:	d006      	beq.n	2cbe <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    2cb0:	693b      	ldr	r3, [r7, #16]
    2cb2:	4a35      	ldr	r2, [pc, #212]	; (2d88 <RCC_GetClocksFreq+0x154>)
    2cb4:	fb02 f203 	mul.w	r2, r2, r3
    2cb8:	687b      	ldr	r3, [r7, #4]
    2cba:	601a      	str	r2, [r3, #0]
      break;
    2cbc:	e00a      	b.n	2cd4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    2cbe:	693b      	ldr	r3, [r7, #16]
    2cc0:	4a30      	ldr	r2, [pc, #192]	; (2d84 <RCC_GetClocksFreq+0x150>)
    2cc2:	fb02 f203 	mul.w	r2, r2, r3
    2cc6:	687b      	ldr	r3, [r7, #4]
    2cc8:	601a      	str	r2, [r3, #0]
      break;
    2cca:	e003      	b.n	2cd4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	4a2d      	ldr	r2, [pc, #180]	; (2d84 <RCC_GetClocksFreq+0x150>)
    2cd0:	601a      	str	r2, [r3, #0]
      break;
    2cd2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    2cd4:	4b2a      	ldr	r3, [pc, #168]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2cd6:	685b      	ldr	r3, [r3, #4]
    2cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2cdc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    2cde:	697b      	ldr	r3, [r7, #20]
    2ce0:	091b      	lsrs	r3, r3, #4
    2ce2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    2ce4:	4a29      	ldr	r2, [pc, #164]	; (2d8c <RCC_GetClocksFreq+0x158>)
    2ce6:	697b      	ldr	r3, [r7, #20]
    2ce8:	4413      	add	r3, r2
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	b2db      	uxtb	r3, r3
    2cee:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	681a      	ldr	r2, [r3, #0]
    2cf4:	68bb      	ldr	r3, [r7, #8]
    2cf6:	40da      	lsrs	r2, r3
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2cfc:	4b20      	ldr	r3, [pc, #128]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2cfe:	685b      	ldr	r3, [r3, #4]
    2d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2d04:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    2d06:	697b      	ldr	r3, [r7, #20]
    2d08:	0a1b      	lsrs	r3, r3, #8
    2d0a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    2d0c:	4a1f      	ldr	r2, [pc, #124]	; (2d8c <RCC_GetClocksFreq+0x158>)
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	4413      	add	r3, r2
    2d12:	781b      	ldrb	r3, [r3, #0]
    2d14:	b2db      	uxtb	r3, r3
    2d16:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	685a      	ldr	r2, [r3, #4]
    2d1c:	68bb      	ldr	r3, [r7, #8]
    2d1e:	40da      	lsrs	r2, r3
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    2d24:	4b16      	ldr	r3, [pc, #88]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2d26:	685b      	ldr	r3, [r3, #4]
    2d28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2d2c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	0adb      	lsrs	r3, r3, #11
    2d32:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    2d34:	4a15      	ldr	r2, [pc, #84]	; (2d8c <RCC_GetClocksFreq+0x158>)
    2d36:	697b      	ldr	r3, [r7, #20]
    2d38:	4413      	add	r3, r2
    2d3a:	781b      	ldrb	r3, [r3, #0]
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	685a      	ldr	r2, [r3, #4]
    2d44:	68bb      	ldr	r3, [r7, #8]
    2d46:	40da      	lsrs	r2, r3
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    2d4c:	4b0c      	ldr	r3, [pc, #48]	; (2d80 <RCC_GetClocksFreq+0x14c>)
    2d4e:	685b      	ldr	r3, [r3, #4]
    2d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    2d54:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    2d56:	697b      	ldr	r3, [r7, #20]
    2d58:	0b9b      	lsrs	r3, r3, #14
    2d5a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    2d5c:	4a0c      	ldr	r2, [pc, #48]	; (2d90 <RCC_GetClocksFreq+0x15c>)
    2d5e:	697b      	ldr	r3, [r7, #20]
    2d60:	4413      	add	r3, r2
    2d62:	781b      	ldrb	r3, [r3, #0]
    2d64:	b2db      	uxtb	r3, r3
    2d66:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	68da      	ldr	r2, [r3, #12]
    2d6c:	68bb      	ldr	r3, [r7, #8]
    2d6e:	fbb2 f2f3 	udiv	r2, r2, r3
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	611a      	str	r2, [r3, #16]
}
    2d76:	bf00      	nop
    2d78:	371c      	adds	r7, #28
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bc80      	pop	{r7}
    2d7e:	4770      	bx	lr
    2d80:	40021000 	.word	0x40021000
    2d84:	007a1200 	.word	0x007a1200
    2d88:	003d0900 	.word	0x003d0900
    2d8c:	20000484 	.word	0x20000484
    2d90:	20000494 	.word	0x20000494

00002d94 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2d94:	b480      	push	{r7}
    2d96:	b083      	sub	sp, #12
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
    2d9c:	460b      	mov	r3, r1
    2d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2da0:	78fb      	ldrb	r3, [r7, #3]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d006      	beq.n	2db4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2da6:	4b09      	ldr	r3, [pc, #36]	; (2dcc <RCC_AHBPeriphClockCmd+0x38>)
    2da8:	695a      	ldr	r2, [r3, #20]
    2daa:	4908      	ldr	r1, [pc, #32]	; (2dcc <RCC_AHBPeriphClockCmd+0x38>)
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	4313      	orrs	r3, r2
    2db0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
    2db2:	e006      	b.n	2dc2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2db4:	4b05      	ldr	r3, [pc, #20]	; (2dcc <RCC_AHBPeriphClockCmd+0x38>)
    2db6:	695a      	ldr	r2, [r3, #20]
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	43db      	mvns	r3, r3
    2dbc:	4903      	ldr	r1, [pc, #12]	; (2dcc <RCC_AHBPeriphClockCmd+0x38>)
    2dbe:	4013      	ands	r3, r2
    2dc0:	614b      	str	r3, [r1, #20]
}
    2dc2:	bf00      	nop
    2dc4:	370c      	adds	r7, #12
    2dc6:	46bd      	mov	sp, r7
    2dc8:	bc80      	pop	{r7}
    2dca:	4770      	bx	lr
    2dcc:	40021000 	.word	0x40021000

00002dd0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2dd0:	b480      	push	{r7}
    2dd2:	b083      	sub	sp, #12
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]
    2dd8:	460b      	mov	r3, r1
    2dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2ddc:	78fb      	ldrb	r3, [r7, #3]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d006      	beq.n	2df0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    2de2:	4b09      	ldr	r3, [pc, #36]	; (2e08 <RCC_APB2PeriphClockCmd+0x38>)
    2de4:	699a      	ldr	r2, [r3, #24]
    2de6:	4908      	ldr	r1, [pc, #32]	; (2e08 <RCC_APB2PeriphClockCmd+0x38>)
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	4313      	orrs	r3, r2
    2dec:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
    2dee:	e006      	b.n	2dfe <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
    2df0:	4b05      	ldr	r3, [pc, #20]	; (2e08 <RCC_APB2PeriphClockCmd+0x38>)
    2df2:	699a      	ldr	r2, [r3, #24]
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	43db      	mvns	r3, r3
    2df8:	4903      	ldr	r1, [pc, #12]	; (2e08 <RCC_APB2PeriphClockCmd+0x38>)
    2dfa:	4013      	ands	r3, r2
    2dfc:	618b      	str	r3, [r1, #24]
}
    2dfe:	bf00      	nop
    2e00:	370c      	adds	r7, #12
    2e02:	46bd      	mov	sp, r7
    2e04:	bc80      	pop	{r7}
    2e06:	4770      	bx	lr
    2e08:	40021000 	.word	0x40021000

00002e0c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2e0c:	b480      	push	{r7}
    2e0e:	b083      	sub	sp, #12
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
    2e14:	460b      	mov	r3, r1
    2e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e18:	78fb      	ldrb	r3, [r7, #3]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d006      	beq.n	2e2c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    2e1e:	4b09      	ldr	r3, [pc, #36]	; (2e44 <RCC_APB1PeriphClockCmd+0x38>)
    2e20:	69da      	ldr	r2, [r3, #28]
    2e22:	4908      	ldr	r1, [pc, #32]	; (2e44 <RCC_APB1PeriphClockCmd+0x38>)
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	4313      	orrs	r3, r2
    2e28:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
    2e2a:	e006      	b.n	2e3a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <RCC_APB1PeriphClockCmd+0x38>)
    2e2e:	69da      	ldr	r2, [r3, #28]
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	43db      	mvns	r3, r3
    2e34:	4903      	ldr	r1, [pc, #12]	; (2e44 <RCC_APB1PeriphClockCmd+0x38>)
    2e36:	4013      	ands	r3, r2
    2e38:	61cb      	str	r3, [r1, #28]
}
    2e3a:	bf00      	nop
    2e3c:	370c      	adds	r7, #12
    2e3e:	46bd      	mov	sp, r7
    2e40:	bc80      	pop	{r7}
    2e42:	4770      	bx	lr
    2e44:	40021000 	.word	0x40021000

00002e48 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2e48:	b480      	push	{r7}
    2e4a:	b083      	sub	sp, #12
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	6078      	str	r0, [r7, #4]
    2e50:	460b      	mov	r3, r1
    2e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e54:	78fb      	ldrb	r3, [r7, #3]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d006      	beq.n	2e68 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2e5a:	4b09      	ldr	r3, [pc, #36]	; (2e80 <RCC_APB2PeriphResetCmd+0x38>)
    2e5c:	68da      	ldr	r2, [r3, #12]
    2e5e:	4908      	ldr	r1, [pc, #32]	; (2e80 <RCC_APB2PeriphResetCmd+0x38>)
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	4313      	orrs	r3, r2
    2e64:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
    2e66:	e006      	b.n	2e76 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2e68:	4b05      	ldr	r3, [pc, #20]	; (2e80 <RCC_APB2PeriphResetCmd+0x38>)
    2e6a:	68da      	ldr	r2, [r3, #12]
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	43db      	mvns	r3, r3
    2e70:	4903      	ldr	r1, [pc, #12]	; (2e80 <RCC_APB2PeriphResetCmd+0x38>)
    2e72:	4013      	ands	r3, r2
    2e74:	60cb      	str	r3, [r1, #12]
}
    2e76:	bf00      	nop
    2e78:	370c      	adds	r7, #12
    2e7a:	46bd      	mov	sp, r7
    2e7c:	bc80      	pop	{r7}
    2e7e:	4770      	bx	lr
    2e80:	40021000 	.word	0x40021000

00002e84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2e84:	b480      	push	{r7}
    2e86:	b083      	sub	sp, #12
    2e88:	af00      	add	r7, sp, #0
    2e8a:	6078      	str	r0, [r7, #4]
    2e8c:	460b      	mov	r3, r1
    2e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2e90:	78fb      	ldrb	r3, [r7, #3]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d006      	beq.n	2ea4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    2e96:	4b09      	ldr	r3, [pc, #36]	; (2ebc <RCC_APB1PeriphResetCmd+0x38>)
    2e98:	691a      	ldr	r2, [r3, #16]
    2e9a:	4908      	ldr	r1, [pc, #32]	; (2ebc <RCC_APB1PeriphResetCmd+0x38>)
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	4313      	orrs	r3, r2
    2ea0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
    2ea2:	e006      	b.n	2eb2 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    2ea4:	4b05      	ldr	r3, [pc, #20]	; (2ebc <RCC_APB1PeriphResetCmd+0x38>)
    2ea6:	691a      	ldr	r2, [r3, #16]
    2ea8:	687b      	ldr	r3, [r7, #4]
    2eaa:	43db      	mvns	r3, r3
    2eac:	4903      	ldr	r1, [pc, #12]	; (2ebc <RCC_APB1PeriphResetCmd+0x38>)
    2eae:	4013      	ands	r3, r2
    2eb0:	610b      	str	r3, [r1, #16]
}
    2eb2:	bf00      	nop
    2eb4:	370c      	adds	r7, #12
    2eb6:	46bd      	mov	sp, r7
    2eb8:	bc80      	pop	{r7}
    2eba:	4770      	bx	lr
    2ebc:	40021000 	.word	0x40021000

00002ec0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    2ec0:	b480      	push	{r7}
    2ec2:	b083      	sub	sp, #12
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	4603      	mov	r3, r0
    2ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    2eca:	4a04      	ldr	r2, [pc, #16]	; (2edc <RCC_BackupResetCmd+0x1c>)
    2ecc:	79fb      	ldrb	r3, [r7, #7]
    2ece:	6013      	str	r3, [r2, #0]
}
    2ed0:	bf00      	nop
    2ed2:	370c      	adds	r7, #12
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bc80      	pop	{r7}
    2ed8:	4770      	bx	lr
    2eda:	bf00      	nop
    2edc:	42420440 	.word	0x42420440

00002ee0 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    2ee0:	b480      	push	{r7}
    2ee2:	b083      	sub	sp, #12
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	4603      	mov	r3, r0
    2ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    2eea:	4a04      	ldr	r2, [pc, #16]	; (2efc <RCC_ClockSecuritySystemCmd+0x1c>)
    2eec:	79fb      	ldrb	r3, [r7, #7]
    2eee:	6013      	str	r3, [r2, #0]
}
    2ef0:	bf00      	nop
    2ef2:	370c      	adds	r7, #12
    2ef4:	46bd      	mov	sp, r7
    2ef6:	bc80      	pop	{r7}
    2ef8:	4770      	bx	lr
    2efa:	bf00      	nop
    2efc:	4242004c 	.word	0x4242004c

00002f00 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    2f00:	b480      	push	{r7}
    2f02:	b083      	sub	sp, #12
    2f04:	af00      	add	r7, sp, #0
    2f06:	4603      	mov	r3, r0
    2f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    2f0a:	4a04      	ldr	r2, [pc, #16]	; (2f1c <RCC_MCOConfig+0x1c>)
    2f0c:	79fb      	ldrb	r3, [r7, #7]
    2f0e:	7013      	strb	r3, [r2, #0]
}
    2f10:	bf00      	nop
    2f12:	370c      	adds	r7, #12
    2f14:	46bd      	mov	sp, r7
    2f16:	bc80      	pop	{r7}
    2f18:	4770      	bx	lr
    2f1a:	bf00      	nop
    2f1c:	40021007 	.word	0x40021007

00002f20 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    2f20:	b480      	push	{r7}
    2f22:	b087      	sub	sp, #28
    2f24:	af00      	add	r7, sp, #0
    2f26:	4603      	mov	r3, r0
    2f28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2f2a:	2300      	movs	r3, #0
    2f2c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    2f2e:	2300      	movs	r3, #0
    2f30:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    2f32:	2300      	movs	r3, #0
    2f34:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2f36:	79fb      	ldrb	r3, [r7, #7]
    2f38:	095b      	lsrs	r3, r3, #5
    2f3a:	b2db      	uxtb	r3, r3
    2f3c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2f3e:	68fb      	ldr	r3, [r7, #12]
    2f40:	2b01      	cmp	r3, #1
    2f42:	d103      	bne.n	2f4c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
    2f44:	4b12      	ldr	r3, [pc, #72]	; (2f90 <RCC_GetFlagStatus+0x70>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	617b      	str	r3, [r7, #20]
    2f4a:	e009      	b.n	2f60 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2f4c:	68fb      	ldr	r3, [r7, #12]
    2f4e:	2b02      	cmp	r3, #2
    2f50:	d103      	bne.n	2f5a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
    2f52:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <RCC_GetFlagStatus+0x70>)
    2f54:	6a1b      	ldr	r3, [r3, #32]
    2f56:	617b      	str	r3, [r7, #20]
    2f58:	e002      	b.n	2f60 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    2f5a:	4b0d      	ldr	r3, [pc, #52]	; (2f90 <RCC_GetFlagStatus+0x70>)
    2f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f5e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2f60:	79fb      	ldrb	r3, [r7, #7]
    2f62:	f003 031f 	and.w	r3, r3, #31
    2f66:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    2f68:	697a      	ldr	r2, [r7, #20]
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	fa22 f303 	lsr.w	r3, r2, r3
    2f70:	f003 0301 	and.w	r3, r3, #1
    2f74:	2b00      	cmp	r3, #0
    2f76:	d002      	beq.n	2f7e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
    2f78:	2301      	movs	r3, #1
    2f7a:	74fb      	strb	r3, [r7, #19]
    2f7c:	e001      	b.n	2f82 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
    2f7e:	2300      	movs	r3, #0
    2f80:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    2f82:	7cfb      	ldrb	r3, [r7, #19]
}
    2f84:	4618      	mov	r0, r3
    2f86:	371c      	adds	r7, #28
    2f88:	46bd      	mov	sp, r7
    2f8a:	bc80      	pop	{r7}
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop
    2f90:	40021000 	.word	0x40021000

00002f94 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2f94:	b480      	push	{r7}
    2f96:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2f98:	4b04      	ldr	r3, [pc, #16]	; (2fac <RCC_ClearFlag+0x18>)
    2f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f9c:	4a03      	ldr	r2, [pc, #12]	; (2fac <RCC_ClearFlag+0x18>)
    2f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2fa2:	6253      	str	r3, [r2, #36]	; 0x24
}
    2fa4:	bf00      	nop
    2fa6:	46bd      	mov	sp, r7
    2fa8:	bc80      	pop	{r7}
    2faa:	4770      	bx	lr
    2fac:	40021000 	.word	0x40021000

00002fb0 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    2fb0:	b480      	push	{r7}
    2fb2:	b085      	sub	sp, #20
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	4603      	mov	r3, r0
    2fb8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    2fba:	2300      	movs	r3, #0
    2fbc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    2fbe:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <RCC_GetITStatus+0x30>)
    2fc0:	689a      	ldr	r2, [r3, #8]
    2fc2:	79fb      	ldrb	r3, [r7, #7]
    2fc4:	4013      	ands	r3, r2
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d002      	beq.n	2fd0 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
    2fca:	2301      	movs	r3, #1
    2fcc:	73fb      	strb	r3, [r7, #15]
    2fce:	e001      	b.n	2fd4 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
    2fd0:	2300      	movs	r3, #0
    2fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    2fd4:	7bfb      	ldrb	r3, [r7, #15]
}
    2fd6:	4618      	mov	r0, r3
    2fd8:	3714      	adds	r7, #20
    2fda:	46bd      	mov	sp, r7
    2fdc:	bc80      	pop	{r7}
    2fde:	4770      	bx	lr
    2fe0:	40021000 	.word	0x40021000

00002fe4 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    2fe4:	b480      	push	{r7}
    2fe6:	b083      	sub	sp, #12
    2fe8:	af00      	add	r7, sp, #0
    2fea:	4603      	mov	r3, r0
    2fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    2fee:	4a04      	ldr	r2, [pc, #16]	; (3000 <RCC_ClearITPendingBit+0x1c>)
    2ff0:	79fb      	ldrb	r3, [r7, #7]
    2ff2:	7013      	strb	r3, [r2, #0]
}
    2ff4:	bf00      	nop
    2ff6:	370c      	adds	r7, #12
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bc80      	pop	{r7}
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop
    3000:	4002100a 	.word	0x4002100a

00003004 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    3004:	b580      	push	{r7, lr}
    3006:	b082      	sub	sp, #8
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	4a2f      	ldr	r2, [pc, #188]	; (30cc <GPIO_DeInit+0xc8>)
    3010:	4293      	cmp	r3, r2
    3012:	d108      	bne.n	3026 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    3014:	2101      	movs	r1, #1
    3016:	2004      	movs	r0, #4
    3018:	f7ff ff16 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    301c:	2100      	movs	r1, #0
    301e:	2004      	movs	r0, #4
    3020:	f7ff ff12 	bl	2e48 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
    3024:	e04e      	b.n	30c4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	4a29      	ldr	r2, [pc, #164]	; (30d0 <GPIO_DeInit+0xcc>)
    302a:	4293      	cmp	r3, r2
    302c:	d108      	bne.n	3040 <GPIO_DeInit+0x3c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    302e:	2101      	movs	r1, #1
    3030:	2008      	movs	r0, #8
    3032:	f7ff ff09 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    3036:	2100      	movs	r1, #0
    3038:	2008      	movs	r0, #8
    303a:	f7ff ff05 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    303e:	e041      	b.n	30c4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	4a24      	ldr	r2, [pc, #144]	; (30d4 <GPIO_DeInit+0xd0>)
    3044:	4293      	cmp	r3, r2
    3046:	d108      	bne.n	305a <GPIO_DeInit+0x56>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    3048:	2101      	movs	r1, #1
    304a:	2010      	movs	r0, #16
    304c:	f7ff fefc 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    3050:	2100      	movs	r1, #0
    3052:	2010      	movs	r0, #16
    3054:	f7ff fef8 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    3058:	e034      	b.n	30c4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	4a1e      	ldr	r2, [pc, #120]	; (30d8 <GPIO_DeInit+0xd4>)
    305e:	4293      	cmp	r3, r2
    3060:	d108      	bne.n	3074 <GPIO_DeInit+0x70>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    3062:	2101      	movs	r1, #1
    3064:	2020      	movs	r0, #32
    3066:	f7ff feef 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    306a:	2100      	movs	r1, #0
    306c:	2020      	movs	r0, #32
    306e:	f7ff feeb 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    3072:	e027      	b.n	30c4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	4a19      	ldr	r2, [pc, #100]	; (30dc <GPIO_DeInit+0xd8>)
    3078:	4293      	cmp	r3, r2
    307a:	d108      	bne.n	308e <GPIO_DeInit+0x8a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    307c:	2101      	movs	r1, #1
    307e:	2040      	movs	r0, #64	; 0x40
    3080:	f7ff fee2 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    3084:	2100      	movs	r1, #0
    3086:	2040      	movs	r0, #64	; 0x40
    3088:	f7ff fede 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    308c:	e01a      	b.n	30c4 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOF)
    308e:	687b      	ldr	r3, [r7, #4]
    3090:	4a13      	ldr	r2, [pc, #76]	; (30e0 <GPIO_DeInit+0xdc>)
    3092:	4293      	cmp	r3, r2
    3094:	d108      	bne.n	30a8 <GPIO_DeInit+0xa4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    3096:	2101      	movs	r1, #1
    3098:	2080      	movs	r0, #128	; 0x80
    309a:	f7ff fed5 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    309e:	2100      	movs	r1, #0
    30a0:	2080      	movs	r0, #128	; 0x80
    30a2:	f7ff fed1 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    30a6:	e00d      	b.n	30c4 <GPIO_DeInit+0xc0>
    if (GPIOx == GPIOG)
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	4a0e      	ldr	r2, [pc, #56]	; (30e4 <GPIO_DeInit+0xe0>)
    30ac:	4293      	cmp	r3, r2
    30ae:	d109      	bne.n	30c4 <GPIO_DeInit+0xc0>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    30b0:	2101      	movs	r1, #1
    30b2:	f44f 7080 	mov.w	r0, #256	; 0x100
    30b6:	f7ff fec7 	bl	2e48 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    30ba:	2100      	movs	r1, #0
    30bc:	f44f 7080 	mov.w	r0, #256	; 0x100
    30c0:	f7ff fec2 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    30c4:	bf00      	nop
    30c6:	3708      	adds	r7, #8
    30c8:	46bd      	mov	sp, r7
    30ca:	bd80      	pop	{r7, pc}
    30cc:	40010800 	.word	0x40010800
    30d0:	40010c00 	.word	0x40010c00
    30d4:	40011000 	.word	0x40011000
    30d8:	40011400 	.word	0x40011400
    30dc:	40011800 	.word	0x40011800
    30e0:	40011c00 	.word	0x40011c00
    30e4:	40012000 	.word	0x40012000

000030e8 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    30e8:	b580      	push	{r7, lr}
    30ea:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    30ec:	2101      	movs	r1, #1
    30ee:	2001      	movs	r0, #1
    30f0:	f7ff feaa 	bl	2e48 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    30f4:	2100      	movs	r1, #0
    30f6:	2001      	movs	r0, #1
    30f8:	f7ff fea6 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    30fc:	bf00      	nop
    30fe:	bd80      	pop	{r7, pc}

00003100 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    3100:	b480      	push	{r7}
    3102:	b089      	sub	sp, #36	; 0x24
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
    3108:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    310a:	2300      	movs	r3, #0
    310c:	61fb      	str	r3, [r7, #28]
    310e:	2300      	movs	r3, #0
    3110:	613b      	str	r3, [r7, #16]
    3112:	2300      	movs	r3, #0
    3114:	61bb      	str	r3, [r7, #24]
    3116:	2300      	movs	r3, #0
    3118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    311a:	2300      	movs	r3, #0
    311c:	617b      	str	r3, [r7, #20]
    311e:	2300      	movs	r3, #0
    3120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    3122:	683b      	ldr	r3, [r7, #0]
    3124:	78db      	ldrb	r3, [r3, #3]
    3126:	f003 030f 	and.w	r3, r3, #15
    312a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    312c:	683b      	ldr	r3, [r7, #0]
    312e:	78db      	ldrb	r3, [r3, #3]
    3130:	f003 0310 	and.w	r3, r3, #16
    3134:	2b00      	cmp	r3, #0
    3136:	d005      	beq.n	3144 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    3138:	683b      	ldr	r3, [r7, #0]
    313a:	789b      	ldrb	r3, [r3, #2]
    313c:	461a      	mov	r2, r3
    313e:	69fb      	ldr	r3, [r7, #28]
    3140:	4313      	orrs	r3, r2
    3142:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    3144:	683b      	ldr	r3, [r7, #0]
    3146:	881b      	ldrh	r3, [r3, #0]
    3148:	b2db      	uxtb	r3, r3
    314a:	2b00      	cmp	r3, #0
    314c:	d044      	beq.n	31d8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	681b      	ldr	r3, [r3, #0]
    3152:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    3154:	2300      	movs	r3, #0
    3156:	61bb      	str	r3, [r7, #24]
    3158:	e038      	b.n	31cc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
    315a:	2201      	movs	r2, #1
    315c:	69bb      	ldr	r3, [r7, #24]
    315e:	fa02 f303 	lsl.w	r3, r2, r3
    3162:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    3164:	683b      	ldr	r3, [r7, #0]
    3166:	881b      	ldrh	r3, [r3, #0]
    3168:	461a      	mov	r2, r3
    316a:	68fb      	ldr	r3, [r7, #12]
    316c:	4013      	ands	r3, r2
    316e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    3170:	693a      	ldr	r2, [r7, #16]
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	429a      	cmp	r2, r3
    3176:	d126      	bne.n	31c6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
    3178:	69bb      	ldr	r3, [r7, #24]
    317a:	009b      	lsls	r3, r3, #2
    317c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    317e:	220f      	movs	r2, #15
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	fa02 f303 	lsl.w	r3, r2, r3
    3186:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    3188:	68bb      	ldr	r3, [r7, #8]
    318a:	43db      	mvns	r3, r3
    318c:	697a      	ldr	r2, [r7, #20]
    318e:	4013      	ands	r3, r2
    3190:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    3192:	69fa      	ldr	r2, [r7, #28]
    3194:	68fb      	ldr	r3, [r7, #12]
    3196:	fa02 f303 	lsl.w	r3, r2, r3
    319a:	697a      	ldr	r2, [r7, #20]
    319c:	4313      	orrs	r3, r2
    319e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    31a0:	683b      	ldr	r3, [r7, #0]
    31a2:	78db      	ldrb	r3, [r3, #3]
    31a4:	2b28      	cmp	r3, #40	; 0x28
    31a6:	d105      	bne.n	31b4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    31a8:	2201      	movs	r2, #1
    31aa:	69bb      	ldr	r3, [r7, #24]
    31ac:	409a      	lsls	r2, r3
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	615a      	str	r2, [r3, #20]
    31b2:	e008      	b.n	31c6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    31b4:	683b      	ldr	r3, [r7, #0]
    31b6:	78db      	ldrb	r3, [r3, #3]
    31b8:	2b48      	cmp	r3, #72	; 0x48
    31ba:	d104      	bne.n	31c6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    31bc:	2201      	movs	r2, #1
    31be:	69bb      	ldr	r3, [r7, #24]
    31c0:	409a      	lsls	r2, r3
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    31c6:	69bb      	ldr	r3, [r7, #24]
    31c8:	3301      	adds	r3, #1
    31ca:	61bb      	str	r3, [r7, #24]
    31cc:	69bb      	ldr	r3, [r7, #24]
    31ce:	2b07      	cmp	r3, #7
    31d0:	d9c3      	bls.n	315a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	697a      	ldr	r2, [r7, #20]
    31d6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    31d8:	683b      	ldr	r3, [r7, #0]
    31da:	881b      	ldrh	r3, [r3, #0]
    31dc:	2bff      	cmp	r3, #255	; 0xff
    31de:	d946      	bls.n	326e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	685b      	ldr	r3, [r3, #4]
    31e4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    31e6:	2300      	movs	r3, #0
    31e8:	61bb      	str	r3, [r7, #24]
    31ea:	e03a      	b.n	3262 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    31ec:	69bb      	ldr	r3, [r7, #24]
    31ee:	3308      	adds	r3, #8
    31f0:	2201      	movs	r2, #1
    31f2:	fa02 f303 	lsl.w	r3, r2, r3
    31f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    31f8:	683b      	ldr	r3, [r7, #0]
    31fa:	881b      	ldrh	r3, [r3, #0]
    31fc:	461a      	mov	r2, r3
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	4013      	ands	r3, r2
    3202:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    3204:	693a      	ldr	r2, [r7, #16]
    3206:	68fb      	ldr	r3, [r7, #12]
    3208:	429a      	cmp	r2, r3
    320a:	d127      	bne.n	325c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
    320c:	69bb      	ldr	r3, [r7, #24]
    320e:	009b      	lsls	r3, r3, #2
    3210:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    3212:	220f      	movs	r2, #15
    3214:	68fb      	ldr	r3, [r7, #12]
    3216:	fa02 f303 	lsl.w	r3, r2, r3
    321a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    321c:	68bb      	ldr	r3, [r7, #8]
    321e:	43db      	mvns	r3, r3
    3220:	697a      	ldr	r2, [r7, #20]
    3222:	4013      	ands	r3, r2
    3224:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    3226:	69fa      	ldr	r2, [r7, #28]
    3228:	68fb      	ldr	r3, [r7, #12]
    322a:	fa02 f303 	lsl.w	r3, r2, r3
    322e:	697a      	ldr	r2, [r7, #20]
    3230:	4313      	orrs	r3, r2
    3232:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    3234:	683b      	ldr	r3, [r7, #0]
    3236:	78db      	ldrb	r3, [r3, #3]
    3238:	2b28      	cmp	r3, #40	; 0x28
    323a:	d105      	bne.n	3248 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    323c:	69bb      	ldr	r3, [r7, #24]
    323e:	3308      	adds	r3, #8
    3240:	2201      	movs	r2, #1
    3242:	409a      	lsls	r2, r3
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    3248:	683b      	ldr	r3, [r7, #0]
    324a:	78db      	ldrb	r3, [r3, #3]
    324c:	2b48      	cmp	r3, #72	; 0x48
    324e:	d105      	bne.n	325c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    3250:	69bb      	ldr	r3, [r7, #24]
    3252:	3308      	adds	r3, #8
    3254:	2201      	movs	r2, #1
    3256:	409a      	lsls	r2, r3
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    325c:	69bb      	ldr	r3, [r7, #24]
    325e:	3301      	adds	r3, #1
    3260:	61bb      	str	r3, [r7, #24]
    3262:	69bb      	ldr	r3, [r7, #24]
    3264:	2b07      	cmp	r3, #7
    3266:	d9c1      	bls.n	31ec <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	697a      	ldr	r2, [r7, #20]
    326c:	605a      	str	r2, [r3, #4]
  }
}
    326e:	bf00      	nop
    3270:	3724      	adds	r7, #36	; 0x24
    3272:	46bd      	mov	sp, r7
    3274:	bc80      	pop	{r7}
    3276:	4770      	bx	lr

00003278 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    3278:	b480      	push	{r7}
    327a:	b083      	sub	sp, #12
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3286:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	2202      	movs	r2, #2
    328c:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2204      	movs	r2, #4
    3292:	70da      	strb	r2, [r3, #3]
}
    3294:	bf00      	nop
    3296:	370c      	adds	r7, #12
    3298:	46bd      	mov	sp, r7
    329a:	bc80      	pop	{r7}
    329c:	4770      	bx	lr

0000329e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    329e:	b480      	push	{r7}
    32a0:	b085      	sub	sp, #20
    32a2:	af00      	add	r7, sp, #0
    32a4:	6078      	str	r0, [r7, #4]
    32a6:	460b      	mov	r3, r1
    32a8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    32aa:	2300      	movs	r3, #0
    32ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	689a      	ldr	r2, [r3, #8]
    32b2:	887b      	ldrh	r3, [r7, #2]
    32b4:	4013      	ands	r3, r2
    32b6:	2b00      	cmp	r3, #0
    32b8:	d002      	beq.n	32c0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    32ba:	2301      	movs	r3, #1
    32bc:	73fb      	strb	r3, [r7, #15]
    32be:	e001      	b.n	32c4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    32c0:	2300      	movs	r3, #0
    32c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    32c4:	7bfb      	ldrb	r3, [r7, #15]
}
    32c6:	4618      	mov	r0, r3
    32c8:	3714      	adds	r7, #20
    32ca:	46bd      	mov	sp, r7
    32cc:	bc80      	pop	{r7}
    32ce:	4770      	bx	lr

000032d0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    32d0:	b480      	push	{r7}
    32d2:	b083      	sub	sp, #12
    32d4:	af00      	add	r7, sp, #0
    32d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	689b      	ldr	r3, [r3, #8]
    32dc:	b29b      	uxth	r3, r3
}
    32de:	4618      	mov	r0, r3
    32e0:	370c      	adds	r7, #12
    32e2:	46bd      	mov	sp, r7
    32e4:	bc80      	pop	{r7}
    32e6:	4770      	bx	lr

000032e8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    32e8:	b480      	push	{r7}
    32ea:	b085      	sub	sp, #20
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
    32f0:	460b      	mov	r3, r1
    32f2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    32f4:	2300      	movs	r3, #0
    32f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	68da      	ldr	r2, [r3, #12]
    32fc:	887b      	ldrh	r3, [r7, #2]
    32fe:	4013      	ands	r3, r2
    3300:	2b00      	cmp	r3, #0
    3302:	d002      	beq.n	330a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    3304:	2301      	movs	r3, #1
    3306:	73fb      	strb	r3, [r7, #15]
    3308:	e001      	b.n	330e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    330a:	2300      	movs	r3, #0
    330c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    330e:	7bfb      	ldrb	r3, [r7, #15]
}
    3310:	4618      	mov	r0, r3
    3312:	3714      	adds	r7, #20
    3314:	46bd      	mov	sp, r7
    3316:	bc80      	pop	{r7}
    3318:	4770      	bx	lr

0000331a <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    331a:	b480      	push	{r7}
    331c:	b083      	sub	sp, #12
    331e:	af00      	add	r7, sp, #0
    3320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	68db      	ldr	r3, [r3, #12]
    3326:	b29b      	uxth	r3, r3
}
    3328:	4618      	mov	r0, r3
    332a:	370c      	adds	r7, #12
    332c:	46bd      	mov	sp, r7
    332e:	bc80      	pop	{r7}
    3330:	4770      	bx	lr

00003332 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    3332:	b480      	push	{r7}
    3334:	b083      	sub	sp, #12
    3336:	af00      	add	r7, sp, #0
    3338:	6078      	str	r0, [r7, #4]
    333a:	460b      	mov	r3, r1
    333c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    333e:	887a      	ldrh	r2, [r7, #2]
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	611a      	str	r2, [r3, #16]
}
    3344:	bf00      	nop
    3346:	370c      	adds	r7, #12
    3348:	46bd      	mov	sp, r7
    334a:	bc80      	pop	{r7}
    334c:	4770      	bx	lr

0000334e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    334e:	b480      	push	{r7}
    3350:	b083      	sub	sp, #12
    3352:	af00      	add	r7, sp, #0
    3354:	6078      	str	r0, [r7, #4]
    3356:	460b      	mov	r3, r1
    3358:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    335a:	887a      	ldrh	r2, [r7, #2]
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	615a      	str	r2, [r3, #20]
}
    3360:	bf00      	nop
    3362:	370c      	adds	r7, #12
    3364:	46bd      	mov	sp, r7
    3366:	bc80      	pop	{r7}
    3368:	4770      	bx	lr

0000336a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    336a:	b480      	push	{r7}
    336c:	b083      	sub	sp, #12
    336e:	af00      	add	r7, sp, #0
    3370:	6078      	str	r0, [r7, #4]
    3372:	460b      	mov	r3, r1
    3374:	807b      	strh	r3, [r7, #2]
    3376:	4613      	mov	r3, r2
    3378:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    337a:	787b      	ldrb	r3, [r7, #1]
    337c:	2b00      	cmp	r3, #0
    337e:	d003      	beq.n	3388 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    3380:	887a      	ldrh	r2, [r7, #2]
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
    3386:	e002      	b.n	338e <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
    3388:	887a      	ldrh	r2, [r7, #2]
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	615a      	str	r2, [r3, #20]
}
    338e:	bf00      	nop
    3390:	370c      	adds	r7, #12
    3392:	46bd      	mov	sp, r7
    3394:	bc80      	pop	{r7}
    3396:	4770      	bx	lr

00003398 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    3398:	b480      	push	{r7}
    339a:	b083      	sub	sp, #12
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
    33a0:	460b      	mov	r3, r1
    33a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    33a4:	887a      	ldrh	r2, [r7, #2]
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	60da      	str	r2, [r3, #12]
}
    33aa:	bf00      	nop
    33ac:	370c      	adds	r7, #12
    33ae:	46bd      	mov	sp, r7
    33b0:	bc80      	pop	{r7}
    33b2:	4770      	bx	lr

000033b4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    33b4:	b480      	push	{r7}
    33b6:	b085      	sub	sp, #20
    33b8:	af00      	add	r7, sp, #0
    33ba:	6078      	str	r0, [r7, #4]
    33bc:	460b      	mov	r3, r1
    33be:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    33c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    33c4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	68fa      	ldr	r2, [r7, #12]
    33ca:	4313      	orrs	r3, r2
    33cc:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	68fa      	ldr	r2, [r7, #12]
    33d2:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    33d4:	887a      	ldrh	r2, [r7, #2]
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	68fa      	ldr	r2, [r7, #12]
    33de:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	699b      	ldr	r3, [r3, #24]
    33e4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	699b      	ldr	r3, [r3, #24]
    33ea:	60fb      	str	r3, [r7, #12]
}
    33ec:	bf00      	nop
    33ee:	3714      	adds	r7, #20
    33f0:	46bd      	mov	sp, r7
    33f2:	bc80      	pop	{r7}
    33f4:	4770      	bx	lr

000033f6 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    33f6:	b480      	push	{r7}
    33f8:	b085      	sub	sp, #20
    33fa:	af00      	add	r7, sp, #0
    33fc:	4603      	mov	r3, r0
    33fe:	460a      	mov	r2, r1
    3400:	71fb      	strb	r3, [r7, #7]
    3402:	4613      	mov	r3, r2
    3404:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    3406:	2300      	movs	r3, #0
    3408:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    340a:	4b0c      	ldr	r3, [pc, #48]	; (343c <GPIO_EventOutputConfig+0x46>)
    340c:	681b      	ldr	r3, [r3, #0]
    340e:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    3410:	68fa      	ldr	r2, [r7, #12]
    3412:	f64f 7380 	movw	r3, #65408	; 0xff80
    3416:	4013      	ands	r3, r2
    3418:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    341a:	79fb      	ldrb	r3, [r7, #7]
    341c:	011b      	lsls	r3, r3, #4
    341e:	68fa      	ldr	r2, [r7, #12]
    3420:	4313      	orrs	r3, r2
    3422:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    3424:	79bb      	ldrb	r3, [r7, #6]
    3426:	68fa      	ldr	r2, [r7, #12]
    3428:	4313      	orrs	r3, r2
    342a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    342c:	4a03      	ldr	r2, [pc, #12]	; (343c <GPIO_EventOutputConfig+0x46>)
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	6013      	str	r3, [r2, #0]
}
    3432:	bf00      	nop
    3434:	3714      	adds	r7, #20
    3436:	46bd      	mov	sp, r7
    3438:	bc80      	pop	{r7}
    343a:	4770      	bx	lr
    343c:	40010000 	.word	0x40010000

00003440 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    3440:	b480      	push	{r7}
    3442:	b083      	sub	sp, #12
    3444:	af00      	add	r7, sp, #0
    3446:	4603      	mov	r3, r0
    3448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    344a:	4a04      	ldr	r2, [pc, #16]	; (345c <GPIO_EventOutputCmd+0x1c>)
    344c:	79fb      	ldrb	r3, [r7, #7]
    344e:	6013      	str	r3, [r2, #0]
}
    3450:	bf00      	nop
    3452:	370c      	adds	r7, #12
    3454:	46bd      	mov	sp, r7
    3456:	bc80      	pop	{r7}
    3458:	4770      	bx	lr
    345a:	bf00      	nop
    345c:	4220001c 	.word	0x4220001c

00003460 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    3460:	b480      	push	{r7}
    3462:	b087      	sub	sp, #28
    3464:	af00      	add	r7, sp, #0
    3466:	6078      	str	r0, [r7, #4]
    3468:	460b      	mov	r3, r1
    346a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    346c:	2300      	movs	r3, #0
    346e:	613b      	str	r3, [r7, #16]
    3470:	2300      	movs	r3, #0
    3472:	60fb      	str	r3, [r7, #12]
    3474:	2300      	movs	r3, #0
    3476:	617b      	str	r3, [r7, #20]
    3478:	2300      	movs	r3, #0
    347a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	2b00      	cmp	r3, #0
    3480:	da03      	bge.n	348a <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
    3482:	4b2e      	ldr	r3, [pc, #184]	; (353c <GPIO_PinRemapConfig+0xdc>)
    3484:	69db      	ldr	r3, [r3, #28]
    3486:	617b      	str	r3, [r7, #20]
    3488:	e002      	b.n	3490 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    348a:	4b2c      	ldr	r3, [pc, #176]	; (353c <GPIO_PinRemapConfig+0xdc>)
    348c:	685b      	ldr	r3, [r3, #4]
    348e:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	0c1b      	lsrs	r3, r3, #16
    3494:	f003 030f 	and.w	r3, r3, #15
    3498:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	b29b      	uxth	r3, r3
    349e:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    34a0:	687b      	ldr	r3, [r7, #4]
    34a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    34a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    34aa:	d10a      	bne.n	34c2 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    34ac:	697b      	ldr	r3, [r7, #20]
    34ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34b2:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    34b4:	4b21      	ldr	r3, [pc, #132]	; (353c <GPIO_PinRemapConfig+0xdc>)
    34b6:	685b      	ldr	r3, [r3, #4]
    34b8:	4a20      	ldr	r2, [pc, #128]	; (353c <GPIO_PinRemapConfig+0xdc>)
    34ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34be:	6053      	str	r3, [r2, #4]
    34c0:	e021      	b.n	3506 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    34c8:	2b00      	cmp	r3, #0
    34ca:	d00e      	beq.n	34ea <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    34cc:	2203      	movs	r2, #3
    34ce:	68bb      	ldr	r3, [r7, #8]
    34d0:	fa02 f303 	lsl.w	r3, r2, r3
    34d4:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	43db      	mvns	r3, r3
    34da:	697a      	ldr	r2, [r7, #20]
    34dc:	4013      	ands	r3, r2
    34de:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    34e0:	697b      	ldr	r3, [r7, #20]
    34e2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    34e6:	617b      	str	r3, [r7, #20]
    34e8:	e00d      	b.n	3506 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	0d5b      	lsrs	r3, r3, #21
    34ee:	011b      	lsls	r3, r3, #4
    34f0:	693a      	ldr	r2, [r7, #16]
    34f2:	fa02 f303 	lsl.w	r3, r2, r3
    34f6:	43db      	mvns	r3, r3
    34f8:	697a      	ldr	r2, [r7, #20]
    34fa:	4013      	ands	r3, r2
    34fc:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    34fe:	697b      	ldr	r3, [r7, #20]
    3500:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    3504:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    3506:	78fb      	ldrb	r3, [r7, #3]
    3508:	2b00      	cmp	r3, #0
    350a:	d008      	beq.n	351e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	0d5b      	lsrs	r3, r3, #21
    3510:	011b      	lsls	r3, r3, #4
    3512:	693a      	ldr	r2, [r7, #16]
    3514:	fa02 f303 	lsl.w	r3, r2, r3
    3518:	697a      	ldr	r2, [r7, #20]
    351a:	4313      	orrs	r3, r2
    351c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    351e:	687b      	ldr	r3, [r7, #4]
    3520:	2b00      	cmp	r3, #0
    3522:	da03      	bge.n	352c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
    3524:	4a05      	ldr	r2, [pc, #20]	; (353c <GPIO_PinRemapConfig+0xdc>)
    3526:	697b      	ldr	r3, [r7, #20]
    3528:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
    352a:	e002      	b.n	3532 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
    352c:	4a03      	ldr	r2, [pc, #12]	; (353c <GPIO_PinRemapConfig+0xdc>)
    352e:	697b      	ldr	r3, [r7, #20]
    3530:	6053      	str	r3, [r2, #4]
}
    3532:	bf00      	nop
    3534:	371c      	adds	r7, #28
    3536:	46bd      	mov	sp, r7
    3538:	bc80      	pop	{r7}
    353a:	4770      	bx	lr
    353c:	40010000 	.word	0x40010000

00003540 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    3540:	b480      	push	{r7}
    3542:	b085      	sub	sp, #20
    3544:	af00      	add	r7, sp, #0
    3546:	4603      	mov	r3, r0
    3548:	460a      	mov	r2, r1
    354a:	71fb      	strb	r3, [r7, #7]
    354c:	4613      	mov	r3, r2
    354e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    3550:	2300      	movs	r3, #0
    3552:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    3554:	79bb      	ldrb	r3, [r7, #6]
    3556:	f003 0303 	and.w	r3, r3, #3
    355a:	009b      	lsls	r3, r3, #2
    355c:	220f      	movs	r2, #15
    355e:	fa02 f303 	lsl.w	r3, r2, r3
    3562:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    3564:	4a15      	ldr	r2, [pc, #84]	; (35bc <GPIO_EXTILineConfig+0x7c>)
    3566:	79bb      	ldrb	r3, [r7, #6]
    3568:	089b      	lsrs	r3, r3, #2
    356a:	b2db      	uxtb	r3, r3
    356c:	3302      	adds	r3, #2
    356e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3572:	68fb      	ldr	r3, [r7, #12]
    3574:	43db      	mvns	r3, r3
    3576:	4811      	ldr	r0, [pc, #68]	; (35bc <GPIO_EXTILineConfig+0x7c>)
    3578:	79b9      	ldrb	r1, [r7, #6]
    357a:	0889      	lsrs	r1, r1, #2
    357c:	b2c9      	uxtb	r1, r1
    357e:	401a      	ands	r2, r3
    3580:	1c8b      	adds	r3, r1, #2
    3582:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    3586:	4a0d      	ldr	r2, [pc, #52]	; (35bc <GPIO_EXTILineConfig+0x7c>)
    3588:	79bb      	ldrb	r3, [r7, #6]
    358a:	089b      	lsrs	r3, r3, #2
    358c:	b2db      	uxtb	r3, r3
    358e:	3302      	adds	r3, #2
    3590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3594:	79f9      	ldrb	r1, [r7, #7]
    3596:	79bb      	ldrb	r3, [r7, #6]
    3598:	f003 0303 	and.w	r3, r3, #3
    359c:	009b      	lsls	r3, r3, #2
    359e:	fa01 f303 	lsl.w	r3, r1, r3
    35a2:	4806      	ldr	r0, [pc, #24]	; (35bc <GPIO_EXTILineConfig+0x7c>)
    35a4:	79b9      	ldrb	r1, [r7, #6]
    35a6:	0889      	lsrs	r1, r1, #2
    35a8:	b2c9      	uxtb	r1, r1
    35aa:	431a      	orrs	r2, r3
    35ac:	1c8b      	adds	r3, r1, #2
    35ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    35b2:	bf00      	nop
    35b4:	3714      	adds	r7, #20
    35b6:	46bd      	mov	sp, r7
    35b8:	bc80      	pop	{r7}
    35ba:	4770      	bx	lr
    35bc:	40010000 	.word	0x40010000

000035c0 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    35c0:	b480      	push	{r7}
    35c2:	b083      	sub	sp, #12
    35c4:	af00      	add	r7, sp, #0
    35c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    35c8:	4a03      	ldr	r2, [pc, #12]	; (35d8 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	6013      	str	r3, [r2, #0]
}
    35ce:	bf00      	nop
    35d0:	370c      	adds	r7, #12
    35d2:	46bd      	mov	sp, r7
    35d4:	bc80      	pop	{r7}
    35d6:	4770      	bx	lr
    35d8:	422000dc 	.word	0x422000dc

000035dc <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    35dc:	b580      	push	{r7, lr}
    35de:	b082      	sub	sp, #8
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	4a26      	ldr	r2, [pc, #152]	; (3680 <USART_DeInit+0xa4>)
    35e8:	4293      	cmp	r3, r2
    35ea:	d10a      	bne.n	3602 <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    35ec:	2101      	movs	r1, #1
    35ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    35f2:	f7ff fc29 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    35f6:	2100      	movs	r1, #0
    35f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    35fc:	f7ff fc24 	bl	2e48 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
    3600:	e03a      	b.n	3678 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	4a1f      	ldr	r2, [pc, #124]	; (3684 <USART_DeInit+0xa8>)
    3606:	4293      	cmp	r3, r2
    3608:	d10a      	bne.n	3620 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    360a:	2101      	movs	r1, #1
    360c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3610:	f7ff fc38 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    3614:	2100      	movs	r1, #0
    3616:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    361a:	f7ff fc33 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    361e:	e02b      	b.n	3678 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	4a19      	ldr	r2, [pc, #100]	; (3688 <USART_DeInit+0xac>)
    3624:	4293      	cmp	r3, r2
    3626:	d10a      	bne.n	363e <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    3628:	2101      	movs	r1, #1
    362a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    362e:	f7ff fc29 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    3632:	2100      	movs	r1, #0
    3634:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3638:	f7ff fc24 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    363c:	e01c      	b.n	3678 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	4a12      	ldr	r2, [pc, #72]	; (368c <USART_DeInit+0xb0>)
    3642:	4293      	cmp	r3, r2
    3644:	d10a      	bne.n	365c <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    3646:	2101      	movs	r1, #1
    3648:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    364c:	f7ff fc1a 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    3650:	2100      	movs	r1, #0
    3652:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3656:	f7ff fc15 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    365a:	e00d      	b.n	3678 <USART_DeInit+0x9c>
    if (USARTx == UART5)
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	4a0c      	ldr	r2, [pc, #48]	; (3690 <USART_DeInit+0xb4>)
    3660:	4293      	cmp	r3, r2
    3662:	d109      	bne.n	3678 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    3664:	2101      	movs	r1, #1
    3666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    366a:	f7ff fc0b 	bl	2e84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    366e:	2100      	movs	r1, #0
    3670:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3674:	f7ff fc06 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    3678:	bf00      	nop
    367a:	3708      	adds	r7, #8
    367c:	46bd      	mov	sp, r7
    367e:	bd80      	pop	{r7, pc}
    3680:	40013800 	.word	0x40013800
    3684:	40004400 	.word	0x40004400
    3688:	40004800 	.word	0x40004800
    368c:	40004c00 	.word	0x40004c00
    3690:	40005000 	.word	0x40005000

00003694 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    3694:	b580      	push	{r7, lr}
    3696:	b08c      	sub	sp, #48	; 0x30
    3698:	af00      	add	r7, sp, #0
    369a:	6078      	str	r0, [r7, #4]
    369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    369e:	2300      	movs	r3, #0
    36a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    36a2:	2300      	movs	r3, #0
    36a4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    36a6:	2300      	movs	r3, #0
    36a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    36aa:	2300      	movs	r3, #0
    36ac:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	8a1b      	ldrh	r3, [r3, #16]
    36ba:	b29b      	uxth	r3, r3
    36bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    36be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    36c0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    36c4:	4013      	ands	r3, r2
    36c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    36c8:	683b      	ldr	r3, [r7, #0]
    36ca:	88db      	ldrh	r3, [r3, #6]
    36cc:	461a      	mov	r2, r3
    36ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36d0:	4313      	orrs	r3, r2
    36d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    36d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36d6:	b29a      	uxth	r2, r3
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    36dc:	687b      	ldr	r3, [r7, #4]
    36de:	899b      	ldrh	r3, [r3, #12]
    36e0:	b29b      	uxth	r3, r3
    36e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    36e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    36e6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    36ea:	4013      	ands	r3, r2
    36ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    36ee:	683b      	ldr	r3, [r7, #0]
    36f0:	889a      	ldrh	r2, [r3, #4]
    36f2:	683b      	ldr	r3, [r7, #0]
    36f4:	891b      	ldrh	r3, [r3, #8]
    36f6:	4313      	orrs	r3, r2
    36f8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    36fa:	683b      	ldr	r3, [r7, #0]
    36fc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    36fe:	4313      	orrs	r3, r2
    3700:	b29b      	uxth	r3, r3
    3702:	461a      	mov	r2, r3
    3704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3706:	4313      	orrs	r3, r2
    3708:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    370c:	b29a      	uxth	r2, r3
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    3712:	687b      	ldr	r3, [r7, #4]
    3714:	8a9b      	ldrh	r3, [r3, #20]
    3716:	b29b      	uxth	r3, r3
    3718:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    371c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    3720:	4013      	ands	r3, r2
    3722:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    3724:	683b      	ldr	r3, [r7, #0]
    3726:	899b      	ldrh	r3, [r3, #12]
    3728:	461a      	mov	r2, r3
    372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    372c:	4313      	orrs	r3, r2
    372e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    3730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3732:	b29a      	uxth	r2, r3
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    3738:	f107 0308 	add.w	r3, r7, #8
    373c:	4618      	mov	r0, r3
    373e:	f7ff fa79 	bl	2c34 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    3742:	69fb      	ldr	r3, [r7, #28]
    3744:	4a2e      	ldr	r2, [pc, #184]	; (3800 <USART_Init+0x16c>)
    3746:	4293      	cmp	r3, r2
    3748:	d102      	bne.n	3750 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    374a:	697b      	ldr	r3, [r7, #20]
    374c:	62bb      	str	r3, [r7, #40]	; 0x28
    374e:	e001      	b.n	3754 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    3750:	693b      	ldr	r3, [r7, #16]
    3752:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	899b      	ldrh	r3, [r3, #12]
    3758:	b29b      	uxth	r3, r3
    375a:	b21b      	sxth	r3, r3
    375c:	2b00      	cmp	r3, #0
    375e:	da0c      	bge.n	377a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    3760:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3762:	4613      	mov	r3, r2
    3764:	009b      	lsls	r3, r3, #2
    3766:	4413      	add	r3, r2
    3768:	009a      	lsls	r2, r3, #2
    376a:	441a      	add	r2, r3
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	681b      	ldr	r3, [r3, #0]
    3770:	005b      	lsls	r3, r3, #1
    3772:	fbb2 f3f3 	udiv	r3, r2, r3
    3776:	627b      	str	r3, [r7, #36]	; 0x24
    3778:	e00b      	b.n	3792 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    377a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    377c:	4613      	mov	r3, r2
    377e:	009b      	lsls	r3, r3, #2
    3780:	4413      	add	r3, r2
    3782:	009a      	lsls	r2, r3, #2
    3784:	441a      	add	r2, r3
    3786:	683b      	ldr	r3, [r7, #0]
    3788:	681b      	ldr	r3, [r3, #0]
    378a:	009b      	lsls	r3, r3, #2
    378c:	fbb2 f3f3 	udiv	r3, r2, r3
    3790:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    3792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3794:	4a1b      	ldr	r2, [pc, #108]	; (3804 <USART_Init+0x170>)
    3796:	fba2 2303 	umull	r2, r3, r2, r3
    379a:	095b      	lsrs	r3, r3, #5
    379c:	011b      	lsls	r3, r3, #4
    379e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    37a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37a2:	091b      	lsrs	r3, r3, #4
    37a4:	2264      	movs	r2, #100	; 0x64
    37a6:	fb02 f303 	mul.w	r3, r2, r3
    37aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37ac:	1ad3      	subs	r3, r2, r3
    37ae:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	899b      	ldrh	r3, [r3, #12]
    37b4:	b29b      	uxth	r3, r3
    37b6:	b21b      	sxth	r3, r3
    37b8:	2b00      	cmp	r3, #0
    37ba:	da0c      	bge.n	37d6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    37bc:	6a3b      	ldr	r3, [r7, #32]
    37be:	00db      	lsls	r3, r3, #3
    37c0:	3332      	adds	r3, #50	; 0x32
    37c2:	4a10      	ldr	r2, [pc, #64]	; (3804 <USART_Init+0x170>)
    37c4:	fba2 2303 	umull	r2, r3, r2, r3
    37c8:	095b      	lsrs	r3, r3, #5
    37ca:	f003 0307 	and.w	r3, r3, #7
    37ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37d0:	4313      	orrs	r3, r2
    37d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    37d4:	e00b      	b.n	37ee <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    37d6:	6a3b      	ldr	r3, [r7, #32]
    37d8:	011b      	lsls	r3, r3, #4
    37da:	3332      	adds	r3, #50	; 0x32
    37dc:	4a09      	ldr	r2, [pc, #36]	; (3804 <USART_Init+0x170>)
    37de:	fba2 2303 	umull	r2, r3, r2, r3
    37e2:	095b      	lsrs	r3, r3, #5
    37e4:	f003 030f 	and.w	r3, r3, #15
    37e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    37ea:	4313      	orrs	r3, r2
    37ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    37ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37f0:	b29a      	uxth	r2, r3
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	811a      	strh	r2, [r3, #8]
}
    37f6:	bf00      	nop
    37f8:	3730      	adds	r7, #48	; 0x30
    37fa:	46bd      	mov	sp, r7
    37fc:	bd80      	pop	{r7, pc}
    37fe:	bf00      	nop
    3800:	40013800 	.word	0x40013800
    3804:	51eb851f 	.word	0x51eb851f

00003808 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    3808:	b480      	push	{r7}
    380a:	b083      	sub	sp, #12
    380c:	af00      	add	r7, sp, #0
    380e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    3816:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	2200      	movs	r2, #0
    381c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	2200      	movs	r2, #0
    3822:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    3824:	687b      	ldr	r3, [r7, #4]
    3826:	2200      	movs	r2, #0
    3828:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	220c      	movs	r2, #12
    382e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	2200      	movs	r2, #0
    3834:	819a      	strh	r2, [r3, #12]
}
    3836:	bf00      	nop
    3838:	370c      	adds	r7, #12
    383a:	46bd      	mov	sp, r7
    383c:	bc80      	pop	{r7}
    383e:	4770      	bx	lr

00003840 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    3840:	b480      	push	{r7}
    3842:	b085      	sub	sp, #20
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
    3848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    384a:	2300      	movs	r3, #0
    384c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	8a1b      	ldrh	r3, [r3, #16]
    3852:	b29b      	uxth	r3, r3
    3854:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    3856:	68fa      	ldr	r2, [r7, #12]
    3858:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    385c:	4013      	ands	r3, r2
    385e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	881a      	ldrh	r2, [r3, #0]
    3864:	683b      	ldr	r3, [r7, #0]
    3866:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    3868:	4313      	orrs	r3, r2
    386a:	b29a      	uxth	r2, r3
    386c:	683b      	ldr	r3, [r7, #0]
    386e:	889b      	ldrh	r3, [r3, #4]
    3870:	4313      	orrs	r3, r2
    3872:	b29a      	uxth	r2, r3
    3874:	683b      	ldr	r3, [r7, #0]
    3876:	88db      	ldrh	r3, [r3, #6]
    3878:	4313      	orrs	r3, r2
    387a:	b29b      	uxth	r3, r3
    387c:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    387e:	68fb      	ldr	r3, [r7, #12]
    3880:	4313      	orrs	r3, r2
    3882:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    3884:	68fb      	ldr	r3, [r7, #12]
    3886:	b29a      	uxth	r2, r3
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	821a      	strh	r2, [r3, #16]
}
    388c:	bf00      	nop
    388e:	3714      	adds	r7, #20
    3890:	46bd      	mov	sp, r7
    3892:	bc80      	pop	{r7}
    3894:	4770      	bx	lr

00003896 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    3896:	b480      	push	{r7}
    3898:	b083      	sub	sp, #12
    389a:	af00      	add	r7, sp, #0
    389c:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	2200      	movs	r2, #0
    38a2:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	2200      	movs	r2, #0
    38a8:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	2200      	movs	r2, #0
    38ae:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    38b0:	687b      	ldr	r3, [r7, #4]
    38b2:	2200      	movs	r2, #0
    38b4:	80da      	strh	r2, [r3, #6]
}
    38b6:	bf00      	nop
    38b8:	370c      	adds	r7, #12
    38ba:	46bd      	mov	sp, r7
    38bc:	bc80      	pop	{r7}
    38be:	4770      	bx	lr

000038c0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    38c0:	b480      	push	{r7}
    38c2:	b083      	sub	sp, #12
    38c4:	af00      	add	r7, sp, #0
    38c6:	6078      	str	r0, [r7, #4]
    38c8:	460b      	mov	r3, r1
    38ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    38cc:	78fb      	ldrb	r3, [r7, #3]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d008      	beq.n	38e4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	899b      	ldrh	r3, [r3, #12]
    38d6:	b29b      	uxth	r3, r3
    38d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    38dc:	b29a      	uxth	r2, r3
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
    38e2:	e007      	b.n	38f4 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
    38e4:	687b      	ldr	r3, [r7, #4]
    38e6:	899b      	ldrh	r3, [r3, #12]
    38e8:	b29b      	uxth	r3, r3
    38ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    38ee:	b29a      	uxth	r2, r3
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	819a      	strh	r2, [r3, #12]
}
    38f4:	bf00      	nop
    38f6:	370c      	adds	r7, #12
    38f8:	46bd      	mov	sp, r7
    38fa:	bc80      	pop	{r7}
    38fc:	4770      	bx	lr

000038fe <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    38fe:	b480      	push	{r7}
    3900:	b087      	sub	sp, #28
    3902:	af00      	add	r7, sp, #0
    3904:	6078      	str	r0, [r7, #4]
    3906:	460b      	mov	r3, r1
    3908:	807b      	strh	r3, [r7, #2]
    390a:	4613      	mov	r3, r2
    390c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    390e:	2300      	movs	r3, #0
    3910:	613b      	str	r3, [r7, #16]
    3912:	2300      	movs	r3, #0
    3914:	60fb      	str	r3, [r7, #12]
    3916:	2300      	movs	r3, #0
    3918:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    391a:	2300      	movs	r3, #0
    391c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    3922:	887b      	ldrh	r3, [r7, #2]
    3924:	b2db      	uxtb	r3, r3
    3926:	095b      	lsrs	r3, r3, #5
    3928:	b2db      	uxtb	r3, r3
    392a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    392c:	887b      	ldrh	r3, [r7, #2]
    392e:	f003 031f 	and.w	r3, r3, #31
    3932:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    3934:	2201      	movs	r2, #1
    3936:	68fb      	ldr	r3, [r7, #12]
    3938:	fa02 f303 	lsl.w	r3, r2, r3
    393c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    393e:	693b      	ldr	r3, [r7, #16]
    3940:	2b01      	cmp	r3, #1
    3942:	d103      	bne.n	394c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	330c      	adds	r3, #12
    3948:	617b      	str	r3, [r7, #20]
    394a:	e009      	b.n	3960 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    394c:	693b      	ldr	r3, [r7, #16]
    394e:	2b02      	cmp	r3, #2
    3950:	d103      	bne.n	395a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    3952:	697b      	ldr	r3, [r7, #20]
    3954:	3310      	adds	r3, #16
    3956:	617b      	str	r3, [r7, #20]
    3958:	e002      	b.n	3960 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    395a:	697b      	ldr	r3, [r7, #20]
    395c:	3314      	adds	r3, #20
    395e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    3960:	787b      	ldrb	r3, [r7, #1]
    3962:	2b00      	cmp	r3, #0
    3964:	d006      	beq.n	3974 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    3966:	697b      	ldr	r3, [r7, #20]
    3968:	6819      	ldr	r1, [r3, #0]
    396a:	697b      	ldr	r3, [r7, #20]
    396c:	68ba      	ldr	r2, [r7, #8]
    396e:	430a      	orrs	r2, r1
    3970:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
    3972:	e006      	b.n	3982 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
    3974:	697b      	ldr	r3, [r7, #20]
    3976:	6819      	ldr	r1, [r3, #0]
    3978:	68bb      	ldr	r3, [r7, #8]
    397a:	43da      	mvns	r2, r3
    397c:	697b      	ldr	r3, [r7, #20]
    397e:	400a      	ands	r2, r1
    3980:	601a      	str	r2, [r3, #0]
}
    3982:	bf00      	nop
    3984:	371c      	adds	r7, #28
    3986:	46bd      	mov	sp, r7
    3988:	bc80      	pop	{r7}
    398a:	4770      	bx	lr

0000398c <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    398c:	b480      	push	{r7}
    398e:	b083      	sub	sp, #12
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
    3994:	460b      	mov	r3, r1
    3996:	807b      	strh	r3, [r7, #2]
    3998:	4613      	mov	r3, r2
    399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    399c:	787b      	ldrb	r3, [r7, #1]
    399e:	2b00      	cmp	r3, #0
    39a0:	d008      	beq.n	39b4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8a9b      	ldrh	r3, [r3, #20]
    39a6:	b29a      	uxth	r2, r3
    39a8:	887b      	ldrh	r3, [r7, #2]
    39aa:	4313      	orrs	r3, r2
    39ac:	b29a      	uxth	r2, r3
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
    39b2:	e009      	b.n	39c8 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    39b4:	687b      	ldr	r3, [r7, #4]
    39b6:	8a9b      	ldrh	r3, [r3, #20]
    39b8:	b29a      	uxth	r2, r3
    39ba:	887b      	ldrh	r3, [r7, #2]
    39bc:	43db      	mvns	r3, r3
    39be:	b29b      	uxth	r3, r3
    39c0:	4013      	ands	r3, r2
    39c2:	b29a      	uxth	r2, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	829a      	strh	r2, [r3, #20]
}
    39c8:	bf00      	nop
    39ca:	370c      	adds	r7, #12
    39cc:	46bd      	mov	sp, r7
    39ce:	bc80      	pop	{r7}
    39d0:	4770      	bx	lr

000039d2 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    39d2:	b480      	push	{r7}
    39d4:	b083      	sub	sp, #12
    39d6:	af00      	add	r7, sp, #0
    39d8:	6078      	str	r0, [r7, #4]
    39da:	460b      	mov	r3, r1
    39dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	8a1b      	ldrh	r3, [r3, #16]
    39e2:	b29b      	uxth	r3, r3
    39e4:	f023 030f 	bic.w	r3, r3, #15
    39e8:	b29a      	uxth	r2, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	8a1b      	ldrh	r3, [r3, #16]
    39f2:	b29a      	uxth	r2, r3
    39f4:	78fb      	ldrb	r3, [r7, #3]
    39f6:	b29b      	uxth	r3, r3
    39f8:	4313      	orrs	r3, r2
    39fa:	b29a      	uxth	r2, r3
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	821a      	strh	r2, [r3, #16]
}
    3a00:	bf00      	nop
    3a02:	370c      	adds	r7, #12
    3a04:	46bd      	mov	sp, r7
    3a06:	bc80      	pop	{r7}
    3a08:	4770      	bx	lr

00003a0a <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    3a0a:	b480      	push	{r7}
    3a0c:	b083      	sub	sp, #12
    3a0e:	af00      	add	r7, sp, #0
    3a10:	6078      	str	r0, [r7, #4]
    3a12:	460b      	mov	r3, r1
    3a14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	899b      	ldrh	r3, [r3, #12]
    3a1a:	b29b      	uxth	r3, r3
    3a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3a20:	b29a      	uxth	r2, r3
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	899b      	ldrh	r3, [r3, #12]
    3a2a:	b29a      	uxth	r2, r3
    3a2c:	887b      	ldrh	r3, [r7, #2]
    3a2e:	4313      	orrs	r3, r2
    3a30:	b29a      	uxth	r2, r3
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	819a      	strh	r2, [r3, #12]
}
    3a36:	bf00      	nop
    3a38:	370c      	adds	r7, #12
    3a3a:	46bd      	mov	sp, r7
    3a3c:	bc80      	pop	{r7}
    3a3e:	4770      	bx	lr

00003a40 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3a40:	b480      	push	{r7}
    3a42:	b083      	sub	sp, #12
    3a44:	af00      	add	r7, sp, #0
    3a46:	6078      	str	r0, [r7, #4]
    3a48:	460b      	mov	r3, r1
    3a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    3a4c:	78fb      	ldrb	r3, [r7, #3]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d008      	beq.n	3a64 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	899b      	ldrh	r3, [r3, #12]
    3a56:	b29b      	uxth	r3, r3
    3a58:	f043 0302 	orr.w	r3, r3, #2
    3a5c:	b29a      	uxth	r2, r3
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
  }
}
    3a62:	e007      	b.n	3a74 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= CR1_RWU_Reset;
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	899b      	ldrh	r3, [r3, #12]
    3a68:	b29b      	uxth	r3, r3
    3a6a:	f023 0302 	bic.w	r3, r3, #2
    3a6e:	b29a      	uxth	r2, r3
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	819a      	strh	r2, [r3, #12]
}
    3a74:	bf00      	nop
    3a76:	370c      	adds	r7, #12
    3a78:	46bd      	mov	sp, r7
    3a7a:	bc80      	pop	{r7}
    3a7c:	4770      	bx	lr

00003a7e <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    3a7e:	b480      	push	{r7}
    3a80:	b083      	sub	sp, #12
    3a82:	af00      	add	r7, sp, #0
    3a84:	6078      	str	r0, [r7, #4]
    3a86:	460b      	mov	r3, r1
    3a88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	8a1b      	ldrh	r3, [r3, #16]
    3a8e:	b29b      	uxth	r3, r3
    3a90:	f023 0320 	bic.w	r3, r3, #32
    3a94:	b29a      	uxth	r2, r3
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	8a1b      	ldrh	r3, [r3, #16]
    3a9e:	b29a      	uxth	r2, r3
    3aa0:	887b      	ldrh	r3, [r7, #2]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	b29a      	uxth	r2, r3
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	821a      	strh	r2, [r3, #16]
}
    3aaa:	bf00      	nop
    3aac:	370c      	adds	r7, #12
    3aae:	46bd      	mov	sp, r7
    3ab0:	bc80      	pop	{r7}
    3ab2:	4770      	bx	lr

00003ab4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3ab4:	b480      	push	{r7}
    3ab6:	b083      	sub	sp, #12
    3ab8:	af00      	add	r7, sp, #0
    3aba:	6078      	str	r0, [r7, #4]
    3abc:	460b      	mov	r3, r1
    3abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3ac0:	78fb      	ldrb	r3, [r7, #3]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d008      	beq.n	3ad8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	8a1b      	ldrh	r3, [r3, #16]
    3aca:	b29b      	uxth	r3, r3
    3acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3ad0:	b29a      	uxth	r2, r3
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
  }
}
    3ad6:	e007      	b.n	3ae8 <USART_LINCmd+0x34>
    USARTx->CR2 &= CR2_LINEN_Reset;
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	8a1b      	ldrh	r3, [r3, #16]
    3adc:	b29b      	uxth	r3, r3
    3ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3ae2:	b29a      	uxth	r2, r3
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	821a      	strh	r2, [r3, #16]
}
    3ae8:	bf00      	nop
    3aea:	370c      	adds	r7, #12
    3aec:	46bd      	mov	sp, r7
    3aee:	bc80      	pop	{r7}
    3af0:	4770      	bx	lr

00003af2 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    3af2:	b480      	push	{r7}
    3af4:	b083      	sub	sp, #12
    3af6:	af00      	add	r7, sp, #0
    3af8:	6078      	str	r0, [r7, #4]
    3afa:	460b      	mov	r3, r1
    3afc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    3afe:	887b      	ldrh	r3, [r7, #2]
    3b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3b04:	b29a      	uxth	r2, r3
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	809a      	strh	r2, [r3, #4]
}
    3b0a:	bf00      	nop
    3b0c:	370c      	adds	r7, #12
    3b0e:	46bd      	mov	sp, r7
    3b10:	bc80      	pop	{r7}
    3b12:	4770      	bx	lr

00003b14 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    3b14:	b480      	push	{r7}
    3b16:	b083      	sub	sp, #12
    3b18:	af00      	add	r7, sp, #0
    3b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	889b      	ldrh	r3, [r3, #4]
    3b20:	b29b      	uxth	r3, r3
    3b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3b26:	b29b      	uxth	r3, r3
}
    3b28:	4618      	mov	r0, r3
    3b2a:	370c      	adds	r7, #12
    3b2c:	46bd      	mov	sp, r7
    3b2e:	bc80      	pop	{r7}
    3b30:	4770      	bx	lr

00003b32 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    3b32:	b480      	push	{r7}
    3b34:	b083      	sub	sp, #12
    3b36:	af00      	add	r7, sp, #0
    3b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	899b      	ldrh	r3, [r3, #12]
    3b3e:	b29b      	uxth	r3, r3
    3b40:	f043 0301 	orr.w	r3, r3, #1
    3b44:	b29a      	uxth	r2, r3
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	819a      	strh	r2, [r3, #12]
}
    3b4a:	bf00      	nop
    3b4c:	370c      	adds	r7, #12
    3b4e:	46bd      	mov	sp, r7
    3b50:	bc80      	pop	{r7}
    3b52:	4770      	bx	lr

00003b54 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    3b54:	b480      	push	{r7}
    3b56:	b083      	sub	sp, #12
    3b58:	af00      	add	r7, sp, #0
    3b5a:	6078      	str	r0, [r7, #4]
    3b5c:	460b      	mov	r3, r1
    3b5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	8b1b      	ldrh	r3, [r3, #24]
    3b64:	b29b      	uxth	r3, r3
    3b66:	b2db      	uxtb	r3, r3
    3b68:	b29a      	uxth	r2, r3
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	8b1b      	ldrh	r3, [r3, #24]
    3b72:	b29a      	uxth	r2, r3
    3b74:	78fb      	ldrb	r3, [r7, #3]
    3b76:	b29b      	uxth	r3, r3
    3b78:	021b      	lsls	r3, r3, #8
    3b7a:	b29b      	uxth	r3, r3
    3b7c:	4313      	orrs	r3, r2
    3b7e:	b29a      	uxth	r2, r3
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	831a      	strh	r2, [r3, #24]
}
    3b84:	bf00      	nop
    3b86:	370c      	adds	r7, #12
    3b88:	46bd      	mov	sp, r7
    3b8a:	bc80      	pop	{r7}
    3b8c:	4770      	bx	lr

00003b8e <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    3b8e:	b480      	push	{r7}
    3b90:	b083      	sub	sp, #12
    3b92:	af00      	add	r7, sp, #0
    3b94:	6078      	str	r0, [r7, #4]
    3b96:	460b      	mov	r3, r1
    3b98:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	8b1b      	ldrh	r3, [r3, #24]
    3b9e:	b29b      	uxth	r3, r3
    3ba0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3ba4:	b29a      	uxth	r2, r3
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	8b1b      	ldrh	r3, [r3, #24]
    3bae:	b29a      	uxth	r2, r3
    3bb0:	78fb      	ldrb	r3, [r7, #3]
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	4313      	orrs	r3, r2
    3bb6:	b29a      	uxth	r2, r3
    3bb8:	687b      	ldr	r3, [r7, #4]
    3bba:	831a      	strh	r2, [r3, #24]
}
    3bbc:	bf00      	nop
    3bbe:	370c      	adds	r7, #12
    3bc0:	46bd      	mov	sp, r7
    3bc2:	bc80      	pop	{r7}
    3bc4:	4770      	bx	lr

00003bc6 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3bc6:	b480      	push	{r7}
    3bc8:	b083      	sub	sp, #12
    3bca:	af00      	add	r7, sp, #0
    3bcc:	6078      	str	r0, [r7, #4]
    3bce:	460b      	mov	r3, r1
    3bd0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3bd2:	78fb      	ldrb	r3, [r7, #3]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d008      	beq.n	3bea <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	8a9b      	ldrh	r3, [r3, #20]
    3bdc:	b29b      	uxth	r3, r3
    3bde:	f043 0320 	orr.w	r3, r3, #32
    3be2:	b29a      	uxth	r2, r3
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
  }
}
    3be8:	e007      	b.n	3bfa <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= CR3_SCEN_Reset;
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	8a9b      	ldrh	r3, [r3, #20]
    3bee:	b29b      	uxth	r3, r3
    3bf0:	f023 0320 	bic.w	r3, r3, #32
    3bf4:	b29a      	uxth	r2, r3
    3bf6:	687b      	ldr	r3, [r7, #4]
    3bf8:	829a      	strh	r2, [r3, #20]
}
    3bfa:	bf00      	nop
    3bfc:	370c      	adds	r7, #12
    3bfe:	46bd      	mov	sp, r7
    3c00:	bc80      	pop	{r7}
    3c02:	4770      	bx	lr

00003c04 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3c04:	b480      	push	{r7}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
    3c0c:	460b      	mov	r3, r1
    3c0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3c10:	78fb      	ldrb	r3, [r7, #3]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d008      	beq.n	3c28 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	8a9b      	ldrh	r3, [r3, #20]
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	f043 0310 	orr.w	r3, r3, #16
    3c20:	b29a      	uxth	r2, r3
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
  }
}
    3c26:	e007      	b.n	3c38 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= CR3_NACK_Reset;
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	8a9b      	ldrh	r3, [r3, #20]
    3c2c:	b29b      	uxth	r3, r3
    3c2e:	f023 0310 	bic.w	r3, r3, #16
    3c32:	b29a      	uxth	r2, r3
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	829a      	strh	r2, [r3, #20]
}
    3c38:	bf00      	nop
    3c3a:	370c      	adds	r7, #12
    3c3c:	46bd      	mov	sp, r7
    3c3e:	bc80      	pop	{r7}
    3c40:	4770      	bx	lr

00003c42 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3c42:	b480      	push	{r7}
    3c44:	b083      	sub	sp, #12
    3c46:	af00      	add	r7, sp, #0
    3c48:	6078      	str	r0, [r7, #4]
    3c4a:	460b      	mov	r3, r1
    3c4c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3c4e:	78fb      	ldrb	r3, [r7, #3]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d008      	beq.n	3c66 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    3c54:	687b      	ldr	r3, [r7, #4]
    3c56:	8a9b      	ldrh	r3, [r3, #20]
    3c58:	b29b      	uxth	r3, r3
    3c5a:	f043 0308 	orr.w	r3, r3, #8
    3c5e:	b29a      	uxth	r2, r3
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
  }
}
    3c64:	e007      	b.n	3c76 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= CR3_HDSEL_Reset;
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	8a9b      	ldrh	r3, [r3, #20]
    3c6a:	b29b      	uxth	r3, r3
    3c6c:	f023 0308 	bic.w	r3, r3, #8
    3c70:	b29a      	uxth	r2, r3
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	829a      	strh	r2, [r3, #20]
}
    3c76:	bf00      	nop
    3c78:	370c      	adds	r7, #12
    3c7a:	46bd      	mov	sp, r7
    3c7c:	bc80      	pop	{r7}
    3c7e:	4770      	bx	lr

00003c80 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3c80:	b480      	push	{r7}
    3c82:	b083      	sub	sp, #12
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
    3c88:	460b      	mov	r3, r1
    3c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3c8c:	78fb      	ldrb	r3, [r7, #3]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d00a      	beq.n	3ca8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	899b      	ldrh	r3, [r3, #12]
    3c96:	b29b      	uxth	r3, r3
    3c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3ca0:	b29a      	uxth	r2, r3
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
  }
}
    3ca6:	e007      	b.n	3cb8 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= CR1_OVER8_Reset;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	899b      	ldrh	r3, [r3, #12]
    3cac:	b29b      	uxth	r3, r3
    3cae:	f3c3 030e 	ubfx	r3, r3, #0, #15
    3cb2:	b29a      	uxth	r2, r3
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	819a      	strh	r2, [r3, #12]
}
    3cb8:	bf00      	nop
    3cba:	370c      	adds	r7, #12
    3cbc:	46bd      	mov	sp, r7
    3cbe:	bc80      	pop	{r7}
    3cc0:	4770      	bx	lr

00003cc2 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3cc2:	b480      	push	{r7}
    3cc4:	b083      	sub	sp, #12
    3cc6:	af00      	add	r7, sp, #0
    3cc8:	6078      	str	r0, [r7, #4]
    3cca:	460b      	mov	r3, r1
    3ccc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3cce:	78fb      	ldrb	r3, [r7, #3]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d008      	beq.n	3ce6 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	8a9b      	ldrh	r3, [r3, #20]
    3cd8:	b29b      	uxth	r3, r3
    3cda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3cde:	b29a      	uxth	r2, r3
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
  }
}
    3ce4:	e007      	b.n	3cf6 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	8a9b      	ldrh	r3, [r3, #20]
    3cea:	b29b      	uxth	r3, r3
    3cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3cf0:	b29a      	uxth	r2, r3
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	829a      	strh	r2, [r3, #20]
}
    3cf6:	bf00      	nop
    3cf8:	370c      	adds	r7, #12
    3cfa:	46bd      	mov	sp, r7
    3cfc:	bc80      	pop	{r7}
    3cfe:	4770      	bx	lr

00003d00 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    3d00:	b480      	push	{r7}
    3d02:	b083      	sub	sp, #12
    3d04:	af00      	add	r7, sp, #0
    3d06:	6078      	str	r0, [r7, #4]
    3d08:	460b      	mov	r3, r1
    3d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	8a9b      	ldrh	r3, [r3, #20]
    3d10:	b29b      	uxth	r3, r3
    3d12:	f023 0304 	bic.w	r3, r3, #4
    3d16:	b29a      	uxth	r2, r3
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    3d1c:	687b      	ldr	r3, [r7, #4]
    3d1e:	8a9b      	ldrh	r3, [r3, #20]
    3d20:	b29a      	uxth	r2, r3
    3d22:	887b      	ldrh	r3, [r7, #2]
    3d24:	4313      	orrs	r3, r2
    3d26:	b29a      	uxth	r2, r3
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	829a      	strh	r2, [r3, #20]
}
    3d2c:	bf00      	nop
    3d2e:	370c      	adds	r7, #12
    3d30:	46bd      	mov	sp, r7
    3d32:	bc80      	pop	{r7}
    3d34:	4770      	bx	lr

00003d36 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3d36:	b480      	push	{r7}
    3d38:	b083      	sub	sp, #12
    3d3a:	af00      	add	r7, sp, #0
    3d3c:	6078      	str	r0, [r7, #4]
    3d3e:	460b      	mov	r3, r1
    3d40:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    3d42:	78fb      	ldrb	r3, [r7, #3]
    3d44:	2b00      	cmp	r3, #0
    3d46:	d008      	beq.n	3d5a <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	8a9b      	ldrh	r3, [r3, #20]
    3d4c:	b29b      	uxth	r3, r3
    3d4e:	f043 0302 	orr.w	r3, r3, #2
    3d52:	b29a      	uxth	r2, r3
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
  }
}
    3d58:	e007      	b.n	3d6a <USART_IrDACmd+0x34>
    USARTx->CR3 &= CR3_IREN_Reset;
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	8a9b      	ldrh	r3, [r3, #20]
    3d5e:	b29b      	uxth	r3, r3
    3d60:	f023 0302 	bic.w	r3, r3, #2
    3d64:	b29a      	uxth	r2, r3
    3d66:	687b      	ldr	r3, [r7, #4]
    3d68:	829a      	strh	r2, [r3, #20]
}
    3d6a:	bf00      	nop
    3d6c:	370c      	adds	r7, #12
    3d6e:	46bd      	mov	sp, r7
    3d70:	bc80      	pop	{r7}
    3d72:	4770      	bx	lr

00003d74 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    3d74:	b480      	push	{r7}
    3d76:	b085      	sub	sp, #20
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
    3d7c:	460b      	mov	r3, r1
    3d7e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    3d80:	2300      	movs	r3, #0
    3d82:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	881b      	ldrh	r3, [r3, #0]
    3d88:	b29a      	uxth	r2, r3
    3d8a:	887b      	ldrh	r3, [r7, #2]
    3d8c:	4013      	ands	r3, r2
    3d8e:	b29b      	uxth	r3, r3
    3d90:	2b00      	cmp	r3, #0
    3d92:	d002      	beq.n	3d9a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    3d94:	2301      	movs	r3, #1
    3d96:	73fb      	strb	r3, [r7, #15]
    3d98:	e001      	b.n	3d9e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    3d9a:	2300      	movs	r3, #0
    3d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    3d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    3da0:	4618      	mov	r0, r3
    3da2:	3714      	adds	r7, #20
    3da4:	46bd      	mov	sp, r7
    3da6:	bc80      	pop	{r7}
    3da8:	4770      	bx	lr

00003daa <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    3daa:	b480      	push	{r7}
    3dac:	b083      	sub	sp, #12
    3dae:	af00      	add	r7, sp, #0
    3db0:	6078      	str	r0, [r7, #4]
    3db2:	460b      	mov	r3, r1
    3db4:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    3db6:	887b      	ldrh	r3, [r7, #2]
    3db8:	43db      	mvns	r3, r3
    3dba:	b29a      	uxth	r2, r3
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	801a      	strh	r2, [r3, #0]
}
    3dc0:	bf00      	nop
    3dc2:	370c      	adds	r7, #12
    3dc4:	46bd      	mov	sp, r7
    3dc6:	bc80      	pop	{r7}
    3dc8:	4770      	bx	lr

00003dca <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    3dca:	b480      	push	{r7}
    3dcc:	b087      	sub	sp, #28
    3dce:	af00      	add	r7, sp, #0
    3dd0:	6078      	str	r0, [r7, #4]
    3dd2:	460b      	mov	r3, r1
    3dd4:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    3dd6:	2300      	movs	r3, #0
    3dd8:	60fb      	str	r3, [r7, #12]
    3dda:	2300      	movs	r3, #0
    3ddc:	617b      	str	r3, [r7, #20]
    3dde:	2300      	movs	r3, #0
    3de0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    3de2:	2300      	movs	r3, #0
    3de4:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    3de6:	887b      	ldrh	r3, [r7, #2]
    3de8:	b2db      	uxtb	r3, r3
    3dea:	095b      	lsrs	r3, r3, #5
    3dec:	b2db      	uxtb	r3, r3
    3dee:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    3df0:	887b      	ldrh	r3, [r7, #2]
    3df2:	f003 031f 	and.w	r3, r3, #31
    3df6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    3df8:	2201      	movs	r2, #1
    3dfa:	697b      	ldr	r3, [r7, #20]
    3dfc:	fa02 f303 	lsl.w	r3, r2, r3
    3e00:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    3e02:	68bb      	ldr	r3, [r7, #8]
    3e04:	2b01      	cmp	r3, #1
    3e06:	d107      	bne.n	3e18 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	899b      	ldrh	r3, [r3, #12]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	461a      	mov	r2, r3
    3e10:	697b      	ldr	r3, [r7, #20]
    3e12:	4013      	ands	r3, r2
    3e14:	617b      	str	r3, [r7, #20]
    3e16:	e011      	b.n	3e3c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    3e18:	68bb      	ldr	r3, [r7, #8]
    3e1a:	2b02      	cmp	r3, #2
    3e1c:	d107      	bne.n	3e2e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	8a1b      	ldrh	r3, [r3, #16]
    3e22:	b29b      	uxth	r3, r3
    3e24:	461a      	mov	r2, r3
    3e26:	697b      	ldr	r3, [r7, #20]
    3e28:	4013      	ands	r3, r2
    3e2a:	617b      	str	r3, [r7, #20]
    3e2c:	e006      	b.n	3e3c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	8a9b      	ldrh	r3, [r3, #20]
    3e32:	b29b      	uxth	r3, r3
    3e34:	461a      	mov	r2, r3
    3e36:	697b      	ldr	r3, [r7, #20]
    3e38:	4013      	ands	r3, r2
    3e3a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    3e3c:	887b      	ldrh	r3, [r7, #2]
    3e3e:	0a1b      	lsrs	r3, r3, #8
    3e40:	b29b      	uxth	r3, r3
    3e42:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    3e44:	2201      	movs	r2, #1
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	fa02 f303 	lsl.w	r3, r2, r3
    3e4c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    3e4e:	687b      	ldr	r3, [r7, #4]
    3e50:	881b      	ldrh	r3, [r3, #0]
    3e52:	b29b      	uxth	r3, r3
    3e54:	461a      	mov	r2, r3
    3e56:	68fb      	ldr	r3, [r7, #12]
    3e58:	4013      	ands	r3, r2
    3e5a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    3e5c:	697b      	ldr	r3, [r7, #20]
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d005      	beq.n	3e6e <USART_GetITStatus+0xa4>
    3e62:	68fb      	ldr	r3, [r7, #12]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d002      	beq.n	3e6e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
    3e68:	2301      	movs	r3, #1
    3e6a:	74fb      	strb	r3, [r7, #19]
    3e6c:	e001      	b.n	3e72 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
    3e6e:	2300      	movs	r3, #0
    3e70:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    3e72:	7cfb      	ldrb	r3, [r7, #19]
}
    3e74:	4618      	mov	r0, r3
    3e76:	371c      	adds	r7, #28
    3e78:	46bd      	mov	sp, r7
    3e7a:	bc80      	pop	{r7}
    3e7c:	4770      	bx	lr

00003e7e <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    3e7e:	b480      	push	{r7}
    3e80:	b085      	sub	sp, #20
    3e82:	af00      	add	r7, sp, #0
    3e84:	6078      	str	r0, [r7, #4]
    3e86:	460b      	mov	r3, r1
    3e88:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    3e8a:	2300      	movs	r3, #0
    3e8c:	81fb      	strh	r3, [r7, #14]
    3e8e:	2300      	movs	r3, #0
    3e90:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    3e92:	887b      	ldrh	r3, [r7, #2]
    3e94:	0a1b      	lsrs	r3, r3, #8
    3e96:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    3e98:	89fb      	ldrh	r3, [r7, #14]
    3e9a:	2201      	movs	r2, #1
    3e9c:	fa02 f303 	lsl.w	r3, r2, r3
    3ea0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    3ea2:	89bb      	ldrh	r3, [r7, #12]
    3ea4:	43db      	mvns	r3, r3
    3ea6:	b29a      	uxth	r2, r3
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	801a      	strh	r2, [r3, #0]
}
    3eac:	bf00      	nop
    3eae:	3714      	adds	r7, #20
    3eb0:	46bd      	mov	sp, r7
    3eb2:	bc80      	pop	{r7}
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop

00003eb8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    3eb8:	b480      	push	{r7}
    3eba:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    3ebc:	4b09      	ldr	r3, [pc, #36]	; (3ee4 <EXTI_DeInit+0x2c>)
    3ebe:	2200      	movs	r2, #0
    3ec0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    3ec2:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <EXTI_DeInit+0x2c>)
    3ec4:	2200      	movs	r2, #0
    3ec6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    3ec8:	4b06      	ldr	r3, [pc, #24]	; (3ee4 <EXTI_DeInit+0x2c>)
    3eca:	2200      	movs	r2, #0
    3ecc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    3ece:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <EXTI_DeInit+0x2c>)
    3ed0:	2200      	movs	r2, #0
    3ed2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    3ed4:	4b03      	ldr	r3, [pc, #12]	; (3ee4 <EXTI_DeInit+0x2c>)
    3ed6:	4a04      	ldr	r2, [pc, #16]	; (3ee8 <EXTI_DeInit+0x30>)
    3ed8:	615a      	str	r2, [r3, #20]
}
    3eda:	bf00      	nop
    3edc:	46bd      	mov	sp, r7
    3ede:	bc80      	pop	{r7}
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop
    3ee4:	40010400 	.word	0x40010400
    3ee8:	000fffff 	.word	0x000fffff

00003eec <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    3eec:	b480      	push	{r7}
    3eee:	b085      	sub	sp, #20
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    3ef4:	2300      	movs	r3, #0
    3ef6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    3ef8:	4b34      	ldr	r3, [pc, #208]	; (3fcc <EXTI_Init+0xe0>)
    3efa:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	799b      	ldrb	r3, [r3, #6]
    3f00:	2b00      	cmp	r3, #0
    3f02:	d04f      	beq.n	3fa4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    3f04:	4b31      	ldr	r3, [pc, #196]	; (3fcc <EXTI_Init+0xe0>)
    3f06:	681a      	ldr	r2, [r3, #0]
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	681b      	ldr	r3, [r3, #0]
    3f0c:	43db      	mvns	r3, r3
    3f0e:	492f      	ldr	r1, [pc, #188]	; (3fcc <EXTI_Init+0xe0>)
    3f10:	4013      	ands	r3, r2
    3f12:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    3f14:	4b2d      	ldr	r3, [pc, #180]	; (3fcc <EXTI_Init+0xe0>)
    3f16:	685a      	ldr	r2, [r3, #4]
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	43db      	mvns	r3, r3
    3f1e:	492b      	ldr	r1, [pc, #172]	; (3fcc <EXTI_Init+0xe0>)
    3f20:	4013      	ands	r3, r2
    3f22:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	791b      	ldrb	r3, [r3, #4]
    3f28:	461a      	mov	r2, r3
    3f2a:	68fb      	ldr	r3, [r7, #12]
    3f2c:	4413      	add	r3, r2
    3f2e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	6819      	ldr	r1, [r3, #0]
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	681a      	ldr	r2, [r3, #0]
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	430a      	orrs	r2, r1
    3f3c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    3f3e:	4b23      	ldr	r3, [pc, #140]	; (3fcc <EXTI_Init+0xe0>)
    3f40:	689a      	ldr	r2, [r3, #8]
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	43db      	mvns	r3, r3
    3f48:	4920      	ldr	r1, [pc, #128]	; (3fcc <EXTI_Init+0xe0>)
    3f4a:	4013      	ands	r3, r2
    3f4c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    3f4e:	4b1f      	ldr	r3, [pc, #124]	; (3fcc <EXTI_Init+0xe0>)
    3f50:	68da      	ldr	r2, [r3, #12]
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	43db      	mvns	r3, r3
    3f58:	491c      	ldr	r1, [pc, #112]	; (3fcc <EXTI_Init+0xe0>)
    3f5a:	4013      	ands	r3, r2
    3f5c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	795b      	ldrb	r3, [r3, #5]
    3f62:	2b10      	cmp	r3, #16
    3f64:	d10e      	bne.n	3f84 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    3f66:	4b19      	ldr	r3, [pc, #100]	; (3fcc <EXTI_Init+0xe0>)
    3f68:	689a      	ldr	r2, [r3, #8]
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	4917      	ldr	r1, [pc, #92]	; (3fcc <EXTI_Init+0xe0>)
    3f70:	4313      	orrs	r3, r2
    3f72:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    3f74:	4b15      	ldr	r3, [pc, #84]	; (3fcc <EXTI_Init+0xe0>)
    3f76:	68da      	ldr	r2, [r3, #12]
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	4913      	ldr	r1, [pc, #76]	; (3fcc <EXTI_Init+0xe0>)
    3f7e:	4313      	orrs	r3, r2
    3f80:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
    3f82:	e01d      	b.n	3fc0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
    3f84:	4b11      	ldr	r3, [pc, #68]	; (3fcc <EXTI_Init+0xe0>)
    3f86:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	795b      	ldrb	r3, [r3, #5]
    3f8c:	461a      	mov	r2, r3
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	4413      	add	r3, r2
    3f92:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    3f94:	68fb      	ldr	r3, [r7, #12]
    3f96:	6819      	ldr	r1, [r3, #0]
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	681a      	ldr	r2, [r3, #0]
    3f9c:	68fb      	ldr	r3, [r7, #12]
    3f9e:	430a      	orrs	r2, r1
    3fa0:	601a      	str	r2, [r3, #0]
}
    3fa2:	e00d      	b.n	3fc0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	791b      	ldrb	r3, [r3, #4]
    3fa8:	461a      	mov	r2, r3
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	4413      	add	r3, r2
    3fae:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    3fb0:	68fb      	ldr	r3, [r7, #12]
    3fb2:	6819      	ldr	r1, [r3, #0]
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	43da      	mvns	r2, r3
    3fba:	68fb      	ldr	r3, [r7, #12]
    3fbc:	400a      	ands	r2, r1
    3fbe:	601a      	str	r2, [r3, #0]
}
    3fc0:	bf00      	nop
    3fc2:	3714      	adds	r7, #20
    3fc4:	46bd      	mov	sp, r7
    3fc6:	bc80      	pop	{r7}
    3fc8:	4770      	bx	lr
    3fca:	bf00      	nop
    3fcc:	40010400 	.word	0x40010400

00003fd0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    3fd0:	b480      	push	{r7}
    3fd2:	b083      	sub	sp, #12
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	2200      	movs	r2, #0
    3fdc:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	2200      	movs	r2, #0
    3fe2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	220c      	movs	r2, #12
    3fe8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	2200      	movs	r2, #0
    3fee:	719a      	strb	r2, [r3, #6]
}
    3ff0:	bf00      	nop
    3ff2:	370c      	adds	r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	bc80      	pop	{r7}
    3ff8:	4770      	bx	lr

00003ffa <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    3ffa:	b480      	push	{r7}
    3ffc:	b083      	sub	sp, #12
    3ffe:	af00      	add	r7, sp, #0
    4000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    4002:	4b05      	ldr	r3, [pc, #20]	; (4018 <EXTI_GenerateSWInterrupt+0x1e>)
    4004:	691a      	ldr	r2, [r3, #16]
    4006:	4904      	ldr	r1, [pc, #16]	; (4018 <EXTI_GenerateSWInterrupt+0x1e>)
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	4313      	orrs	r3, r2
    400c:	610b      	str	r3, [r1, #16]
}
    400e:	bf00      	nop
    4010:	370c      	adds	r7, #12
    4012:	46bd      	mov	sp, r7
    4014:	bc80      	pop	{r7}
    4016:	4770      	bx	lr
    4018:	40010400 	.word	0x40010400

0000401c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    401c:	b480      	push	{r7}
    401e:	b085      	sub	sp, #20
    4020:	af00      	add	r7, sp, #0
    4022:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    4024:	2300      	movs	r3, #0
    4026:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    4028:	4b08      	ldr	r3, [pc, #32]	; (404c <EXTI_GetFlagStatus+0x30>)
    402a:	695a      	ldr	r2, [r3, #20]
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	4013      	ands	r3, r2
    4030:	2b00      	cmp	r3, #0
    4032:	d002      	beq.n	403a <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
    4034:	2301      	movs	r3, #1
    4036:	73fb      	strb	r3, [r7, #15]
    4038:	e001      	b.n	403e <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
    403a:	2300      	movs	r3, #0
    403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    403e:	7bfb      	ldrb	r3, [r7, #15]
}
    4040:	4618      	mov	r0, r3
    4042:	3714      	adds	r7, #20
    4044:	46bd      	mov	sp, r7
    4046:	bc80      	pop	{r7}
    4048:	4770      	bx	lr
    404a:	bf00      	nop
    404c:	40010400 	.word	0x40010400

00004050 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    4050:	b480      	push	{r7}
    4052:	b083      	sub	sp, #12
    4054:	af00      	add	r7, sp, #0
    4056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    4058:	4a03      	ldr	r2, [pc, #12]	; (4068 <EXTI_ClearFlag+0x18>)
    405a:	687b      	ldr	r3, [r7, #4]
    405c:	6153      	str	r3, [r2, #20]
}
    405e:	bf00      	nop
    4060:	370c      	adds	r7, #12
    4062:	46bd      	mov	sp, r7
    4064:	bc80      	pop	{r7}
    4066:	4770      	bx	lr
    4068:	40010400 	.word	0x40010400

0000406c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    406c:	b480      	push	{r7}
    406e:	b085      	sub	sp, #20
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    4074:	2300      	movs	r3, #0
    4076:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    4078:	2300      	movs	r3, #0
    407a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    407c:	4b0c      	ldr	r3, [pc, #48]	; (40b0 <EXTI_GetITStatus+0x44>)
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	687a      	ldr	r2, [r7, #4]
    4082:	4013      	ands	r3, r2
    4084:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    4086:	4b0a      	ldr	r3, [pc, #40]	; (40b0 <EXTI_GetITStatus+0x44>)
    4088:	695a      	ldr	r2, [r3, #20]
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	4013      	ands	r3, r2
    408e:	2b00      	cmp	r3, #0
    4090:	d005      	beq.n	409e <EXTI_GetITStatus+0x32>
    4092:	68bb      	ldr	r3, [r7, #8]
    4094:	2b00      	cmp	r3, #0
    4096:	d002      	beq.n	409e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
    4098:	2301      	movs	r3, #1
    409a:	73fb      	strb	r3, [r7, #15]
    409c:	e001      	b.n	40a2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
    409e:	2300      	movs	r3, #0
    40a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    40a2:	7bfb      	ldrb	r3, [r7, #15]
}
    40a4:	4618      	mov	r0, r3
    40a6:	3714      	adds	r7, #20
    40a8:	46bd      	mov	sp, r7
    40aa:	bc80      	pop	{r7}
    40ac:	4770      	bx	lr
    40ae:	bf00      	nop
    40b0:	40010400 	.word	0x40010400

000040b4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    40bc:	4a03      	ldr	r2, [pc, #12]	; (40cc <EXTI_ClearITPendingBit+0x18>)
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	6153      	str	r3, [r2, #20]
}
    40c2:	bf00      	nop
    40c4:	370c      	adds	r7, #12
    40c6:	46bd      	mov	sp, r7
    40c8:	bc80      	pop	{r7}
    40ca:	4770      	bx	lr
    40cc:	40010400 	.word	0x40010400

000040d0 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	4a17      	ldr	r2, [pc, #92]	; (4138 <ADC_DeInit+0x68>)
    40dc:	4293      	cmp	r3, r2
    40de:	d10a      	bne.n	40f6 <ADC_DeInit+0x26>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    40e0:	2101      	movs	r1, #1
    40e2:	f44f 7000 	mov.w	r0, #512	; 0x200
    40e6:	f7fe feaf 	bl	2e48 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    40ea:	2100      	movs	r1, #0
    40ec:	f44f 7000 	mov.w	r0, #512	; 0x200
    40f0:	f7fe feaa 	bl	2e48 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    }
  }
}
    40f4:	e01c      	b.n	4130 <ADC_DeInit+0x60>
  else if (ADCx == ADC2)
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	4a10      	ldr	r2, [pc, #64]	; (413c <ADC_DeInit+0x6c>)
    40fa:	4293      	cmp	r3, r2
    40fc:	d10a      	bne.n	4114 <ADC_DeInit+0x44>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    40fe:	2101      	movs	r1, #1
    4100:	f44f 6080 	mov.w	r0, #1024	; 0x400
    4104:	f7fe fea0 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    4108:	2100      	movs	r1, #0
    410a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    410e:	f7fe fe9b 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4112:	e00d      	b.n	4130 <ADC_DeInit+0x60>
    if (ADCx == ADC3)
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	4a0a      	ldr	r2, [pc, #40]	; (4140 <ADC_DeInit+0x70>)
    4118:	4293      	cmp	r3, r2
    411a:	d109      	bne.n	4130 <ADC_DeInit+0x60>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    411c:	2101      	movs	r1, #1
    411e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4122:	f7fe fe91 	bl	2e48 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    4126:	2100      	movs	r1, #0
    4128:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    412c:	f7fe fe8c 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4130:	bf00      	nop
    4132:	3708      	adds	r7, #8
    4134:	46bd      	mov	sp, r7
    4136:	bd80      	pop	{r7, pc}
    4138:	40012400 	.word	0x40012400
    413c:	40012800 	.word	0x40012800
    4140:	40013c00 	.word	0x40013c00

00004144 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    4144:	b480      	push	{r7}
    4146:	b085      	sub	sp, #20
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
    414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    414e:	2300      	movs	r3, #0
    4150:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    4152:	2300      	movs	r3, #0
    4154:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	685b      	ldr	r3, [r3, #4]
    415a:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    415c:	68fb      	ldr	r3, [r7, #12]
    415e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    4162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4166:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	681a      	ldr	r2, [r3, #0]
    416c:	683b      	ldr	r3, [r7, #0]
    416e:	791b      	ldrb	r3, [r3, #4]
    4170:	021b      	lsls	r3, r3, #8
    4172:	4313      	orrs	r3, r2
    4174:	68fa      	ldr	r2, [r7, #12]
    4176:	4313      	orrs	r3, r2
    4178:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	68fa      	ldr	r2, [r7, #12]
    417e:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	689b      	ldr	r3, [r3, #8]
    4184:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    4186:	68fa      	ldr	r2, [r7, #12]
    4188:	4b16      	ldr	r3, [pc, #88]	; (41e4 <ADC_Init+0xa0>)
    418a:	4013      	ands	r3, r2
    418c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    418e:	683b      	ldr	r3, [r7, #0]
    4190:	68da      	ldr	r2, [r3, #12]
    4192:	683b      	ldr	r3, [r7, #0]
    4194:	689b      	ldr	r3, [r3, #8]
    4196:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    4198:	683b      	ldr	r3, [r7, #0]
    419a:	795b      	ldrb	r3, [r3, #5]
    419c:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    419e:	4313      	orrs	r3, r2
    41a0:	68fa      	ldr	r2, [r7, #12]
    41a2:	4313      	orrs	r3, r2
    41a4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	68fa      	ldr	r2, [r7, #12]
    41aa:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41b0:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    41b8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    41ba:	683b      	ldr	r3, [r7, #0]
    41bc:	7c1b      	ldrb	r3, [r3, #16]
    41be:	3b01      	subs	r3, #1
    41c0:	b2da      	uxtb	r2, r3
    41c2:	7afb      	ldrb	r3, [r7, #11]
    41c4:	4313      	orrs	r3, r2
    41c6:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    41c8:	7afb      	ldrb	r3, [r7, #11]
    41ca:	051b      	lsls	r3, r3, #20
    41cc:	68fa      	ldr	r2, [r7, #12]
    41ce:	4313      	orrs	r3, r2
    41d0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	68fa      	ldr	r2, [r7, #12]
    41d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
    41d8:	bf00      	nop
    41da:	3714      	adds	r7, #20
    41dc:	46bd      	mov	sp, r7
    41de:	bc80      	pop	{r7}
    41e0:	4770      	bx	lr
    41e2:	bf00      	nop
    41e4:	fff1f7fd 	.word	0xfff1f7fd

000041e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    41e8:	b480      	push	{r7}
    41ea:	b083      	sub	sp, #12
    41ec:	af00      	add	r7, sp, #0
    41ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    41f0:	687b      	ldr	r3, [r7, #4]
    41f2:	2200      	movs	r2, #0
    41f4:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	2200      	movs	r2, #0
    41fa:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	2200      	movs	r2, #0
    4200:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	2200      	movs	r2, #0
    4206:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	2200      	movs	r2, #0
    420c:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	2201      	movs	r2, #1
    4212:	741a      	strb	r2, [r3, #16]
}
    4214:	bf00      	nop
    4216:	370c      	adds	r7, #12
    4218:	46bd      	mov	sp, r7
    421a:	bc80      	pop	{r7}
    421c:	4770      	bx	lr

0000421e <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    421e:	b480      	push	{r7}
    4220:	b083      	sub	sp, #12
    4222:	af00      	add	r7, sp, #0
    4224:	6078      	str	r0, [r7, #4]
    4226:	460b      	mov	r3, r1
    4228:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    422a:	78fb      	ldrb	r3, [r7, #3]
    422c:	2b00      	cmp	r3, #0
    422e:	d006      	beq.n	423e <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	689b      	ldr	r3, [r3, #8]
    4234:	f043 0201 	orr.w	r2, r3, #1
    4238:	687b      	ldr	r3, [r7, #4]
    423a:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
    423c:	e005      	b.n	424a <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	689b      	ldr	r3, [r3, #8]
    4242:	f023 0201 	bic.w	r2, r3, #1
    4246:	687b      	ldr	r3, [r7, #4]
    4248:	609a      	str	r2, [r3, #8]
}
    424a:	bf00      	nop
    424c:	370c      	adds	r7, #12
    424e:	46bd      	mov	sp, r7
    4250:	bc80      	pop	{r7}
    4252:	4770      	bx	lr

00004254 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    4254:	b480      	push	{r7}
    4256:	b083      	sub	sp, #12
    4258:	af00      	add	r7, sp, #0
    425a:	6078      	str	r0, [r7, #4]
    425c:	460b      	mov	r3, r1
    425e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4260:	78fb      	ldrb	r3, [r7, #3]
    4262:	2b00      	cmp	r3, #0
    4264:	d006      	beq.n	4274 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	689b      	ldr	r3, [r3, #8]
    426a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
    4272:	e005      	b.n	4280 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	689b      	ldr	r3, [r3, #8]
    4278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	609a      	str	r2, [r3, #8]
}
    4280:	bf00      	nop
    4282:	370c      	adds	r7, #12
    4284:	46bd      	mov	sp, r7
    4286:	bc80      	pop	{r7}
    4288:	4770      	bx	lr

0000428a <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    428a:	b480      	push	{r7}
    428c:	b085      	sub	sp, #20
    428e:	af00      	add	r7, sp, #0
    4290:	6078      	str	r0, [r7, #4]
    4292:	460b      	mov	r3, r1
    4294:	807b      	strh	r3, [r7, #2]
    4296:	4613      	mov	r3, r2
    4298:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    429a:	2300      	movs	r3, #0
    429c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    429e:	887b      	ldrh	r3, [r7, #2]
    42a0:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    42a2:	787b      	ldrb	r3, [r7, #1]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d006      	beq.n	42b6 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	685a      	ldr	r2, [r3, #4]
    42ac:	7bfb      	ldrb	r3, [r7, #15]
    42ae:	431a      	orrs	r2, r3
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
    42b4:	e006      	b.n	42c4 <ADC_ITConfig+0x3a>
    ADCx->CR1 &= (~(uint32_t)itmask);
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	685a      	ldr	r2, [r3, #4]
    42ba:	7bfb      	ldrb	r3, [r7, #15]
    42bc:	43db      	mvns	r3, r3
    42be:	401a      	ands	r2, r3
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	605a      	str	r2, [r3, #4]
}
    42c4:	bf00      	nop
    42c6:	3714      	adds	r7, #20
    42c8:	46bd      	mov	sp, r7
    42ca:	bc80      	pop	{r7}
    42cc:	4770      	bx	lr

000042ce <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    42ce:	b480      	push	{r7}
    42d0:	b083      	sub	sp, #12
    42d2:	af00      	add	r7, sp, #0
    42d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	689b      	ldr	r3, [r3, #8]
    42da:	f043 0208 	orr.w	r2, r3, #8
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	609a      	str	r2, [r3, #8]
}
    42e2:	bf00      	nop
    42e4:	370c      	adds	r7, #12
    42e6:	46bd      	mov	sp, r7
    42e8:	bc80      	pop	{r7}
    42ea:	4770      	bx	lr

000042ec <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    42ec:	b480      	push	{r7}
    42ee:	b085      	sub	sp, #20
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    42f4:	2300      	movs	r3, #0
    42f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	689b      	ldr	r3, [r3, #8]
    42fc:	f003 0308 	and.w	r3, r3, #8
    4300:	2b00      	cmp	r3, #0
    4302:	d002      	beq.n	430a <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    4304:	2301      	movs	r3, #1
    4306:	73fb      	strb	r3, [r7, #15]
    4308:	e001      	b.n	430e <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    430a:	2300      	movs	r3, #0
    430c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    430e:	7bfb      	ldrb	r3, [r7, #15]
}
    4310:	4618      	mov	r0, r3
    4312:	3714      	adds	r7, #20
    4314:	46bd      	mov	sp, r7
    4316:	bc80      	pop	{r7}
    4318:	4770      	bx	lr

0000431a <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    431a:	b480      	push	{r7}
    431c:	b083      	sub	sp, #12
    431e:	af00      	add	r7, sp, #0
    4320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	689b      	ldr	r3, [r3, #8]
    4326:	f043 0204 	orr.w	r2, r3, #4
    432a:	687b      	ldr	r3, [r7, #4]
    432c:	609a      	str	r2, [r3, #8]
}
    432e:	bf00      	nop
    4330:	370c      	adds	r7, #12
    4332:	46bd      	mov	sp, r7
    4334:	bc80      	pop	{r7}
    4336:	4770      	bx	lr

00004338 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    4338:	b480      	push	{r7}
    433a:	b085      	sub	sp, #20
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    4340:	2300      	movs	r3, #0
    4342:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	689b      	ldr	r3, [r3, #8]
    4348:	f003 0304 	and.w	r3, r3, #4
    434c:	2b00      	cmp	r3, #0
    434e:	d002      	beq.n	4356 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    4350:	2301      	movs	r3, #1
    4352:	73fb      	strb	r3, [r7, #15]
    4354:	e001      	b.n	435a <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    4356:	2300      	movs	r3, #0
    4358:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    435a:	7bfb      	ldrb	r3, [r7, #15]
}
    435c:	4618      	mov	r0, r3
    435e:	3714      	adds	r7, #20
    4360:	46bd      	mov	sp, r7
    4362:	bc80      	pop	{r7}
    4364:	4770      	bx	lr

00004366 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    4366:	b480      	push	{r7}
    4368:	b083      	sub	sp, #12
    436a:	af00      	add	r7, sp, #0
    436c:	6078      	str	r0, [r7, #4]
    436e:	460b      	mov	r3, r1
    4370:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4372:	78fb      	ldrb	r3, [r7, #3]
    4374:	2b00      	cmp	r3, #0
    4376:	d006      	beq.n	4386 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	689b      	ldr	r3, [r3, #8]
    437c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
    4384:	e005      	b.n	4392 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	689b      	ldr	r3, [r3, #8]
    438a:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	609a      	str	r2, [r3, #8]
}
    4392:	bf00      	nop
    4394:	370c      	adds	r7, #12
    4396:	46bd      	mov	sp, r7
    4398:	bc80      	pop	{r7}
    439a:	4770      	bx	lr

0000439c <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    439c:	b480      	push	{r7}
    439e:	b085      	sub	sp, #20
    43a0:	af00      	add	r7, sp, #0
    43a2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    43a4:	2300      	movs	r3, #0
    43a6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	689b      	ldr	r3, [r3, #8]
    43ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    43b0:	2b00      	cmp	r3, #0
    43b2:	d002      	beq.n	43ba <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    43b4:	2301      	movs	r3, #1
    43b6:	73fb      	strb	r3, [r7, #15]
    43b8:	e001      	b.n	43be <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    43ba:	2300      	movs	r3, #0
    43bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    43be:	7bfb      	ldrb	r3, [r7, #15]
}
    43c0:	4618      	mov	r0, r3
    43c2:	3714      	adds	r7, #20
    43c4:	46bd      	mov	sp, r7
    43c6:	bc80      	pop	{r7}
    43c8:	4770      	bx	lr

000043ca <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    43ca:	b480      	push	{r7}
    43cc:	b085      	sub	sp, #20
    43ce:	af00      	add	r7, sp, #0
    43d0:	6078      	str	r0, [r7, #4]
    43d2:	460b      	mov	r3, r1
    43d4:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    43d6:	2300      	movs	r3, #0
    43d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    43da:	2300      	movs	r3, #0
    43dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    43de:	687b      	ldr	r3, [r7, #4]
    43e0:	685b      	ldr	r3, [r3, #4]
    43e2:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    43ea:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    43ec:	78fb      	ldrb	r3, [r7, #3]
    43ee:	3b01      	subs	r3, #1
    43f0:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    43f2:	68bb      	ldr	r3, [r7, #8]
    43f4:	035b      	lsls	r3, r3, #13
    43f6:	68fa      	ldr	r2, [r7, #12]
    43f8:	4313      	orrs	r3, r2
    43fa:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	68fa      	ldr	r2, [r7, #12]
    4400:	605a      	str	r2, [r3, #4]
}
    4402:	bf00      	nop
    4404:	3714      	adds	r7, #20
    4406:	46bd      	mov	sp, r7
    4408:	bc80      	pop	{r7}
    440a:	4770      	bx	lr

0000440c <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    440c:	b480      	push	{r7}
    440e:	b083      	sub	sp, #12
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
    4414:	460b      	mov	r3, r1
    4416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4418:	78fb      	ldrb	r3, [r7, #3]
    441a:	2b00      	cmp	r3, #0
    441c:	d006      	beq.n	442c <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	685b      	ldr	r3, [r3, #4]
    4422:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
  }
}
    442a:	e005      	b.n	4438 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_DISCEN_Reset;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	685b      	ldr	r3, [r3, #4]
    4430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	605a      	str	r2, [r3, #4]
}
    4438:	bf00      	nop
    443a:	370c      	adds	r7, #12
    443c:	46bd      	mov	sp, r7
    443e:	bc80      	pop	{r7}
    4440:	4770      	bx	lr

00004442 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    4442:	b480      	push	{r7}
    4444:	b085      	sub	sp, #20
    4446:	af00      	add	r7, sp, #0
    4448:	6078      	str	r0, [r7, #4]
    444a:	4608      	mov	r0, r1
    444c:	4611      	mov	r1, r2
    444e:	461a      	mov	r2, r3
    4450:	4603      	mov	r3, r0
    4452:	70fb      	strb	r3, [r7, #3]
    4454:	460b      	mov	r3, r1
    4456:	70bb      	strb	r3, [r7, #2]
    4458:	4613      	mov	r3, r2
    445a:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    445c:	2300      	movs	r3, #0
    445e:	60fb      	str	r3, [r7, #12]
    4460:	2300      	movs	r3, #0
    4462:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    4464:	78fb      	ldrb	r3, [r7, #3]
    4466:	2b09      	cmp	r3, #9
    4468:	d923      	bls.n	44b2 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	68db      	ldr	r3, [r3, #12]
    446e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    4470:	78fb      	ldrb	r3, [r7, #3]
    4472:	f1a3 020a 	sub.w	r2, r3, #10
    4476:	4613      	mov	r3, r2
    4478:	005b      	lsls	r3, r3, #1
    447a:	4413      	add	r3, r2
    447c:	2207      	movs	r2, #7
    447e:	fa02 f303 	lsl.w	r3, r2, r3
    4482:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    4484:	68bb      	ldr	r3, [r7, #8]
    4486:	43db      	mvns	r3, r3
    4488:	68fa      	ldr	r2, [r7, #12]
    448a:	4013      	ands	r3, r2
    448c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    448e:	7879      	ldrb	r1, [r7, #1]
    4490:	78fb      	ldrb	r3, [r7, #3]
    4492:	f1a3 020a 	sub.w	r2, r3, #10
    4496:	4613      	mov	r3, r2
    4498:	005b      	lsls	r3, r3, #1
    449a:	4413      	add	r3, r2
    449c:	fa01 f303 	lsl.w	r3, r1, r3
    44a0:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    44a2:	68fa      	ldr	r2, [r7, #12]
    44a4:	68bb      	ldr	r3, [r7, #8]
    44a6:	4313      	orrs	r3, r2
    44a8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	68fa      	ldr	r2, [r7, #12]
    44ae:	60da      	str	r2, [r3, #12]
    44b0:	e01e      	b.n	44f0 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	691b      	ldr	r3, [r3, #16]
    44b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    44b8:	78fa      	ldrb	r2, [r7, #3]
    44ba:	4613      	mov	r3, r2
    44bc:	005b      	lsls	r3, r3, #1
    44be:	4413      	add	r3, r2
    44c0:	2207      	movs	r2, #7
    44c2:	fa02 f303 	lsl.w	r3, r2, r3
    44c6:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    44c8:	68bb      	ldr	r3, [r7, #8]
    44ca:	43db      	mvns	r3, r3
    44cc:	68fa      	ldr	r2, [r7, #12]
    44ce:	4013      	ands	r3, r2
    44d0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    44d2:	7879      	ldrb	r1, [r7, #1]
    44d4:	78fa      	ldrb	r2, [r7, #3]
    44d6:	4613      	mov	r3, r2
    44d8:	005b      	lsls	r3, r3, #1
    44da:	4413      	add	r3, r2
    44dc:	fa01 f303 	lsl.w	r3, r1, r3
    44e0:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    44e2:	68fa      	ldr	r2, [r7, #12]
    44e4:	68bb      	ldr	r3, [r7, #8]
    44e6:	4313      	orrs	r3, r2
    44e8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	68fa      	ldr	r2, [r7, #12]
    44ee:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    44f0:	78bb      	ldrb	r3, [r7, #2]
    44f2:	2b06      	cmp	r3, #6
    44f4:	d821      	bhi.n	453a <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    44fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    44fc:	78bb      	ldrb	r3, [r7, #2]
    44fe:	1e5a      	subs	r2, r3, #1
    4500:	4613      	mov	r3, r2
    4502:	009b      	lsls	r3, r3, #2
    4504:	4413      	add	r3, r2
    4506:	221f      	movs	r2, #31
    4508:	fa02 f303 	lsl.w	r3, r2, r3
    450c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    450e:	68bb      	ldr	r3, [r7, #8]
    4510:	43db      	mvns	r3, r3
    4512:	68fa      	ldr	r2, [r7, #12]
    4514:	4013      	ands	r3, r2
    4516:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    4518:	78f9      	ldrb	r1, [r7, #3]
    451a:	78bb      	ldrb	r3, [r7, #2]
    451c:	1e5a      	subs	r2, r3, #1
    451e:	4613      	mov	r3, r2
    4520:	009b      	lsls	r3, r3, #2
    4522:	4413      	add	r3, r2
    4524:	fa01 f303 	lsl.w	r3, r1, r3
    4528:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    452a:	68fa      	ldr	r2, [r7, #12]
    452c:	68bb      	ldr	r3, [r7, #8]
    452e:	4313      	orrs	r3, r2
    4530:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	68fa      	ldr	r2, [r7, #12]
    4536:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
    4538:	e047      	b.n	45ca <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
    453a:	78bb      	ldrb	r3, [r7, #2]
    453c:	2b0c      	cmp	r3, #12
    453e:	d821      	bhi.n	4584 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4544:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    4546:	78bb      	ldrb	r3, [r7, #2]
    4548:	1fda      	subs	r2, r3, #7
    454a:	4613      	mov	r3, r2
    454c:	009b      	lsls	r3, r3, #2
    454e:	4413      	add	r3, r2
    4550:	221f      	movs	r2, #31
    4552:	fa02 f303 	lsl.w	r3, r2, r3
    4556:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    4558:	68bb      	ldr	r3, [r7, #8]
    455a:	43db      	mvns	r3, r3
    455c:	68fa      	ldr	r2, [r7, #12]
    455e:	4013      	ands	r3, r2
    4560:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    4562:	78f9      	ldrb	r1, [r7, #3]
    4564:	78bb      	ldrb	r3, [r7, #2]
    4566:	1fda      	subs	r2, r3, #7
    4568:	4613      	mov	r3, r2
    456a:	009b      	lsls	r3, r3, #2
    456c:	4413      	add	r3, r2
    456e:	fa01 f303 	lsl.w	r3, r1, r3
    4572:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    4574:	68fa      	ldr	r2, [r7, #12]
    4576:	68bb      	ldr	r3, [r7, #8]
    4578:	4313      	orrs	r3, r2
    457a:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	68fa      	ldr	r2, [r7, #12]
    4580:	631a      	str	r2, [r3, #48]	; 0x30
}
    4582:	e022      	b.n	45ca <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4588:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    458a:	78bb      	ldrb	r3, [r7, #2]
    458c:	f1a3 020d 	sub.w	r2, r3, #13
    4590:	4613      	mov	r3, r2
    4592:	009b      	lsls	r3, r3, #2
    4594:	4413      	add	r3, r2
    4596:	221f      	movs	r2, #31
    4598:	fa02 f303 	lsl.w	r3, r2, r3
    459c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
    459e:	68bb      	ldr	r3, [r7, #8]
    45a0:	43db      	mvns	r3, r3
    45a2:	68fa      	ldr	r2, [r7, #12]
    45a4:	4013      	ands	r3, r2
    45a6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    45a8:	78f9      	ldrb	r1, [r7, #3]
    45aa:	78bb      	ldrb	r3, [r7, #2]
    45ac:	f1a3 020d 	sub.w	r2, r3, #13
    45b0:	4613      	mov	r3, r2
    45b2:	009b      	lsls	r3, r3, #2
    45b4:	4413      	add	r3, r2
    45b6:	fa01 f303 	lsl.w	r3, r1, r3
    45ba:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
    45bc:	68fa      	ldr	r2, [r7, #12]
    45be:	68bb      	ldr	r3, [r7, #8]
    45c0:	4313      	orrs	r3, r2
    45c2:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	68fa      	ldr	r2, [r7, #12]
    45c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
    45ca:	bf00      	nop
    45cc:	3714      	adds	r7, #20
    45ce:	46bd      	mov	sp, r7
    45d0:	bc80      	pop	{r7}
    45d2:	4770      	bx	lr

000045d4 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    45d4:	b480      	push	{r7}
    45d6:	b083      	sub	sp, #12
    45d8:	af00      	add	r7, sp, #0
    45da:	6078      	str	r0, [r7, #4]
    45dc:	460b      	mov	r3, r1
    45de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    45e0:	78fb      	ldrb	r3, [r7, #3]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d006      	beq.n	45f4 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	689b      	ldr	r3, [r3, #8]
    45ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
  }
}
    45f2:	e005      	b.n	4600 <ADC_ExternalTrigConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	689b      	ldr	r3, [r3, #8]
    45f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	609a      	str	r2, [r3, #8]
}
    4600:	bf00      	nop
    4602:	370c      	adds	r7, #12
    4604:	46bd      	mov	sp, r7
    4606:	bc80      	pop	{r7}
    4608:	4770      	bx	lr

0000460a <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    460a:	b480      	push	{r7}
    460c:	b083      	sub	sp, #12
    460e:	af00      	add	r7, sp, #0
    4610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4616:	b29b      	uxth	r3, r3
}
    4618:	4618      	mov	r0, r3
    461a:	370c      	adds	r7, #12
    461c:	46bd      	mov	sp, r7
    461e:	bc80      	pop	{r7}
    4620:	4770      	bx	lr

00004622 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    4622:	b480      	push	{r7}
    4624:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    4626:	4b03      	ldr	r3, [pc, #12]	; (4634 <ADC_GetDualModeConversionValue+0x12>)
    4628:	681b      	ldr	r3, [r3, #0]
}
    462a:	4618      	mov	r0, r3
    462c:	46bd      	mov	sp, r7
    462e:	bc80      	pop	{r7}
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	4001244c 	.word	0x4001244c

00004638 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    4638:	b480      	push	{r7}
    463a:	b083      	sub	sp, #12
    463c:	af00      	add	r7, sp, #0
    463e:	6078      	str	r0, [r7, #4]
    4640:	460b      	mov	r3, r1
    4642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4644:	78fb      	ldrb	r3, [r7, #3]
    4646:	2b00      	cmp	r3, #0
    4648:	d006      	beq.n	4658 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	685b      	ldr	r3, [r3, #4]
    464e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
  }
}
    4656:	e005      	b.n	4664 <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= CR1_JAUTO_Reset;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	605a      	str	r2, [r3, #4]
}
    4664:	bf00      	nop
    4666:	370c      	adds	r7, #12
    4668:	46bd      	mov	sp, r7
    466a:	bc80      	pop	{r7}
    466c:	4770      	bx	lr

0000466e <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    466e:	b480      	push	{r7}
    4670:	b083      	sub	sp, #12
    4672:	af00      	add	r7, sp, #0
    4674:	6078      	str	r0, [r7, #4]
    4676:	460b      	mov	r3, r1
    4678:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    467a:	78fb      	ldrb	r3, [r7, #3]
    467c:	2b00      	cmp	r3, #0
    467e:	d006      	beq.n	468e <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	685b      	ldr	r3, [r3, #4]
    4684:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
  }
}
    468c:	e005      	b.n	469a <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	685b      	ldr	r3, [r3, #4]
    4692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	605a      	str	r2, [r3, #4]
}
    469a:	bf00      	nop
    469c:	370c      	adds	r7, #12
    469e:	46bd      	mov	sp, r7
    46a0:	bc80      	pop	{r7}
    46a2:	4770      	bx	lr

000046a4 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    46a4:	b480      	push	{r7}
    46a6:	b085      	sub	sp, #20
    46a8:	af00      	add	r7, sp, #0
    46aa:	6078      	str	r0, [r7, #4]
    46ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    46ae:	2300      	movs	r3, #0
    46b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	689b      	ldr	r3, [r3, #8]
    46b6:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    46be:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    46c0:	68fa      	ldr	r2, [r7, #12]
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	4313      	orrs	r3, r2
    46c6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	68fa      	ldr	r2, [r7, #12]
    46cc:	609a      	str	r2, [r3, #8]
}
    46ce:	bf00      	nop
    46d0:	3714      	adds	r7, #20
    46d2:	46bd      	mov	sp, r7
    46d4:	bc80      	pop	{r7}
    46d6:	4770      	bx	lr

000046d8 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    46d8:	b480      	push	{r7}
    46da:	b083      	sub	sp, #12
    46dc:	af00      	add	r7, sp, #0
    46de:	6078      	str	r0, [r7, #4]
    46e0:	460b      	mov	r3, r1
    46e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    46e4:	78fb      	ldrb	r3, [r7, #3]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d006      	beq.n	46f8 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	689b      	ldr	r3, [r3, #8]
    46ee:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
  }
}
    46f6:	e005      	b.n	4704 <ADC_ExternalTrigInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	689b      	ldr	r3, [r3, #8]
    46fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	609a      	str	r2, [r3, #8]
}
    4704:	bf00      	nop
    4706:	370c      	adds	r7, #12
    4708:	46bd      	mov	sp, r7
    470a:	bc80      	pop	{r7}
    470c:	4770      	bx	lr

0000470e <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    470e:	b480      	push	{r7}
    4710:	b083      	sub	sp, #12
    4712:	af00      	add	r7, sp, #0
    4714:	6078      	str	r0, [r7, #4]
    4716:	460b      	mov	r3, r1
    4718:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    471a:	78fb      	ldrb	r3, [r7, #3]
    471c:	2b00      	cmp	r3, #0
    471e:	d006      	beq.n	472e <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	689b      	ldr	r3, [r3, #8]
    4724:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
  }
}
    472c:	e005      	b.n	473a <ADC_SoftwareStartInjectedConvCmd+0x2c>
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	689b      	ldr	r3, [r3, #8]
    4732:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	609a      	str	r2, [r3, #8]
}
    473a:	bf00      	nop
    473c:	370c      	adds	r7, #12
    473e:	46bd      	mov	sp, r7
    4740:	bc80      	pop	{r7}
    4742:	4770      	bx	lr

00004744 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    4744:	b480      	push	{r7}
    4746:	b085      	sub	sp, #20
    4748:	af00      	add	r7, sp, #0
    474a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    474c:	2300      	movs	r3, #0
    474e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    4750:	687b      	ldr	r3, [r7, #4]
    4752:	689b      	ldr	r3, [r3, #8]
    4754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    4758:	2b00      	cmp	r3, #0
    475a:	d002      	beq.n	4762 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    475c:	2301      	movs	r3, #1
    475e:	73fb      	strb	r3, [r7, #15]
    4760:	e001      	b.n	4766 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    4762:	2300      	movs	r3, #0
    4764:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    4766:	7bfb      	ldrb	r3, [r7, #15]
}
    4768:	4618      	mov	r0, r3
    476a:	3714      	adds	r7, #20
    476c:	46bd      	mov	sp, r7
    476e:	bc80      	pop	{r7}
    4770:	4770      	bx	lr

00004772 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    4772:	b480      	push	{r7}
    4774:	b087      	sub	sp, #28
    4776:	af00      	add	r7, sp, #0
    4778:	6078      	str	r0, [r7, #4]
    477a:	4608      	mov	r0, r1
    477c:	4611      	mov	r1, r2
    477e:	461a      	mov	r2, r3
    4780:	4603      	mov	r3, r0
    4782:	70fb      	strb	r3, [r7, #3]
    4784:	460b      	mov	r3, r1
    4786:	70bb      	strb	r3, [r7, #2]
    4788:	4613      	mov	r3, r2
    478a:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    478c:	2300      	movs	r3, #0
    478e:	617b      	str	r3, [r7, #20]
    4790:	2300      	movs	r3, #0
    4792:	613b      	str	r3, [r7, #16]
    4794:	2300      	movs	r3, #0
    4796:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    4798:	78fb      	ldrb	r3, [r7, #3]
    479a:	2b09      	cmp	r3, #9
    479c:	d923      	bls.n	47e6 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    479e:	687b      	ldr	r3, [r7, #4]
    47a0:	68db      	ldr	r3, [r3, #12]
    47a2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    47a4:	78fb      	ldrb	r3, [r7, #3]
    47a6:	f1a3 020a 	sub.w	r2, r3, #10
    47aa:	4613      	mov	r3, r2
    47ac:	005b      	lsls	r3, r3, #1
    47ae:	4413      	add	r3, r2
    47b0:	2207      	movs	r2, #7
    47b2:	fa02 f303 	lsl.w	r3, r2, r3
    47b6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    47b8:	693b      	ldr	r3, [r7, #16]
    47ba:	43db      	mvns	r3, r3
    47bc:	697a      	ldr	r2, [r7, #20]
    47be:	4013      	ands	r3, r2
    47c0:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    47c2:	7879      	ldrb	r1, [r7, #1]
    47c4:	78fb      	ldrb	r3, [r7, #3]
    47c6:	f1a3 020a 	sub.w	r2, r3, #10
    47ca:	4613      	mov	r3, r2
    47cc:	005b      	lsls	r3, r3, #1
    47ce:	4413      	add	r3, r2
    47d0:	fa01 f303 	lsl.w	r3, r1, r3
    47d4:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    47d6:	697a      	ldr	r2, [r7, #20]
    47d8:	693b      	ldr	r3, [r7, #16]
    47da:	4313      	orrs	r3, r2
    47dc:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	697a      	ldr	r2, [r7, #20]
    47e2:	60da      	str	r2, [r3, #12]
    47e4:	e01e      	b.n	4824 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	691b      	ldr	r3, [r3, #16]
    47ea:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    47ec:	78fa      	ldrb	r2, [r7, #3]
    47ee:	4613      	mov	r3, r2
    47f0:	005b      	lsls	r3, r3, #1
    47f2:	4413      	add	r3, r2
    47f4:	2207      	movs	r2, #7
    47f6:	fa02 f303 	lsl.w	r3, r2, r3
    47fa:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    47fc:	693b      	ldr	r3, [r7, #16]
    47fe:	43db      	mvns	r3, r3
    4800:	697a      	ldr	r2, [r7, #20]
    4802:	4013      	ands	r3, r2
    4804:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    4806:	7879      	ldrb	r1, [r7, #1]
    4808:	78fa      	ldrb	r2, [r7, #3]
    480a:	4613      	mov	r3, r2
    480c:	005b      	lsls	r3, r3, #1
    480e:	4413      	add	r3, r2
    4810:	fa01 f303 	lsl.w	r3, r1, r3
    4814:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    4816:	697a      	ldr	r2, [r7, #20]
    4818:	693b      	ldr	r3, [r7, #16]
    481a:	4313      	orrs	r3, r2
    481c:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	697a      	ldr	r2, [r7, #20]
    4822:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4828:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	0d1b      	lsrs	r3, r3, #20
    482e:	f003 0303 	and.w	r3, r3, #3
    4832:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	b2db      	uxtb	r3, r3
    4838:	78ba      	ldrb	r2, [r7, #2]
    483a:	1ad3      	subs	r3, r2, r3
    483c:	b2db      	uxtb	r3, r3
    483e:	3302      	adds	r3, #2
    4840:	b2db      	uxtb	r3, r3
    4842:	461a      	mov	r2, r3
    4844:	4613      	mov	r3, r2
    4846:	009b      	lsls	r3, r3, #2
    4848:	4413      	add	r3, r2
    484a:	221f      	movs	r2, #31
    484c:	fa02 f303 	lsl.w	r3, r2, r3
    4850:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    4852:	693b      	ldr	r3, [r7, #16]
    4854:	43db      	mvns	r3, r3
    4856:	697a      	ldr	r2, [r7, #20]
    4858:	4013      	ands	r3, r2
    485a:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    485c:	78fa      	ldrb	r2, [r7, #3]
    485e:	68fb      	ldr	r3, [r7, #12]
    4860:	b2db      	uxtb	r3, r3
    4862:	78b9      	ldrb	r1, [r7, #2]
    4864:	1acb      	subs	r3, r1, r3
    4866:	b2db      	uxtb	r3, r3
    4868:	3302      	adds	r3, #2
    486a:	b2db      	uxtb	r3, r3
    486c:	4619      	mov	r1, r3
    486e:	460b      	mov	r3, r1
    4870:	009b      	lsls	r3, r3, #2
    4872:	440b      	add	r3, r1
    4874:	fa02 f303 	lsl.w	r3, r2, r3
    4878:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    487a:	697a      	ldr	r2, [r7, #20]
    487c:	693b      	ldr	r3, [r7, #16]
    487e:	4313      	orrs	r3, r2
    4880:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	697a      	ldr	r2, [r7, #20]
    4886:	639a      	str	r2, [r3, #56]	; 0x38
}
    4888:	bf00      	nop
    488a:	371c      	adds	r7, #28
    488c:	46bd      	mov	sp, r7
    488e:	bc80      	pop	{r7}
    4890:	4770      	bx	lr

00004892 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    4892:	b480      	push	{r7}
    4894:	b085      	sub	sp, #20
    4896:	af00      	add	r7, sp, #0
    4898:	6078      	str	r0, [r7, #4]
    489a:	460b      	mov	r3, r1
    489c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    489e:	2300      	movs	r3, #0
    48a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    48a2:	2300      	movs	r3, #0
    48a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48aa:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    48b2:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    48b4:	78fb      	ldrb	r3, [r7, #3]
    48b6:	3b01      	subs	r3, #1
    48b8:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    48ba:	68bb      	ldr	r3, [r7, #8]
    48bc:	051b      	lsls	r3, r3, #20
    48be:	68fa      	ldr	r2, [r7, #12]
    48c0:	4313      	orrs	r3, r2
    48c2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	68fa      	ldr	r2, [r7, #12]
    48c8:	639a      	str	r2, [r3, #56]	; 0x38
}
    48ca:	bf00      	nop
    48cc:	3714      	adds	r7, #20
    48ce:	46bd      	mov	sp, r7
    48d0:	bc80      	pop	{r7}
    48d2:	4770      	bx	lr

000048d4 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    48d4:	b480      	push	{r7}
    48d6:	b085      	sub	sp, #20
    48d8:	af00      	add	r7, sp, #0
    48da:	6078      	str	r0, [r7, #4]
    48dc:	460b      	mov	r3, r1
    48de:	70fb      	strb	r3, [r7, #3]
    48e0:	4613      	mov	r3, r2
    48e2:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    48e4:	2300      	movs	r3, #0
    48e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    48ec:	78fa      	ldrb	r2, [r7, #3]
    48ee:	68fb      	ldr	r3, [r7, #12]
    48f0:	4413      	add	r3, r2
    48f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	461a      	mov	r2, r3
    48f8:	883b      	ldrh	r3, [r7, #0]
    48fa:	6013      	str	r3, [r2, #0]
}
    48fc:	bf00      	nop
    48fe:	3714      	adds	r7, #20
    4900:	46bd      	mov	sp, r7
    4902:	bc80      	pop	{r7}
    4904:	4770      	bx	lr

00004906 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    4906:	b480      	push	{r7}
    4908:	b085      	sub	sp, #20
    490a:	af00      	add	r7, sp, #0
    490c:	6078      	str	r0, [r7, #4]
    490e:	460b      	mov	r3, r1
    4910:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    4912:	2300      	movs	r3, #0
    4914:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    491a:	78fa      	ldrb	r2, [r7, #3]
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	4413      	add	r3, r2
    4920:	3328      	adds	r3, #40	; 0x28
    4922:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	b29b      	uxth	r3, r3
}
    492a:	4618      	mov	r0, r3
    492c:	3714      	adds	r7, #20
    492e:	46bd      	mov	sp, r7
    4930:	bc80      	pop	{r7}
    4932:	4770      	bx	lr

00004934 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    4934:	b480      	push	{r7}
    4936:	b085      	sub	sp, #20
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
    493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    493e:	2300      	movs	r3, #0
    4940:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	685b      	ldr	r3, [r3, #4]
    4946:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    494e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4952:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    4954:	68fa      	ldr	r2, [r7, #12]
    4956:	683b      	ldr	r3, [r7, #0]
    4958:	4313      	orrs	r3, r2
    495a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	68fa      	ldr	r2, [r7, #12]
    4960:	605a      	str	r2, [r3, #4]
}
    4962:	bf00      	nop
    4964:	3714      	adds	r7, #20
    4966:	46bd      	mov	sp, r7
    4968:	bc80      	pop	{r7}
    496a:	4770      	bx	lr

0000496c <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    496c:	b480      	push	{r7}
    496e:	b083      	sub	sp, #12
    4970:	af00      	add	r7, sp, #0
    4972:	6078      	str	r0, [r7, #4]
    4974:	460b      	mov	r3, r1
    4976:	807b      	strh	r3, [r7, #2]
    4978:	4613      	mov	r3, r2
    497a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    497c:	887a      	ldrh	r2, [r7, #2]
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    4982:	883a      	ldrh	r2, [r7, #0]
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	629a      	str	r2, [r3, #40]	; 0x28
}
    4988:	bf00      	nop
    498a:	370c      	adds	r7, #12
    498c:	46bd      	mov	sp, r7
    498e:	bc80      	pop	{r7}
    4990:	4770      	bx	lr

00004992 <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    4992:	b480      	push	{r7}
    4994:	b085      	sub	sp, #20
    4996:	af00      	add	r7, sp, #0
    4998:	6078      	str	r0, [r7, #4]
    499a:	460b      	mov	r3, r1
    499c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    499e:	2300      	movs	r3, #0
    49a0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	685b      	ldr	r3, [r3, #4]
    49a6:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	f023 031f 	bic.w	r3, r3, #31
    49ae:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    49b0:	78fb      	ldrb	r3, [r7, #3]
    49b2:	68fa      	ldr	r2, [r7, #12]
    49b4:	4313      	orrs	r3, r2
    49b6:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	68fa      	ldr	r2, [r7, #12]
    49bc:	605a      	str	r2, [r3, #4]
}
    49be:	bf00      	nop
    49c0:	3714      	adds	r7, #20
    49c2:	46bd      	mov	sp, r7
    49c4:	bc80      	pop	{r7}
    49c6:	4770      	bx	lr

000049c8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    49c8:	b480      	push	{r7}
    49ca:	b083      	sub	sp, #12
    49cc:	af00      	add	r7, sp, #0
    49ce:	4603      	mov	r3, r0
    49d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    49d2:	79fb      	ldrb	r3, [r7, #7]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d006      	beq.n	49e6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    49d8:	4b08      	ldr	r3, [pc, #32]	; (49fc <ADC_TempSensorVrefintCmd+0x34>)
    49da:	689b      	ldr	r3, [r3, #8]
    49dc:	4a07      	ldr	r2, [pc, #28]	; (49fc <ADC_TempSensorVrefintCmd+0x34>)
    49de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    49e2:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
    49e4:	e005      	b.n	49f2 <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    49e6:	4b05      	ldr	r3, [pc, #20]	; (49fc <ADC_TempSensorVrefintCmd+0x34>)
    49e8:	689b      	ldr	r3, [r3, #8]
    49ea:	4a04      	ldr	r2, [pc, #16]	; (49fc <ADC_TempSensorVrefintCmd+0x34>)
    49ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    49f0:	6093      	str	r3, [r2, #8]
}
    49f2:	bf00      	nop
    49f4:	370c      	adds	r7, #12
    49f6:	46bd      	mov	sp, r7
    49f8:	bc80      	pop	{r7}
    49fa:	4770      	bx	lr
    49fc:	40012400 	.word	0x40012400

00004a00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    4a00:	b480      	push	{r7}
    4a02:	b085      	sub	sp, #20
    4a04:	af00      	add	r7, sp, #0
    4a06:	6078      	str	r0, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    4a0c:	2300      	movs	r3, #0
    4a0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	681a      	ldr	r2, [r3, #0]
    4a14:	78fb      	ldrb	r3, [r7, #3]
    4a16:	4013      	ands	r3, r2
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d002      	beq.n	4a22 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    4a1c:	2301      	movs	r3, #1
    4a1e:	73fb      	strb	r3, [r7, #15]
    4a20:	e001      	b.n	4a26 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    4a22:	2300      	movs	r3, #0
    4a24:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    4a26:	7bfb      	ldrb	r3, [r7, #15]
}
    4a28:	4618      	mov	r0, r3
    4a2a:	3714      	adds	r7, #20
    4a2c:	46bd      	mov	sp, r7
    4a2e:	bc80      	pop	{r7}
    4a30:	4770      	bx	lr

00004a32 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    4a32:	b480      	push	{r7}
    4a34:	b083      	sub	sp, #12
    4a36:	af00      	add	r7, sp, #0
    4a38:	6078      	str	r0, [r7, #4]
    4a3a:	460b      	mov	r3, r1
    4a3c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    4a3e:	78fb      	ldrb	r3, [r7, #3]
    4a40:	43da      	mvns	r2, r3
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	601a      	str	r2, [r3, #0]
}
    4a46:	bf00      	nop
    4a48:	370c      	adds	r7, #12
    4a4a:	46bd      	mov	sp, r7
    4a4c:	bc80      	pop	{r7}
    4a4e:	4770      	bx	lr

00004a50 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    4a50:	b480      	push	{r7}
    4a52:	b087      	sub	sp, #28
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
    4a58:	460b      	mov	r3, r1
    4a5a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    4a5c:	2300      	movs	r3, #0
    4a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    4a60:	2300      	movs	r3, #0
    4a62:	613b      	str	r3, [r7, #16]
    4a64:	2300      	movs	r3, #0
    4a66:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    4a68:	887b      	ldrh	r3, [r7, #2]
    4a6a:	0a1b      	lsrs	r3, r3, #8
    4a6c:	b29b      	uxth	r3, r3
    4a6e:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	685b      	ldr	r3, [r3, #4]
    4a74:	887a      	ldrh	r2, [r7, #2]
    4a76:	b2d2      	uxtb	r2, r2
    4a78:	4013      	ands	r3, r2
    4a7a:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	681a      	ldr	r2, [r3, #0]
    4a80:	693b      	ldr	r3, [r7, #16]
    4a82:	4013      	ands	r3, r2
    4a84:	2b00      	cmp	r3, #0
    4a86:	d005      	beq.n	4a94 <ADC_GetITStatus+0x44>
    4a88:	68fb      	ldr	r3, [r7, #12]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d002      	beq.n	4a94 <ADC_GetITStatus+0x44>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    4a8e:	2301      	movs	r3, #1
    4a90:	75fb      	strb	r3, [r7, #23]
    4a92:	e001      	b.n	4a98 <ADC_GetITStatus+0x48>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    4a94:	2300      	movs	r3, #0
    4a96:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    4a98:	7dfb      	ldrb	r3, [r7, #23]
}
    4a9a:	4618      	mov	r0, r3
    4a9c:	371c      	adds	r7, #28
    4a9e:	46bd      	mov	sp, r7
    4aa0:	bc80      	pop	{r7}
    4aa2:	4770      	bx	lr

00004aa4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    4aa4:	b480      	push	{r7}
    4aa6:	b085      	sub	sp, #20
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	6078      	str	r0, [r7, #4]
    4aac:	460b      	mov	r3, r1
    4aae:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    4ab0:	2300      	movs	r3, #0
    4ab2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    4ab4:	887b      	ldrh	r3, [r7, #2]
    4ab6:	0a1b      	lsrs	r3, r3, #8
    4ab8:	b29b      	uxth	r3, r3
    4aba:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    4abc:	7bfb      	ldrb	r3, [r7, #15]
    4abe:	43da      	mvns	r2, r3
    4ac0:	687b      	ldr	r3, [r7, #4]
    4ac2:	601a      	str	r2, [r3, #0]
}
    4ac4:	bf00      	nop
    4ac6:	3714      	adds	r7, #20
    4ac8:	46bd      	mov	sp, r7
    4aca:	bc80      	pop	{r7}
    4acc:	4770      	bx	lr
    4ace:	bf00      	nop

00004ad0 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    4ad0:	b580      	push	{r7, lr}
    4ad2:	b082      	sub	sp, #8
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	4a78      	ldr	r2, [pc, #480]	; (4cbc <TIM_DeInit+0x1ec>)
    4adc:	4293      	cmp	r3, r2
    4ade:	d10a      	bne.n	4af6 <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    4ae0:	2101      	movs	r1, #1
    4ae2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4ae6:	f7fe f9af 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    4aea:	2100      	movs	r1, #0
    4aec:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4af0:	f7fe f9aa 	bl	2e48 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
    4af4:	e0de      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM2)
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4afc:	d108      	bne.n	4b10 <TIM_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    4afe:	2101      	movs	r1, #1
    4b00:	2001      	movs	r0, #1
    4b02:	f7fe f9bf 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    4b06:	2100      	movs	r1, #0
    4b08:	2001      	movs	r0, #1
    4b0a:	f7fe f9bb 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b0e:	e0d1      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM3)
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	4a6b      	ldr	r2, [pc, #428]	; (4cc0 <TIM_DeInit+0x1f0>)
    4b14:	4293      	cmp	r3, r2
    4b16:	d108      	bne.n	4b2a <TIM_DeInit+0x5a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    4b18:	2101      	movs	r1, #1
    4b1a:	2002      	movs	r0, #2
    4b1c:	f7fe f9b2 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    4b20:	2100      	movs	r1, #0
    4b22:	2002      	movs	r0, #2
    4b24:	f7fe f9ae 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b28:	e0c4      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM4)
    4b2a:	687b      	ldr	r3, [r7, #4]
    4b2c:	4a65      	ldr	r2, [pc, #404]	; (4cc4 <TIM_DeInit+0x1f4>)
    4b2e:	4293      	cmp	r3, r2
    4b30:	d108      	bne.n	4b44 <TIM_DeInit+0x74>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    4b32:	2101      	movs	r1, #1
    4b34:	2004      	movs	r0, #4
    4b36:	f7fe f9a5 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    4b3a:	2100      	movs	r1, #0
    4b3c:	2004      	movs	r0, #4
    4b3e:	f7fe f9a1 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b42:	e0b7      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM5)
    4b44:	687b      	ldr	r3, [r7, #4]
    4b46:	4a60      	ldr	r2, [pc, #384]	; (4cc8 <TIM_DeInit+0x1f8>)
    4b48:	4293      	cmp	r3, r2
    4b4a:	d108      	bne.n	4b5e <TIM_DeInit+0x8e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    4b4c:	2101      	movs	r1, #1
    4b4e:	2008      	movs	r0, #8
    4b50:	f7fe f998 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    4b54:	2100      	movs	r1, #0
    4b56:	2008      	movs	r0, #8
    4b58:	f7fe f994 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b5c:	e0aa      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM6)
    4b5e:	687b      	ldr	r3, [r7, #4]
    4b60:	4a5a      	ldr	r2, [pc, #360]	; (4ccc <TIM_DeInit+0x1fc>)
    4b62:	4293      	cmp	r3, r2
    4b64:	d108      	bne.n	4b78 <TIM_DeInit+0xa8>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    4b66:	2101      	movs	r1, #1
    4b68:	2010      	movs	r0, #16
    4b6a:	f7fe f98b 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    4b6e:	2100      	movs	r1, #0
    4b70:	2010      	movs	r0, #16
    4b72:	f7fe f987 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b76:	e09d      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM7)
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	4a55      	ldr	r2, [pc, #340]	; (4cd0 <TIM_DeInit+0x200>)
    4b7c:	4293      	cmp	r3, r2
    4b7e:	d108      	bne.n	4b92 <TIM_DeInit+0xc2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    4b80:	2101      	movs	r1, #1
    4b82:	2020      	movs	r0, #32
    4b84:	f7fe f97e 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    4b88:	2100      	movs	r1, #0
    4b8a:	2020      	movs	r0, #32
    4b8c:	f7fe f97a 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4b90:	e090      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM8)
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	4a4f      	ldr	r2, [pc, #316]	; (4cd4 <TIM_DeInit+0x204>)
    4b96:	4293      	cmp	r3, r2
    4b98:	d10a      	bne.n	4bb0 <TIM_DeInit+0xe0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    4b9a:	2101      	movs	r1, #1
    4b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4ba0:	f7fe f952 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    4ba4:	2100      	movs	r1, #0
    4ba6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4baa:	f7fe f94d 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4bae:	e081      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM9)
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	4a49      	ldr	r2, [pc, #292]	; (4cd8 <TIM_DeInit+0x208>)
    4bb4:	4293      	cmp	r3, r2
    4bb6:	d10a      	bne.n	4bce <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    4bb8:	2101      	movs	r1, #1
    4bba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4bbe:	f7fe f943 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    4bc2:	2100      	movs	r1, #0
    4bc4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4bc8:	f7fe f93e 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4bcc:	e072      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM10)
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	4a42      	ldr	r2, [pc, #264]	; (4cdc <TIM_DeInit+0x20c>)
    4bd2:	4293      	cmp	r3, r2
    4bd4:	d10a      	bne.n	4bec <TIM_DeInit+0x11c>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    4bd6:	2101      	movs	r1, #1
    4bd8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4bdc:	f7fe f934 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    4be0:	2100      	movs	r1, #0
    4be2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4be6:	f7fe f92f 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4bea:	e063      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM11) 
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	4a3c      	ldr	r2, [pc, #240]	; (4ce0 <TIM_DeInit+0x210>)
    4bf0:	4293      	cmp	r3, r2
    4bf2:	d10a      	bne.n	4c0a <TIM_DeInit+0x13a>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    4bf4:	2101      	movs	r1, #1
    4bf6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4bfa:	f7fe f925 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    4bfe:	2100      	movs	r1, #0
    4c00:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4c04:	f7fe f920 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4c08:	e054      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM12)
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	4a35      	ldr	r2, [pc, #212]	; (4ce4 <TIM_DeInit+0x214>)
    4c0e:	4293      	cmp	r3, r2
    4c10:	d108      	bne.n	4c24 <TIM_DeInit+0x154>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    4c12:	2101      	movs	r1, #1
    4c14:	2040      	movs	r0, #64	; 0x40
    4c16:	f7fe f935 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    4c1a:	2100      	movs	r1, #0
    4c1c:	2040      	movs	r0, #64	; 0x40
    4c1e:	f7fe f931 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4c22:	e047      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM13) 
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	4a30      	ldr	r2, [pc, #192]	; (4ce8 <TIM_DeInit+0x218>)
    4c28:	4293      	cmp	r3, r2
    4c2a:	d108      	bne.n	4c3e <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    4c2c:	2101      	movs	r1, #1
    4c2e:	2080      	movs	r0, #128	; 0x80
    4c30:	f7fe f928 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    4c34:	2100      	movs	r1, #0
    4c36:	2080      	movs	r0, #128	; 0x80
    4c38:	f7fe f924 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4c3c:	e03a      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM14) 
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	4a2a      	ldr	r2, [pc, #168]	; (4cec <TIM_DeInit+0x21c>)
    4c42:	4293      	cmp	r3, r2
    4c44:	d10a      	bne.n	4c5c <TIM_DeInit+0x18c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    4c46:	2101      	movs	r1, #1
    4c48:	f44f 7080 	mov.w	r0, #256	; 0x100
    4c4c:	f7fe f91a 	bl	2e84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    4c50:	2100      	movs	r1, #0
    4c52:	f44f 7080 	mov.w	r0, #256	; 0x100
    4c56:	f7fe f915 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    4c5a:	e02b      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM15)
    4c5c:	687b      	ldr	r3, [r7, #4]
    4c5e:	4a24      	ldr	r2, [pc, #144]	; (4cf0 <TIM_DeInit+0x220>)
    4c60:	4293      	cmp	r3, r2
    4c62:	d10a      	bne.n	4c7a <TIM_DeInit+0x1aa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    4c64:	2101      	movs	r1, #1
    4c66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4c6a:	f7fe f8ed 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    4c6e:	2100      	movs	r1, #0
    4c70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4c74:	f7fe f8e8 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4c78:	e01c      	b.n	4cb4 <TIM_DeInit+0x1e4>
  else if (TIMx == TIM16)
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	4a1d      	ldr	r2, [pc, #116]	; (4cf4 <TIM_DeInit+0x224>)
    4c7e:	4293      	cmp	r3, r2
    4c80:	d10a      	bne.n	4c98 <TIM_DeInit+0x1c8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    4c82:	2101      	movs	r1, #1
    4c84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4c88:	f7fe f8de 	bl	2e48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    4c8c:	2100      	movs	r1, #0
    4c8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4c92:	f7fe f8d9 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4c96:	e00d      	b.n	4cb4 <TIM_DeInit+0x1e4>
    if (TIMx == TIM17)
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	4a17      	ldr	r2, [pc, #92]	; (4cf8 <TIM_DeInit+0x228>)
    4c9c:	4293      	cmp	r3, r2
    4c9e:	d109      	bne.n	4cb4 <TIM_DeInit+0x1e4>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    4ca0:	2101      	movs	r1, #1
    4ca2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    4ca6:	f7fe f8cf 	bl	2e48 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    4caa:	2100      	movs	r1, #0
    4cac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    4cb0:	f7fe f8ca 	bl	2e48 <RCC_APB2PeriphResetCmd>
}
    4cb4:	bf00      	nop
    4cb6:	3708      	adds	r7, #8
    4cb8:	46bd      	mov	sp, r7
    4cba:	bd80      	pop	{r7, pc}
    4cbc:	40012c00 	.word	0x40012c00
    4cc0:	40000400 	.word	0x40000400
    4cc4:	40000800 	.word	0x40000800
    4cc8:	40000c00 	.word	0x40000c00
    4ccc:	40001000 	.word	0x40001000
    4cd0:	40001400 	.word	0x40001400
    4cd4:	40013400 	.word	0x40013400
    4cd8:	40014c00 	.word	0x40014c00
    4cdc:	40015000 	.word	0x40015000
    4ce0:	40015400 	.word	0x40015400
    4ce4:	40001800 	.word	0x40001800
    4ce8:	40001c00 	.word	0x40001c00
    4cec:	40002000 	.word	0x40002000
    4cf0:	40014000 	.word	0x40014000
    4cf4:	40014400 	.word	0x40014400
    4cf8:	40014800 	.word	0x40014800

00004cfc <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    4cfc:	b480      	push	{r7}
    4cfe:	b085      	sub	sp, #20
    4d00:	af00      	add	r7, sp, #0
    4d02:	6078      	str	r0, [r7, #4]
    4d04:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    4d06:	2300      	movs	r3, #0
    4d08:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	881b      	ldrh	r3, [r3, #0]
    4d0e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	4a2e      	ldr	r2, [pc, #184]	; (4dcc <TIM_TimeBaseInit+0xd0>)
    4d14:	4293      	cmp	r3, r2
    4d16:	d013      	beq.n	4d40 <TIM_TimeBaseInit+0x44>
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	4a2d      	ldr	r2, [pc, #180]	; (4dd0 <TIM_TimeBaseInit+0xd4>)
    4d1c:	4293      	cmp	r3, r2
    4d1e:	d00f      	beq.n	4d40 <TIM_TimeBaseInit+0x44>
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    4d26:	d00b      	beq.n	4d40 <TIM_TimeBaseInit+0x44>
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	4a2a      	ldr	r2, [pc, #168]	; (4dd4 <TIM_TimeBaseInit+0xd8>)
    4d2c:	4293      	cmp	r3, r2
    4d2e:	d007      	beq.n	4d40 <TIM_TimeBaseInit+0x44>
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	4a29      	ldr	r2, [pc, #164]	; (4dd8 <TIM_TimeBaseInit+0xdc>)
    4d34:	4293      	cmp	r3, r2
    4d36:	d003      	beq.n	4d40 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	4a28      	ldr	r2, [pc, #160]	; (4ddc <TIM_TimeBaseInit+0xe0>)
    4d3c:	4293      	cmp	r3, r2
    4d3e:	d108      	bne.n	4d52 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4d40:	89fb      	ldrh	r3, [r7, #14]
    4d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4d46:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    4d48:	683b      	ldr	r3, [r7, #0]
    4d4a:	885a      	ldrh	r2, [r3, #2]
    4d4c:	89fb      	ldrh	r3, [r7, #14]
    4d4e:	4313      	orrs	r3, r2
    4d50:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	4a22      	ldr	r2, [pc, #136]	; (4de0 <TIM_TimeBaseInit+0xe4>)
    4d56:	4293      	cmp	r3, r2
    4d58:	d00c      	beq.n	4d74 <TIM_TimeBaseInit+0x78>
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	4a21      	ldr	r2, [pc, #132]	; (4de4 <TIM_TimeBaseInit+0xe8>)
    4d5e:	4293      	cmp	r3, r2
    4d60:	d008      	beq.n	4d74 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    4d62:	89fb      	ldrh	r3, [r7, #14]
    4d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4d68:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    4d6a:	683b      	ldr	r3, [r7, #0]
    4d6c:	88da      	ldrh	r2, [r3, #6]
    4d6e:	89fb      	ldrh	r3, [r7, #14]
    4d70:	4313      	orrs	r3, r2
    4d72:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    4d74:	687b      	ldr	r3, [r7, #4]
    4d76:	89fa      	ldrh	r2, [r7, #14]
    4d78:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    4d7a:	683b      	ldr	r3, [r7, #0]
    4d7c:	889a      	ldrh	r2, [r3, #4]
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    4d82:	683b      	ldr	r3, [r7, #0]
    4d84:	881a      	ldrh	r2, [r3, #0]
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	4a0f      	ldr	r2, [pc, #60]	; (4dcc <TIM_TimeBaseInit+0xd0>)
    4d8e:	4293      	cmp	r3, r2
    4d90:	d00f      	beq.n	4db2 <TIM_TimeBaseInit+0xb6>
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	4a0e      	ldr	r2, [pc, #56]	; (4dd0 <TIM_TimeBaseInit+0xd4>)
    4d96:	4293      	cmp	r3, r2
    4d98:	d00b      	beq.n	4db2 <TIM_TimeBaseInit+0xb6>
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	4a12      	ldr	r2, [pc, #72]	; (4de8 <TIM_TimeBaseInit+0xec>)
    4d9e:	4293      	cmp	r3, r2
    4da0:	d007      	beq.n	4db2 <TIM_TimeBaseInit+0xb6>
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	4a11      	ldr	r2, [pc, #68]	; (4dec <TIM_TimeBaseInit+0xf0>)
    4da6:	4293      	cmp	r3, r2
    4da8:	d003      	beq.n	4db2 <TIM_TimeBaseInit+0xb6>
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	4a10      	ldr	r2, [pc, #64]	; (4df0 <TIM_TimeBaseInit+0xf4>)
    4dae:	4293      	cmp	r3, r2
    4db0:	d104      	bne.n	4dbc <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    4db2:	683b      	ldr	r3, [r7, #0]
    4db4:	7a1b      	ldrb	r3, [r3, #8]
    4db6:	b29a      	uxth	r2, r3
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	2201      	movs	r2, #1
    4dc0:	829a      	strh	r2, [r3, #20]
}
    4dc2:	bf00      	nop
    4dc4:	3714      	adds	r7, #20
    4dc6:	46bd      	mov	sp, r7
    4dc8:	bc80      	pop	{r7}
    4dca:	4770      	bx	lr
    4dcc:	40012c00 	.word	0x40012c00
    4dd0:	40013400 	.word	0x40013400
    4dd4:	40000400 	.word	0x40000400
    4dd8:	40000800 	.word	0x40000800
    4ddc:	40000c00 	.word	0x40000c00
    4de0:	40001000 	.word	0x40001000
    4de4:	40001400 	.word	0x40001400
    4de8:	40014000 	.word	0x40014000
    4dec:	40014400 	.word	0x40014400
    4df0:	40014800 	.word	0x40014800

00004df4 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4df4:	b480      	push	{r7}
    4df6:	b085      	sub	sp, #20
    4df8:	af00      	add	r7, sp, #0
    4dfa:	6078      	str	r0, [r7, #4]
    4dfc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    4dfe:	2300      	movs	r3, #0
    4e00:	817b      	strh	r3, [r7, #10]
    4e02:	2300      	movs	r3, #0
    4e04:	81fb      	strh	r3, [r7, #14]
    4e06:	2300      	movs	r3, #0
    4e08:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	8c1b      	ldrh	r3, [r3, #32]
    4e0e:	b29b      	uxth	r3, r3
    4e10:	f023 0301 	bic.w	r3, r3, #1
    4e14:	b29a      	uxth	r2, r3
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	8c1b      	ldrh	r3, [r3, #32]
    4e1e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	889b      	ldrh	r3, [r3, #4]
    4e24:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	8b1b      	ldrh	r3, [r3, #24]
    4e2a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    4e2c:	897b      	ldrh	r3, [r7, #10]
    4e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4e32:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    4e34:	897b      	ldrh	r3, [r7, #10]
    4e36:	f023 0303 	bic.w	r3, r3, #3
    4e3a:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    4e3c:	683b      	ldr	r3, [r7, #0]
    4e3e:	881a      	ldrh	r2, [r3, #0]
    4e40:	897b      	ldrh	r3, [r7, #10]
    4e42:	4313      	orrs	r3, r2
    4e44:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    4e46:	89fb      	ldrh	r3, [r7, #14]
    4e48:	f023 0302 	bic.w	r3, r3, #2
    4e4c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    4e4e:	683b      	ldr	r3, [r7, #0]
    4e50:	891a      	ldrh	r2, [r3, #8]
    4e52:	89fb      	ldrh	r3, [r7, #14]
    4e54:	4313      	orrs	r3, r2
    4e56:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    4e58:	683b      	ldr	r3, [r7, #0]
    4e5a:	885a      	ldrh	r2, [r3, #2]
    4e5c:	89fb      	ldrh	r3, [r7, #14]
    4e5e:	4313      	orrs	r3, r2
    4e60:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    4e62:	687b      	ldr	r3, [r7, #4]
    4e64:	4a24      	ldr	r2, [pc, #144]	; (4ef8 <TIM_OC1Init+0x104>)
    4e66:	4293      	cmp	r3, r2
    4e68:	d00f      	beq.n	4e8a <TIM_OC1Init+0x96>
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	4a23      	ldr	r2, [pc, #140]	; (4efc <TIM_OC1Init+0x108>)
    4e6e:	4293      	cmp	r3, r2
    4e70:	d00b      	beq.n	4e8a <TIM_OC1Init+0x96>
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	4a22      	ldr	r2, [pc, #136]	; (4f00 <TIM_OC1Init+0x10c>)
    4e76:	4293      	cmp	r3, r2
    4e78:	d007      	beq.n	4e8a <TIM_OC1Init+0x96>
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	4a21      	ldr	r2, [pc, #132]	; (4f04 <TIM_OC1Init+0x110>)
    4e7e:	4293      	cmp	r3, r2
    4e80:	d003      	beq.n	4e8a <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	4a20      	ldr	r2, [pc, #128]	; (4f08 <TIM_OC1Init+0x114>)
    4e86:	4293      	cmp	r3, r2
    4e88:	d123      	bne.n	4ed2 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    4e8a:	89fb      	ldrh	r3, [r7, #14]
    4e8c:	f023 0308 	bic.w	r3, r3, #8
    4e90:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    4e92:	683b      	ldr	r3, [r7, #0]
    4e94:	895a      	ldrh	r2, [r3, #10]
    4e96:	89fb      	ldrh	r3, [r7, #14]
    4e98:	4313      	orrs	r3, r2
    4e9a:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    4e9c:	89fb      	ldrh	r3, [r7, #14]
    4e9e:	f023 0304 	bic.w	r3, r3, #4
    4ea2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    4ea4:	683b      	ldr	r3, [r7, #0]
    4ea6:	889a      	ldrh	r2, [r3, #4]
    4ea8:	89fb      	ldrh	r3, [r7, #14]
    4eaa:	4313      	orrs	r3, r2
    4eac:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    4eae:	89bb      	ldrh	r3, [r7, #12]
    4eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4eb4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    4eb6:	89bb      	ldrh	r3, [r7, #12]
    4eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4ebc:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    4ebe:	683b      	ldr	r3, [r7, #0]
    4ec0:	899a      	ldrh	r2, [r3, #12]
    4ec2:	89bb      	ldrh	r3, [r7, #12]
    4ec4:	4313      	orrs	r3, r2
    4ec6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    4ec8:	683b      	ldr	r3, [r7, #0]
    4eca:	89da      	ldrh	r2, [r3, #14]
    4ecc:	89bb      	ldrh	r3, [r7, #12]
    4ece:	4313      	orrs	r3, r2
    4ed0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	89ba      	ldrh	r2, [r7, #12]
    4ed6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	897a      	ldrh	r2, [r7, #10]
    4edc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    4ede:	683b      	ldr	r3, [r7, #0]
    4ee0:	88da      	ldrh	r2, [r3, #6]
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	89fa      	ldrh	r2, [r7, #14]
    4eea:	841a      	strh	r2, [r3, #32]
}
    4eec:	bf00      	nop
    4eee:	3714      	adds	r7, #20
    4ef0:	46bd      	mov	sp, r7
    4ef2:	bc80      	pop	{r7}
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	40012c00 	.word	0x40012c00
    4efc:	40013400 	.word	0x40013400
    4f00:	40014000 	.word	0x40014000
    4f04:	40014400 	.word	0x40014400
    4f08:	40014800 	.word	0x40014800

00004f0c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4f0c:	b480      	push	{r7}
    4f0e:	b085      	sub	sp, #20
    4f10:	af00      	add	r7, sp, #0
    4f12:	6078      	str	r0, [r7, #4]
    4f14:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    4f16:	2300      	movs	r3, #0
    4f18:	817b      	strh	r3, [r7, #10]
    4f1a:	2300      	movs	r3, #0
    4f1c:	81fb      	strh	r3, [r7, #14]
    4f1e:	2300      	movs	r3, #0
    4f20:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	8c1b      	ldrh	r3, [r3, #32]
    4f26:	b29b      	uxth	r3, r3
    4f28:	f023 0310 	bic.w	r3, r3, #16
    4f2c:	b29a      	uxth	r2, r3
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	8c1b      	ldrh	r3, [r3, #32]
    4f36:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	889b      	ldrh	r3, [r3, #4]
    4f3c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    4f3e:	687b      	ldr	r3, [r7, #4]
    4f40:	8b1b      	ldrh	r3, [r3, #24]
    4f42:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    4f44:	897b      	ldrh	r3, [r7, #10]
    4f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4f4a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    4f4c:	897b      	ldrh	r3, [r7, #10]
    4f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4f52:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    4f54:	683b      	ldr	r3, [r7, #0]
    4f56:	881b      	ldrh	r3, [r3, #0]
    4f58:	021b      	lsls	r3, r3, #8
    4f5a:	b29a      	uxth	r2, r3
    4f5c:	897b      	ldrh	r3, [r7, #10]
    4f5e:	4313      	orrs	r3, r2
    4f60:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    4f62:	89fb      	ldrh	r3, [r7, #14]
    4f64:	f023 0320 	bic.w	r3, r3, #32
    4f68:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    4f6a:	683b      	ldr	r3, [r7, #0]
    4f6c:	891b      	ldrh	r3, [r3, #8]
    4f6e:	011b      	lsls	r3, r3, #4
    4f70:	b29a      	uxth	r2, r3
    4f72:	89fb      	ldrh	r3, [r7, #14]
    4f74:	4313      	orrs	r3, r2
    4f76:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	885b      	ldrh	r3, [r3, #2]
    4f7c:	011b      	lsls	r3, r3, #4
    4f7e:	b29a      	uxth	r2, r3
    4f80:	89fb      	ldrh	r3, [r7, #14]
    4f82:	4313      	orrs	r3, r2
    4f84:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	4a22      	ldr	r2, [pc, #136]	; (5014 <TIM_OC2Init+0x108>)
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d003      	beq.n	4f96 <TIM_OC2Init+0x8a>
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	4a21      	ldr	r2, [pc, #132]	; (5018 <TIM_OC2Init+0x10c>)
    4f92:	4293      	cmp	r3, r2
    4f94:	d12b      	bne.n	4fee <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    4f96:	89fb      	ldrh	r3, [r7, #14]
    4f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4f9c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    4f9e:	683b      	ldr	r3, [r7, #0]
    4fa0:	895b      	ldrh	r3, [r3, #10]
    4fa2:	011b      	lsls	r3, r3, #4
    4fa4:	b29a      	uxth	r2, r3
    4fa6:	89fb      	ldrh	r3, [r7, #14]
    4fa8:	4313      	orrs	r3, r2
    4faa:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    4fac:	89fb      	ldrh	r3, [r7, #14]
    4fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4fb2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    4fb4:	683b      	ldr	r3, [r7, #0]
    4fb6:	889b      	ldrh	r3, [r3, #4]
    4fb8:	011b      	lsls	r3, r3, #4
    4fba:	b29a      	uxth	r2, r3
    4fbc:	89fb      	ldrh	r3, [r7, #14]
    4fbe:	4313      	orrs	r3, r2
    4fc0:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    4fc2:	89bb      	ldrh	r3, [r7, #12]
    4fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4fc8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    4fca:	89bb      	ldrh	r3, [r7, #12]
    4fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4fd0:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    4fd2:	683b      	ldr	r3, [r7, #0]
    4fd4:	899b      	ldrh	r3, [r3, #12]
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	b29a      	uxth	r2, r3
    4fda:	89bb      	ldrh	r3, [r7, #12]
    4fdc:	4313      	orrs	r3, r2
    4fde:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    4fe0:	683b      	ldr	r3, [r7, #0]
    4fe2:	89db      	ldrh	r3, [r3, #14]
    4fe4:	009b      	lsls	r3, r3, #2
    4fe6:	b29a      	uxth	r2, r3
    4fe8:	89bb      	ldrh	r3, [r7, #12]
    4fea:	4313      	orrs	r3, r2
    4fec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4fee:	687b      	ldr	r3, [r7, #4]
    4ff0:	89ba      	ldrh	r2, [r7, #12]
    4ff2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	897a      	ldrh	r2, [r7, #10]
    4ff8:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    4ffa:	683b      	ldr	r3, [r7, #0]
    4ffc:	88da      	ldrh	r2, [r3, #6]
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	89fa      	ldrh	r2, [r7, #14]
    5006:	841a      	strh	r2, [r3, #32]
}
    5008:	bf00      	nop
    500a:	3714      	adds	r7, #20
    500c:	46bd      	mov	sp, r7
    500e:	bc80      	pop	{r7}
    5010:	4770      	bx	lr
    5012:	bf00      	nop
    5014:	40012c00 	.word	0x40012c00
    5018:	40013400 	.word	0x40013400

0000501c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    501c:	b480      	push	{r7}
    501e:	b085      	sub	sp, #20
    5020:	af00      	add	r7, sp, #0
    5022:	6078      	str	r0, [r7, #4]
    5024:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    5026:	2300      	movs	r3, #0
    5028:	817b      	strh	r3, [r7, #10]
    502a:	2300      	movs	r3, #0
    502c:	81fb      	strh	r3, [r7, #14]
    502e:	2300      	movs	r3, #0
    5030:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	8c1b      	ldrh	r3, [r3, #32]
    5036:	b29b      	uxth	r3, r3
    5038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    503c:	b29a      	uxth	r2, r3
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	8c1b      	ldrh	r3, [r3, #32]
    5046:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	889b      	ldrh	r3, [r3, #4]
    504c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	8b9b      	ldrh	r3, [r3, #28]
    5052:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    5054:	897b      	ldrh	r3, [r7, #10]
    5056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    505a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    505c:	897b      	ldrh	r3, [r7, #10]
    505e:	f023 0303 	bic.w	r3, r3, #3
    5062:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    5064:	683b      	ldr	r3, [r7, #0]
    5066:	881a      	ldrh	r2, [r3, #0]
    5068:	897b      	ldrh	r3, [r7, #10]
    506a:	4313      	orrs	r3, r2
    506c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    506e:	89fb      	ldrh	r3, [r7, #14]
    5070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5074:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    5076:	683b      	ldr	r3, [r7, #0]
    5078:	891b      	ldrh	r3, [r3, #8]
    507a:	021b      	lsls	r3, r3, #8
    507c:	b29a      	uxth	r2, r3
    507e:	89fb      	ldrh	r3, [r7, #14]
    5080:	4313      	orrs	r3, r2
    5082:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    5084:	683b      	ldr	r3, [r7, #0]
    5086:	885b      	ldrh	r3, [r3, #2]
    5088:	021b      	lsls	r3, r3, #8
    508a:	b29a      	uxth	r2, r3
    508c:	89fb      	ldrh	r3, [r7, #14]
    508e:	4313      	orrs	r3, r2
    5090:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	4a22      	ldr	r2, [pc, #136]	; (5120 <TIM_OC3Init+0x104>)
    5096:	4293      	cmp	r3, r2
    5098:	d003      	beq.n	50a2 <TIM_OC3Init+0x86>
    509a:	687b      	ldr	r3, [r7, #4]
    509c:	4a21      	ldr	r2, [pc, #132]	; (5124 <TIM_OC3Init+0x108>)
    509e:	4293      	cmp	r3, r2
    50a0:	d12b      	bne.n	50fa <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    50a2:	89fb      	ldrh	r3, [r7, #14]
    50a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    50a8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    50aa:	683b      	ldr	r3, [r7, #0]
    50ac:	895b      	ldrh	r3, [r3, #10]
    50ae:	021b      	lsls	r3, r3, #8
    50b0:	b29a      	uxth	r2, r3
    50b2:	89fb      	ldrh	r3, [r7, #14]
    50b4:	4313      	orrs	r3, r2
    50b6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    50b8:	89fb      	ldrh	r3, [r7, #14]
    50ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    50be:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    50c0:	683b      	ldr	r3, [r7, #0]
    50c2:	889b      	ldrh	r3, [r3, #4]
    50c4:	021b      	lsls	r3, r3, #8
    50c6:	b29a      	uxth	r2, r3
    50c8:	89fb      	ldrh	r3, [r7, #14]
    50ca:	4313      	orrs	r3, r2
    50cc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    50ce:	89bb      	ldrh	r3, [r7, #12]
    50d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    50d4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    50d6:	89bb      	ldrh	r3, [r7, #12]
    50d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    50dc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    50de:	683b      	ldr	r3, [r7, #0]
    50e0:	899b      	ldrh	r3, [r3, #12]
    50e2:	011b      	lsls	r3, r3, #4
    50e4:	b29a      	uxth	r2, r3
    50e6:	89bb      	ldrh	r3, [r7, #12]
    50e8:	4313      	orrs	r3, r2
    50ea:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    50ec:	683b      	ldr	r3, [r7, #0]
    50ee:	89db      	ldrh	r3, [r3, #14]
    50f0:	011b      	lsls	r3, r3, #4
    50f2:	b29a      	uxth	r2, r3
    50f4:	89bb      	ldrh	r3, [r7, #12]
    50f6:	4313      	orrs	r3, r2
    50f8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	89ba      	ldrh	r2, [r7, #12]
    50fe:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	897a      	ldrh	r2, [r7, #10]
    5104:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    5106:	683b      	ldr	r3, [r7, #0]
    5108:	88da      	ldrh	r2, [r3, #6]
    510a:	687b      	ldr	r3, [r7, #4]
    510c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    510e:	687b      	ldr	r3, [r7, #4]
    5110:	89fa      	ldrh	r2, [r7, #14]
    5112:	841a      	strh	r2, [r3, #32]
}
    5114:	bf00      	nop
    5116:	3714      	adds	r7, #20
    5118:	46bd      	mov	sp, r7
    511a:	bc80      	pop	{r7}
    511c:	4770      	bx	lr
    511e:	bf00      	nop
    5120:	40012c00 	.word	0x40012c00
    5124:	40013400 	.word	0x40013400

00005128 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    5128:	b480      	push	{r7}
    512a:	b085      	sub	sp, #20
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    5132:	2300      	movs	r3, #0
    5134:	81bb      	strh	r3, [r7, #12]
    5136:	2300      	movs	r3, #0
    5138:	817b      	strh	r3, [r7, #10]
    513a:	2300      	movs	r3, #0
    513c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	8c1b      	ldrh	r3, [r3, #32]
    5142:	b29b      	uxth	r3, r3
    5144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5148:	b29a      	uxth	r2, r3
    514a:	687b      	ldr	r3, [r7, #4]
    514c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	8c1b      	ldrh	r3, [r3, #32]
    5152:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	889b      	ldrh	r3, [r3, #4]
    5158:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	8b9b      	ldrh	r3, [r3, #28]
    515e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    5160:	89bb      	ldrh	r3, [r7, #12]
    5162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    5166:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    5168:	89bb      	ldrh	r3, [r7, #12]
    516a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    516e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	881b      	ldrh	r3, [r3, #0]
    5174:	021b      	lsls	r3, r3, #8
    5176:	b29a      	uxth	r2, r3
    5178:	89bb      	ldrh	r3, [r7, #12]
    517a:	4313      	orrs	r3, r2
    517c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    517e:	897b      	ldrh	r3, [r7, #10]
    5180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    5184:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    5186:	683b      	ldr	r3, [r7, #0]
    5188:	891b      	ldrh	r3, [r3, #8]
    518a:	031b      	lsls	r3, r3, #12
    518c:	b29a      	uxth	r2, r3
    518e:	897b      	ldrh	r3, [r7, #10]
    5190:	4313      	orrs	r3, r2
    5192:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    5194:	683b      	ldr	r3, [r7, #0]
    5196:	885b      	ldrh	r3, [r3, #2]
    5198:	031b      	lsls	r3, r3, #12
    519a:	b29a      	uxth	r2, r3
    519c:	897b      	ldrh	r3, [r7, #10]
    519e:	4313      	orrs	r3, r2
    51a0:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	4a12      	ldr	r2, [pc, #72]	; (51f0 <TIM_OC4Init+0xc8>)
    51a6:	4293      	cmp	r3, r2
    51a8:	d003      	beq.n	51b2 <TIM_OC4Init+0x8a>
    51aa:	687b      	ldr	r3, [r7, #4]
    51ac:	4a11      	ldr	r2, [pc, #68]	; (51f4 <TIM_OC4Init+0xcc>)
    51ae:	4293      	cmp	r3, r2
    51b0:	d10a      	bne.n	51c8 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    51b2:	89fb      	ldrh	r3, [r7, #14]
    51b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    51b8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	899b      	ldrh	r3, [r3, #12]
    51be:	019b      	lsls	r3, r3, #6
    51c0:	b29a      	uxth	r2, r3
    51c2:	89fb      	ldrh	r3, [r7, #14]
    51c4:	4313      	orrs	r3, r2
    51c6:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	89fa      	ldrh	r2, [r7, #14]
    51cc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	89ba      	ldrh	r2, [r7, #12]
    51d2:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    51d4:	683b      	ldr	r3, [r7, #0]
    51d6:	88da      	ldrh	r2, [r3, #6]
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	897a      	ldrh	r2, [r7, #10]
    51e2:	841a      	strh	r2, [r3, #32]
}
    51e4:	bf00      	nop
    51e6:	3714      	adds	r7, #20
    51e8:	46bd      	mov	sp, r7
    51ea:	bc80      	pop	{r7}
    51ec:	4770      	bx	lr
    51ee:	bf00      	nop
    51f0:	40012c00 	.word	0x40012c00
    51f4:	40013400 	.word	0x40013400

000051f8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    51f8:	b580      	push	{r7, lr}
    51fa:	b082      	sub	sp, #8
    51fc:	af00      	add	r7, sp, #0
    51fe:	6078      	str	r0, [r7, #4]
    5200:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    5202:	683b      	ldr	r3, [r7, #0]
    5204:	881b      	ldrh	r3, [r3, #0]
    5206:	2b00      	cmp	r3, #0
    5208:	d10f      	bne.n	522a <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    520a:	683b      	ldr	r3, [r7, #0]
    520c:	8859      	ldrh	r1, [r3, #2]
    520e:	683b      	ldr	r3, [r7, #0]
    5210:	889a      	ldrh	r2, [r3, #4]
    5212:	683b      	ldr	r3, [r7, #0]
    5214:	891b      	ldrh	r3, [r3, #8]
    5216:	6878      	ldr	r0, [r7, #4]
    5218:	f001 f946 	bl	64a8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    521c:	683b      	ldr	r3, [r7, #0]
    521e:	88db      	ldrh	r3, [r3, #6]
    5220:	4619      	mov	r1, r3
    5222:	6878      	ldr	r0, [r7, #4]
    5224:	f001 f808 	bl	6238 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    5228:	e036      	b.n	5298 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    522a:	683b      	ldr	r3, [r7, #0]
    522c:	881b      	ldrh	r3, [r3, #0]
    522e:	2b04      	cmp	r3, #4
    5230:	d10f      	bne.n	5252 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    5232:	683b      	ldr	r3, [r7, #0]
    5234:	8859      	ldrh	r1, [r3, #2]
    5236:	683b      	ldr	r3, [r7, #0]
    5238:	889a      	ldrh	r2, [r3, #4]
    523a:	683b      	ldr	r3, [r7, #0]
    523c:	891b      	ldrh	r3, [r3, #8]
    523e:	6878      	ldr	r0, [r7, #4]
    5240:	f001 f9a2 	bl	6588 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5244:	683b      	ldr	r3, [r7, #0]
    5246:	88db      	ldrh	r3, [r3, #6]
    5248:	4619      	mov	r1, r3
    524a:	6878      	ldr	r0, [r7, #4]
    524c:	f001 f80f 	bl	626e <TIM_SetIC2Prescaler>
}
    5250:	e022      	b.n	5298 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	881b      	ldrh	r3, [r3, #0]
    5256:	2b08      	cmp	r3, #8
    5258:	d10f      	bne.n	527a <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    525a:	683b      	ldr	r3, [r7, #0]
    525c:	8859      	ldrh	r1, [r3, #2]
    525e:	683b      	ldr	r3, [r7, #0]
    5260:	889a      	ldrh	r2, [r3, #4]
    5262:	683b      	ldr	r3, [r7, #0]
    5264:	891b      	ldrh	r3, [r3, #8]
    5266:	6878      	ldr	r0, [r7, #4]
    5268:	f001 fa08 	bl	667c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    526c:	683b      	ldr	r3, [r7, #0]
    526e:	88db      	ldrh	r3, [r3, #6]
    5270:	4619      	mov	r1, r3
    5272:	6878      	ldr	r0, [r7, #4]
    5274:	f001 f818 	bl	62a8 <TIM_SetIC3Prescaler>
}
    5278:	e00e      	b.n	5298 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    527a:	683b      	ldr	r3, [r7, #0]
    527c:	8859      	ldrh	r1, [r3, #2]
    527e:	683b      	ldr	r3, [r7, #0]
    5280:	889a      	ldrh	r2, [r3, #4]
    5282:	683b      	ldr	r3, [r7, #0]
    5284:	891b      	ldrh	r3, [r3, #8]
    5286:	6878      	ldr	r0, [r7, #4]
    5288:	f001 fa6e 	bl	6768 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    528c:	683b      	ldr	r3, [r7, #0]
    528e:	88db      	ldrh	r3, [r3, #6]
    5290:	4619      	mov	r1, r3
    5292:	6878      	ldr	r0, [r7, #4]
    5294:	f001 f823 	bl	62de <TIM_SetIC4Prescaler>
}
    5298:	bf00      	nop
    529a:	3708      	adds	r7, #8
    529c:	46bd      	mov	sp, r7
    529e:	bd80      	pop	{r7, pc}

000052a0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b084      	sub	sp, #16
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
    52a8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    52aa:	2300      	movs	r3, #0
    52ac:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    52ae:	2301      	movs	r3, #1
    52b0:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    52b2:	683b      	ldr	r3, [r7, #0]
    52b4:	885b      	ldrh	r3, [r3, #2]
    52b6:	2b00      	cmp	r3, #0
    52b8:	d102      	bne.n	52c0 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    52ba:	2302      	movs	r3, #2
    52bc:	81fb      	strh	r3, [r7, #14]
    52be:	e001      	b.n	52c4 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    52c0:	2300      	movs	r3, #0
    52c2:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    52c4:	683b      	ldr	r3, [r7, #0]
    52c6:	889b      	ldrh	r3, [r3, #4]
    52c8:	2b01      	cmp	r3, #1
    52ca:	d102      	bne.n	52d2 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    52cc:	2302      	movs	r3, #2
    52ce:	81bb      	strh	r3, [r7, #12]
    52d0:	e001      	b.n	52d6 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    52d2:	2301      	movs	r3, #1
    52d4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    52d6:	683b      	ldr	r3, [r7, #0]
    52d8:	881b      	ldrh	r3, [r3, #0]
    52da:	2b00      	cmp	r3, #0
    52dc:	d11c      	bne.n	5318 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    52de:	683b      	ldr	r3, [r7, #0]
    52e0:	8859      	ldrh	r1, [r3, #2]
    52e2:	683b      	ldr	r3, [r7, #0]
    52e4:	889a      	ldrh	r2, [r3, #4]
    52e6:	683b      	ldr	r3, [r7, #0]
    52e8:	891b      	ldrh	r3, [r3, #8]
    52ea:	6878      	ldr	r0, [r7, #4]
    52ec:	f001 f8dc 	bl	64a8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	88db      	ldrh	r3, [r3, #6]
    52f4:	4619      	mov	r1, r3
    52f6:	6878      	ldr	r0, [r7, #4]
    52f8:	f000 ff9e 	bl	6238 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    52fc:	683b      	ldr	r3, [r7, #0]
    52fe:	891b      	ldrh	r3, [r3, #8]
    5300:	89ba      	ldrh	r2, [r7, #12]
    5302:	89f9      	ldrh	r1, [r7, #14]
    5304:	6878      	ldr	r0, [r7, #4]
    5306:	f001 f93f 	bl	6588 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    530a:	683b      	ldr	r3, [r7, #0]
    530c:	88db      	ldrh	r3, [r3, #6]
    530e:	4619      	mov	r1, r3
    5310:	6878      	ldr	r0, [r7, #4]
    5312:	f000 ffac 	bl	626e <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
    5316:	e01b      	b.n	5350 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    5318:	683b      	ldr	r3, [r7, #0]
    531a:	8859      	ldrh	r1, [r3, #2]
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	889a      	ldrh	r2, [r3, #4]
    5320:	683b      	ldr	r3, [r7, #0]
    5322:	891b      	ldrh	r3, [r3, #8]
    5324:	6878      	ldr	r0, [r7, #4]
    5326:	f001 f92f 	bl	6588 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    532a:	683b      	ldr	r3, [r7, #0]
    532c:	88db      	ldrh	r3, [r3, #6]
    532e:	4619      	mov	r1, r3
    5330:	6878      	ldr	r0, [r7, #4]
    5332:	f000 ff9c 	bl	626e <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    5336:	683b      	ldr	r3, [r7, #0]
    5338:	891b      	ldrh	r3, [r3, #8]
    533a:	89ba      	ldrh	r2, [r7, #12]
    533c:	89f9      	ldrh	r1, [r7, #14]
    533e:	6878      	ldr	r0, [r7, #4]
    5340:	f001 f8b2 	bl	64a8 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5344:	683b      	ldr	r3, [r7, #0]
    5346:	88db      	ldrh	r3, [r3, #6]
    5348:	4619      	mov	r1, r3
    534a:	6878      	ldr	r0, [r7, #4]
    534c:	f000 ff74 	bl	6238 <TIM_SetIC1Prescaler>
}
    5350:	bf00      	nop
    5352:	3710      	adds	r7, #16
    5354:	46bd      	mov	sp, r7
    5356:	bd80      	pop	{r7, pc}

00005358 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    5358:	b480      	push	{r7}
    535a:	b083      	sub	sp, #12
    535c:	af00      	add	r7, sp, #0
    535e:	6078      	str	r0, [r7, #4]
    5360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5362:	683b      	ldr	r3, [r7, #0]
    5364:	881a      	ldrh	r2, [r3, #0]
    5366:	683b      	ldr	r3, [r7, #0]
    5368:	885b      	ldrh	r3, [r3, #2]
    536a:	4313      	orrs	r3, r2
    536c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    536e:	683b      	ldr	r3, [r7, #0]
    5370:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5372:	4313      	orrs	r3, r2
    5374:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    5376:	683b      	ldr	r3, [r7, #0]
    5378:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    537a:	4313      	orrs	r3, r2
    537c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    537e:	683b      	ldr	r3, [r7, #0]
    5380:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5382:	4313      	orrs	r3, r2
    5384:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    5386:	683b      	ldr	r3, [r7, #0]
    5388:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    538a:	4313      	orrs	r3, r2
    538c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    538e:	683b      	ldr	r3, [r7, #0]
    5390:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5392:	4313      	orrs	r3, r2
    5394:	b29a      	uxth	r2, r3
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    539c:	bf00      	nop
    539e:	370c      	adds	r7, #12
    53a0:	46bd      	mov	sp, r7
    53a2:	bc80      	pop	{r7}
    53a4:	4770      	bx	lr

000053a6 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    53a6:	b480      	push	{r7}
    53a8:	b083      	sub	sp, #12
    53aa:	af00      	add	r7, sp, #0
    53ac:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    53b4:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	2200      	movs	r2, #0
    53ba:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    53bc:	687b      	ldr	r3, [r7, #4]
    53be:	2200      	movs	r2, #0
    53c0:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	2200      	movs	r2, #0
    53c6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    53c8:	687b      	ldr	r3, [r7, #4]
    53ca:	2200      	movs	r2, #0
    53cc:	721a      	strb	r2, [r3, #8]
}
    53ce:	bf00      	nop
    53d0:	370c      	adds	r7, #12
    53d2:	46bd      	mov	sp, r7
    53d4:	bc80      	pop	{r7}
    53d6:	4770      	bx	lr

000053d8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    53d8:	b480      	push	{r7}
    53da:	b083      	sub	sp, #12
    53dc:	af00      	add	r7, sp, #0
    53de:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	2200      	movs	r2, #0
    53e4:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    53e6:	687b      	ldr	r3, [r7, #4]
    53e8:	2200      	movs	r2, #0
    53ea:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	2200      	movs	r2, #0
    53f0:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	2200      	movs	r2, #0
    53f6:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	2200      	movs	r2, #0
    53fc:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	2200      	movs	r2, #0
    5402:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    5404:	687b      	ldr	r3, [r7, #4]
    5406:	2200      	movs	r2, #0
    5408:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    540a:	687b      	ldr	r3, [r7, #4]
    540c:	2200      	movs	r2, #0
    540e:	81da      	strh	r2, [r3, #14]
}
    5410:	bf00      	nop
    5412:	370c      	adds	r7, #12
    5414:	46bd      	mov	sp, r7
    5416:	bc80      	pop	{r7}
    5418:	4770      	bx	lr

0000541a <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    541a:	b480      	push	{r7}
    541c:	b083      	sub	sp, #12
    541e:	af00      	add	r7, sp, #0
    5420:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	2200      	movs	r2, #0
    5426:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    5428:	687b      	ldr	r3, [r7, #4]
    542a:	2200      	movs	r2, #0
    542c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	2201      	movs	r2, #1
    5432:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    5434:	687b      	ldr	r3, [r7, #4]
    5436:	2200      	movs	r2, #0
    5438:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	2200      	movs	r2, #0
    543e:	811a      	strh	r2, [r3, #8]
}
    5440:	bf00      	nop
    5442:	370c      	adds	r7, #12
    5444:	46bd      	mov	sp, r7
    5446:	bc80      	pop	{r7}
    5448:	4770      	bx	lr

0000544a <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    544a:	b480      	push	{r7}
    544c:	b083      	sub	sp, #12
    544e:	af00      	add	r7, sp, #0
    5450:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	2200      	movs	r2, #0
    5456:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	2200      	movs	r2, #0
    545c:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	2200      	movs	r2, #0
    5462:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	2200      	movs	r2, #0
    5468:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	2200      	movs	r2, #0
    546e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	2200      	movs	r2, #0
    5474:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	2200      	movs	r2, #0
    547a:	819a      	strh	r2, [r3, #12]
}
    547c:	bf00      	nop
    547e:	370c      	adds	r7, #12
    5480:	46bd      	mov	sp, r7
    5482:	bc80      	pop	{r7}
    5484:	4770      	bx	lr

00005486 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5486:	b480      	push	{r7}
    5488:	b083      	sub	sp, #12
    548a:	af00      	add	r7, sp, #0
    548c:	6078      	str	r0, [r7, #4]
    548e:	460b      	mov	r3, r1
    5490:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    5492:	78fb      	ldrb	r3, [r7, #3]
    5494:	2b00      	cmp	r3, #0
    5496:	d008      	beq.n	54aa <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    5498:	687b      	ldr	r3, [r7, #4]
    549a:	881b      	ldrh	r3, [r3, #0]
    549c:	b29b      	uxth	r3, r3
    549e:	f043 0301 	orr.w	r3, r3, #1
    54a2:	b29a      	uxth	r2, r3
    54a4:	687b      	ldr	r3, [r7, #4]
    54a6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
    54a8:	e007      	b.n	54ba <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	881b      	ldrh	r3, [r3, #0]
    54ae:	b29b      	uxth	r3, r3
    54b0:	f023 0301 	bic.w	r3, r3, #1
    54b4:	b29a      	uxth	r2, r3
    54b6:	687b      	ldr	r3, [r7, #4]
    54b8:	801a      	strh	r2, [r3, #0]
}
    54ba:	bf00      	nop
    54bc:	370c      	adds	r7, #12
    54be:	46bd      	mov	sp, r7
    54c0:	bc80      	pop	{r7}
    54c2:	4770      	bx	lr

000054c4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    54c4:	b480      	push	{r7}
    54c6:	b083      	sub	sp, #12
    54c8:	af00      	add	r7, sp, #0
    54ca:	6078      	str	r0, [r7, #4]
    54cc:	460b      	mov	r3, r1
    54ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    54d0:	78fb      	ldrb	r3, [r7, #3]
    54d2:	2b00      	cmp	r3, #0
    54d4:	d00c      	beq.n	54f0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    54dc:	b29b      	uxth	r3, r3
    54de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    54e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    54e6:	b29a      	uxth	r2, r3
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
    54ee:	e009      	b.n	5504 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    54f6:	b29b      	uxth	r3, r3
    54f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
    54fc:	b29a      	uxth	r2, r3
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
    5504:	bf00      	nop
    5506:	370c      	adds	r7, #12
    5508:	46bd      	mov	sp, r7
    550a:	bc80      	pop	{r7}
    550c:	4770      	bx	lr

0000550e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    550e:	b480      	push	{r7}
    5510:	b083      	sub	sp, #12
    5512:	af00      	add	r7, sp, #0
    5514:	6078      	str	r0, [r7, #4]
    5516:	460b      	mov	r3, r1
    5518:	807b      	strh	r3, [r7, #2]
    551a:	4613      	mov	r3, r2
    551c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    551e:	787b      	ldrb	r3, [r7, #1]
    5520:	2b00      	cmp	r3, #0
    5522:	d008      	beq.n	5536 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    5524:	687b      	ldr	r3, [r7, #4]
    5526:	899b      	ldrh	r3, [r3, #12]
    5528:	b29a      	uxth	r2, r3
    552a:	887b      	ldrh	r3, [r7, #2]
    552c:	4313      	orrs	r3, r2
    552e:	b29a      	uxth	r2, r3
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
    5534:	e009      	b.n	554a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	899b      	ldrh	r3, [r3, #12]
    553a:	b29a      	uxth	r2, r3
    553c:	887b      	ldrh	r3, [r7, #2]
    553e:	43db      	mvns	r3, r3
    5540:	b29b      	uxth	r3, r3
    5542:	4013      	ands	r3, r2
    5544:	b29a      	uxth	r2, r3
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	819a      	strh	r2, [r3, #12]
}
    554a:	bf00      	nop
    554c:	370c      	adds	r7, #12
    554e:	46bd      	mov	sp, r7
    5550:	bc80      	pop	{r7}
    5552:	4770      	bx	lr

00005554 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    5554:	b480      	push	{r7}
    5556:	b083      	sub	sp, #12
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]
    555c:	460b      	mov	r3, r1
    555e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	887a      	ldrh	r2, [r7, #2]
    5564:	829a      	strh	r2, [r3, #20]
}
    5566:	bf00      	nop
    5568:	370c      	adds	r7, #12
    556a:	46bd      	mov	sp, r7
    556c:	bc80      	pop	{r7}
    556e:	4770      	bx	lr

00005570 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    5570:	b480      	push	{r7}
    5572:	b083      	sub	sp, #12
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
    5578:	460b      	mov	r3, r1
    557a:	807b      	strh	r3, [r7, #2]
    557c:	4613      	mov	r3, r2
    557e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    5580:	887a      	ldrh	r2, [r7, #2]
    5582:	883b      	ldrh	r3, [r7, #0]
    5584:	4313      	orrs	r3, r2
    5586:	b29a      	uxth	r2, r3
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    558e:	bf00      	nop
    5590:	370c      	adds	r7, #12
    5592:	46bd      	mov	sp, r7
    5594:	bc80      	pop	{r7}
    5596:	4770      	bx	lr

00005598 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    5598:	b480      	push	{r7}
    559a:	b083      	sub	sp, #12
    559c:	af00      	add	r7, sp, #0
    559e:	6078      	str	r0, [r7, #4]
    55a0:	460b      	mov	r3, r1
    55a2:	807b      	strh	r3, [r7, #2]
    55a4:	4613      	mov	r3, r2
    55a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    55a8:	787b      	ldrb	r3, [r7, #1]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d008      	beq.n	55c0 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	899b      	ldrh	r3, [r3, #12]
    55b2:	b29a      	uxth	r2, r3
    55b4:	887b      	ldrh	r3, [r7, #2]
    55b6:	4313      	orrs	r3, r2
    55b8:	b29a      	uxth	r2, r3
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
    55be:	e009      	b.n	55d4 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	899b      	ldrh	r3, [r3, #12]
    55c4:	b29a      	uxth	r2, r3
    55c6:	887b      	ldrh	r3, [r7, #2]
    55c8:	43db      	mvns	r3, r3
    55ca:	b29b      	uxth	r3, r3
    55cc:	4013      	ands	r3, r2
    55ce:	b29a      	uxth	r2, r3
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	819a      	strh	r2, [r3, #12]
}
    55d4:	bf00      	nop
    55d6:	370c      	adds	r7, #12
    55d8:	46bd      	mov	sp, r7
    55da:	bc80      	pop	{r7}
    55dc:	4770      	bx	lr

000055de <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    55de:	b480      	push	{r7}
    55e0:	b083      	sub	sp, #12
    55e2:	af00      	add	r7, sp, #0
    55e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	891b      	ldrh	r3, [r3, #8]
    55ea:	b29b      	uxth	r3, r3
    55ec:	f023 0307 	bic.w	r3, r3, #7
    55f0:	b29a      	uxth	r2, r3
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	811a      	strh	r2, [r3, #8]
}
    55f6:	bf00      	nop
    55f8:	370c      	adds	r7, #12
    55fa:	46bd      	mov	sp, r7
    55fc:	bc80      	pop	{r7}
    55fe:	4770      	bx	lr

00005600 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    5600:	b580      	push	{r7, lr}
    5602:	b082      	sub	sp, #8
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
    5608:	460b      	mov	r3, r1
    560a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    560c:	887b      	ldrh	r3, [r7, #2]
    560e:	4619      	mov	r1, r3
    5610:	6878      	ldr	r0, [r7, #4]
    5612:	f000 f8df 	bl	57d4 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	891b      	ldrh	r3, [r3, #8]
    561a:	b29b      	uxth	r3, r3
    561c:	f043 0307 	orr.w	r3, r3, #7
    5620:	b29a      	uxth	r2, r3
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	811a      	strh	r2, [r3, #8]
}
    5626:	bf00      	nop
    5628:	3708      	adds	r7, #8
    562a:	46bd      	mov	sp, r7
    562c:	bd80      	pop	{r7, pc}

0000562e <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    562e:	b580      	push	{r7, lr}
    5630:	b084      	sub	sp, #16
    5632:	af00      	add	r7, sp, #0
    5634:	60f8      	str	r0, [r7, #12]
    5636:	4608      	mov	r0, r1
    5638:	4611      	mov	r1, r2
    563a:	461a      	mov	r2, r3
    563c:	4603      	mov	r3, r0
    563e:	817b      	strh	r3, [r7, #10]
    5640:	460b      	mov	r3, r1
    5642:	813b      	strh	r3, [r7, #8]
    5644:	4613      	mov	r3, r2
    5646:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    5648:	897b      	ldrh	r3, [r7, #10]
    564a:	2b60      	cmp	r3, #96	; 0x60
    564c:	d106      	bne.n	565c <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    564e:	88fb      	ldrh	r3, [r7, #6]
    5650:	8939      	ldrh	r1, [r7, #8]
    5652:	2201      	movs	r2, #1
    5654:	68f8      	ldr	r0, [r7, #12]
    5656:	f000 ff97 	bl	6588 <TI2_Config>
    565a:	e005      	b.n	5668 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    565c:	88fb      	ldrh	r3, [r7, #6]
    565e:	8939      	ldrh	r1, [r7, #8]
    5660:	2201      	movs	r2, #1
    5662:	68f8      	ldr	r0, [r7, #12]
    5664:	f000 ff20 	bl	64a8 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    5668:	897b      	ldrh	r3, [r7, #10]
    566a:	4619      	mov	r1, r3
    566c:	68f8      	ldr	r0, [r7, #12]
    566e:	f000 f8b1 	bl	57d4 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    5672:	68fb      	ldr	r3, [r7, #12]
    5674:	891b      	ldrh	r3, [r3, #8]
    5676:	b29b      	uxth	r3, r3
    5678:	f043 0307 	orr.w	r3, r3, #7
    567c:	b29a      	uxth	r2, r3
    567e:	68fb      	ldr	r3, [r7, #12]
    5680:	811a      	strh	r2, [r3, #8]
}
    5682:	bf00      	nop
    5684:	3710      	adds	r7, #16
    5686:	46bd      	mov	sp, r7
    5688:	bd80      	pop	{r7, pc}

0000568a <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    568a:	b580      	push	{r7, lr}
    568c:	b086      	sub	sp, #24
    568e:	af00      	add	r7, sp, #0
    5690:	60f8      	str	r0, [r7, #12]
    5692:	4608      	mov	r0, r1
    5694:	4611      	mov	r1, r2
    5696:	461a      	mov	r2, r3
    5698:	4603      	mov	r3, r0
    569a:	817b      	strh	r3, [r7, #10]
    569c:	460b      	mov	r3, r1
    569e:	813b      	strh	r3, [r7, #8]
    56a0:	4613      	mov	r3, r2
    56a2:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    56a4:	2300      	movs	r3, #0
    56a6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    56a8:	88fb      	ldrh	r3, [r7, #6]
    56aa:	893a      	ldrh	r2, [r7, #8]
    56ac:	8979      	ldrh	r1, [r7, #10]
    56ae:	68f8      	ldr	r0, [r7, #12]
    56b0:	f000 f839 	bl	5726 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    56b4:	68fb      	ldr	r3, [r7, #12]
    56b6:	891b      	ldrh	r3, [r3, #8]
    56b8:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    56ba:	8afb      	ldrh	r3, [r7, #22]
    56bc:	f023 0307 	bic.w	r3, r3, #7
    56c0:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    56c2:	8afb      	ldrh	r3, [r7, #22]
    56c4:	f043 0307 	orr.w	r3, r3, #7
    56c8:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    56ca:	8afb      	ldrh	r3, [r7, #22]
    56cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    56d0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    56d2:	8afb      	ldrh	r3, [r7, #22]
    56d4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    56d8:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	8afa      	ldrh	r2, [r7, #22]
    56de:	811a      	strh	r2, [r3, #8]
}
    56e0:	bf00      	nop
    56e2:	3718      	adds	r7, #24
    56e4:	46bd      	mov	sp, r7
    56e6:	bd80      	pop	{r7, pc}

000056e8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    56e8:	b580      	push	{r7, lr}
    56ea:	b084      	sub	sp, #16
    56ec:	af00      	add	r7, sp, #0
    56ee:	60f8      	str	r0, [r7, #12]
    56f0:	4608      	mov	r0, r1
    56f2:	4611      	mov	r1, r2
    56f4:	461a      	mov	r2, r3
    56f6:	4603      	mov	r3, r0
    56f8:	817b      	strh	r3, [r7, #10]
    56fa:	460b      	mov	r3, r1
    56fc:	813b      	strh	r3, [r7, #8]
    56fe:	4613      	mov	r3, r2
    5700:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    5702:	88fb      	ldrh	r3, [r7, #6]
    5704:	893a      	ldrh	r2, [r7, #8]
    5706:	8979      	ldrh	r1, [r7, #10]
    5708:	68f8      	ldr	r0, [r7, #12]
    570a:	f000 f80c 	bl	5726 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	891b      	ldrh	r3, [r3, #8]
    5712:	b29b      	uxth	r3, r3
    5714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5718:	b29a      	uxth	r2, r3
    571a:	68fb      	ldr	r3, [r7, #12]
    571c:	811a      	strh	r2, [r3, #8]
}
    571e:	bf00      	nop
    5720:	3710      	adds	r7, #16
    5722:	46bd      	mov	sp, r7
    5724:	bd80      	pop	{r7, pc}

00005726 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    5726:	b480      	push	{r7}
    5728:	b087      	sub	sp, #28
    572a:	af00      	add	r7, sp, #0
    572c:	60f8      	str	r0, [r7, #12]
    572e:	4608      	mov	r0, r1
    5730:	4611      	mov	r1, r2
    5732:	461a      	mov	r2, r3
    5734:	4603      	mov	r3, r0
    5736:	817b      	strh	r3, [r7, #10]
    5738:	460b      	mov	r3, r1
    573a:	813b      	strh	r3, [r7, #8]
    573c:	4613      	mov	r3, r2
    573e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    5740:	2300      	movs	r3, #0
    5742:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    5744:	68fb      	ldr	r3, [r7, #12]
    5746:	891b      	ldrh	r3, [r3, #8]
    5748:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    574a:	8afb      	ldrh	r3, [r7, #22]
    574c:	b2db      	uxtb	r3, r3
    574e:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    5750:	88fb      	ldrh	r3, [r7, #6]
    5752:	021b      	lsls	r3, r3, #8
    5754:	b29a      	uxth	r2, r3
    5756:	893b      	ldrh	r3, [r7, #8]
    5758:	4313      	orrs	r3, r2
    575a:	b29a      	uxth	r2, r3
    575c:	897b      	ldrh	r3, [r7, #10]
    575e:	4313      	orrs	r3, r2
    5760:	b29a      	uxth	r2, r3
    5762:	8afb      	ldrh	r3, [r7, #22]
    5764:	4313      	orrs	r3, r2
    5766:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    5768:	68fb      	ldr	r3, [r7, #12]
    576a:	8afa      	ldrh	r2, [r7, #22]
    576c:	811a      	strh	r2, [r3, #8]
}
    576e:	bf00      	nop
    5770:	371c      	adds	r7, #28
    5772:	46bd      	mov	sp, r7
    5774:	bc80      	pop	{r7}
    5776:	4770      	bx	lr

00005778 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    5778:	b480      	push	{r7}
    577a:	b083      	sub	sp, #12
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
    5780:	460b      	mov	r3, r1
    5782:	807b      	strh	r3, [r7, #2]
    5784:	4613      	mov	r3, r2
    5786:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	887a      	ldrh	r2, [r7, #2]
    578c:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    578e:	687b      	ldr	r3, [r7, #4]
    5790:	883a      	ldrh	r2, [r7, #0]
    5792:	829a      	strh	r2, [r3, #20]
}
    5794:	bf00      	nop
    5796:	370c      	adds	r7, #12
    5798:	46bd      	mov	sp, r7
    579a:	bc80      	pop	{r7}
    579c:	4770      	bx	lr

0000579e <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    579e:	b480      	push	{r7}
    57a0:	b085      	sub	sp, #20
    57a2:	af00      	add	r7, sp, #0
    57a4:	6078      	str	r0, [r7, #4]
    57a6:	460b      	mov	r3, r1
    57a8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    57aa:	2300      	movs	r3, #0
    57ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	881b      	ldrh	r3, [r3, #0]
    57b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    57b4:	89fb      	ldrh	r3, [r7, #14]
    57b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    57ba:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    57bc:	89fa      	ldrh	r2, [r7, #14]
    57be:	887b      	ldrh	r3, [r7, #2]
    57c0:	4313      	orrs	r3, r2
    57c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	89fa      	ldrh	r2, [r7, #14]
    57c8:	801a      	strh	r2, [r3, #0]
}
    57ca:	bf00      	nop
    57cc:	3714      	adds	r7, #20
    57ce:	46bd      	mov	sp, r7
    57d0:	bc80      	pop	{r7}
    57d2:	4770      	bx	lr

000057d4 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    57d4:	b480      	push	{r7}
    57d6:	b085      	sub	sp, #20
    57d8:	af00      	add	r7, sp, #0
    57da:	6078      	str	r0, [r7, #4]
    57dc:	460b      	mov	r3, r1
    57de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    57e0:	2300      	movs	r3, #0
    57e2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	891b      	ldrh	r3, [r3, #8]
    57e8:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    57ea:	89fb      	ldrh	r3, [r7, #14]
    57ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    57f0:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    57f2:	89fa      	ldrh	r2, [r7, #14]
    57f4:	887b      	ldrh	r3, [r7, #2]
    57f6:	4313      	orrs	r3, r2
    57f8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	89fa      	ldrh	r2, [r7, #14]
    57fe:	811a      	strh	r2, [r3, #8]
}
    5800:	bf00      	nop
    5802:	3714      	adds	r7, #20
    5804:	46bd      	mov	sp, r7
    5806:	bc80      	pop	{r7}
    5808:	4770      	bx	lr

0000580a <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    580a:	b480      	push	{r7}
    580c:	b087      	sub	sp, #28
    580e:	af00      	add	r7, sp, #0
    5810:	60f8      	str	r0, [r7, #12]
    5812:	4608      	mov	r0, r1
    5814:	4611      	mov	r1, r2
    5816:	461a      	mov	r2, r3
    5818:	4603      	mov	r3, r0
    581a:	817b      	strh	r3, [r7, #10]
    581c:	460b      	mov	r3, r1
    581e:	813b      	strh	r3, [r7, #8]
    5820:	4613      	mov	r3, r2
    5822:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    5824:	2300      	movs	r3, #0
    5826:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    5828:	2300      	movs	r3, #0
    582a:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    582c:	2300      	movs	r3, #0
    582e:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    5830:	68fb      	ldr	r3, [r7, #12]
    5832:	891b      	ldrh	r3, [r3, #8]
    5834:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    5836:	68fb      	ldr	r3, [r7, #12]
    5838:	8b1b      	ldrh	r3, [r3, #24]
    583a:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    583c:	68fb      	ldr	r3, [r7, #12]
    583e:	8c1b      	ldrh	r3, [r3, #32]
    5840:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    5842:	8afb      	ldrh	r3, [r7, #22]
    5844:	f023 0307 	bic.w	r3, r3, #7
    5848:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    584a:	8afa      	ldrh	r2, [r7, #22]
    584c:	897b      	ldrh	r3, [r7, #10]
    584e:	4313      	orrs	r3, r2
    5850:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    5852:	8abb      	ldrh	r3, [r7, #20]
    5854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5858:	f023 0303 	bic.w	r3, r3, #3
    585c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    585e:	8abb      	ldrh	r3, [r7, #20]
    5860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5864:	f043 0301 	orr.w	r3, r3, #1
    5868:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    586a:	8a7b      	ldrh	r3, [r7, #18]
    586c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    5870:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    5872:	88fb      	ldrh	r3, [r7, #6]
    5874:	011b      	lsls	r3, r3, #4
    5876:	b29a      	uxth	r2, r3
    5878:	893b      	ldrh	r3, [r7, #8]
    587a:	4313      	orrs	r3, r2
    587c:	b29a      	uxth	r2, r3
    587e:	8a7b      	ldrh	r3, [r7, #18]
    5880:	4313      	orrs	r3, r2
    5882:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    5884:	68fb      	ldr	r3, [r7, #12]
    5886:	8afa      	ldrh	r2, [r7, #22]
    5888:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    588a:	68fb      	ldr	r3, [r7, #12]
    588c:	8aba      	ldrh	r2, [r7, #20]
    588e:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	8a7a      	ldrh	r2, [r7, #18]
    5894:	841a      	strh	r2, [r3, #32]
}
    5896:	bf00      	nop
    5898:	371c      	adds	r7, #28
    589a:	46bd      	mov	sp, r7
    589c:	bc80      	pop	{r7}
    589e:	4770      	bx	lr

000058a0 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    58a0:	b480      	push	{r7}
    58a2:	b085      	sub	sp, #20
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
    58a8:	460b      	mov	r3, r1
    58aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    58ac:	2300      	movs	r3, #0
    58ae:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	8b1b      	ldrh	r3, [r3, #24]
    58b4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    58b6:	89fb      	ldrh	r3, [r7, #14]
    58b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    58bc:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    58be:	89fa      	ldrh	r2, [r7, #14]
    58c0:	887b      	ldrh	r3, [r7, #2]
    58c2:	4313      	orrs	r3, r2
    58c4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	89fa      	ldrh	r2, [r7, #14]
    58ca:	831a      	strh	r2, [r3, #24]
}
    58cc:	bf00      	nop
    58ce:	3714      	adds	r7, #20
    58d0:	46bd      	mov	sp, r7
    58d2:	bc80      	pop	{r7}
    58d4:	4770      	bx	lr

000058d6 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    58d6:	b480      	push	{r7}
    58d8:	b085      	sub	sp, #20
    58da:	af00      	add	r7, sp, #0
    58dc:	6078      	str	r0, [r7, #4]
    58de:	460b      	mov	r3, r1
    58e0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    58e2:	2300      	movs	r3, #0
    58e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	8b1b      	ldrh	r3, [r3, #24]
    58ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    58ec:	89fb      	ldrh	r3, [r7, #14]
    58ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    58f2:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    58f4:	887b      	ldrh	r3, [r7, #2]
    58f6:	021b      	lsls	r3, r3, #8
    58f8:	b29a      	uxth	r2, r3
    58fa:	89fb      	ldrh	r3, [r7, #14]
    58fc:	4313      	orrs	r3, r2
    58fe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	89fa      	ldrh	r2, [r7, #14]
    5904:	831a      	strh	r2, [r3, #24]
}
    5906:	bf00      	nop
    5908:	3714      	adds	r7, #20
    590a:	46bd      	mov	sp, r7
    590c:	bc80      	pop	{r7}
    590e:	4770      	bx	lr

00005910 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    5910:	b480      	push	{r7}
    5912:	b085      	sub	sp, #20
    5914:	af00      	add	r7, sp, #0
    5916:	6078      	str	r0, [r7, #4]
    5918:	460b      	mov	r3, r1
    591a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    591c:	2300      	movs	r3, #0
    591e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	8b9b      	ldrh	r3, [r3, #28]
    5924:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    5926:	89fb      	ldrh	r3, [r7, #14]
    5928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    592c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    592e:	89fa      	ldrh	r2, [r7, #14]
    5930:	887b      	ldrh	r3, [r7, #2]
    5932:	4313      	orrs	r3, r2
    5934:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5936:	687b      	ldr	r3, [r7, #4]
    5938:	89fa      	ldrh	r2, [r7, #14]
    593a:	839a      	strh	r2, [r3, #28]
}
    593c:	bf00      	nop
    593e:	3714      	adds	r7, #20
    5940:	46bd      	mov	sp, r7
    5942:	bc80      	pop	{r7}
    5944:	4770      	bx	lr

00005946 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    5946:	b480      	push	{r7}
    5948:	b085      	sub	sp, #20
    594a:	af00      	add	r7, sp, #0
    594c:	6078      	str	r0, [r7, #4]
    594e:	460b      	mov	r3, r1
    5950:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5952:	2300      	movs	r3, #0
    5954:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	8b9b      	ldrh	r3, [r3, #28]
    595a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    595c:	89fb      	ldrh	r3, [r7, #14]
    595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    5962:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    5964:	887b      	ldrh	r3, [r7, #2]
    5966:	021b      	lsls	r3, r3, #8
    5968:	b29a      	uxth	r2, r3
    596a:	89fb      	ldrh	r3, [r7, #14]
    596c:	4313      	orrs	r3, r2
    596e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	89fa      	ldrh	r2, [r7, #14]
    5974:	839a      	strh	r2, [r3, #28]
}
    5976:	bf00      	nop
    5978:	3714      	adds	r7, #20
    597a:	46bd      	mov	sp, r7
    597c:	bc80      	pop	{r7}
    597e:	4770      	bx	lr

00005980 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5980:	b480      	push	{r7}
    5982:	b083      	sub	sp, #12
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	460b      	mov	r3, r1
    598a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    598c:	78fb      	ldrb	r3, [r7, #3]
    598e:	2b00      	cmp	r3, #0
    5990:	d008      	beq.n	59a4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	881b      	ldrh	r3, [r3, #0]
    5996:	b29b      	uxth	r3, r3
    5998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    599c:	b29a      	uxth	r2, r3
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
    59a2:	e007      	b.n	59b4 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    59a4:	687b      	ldr	r3, [r7, #4]
    59a6:	881b      	ldrh	r3, [r3, #0]
    59a8:	b29b      	uxth	r3, r3
    59aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    59ae:	b29a      	uxth	r2, r3
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	801a      	strh	r2, [r3, #0]
}
    59b4:	bf00      	nop
    59b6:	370c      	adds	r7, #12
    59b8:	46bd      	mov	sp, r7
    59ba:	bc80      	pop	{r7}
    59bc:	4770      	bx	lr

000059be <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    59be:	b480      	push	{r7}
    59c0:	b083      	sub	sp, #12
    59c2:	af00      	add	r7, sp, #0
    59c4:	6078      	str	r0, [r7, #4]
    59c6:	460b      	mov	r3, r1
    59c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    59ca:	78fb      	ldrb	r3, [r7, #3]
    59cc:	2b00      	cmp	r3, #0
    59ce:	d008      	beq.n	59e2 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	889b      	ldrh	r3, [r3, #4]
    59d4:	b29b      	uxth	r3, r3
    59d6:	f043 0304 	orr.w	r3, r3, #4
    59da:	b29a      	uxth	r2, r3
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
  }
}
    59e0:	e007      	b.n	59f2 <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	889b      	ldrh	r3, [r3, #4]
    59e6:	b29b      	uxth	r3, r3
    59e8:	f023 0304 	bic.w	r3, r3, #4
    59ec:	b29a      	uxth	r2, r3
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	809a      	strh	r2, [r3, #4]
}
    59f2:	bf00      	nop
    59f4:	370c      	adds	r7, #12
    59f6:	46bd      	mov	sp, r7
    59f8:	bc80      	pop	{r7}
    59fa:	4770      	bx	lr

000059fc <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    59fc:	b480      	push	{r7}
    59fe:	b083      	sub	sp, #12
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
    5a04:	460b      	mov	r3, r1
    5a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5a08:	78fb      	ldrb	r3, [r7, #3]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d008      	beq.n	5a20 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	889b      	ldrh	r3, [r3, #4]
    5a12:	b29b      	uxth	r3, r3
    5a14:	f043 0308 	orr.w	r3, r3, #8
    5a18:	b29a      	uxth	r2, r3
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
  }
}
    5a1e:	e007      	b.n	5a30 <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    5a20:	687b      	ldr	r3, [r7, #4]
    5a22:	889b      	ldrh	r3, [r3, #4]
    5a24:	b29b      	uxth	r3, r3
    5a26:	f023 0308 	bic.w	r3, r3, #8
    5a2a:	b29a      	uxth	r2, r3
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	809a      	strh	r2, [r3, #4]
}
    5a30:	bf00      	nop
    5a32:	370c      	adds	r7, #12
    5a34:	46bd      	mov	sp, r7
    5a36:	bc80      	pop	{r7}
    5a38:	4770      	bx	lr

00005a3a <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    5a3a:	b480      	push	{r7}
    5a3c:	b083      	sub	sp, #12
    5a3e:	af00      	add	r7, sp, #0
    5a40:	6078      	str	r0, [r7, #4]
    5a42:	460b      	mov	r3, r1
    5a44:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5a46:	78fb      	ldrb	r3, [r7, #3]
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d008      	beq.n	5a5e <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    5a4c:	687b      	ldr	r3, [r7, #4]
    5a4e:	889b      	ldrh	r3, [r3, #4]
    5a50:	b29b      	uxth	r3, r3
    5a52:	f043 0301 	orr.w	r3, r3, #1
    5a56:	b29a      	uxth	r2, r3
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
  }
}
    5a5c:	e007      	b.n	5a6e <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	889b      	ldrh	r3, [r3, #4]
    5a62:	b29b      	uxth	r3, r3
    5a64:	f023 0301 	bic.w	r3, r3, #1
    5a68:	b29a      	uxth	r2, r3
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	809a      	strh	r2, [r3, #4]
}
    5a6e:	bf00      	nop
    5a70:	370c      	adds	r7, #12
    5a72:	46bd      	mov	sp, r7
    5a74:	bc80      	pop	{r7}
    5a76:	4770      	bx	lr

00005a78 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5a78:	b480      	push	{r7}
    5a7a:	b085      	sub	sp, #20
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	6078      	str	r0, [r7, #4]
    5a80:	460b      	mov	r3, r1
    5a82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5a84:	2300      	movs	r3, #0
    5a86:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	8b1b      	ldrh	r3, [r3, #24]
    5a8c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    5a8e:	89fb      	ldrh	r3, [r7, #14]
    5a90:	f023 0308 	bic.w	r3, r3, #8
    5a94:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    5a96:	89fa      	ldrh	r2, [r7, #14]
    5a98:	887b      	ldrh	r3, [r7, #2]
    5a9a:	4313      	orrs	r3, r2
    5a9c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	89fa      	ldrh	r2, [r7, #14]
    5aa2:	831a      	strh	r2, [r3, #24]
}
    5aa4:	bf00      	nop
    5aa6:	3714      	adds	r7, #20
    5aa8:	46bd      	mov	sp, r7
    5aaa:	bc80      	pop	{r7}
    5aac:	4770      	bx	lr

00005aae <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5aae:	b480      	push	{r7}
    5ab0:	b085      	sub	sp, #20
    5ab2:	af00      	add	r7, sp, #0
    5ab4:	6078      	str	r0, [r7, #4]
    5ab6:	460b      	mov	r3, r1
    5ab8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5aba:	2300      	movs	r3, #0
    5abc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	8b1b      	ldrh	r3, [r3, #24]
    5ac2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    5ac4:	89fb      	ldrh	r3, [r7, #14]
    5ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    5aca:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    5acc:	887b      	ldrh	r3, [r7, #2]
    5ace:	021b      	lsls	r3, r3, #8
    5ad0:	b29a      	uxth	r2, r3
    5ad2:	89fb      	ldrh	r3, [r7, #14]
    5ad4:	4313      	orrs	r3, r2
    5ad6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	89fa      	ldrh	r2, [r7, #14]
    5adc:	831a      	strh	r2, [r3, #24]
}
    5ade:	bf00      	nop
    5ae0:	3714      	adds	r7, #20
    5ae2:	46bd      	mov	sp, r7
    5ae4:	bc80      	pop	{r7}
    5ae6:	4770      	bx	lr

00005ae8 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5ae8:	b480      	push	{r7}
    5aea:	b085      	sub	sp, #20
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
    5af0:	460b      	mov	r3, r1
    5af2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5af4:	2300      	movs	r3, #0
    5af6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	8b9b      	ldrh	r3, [r3, #28]
    5afc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    5afe:	89fb      	ldrh	r3, [r7, #14]
    5b00:	f023 0308 	bic.w	r3, r3, #8
    5b04:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    5b06:	89fa      	ldrh	r2, [r7, #14]
    5b08:	887b      	ldrh	r3, [r7, #2]
    5b0a:	4313      	orrs	r3, r2
    5b0c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	89fa      	ldrh	r2, [r7, #14]
    5b12:	839a      	strh	r2, [r3, #28]
}
    5b14:	bf00      	nop
    5b16:	3714      	adds	r7, #20
    5b18:	46bd      	mov	sp, r7
    5b1a:	bc80      	pop	{r7}
    5b1c:	4770      	bx	lr

00005b1e <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    5b1e:	b480      	push	{r7}
    5b20:	b085      	sub	sp, #20
    5b22:	af00      	add	r7, sp, #0
    5b24:	6078      	str	r0, [r7, #4]
    5b26:	460b      	mov	r3, r1
    5b28:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5b2a:	2300      	movs	r3, #0
    5b2c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	8b9b      	ldrh	r3, [r3, #28]
    5b32:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    5b34:	89fb      	ldrh	r3, [r7, #14]
    5b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    5b3a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    5b3c:	887b      	ldrh	r3, [r7, #2]
    5b3e:	021b      	lsls	r3, r3, #8
    5b40:	b29a      	uxth	r2, r3
    5b42:	89fb      	ldrh	r3, [r7, #14]
    5b44:	4313      	orrs	r3, r2
    5b46:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	89fa      	ldrh	r2, [r7, #14]
    5b4c:	839a      	strh	r2, [r3, #28]
}
    5b4e:	bf00      	nop
    5b50:	3714      	adds	r7, #20
    5b52:	46bd      	mov	sp, r7
    5b54:	bc80      	pop	{r7}
    5b56:	4770      	bx	lr

00005b58 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5b58:	b480      	push	{r7}
    5b5a:	b085      	sub	sp, #20
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	6078      	str	r0, [r7, #4]
    5b60:	460b      	mov	r3, r1
    5b62:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5b64:	2300      	movs	r3, #0
    5b66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	8b1b      	ldrh	r3, [r3, #24]
    5b6c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    5b6e:	89fb      	ldrh	r3, [r7, #14]
    5b70:	f023 0304 	bic.w	r3, r3, #4
    5b74:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    5b76:	89fa      	ldrh	r2, [r7, #14]
    5b78:	887b      	ldrh	r3, [r7, #2]
    5b7a:	4313      	orrs	r3, r2
    5b7c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	89fa      	ldrh	r2, [r7, #14]
    5b82:	831a      	strh	r2, [r3, #24]
}
    5b84:	bf00      	nop
    5b86:	3714      	adds	r7, #20
    5b88:	46bd      	mov	sp, r7
    5b8a:	bc80      	pop	{r7}
    5b8c:	4770      	bx	lr

00005b8e <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5b8e:	b480      	push	{r7}
    5b90:	b085      	sub	sp, #20
    5b92:	af00      	add	r7, sp, #0
    5b94:	6078      	str	r0, [r7, #4]
    5b96:	460b      	mov	r3, r1
    5b98:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5b9a:	2300      	movs	r3, #0
    5b9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	8b1b      	ldrh	r3, [r3, #24]
    5ba2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    5ba4:	89fb      	ldrh	r3, [r7, #14]
    5ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5baa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    5bac:	887b      	ldrh	r3, [r7, #2]
    5bae:	021b      	lsls	r3, r3, #8
    5bb0:	b29a      	uxth	r2, r3
    5bb2:	89fb      	ldrh	r3, [r7, #14]
    5bb4:	4313      	orrs	r3, r2
    5bb6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    5bb8:	687b      	ldr	r3, [r7, #4]
    5bba:	89fa      	ldrh	r2, [r7, #14]
    5bbc:	831a      	strh	r2, [r3, #24]
}
    5bbe:	bf00      	nop
    5bc0:	3714      	adds	r7, #20
    5bc2:	46bd      	mov	sp, r7
    5bc4:	bc80      	pop	{r7}
    5bc6:	4770      	bx	lr

00005bc8 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5bc8:	b480      	push	{r7}
    5bca:	b085      	sub	sp, #20
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	460b      	mov	r3, r1
    5bd2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5bd4:	2300      	movs	r3, #0
    5bd6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	8b9b      	ldrh	r3, [r3, #28]
    5bdc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    5bde:	89fb      	ldrh	r3, [r7, #14]
    5be0:	f023 0304 	bic.w	r3, r3, #4
    5be4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    5be6:	89fa      	ldrh	r2, [r7, #14]
    5be8:	887b      	ldrh	r3, [r7, #2]
    5bea:	4313      	orrs	r3, r2
    5bec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	89fa      	ldrh	r2, [r7, #14]
    5bf2:	839a      	strh	r2, [r3, #28]
}
    5bf4:	bf00      	nop
    5bf6:	3714      	adds	r7, #20
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bc80      	pop	{r7}
    5bfc:	4770      	bx	lr

00005bfe <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    5bfe:	b480      	push	{r7}
    5c00:	b085      	sub	sp, #20
    5c02:	af00      	add	r7, sp, #0
    5c04:	6078      	str	r0, [r7, #4]
    5c06:	460b      	mov	r3, r1
    5c08:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5c0a:	2300      	movs	r3, #0
    5c0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	8b9b      	ldrh	r3, [r3, #28]
    5c12:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    5c14:	89fb      	ldrh	r3, [r7, #14]
    5c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5c1a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    5c1c:	887b      	ldrh	r3, [r7, #2]
    5c1e:	021b      	lsls	r3, r3, #8
    5c20:	b29a      	uxth	r2, r3
    5c22:	89fb      	ldrh	r3, [r7, #14]
    5c24:	4313      	orrs	r3, r2
    5c26:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	89fa      	ldrh	r2, [r7, #14]
    5c2c:	839a      	strh	r2, [r3, #28]
}
    5c2e:	bf00      	nop
    5c30:	3714      	adds	r7, #20
    5c32:	46bd      	mov	sp, r7
    5c34:	bc80      	pop	{r7}
    5c36:	4770      	bx	lr

00005c38 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5c38:	b480      	push	{r7}
    5c3a:	b085      	sub	sp, #20
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
    5c40:	460b      	mov	r3, r1
    5c42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5c44:	2300      	movs	r3, #0
    5c46:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8b1b      	ldrh	r3, [r3, #24]
    5c4c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    5c4e:	89fb      	ldrh	r3, [r7, #14]
    5c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5c54:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    5c56:	89fa      	ldrh	r2, [r7, #14]
    5c58:	887b      	ldrh	r3, [r7, #2]
    5c5a:	4313      	orrs	r3, r2
    5c5c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	89fa      	ldrh	r2, [r7, #14]
    5c62:	831a      	strh	r2, [r3, #24]
}
    5c64:	bf00      	nop
    5c66:	3714      	adds	r7, #20
    5c68:	46bd      	mov	sp, r7
    5c6a:	bc80      	pop	{r7}
    5c6c:	4770      	bx	lr

00005c6e <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5c6e:	b480      	push	{r7}
    5c70:	b085      	sub	sp, #20
    5c72:	af00      	add	r7, sp, #0
    5c74:	6078      	str	r0, [r7, #4]
    5c76:	460b      	mov	r3, r1
    5c78:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    5c7a:	2300      	movs	r3, #0
    5c7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    5c7e:	687b      	ldr	r3, [r7, #4]
    5c80:	8b1b      	ldrh	r3, [r3, #24]
    5c82:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    5c84:	89fb      	ldrh	r3, [r7, #14]
    5c86:	f3c3 030e 	ubfx	r3, r3, #0, #15
    5c8a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    5c8c:	887b      	ldrh	r3, [r7, #2]
    5c8e:	021b      	lsls	r3, r3, #8
    5c90:	b29a      	uxth	r2, r3
    5c92:	89fb      	ldrh	r3, [r7, #14]
    5c94:	4313      	orrs	r3, r2
    5c96:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	89fa      	ldrh	r2, [r7, #14]
    5c9c:	831a      	strh	r2, [r3, #24]
}
    5c9e:	bf00      	nop
    5ca0:	3714      	adds	r7, #20
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bc80      	pop	{r7}
    5ca6:	4770      	bx	lr

00005ca8 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5ca8:	b480      	push	{r7}
    5caa:	b085      	sub	sp, #20
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	460b      	mov	r3, r1
    5cb2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5cb4:	2300      	movs	r3, #0
    5cb6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	8b9b      	ldrh	r3, [r3, #28]
    5cbc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    5cbe:	89fb      	ldrh	r3, [r7, #14]
    5cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5cc4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    5cc6:	89fa      	ldrh	r2, [r7, #14]
    5cc8:	887b      	ldrh	r3, [r7, #2]
    5cca:	4313      	orrs	r3, r2
    5ccc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	89fa      	ldrh	r2, [r7, #14]
    5cd2:	839a      	strh	r2, [r3, #28]
}
    5cd4:	bf00      	nop
    5cd6:	3714      	adds	r7, #20
    5cd8:	46bd      	mov	sp, r7
    5cda:	bc80      	pop	{r7}
    5cdc:	4770      	bx	lr

00005cde <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    5cde:	b480      	push	{r7}
    5ce0:	b085      	sub	sp, #20
    5ce2:	af00      	add	r7, sp, #0
    5ce4:	6078      	str	r0, [r7, #4]
    5ce6:	460b      	mov	r3, r1
    5ce8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    5cea:	2300      	movs	r3, #0
    5cec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    5cee:	687b      	ldr	r3, [r7, #4]
    5cf0:	8b9b      	ldrh	r3, [r3, #28]
    5cf2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    5cf4:	89fb      	ldrh	r3, [r7, #14]
    5cf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    5cfa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    5cfc:	887b      	ldrh	r3, [r7, #2]
    5cfe:	021b      	lsls	r3, r3, #8
    5d00:	b29a      	uxth	r2, r3
    5d02:	89fb      	ldrh	r3, [r7, #14]
    5d04:	4313      	orrs	r3, r2
    5d06:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	89fa      	ldrh	r2, [r7, #14]
    5d0c:	839a      	strh	r2, [r3, #28]
}
    5d0e:	bf00      	nop
    5d10:	3714      	adds	r7, #20
    5d12:	46bd      	mov	sp, r7
    5d14:	bc80      	pop	{r7}
    5d16:	4770      	bx	lr

00005d18 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5d18:	b480      	push	{r7}
    5d1a:	b085      	sub	sp, #20
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
    5d20:	460b      	mov	r3, r1
    5d22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5d24:	2300      	movs	r3, #0
    5d26:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	8c1b      	ldrh	r3, [r3, #32]
    5d2c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    5d2e:	89fb      	ldrh	r3, [r7, #14]
    5d30:	f023 0302 	bic.w	r3, r3, #2
    5d34:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    5d36:	89fa      	ldrh	r2, [r7, #14]
    5d38:	887b      	ldrh	r3, [r7, #2]
    5d3a:	4313      	orrs	r3, r2
    5d3c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	89fa      	ldrh	r2, [r7, #14]
    5d42:	841a      	strh	r2, [r3, #32]
}
    5d44:	bf00      	nop
    5d46:	3714      	adds	r7, #20
    5d48:	46bd      	mov	sp, r7
    5d4a:	bc80      	pop	{r7}
    5d4c:	4770      	bx	lr

00005d4e <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5d4e:	b480      	push	{r7}
    5d50:	b085      	sub	sp, #20
    5d52:	af00      	add	r7, sp, #0
    5d54:	6078      	str	r0, [r7, #4]
    5d56:	460b      	mov	r3, r1
    5d58:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5d5a:	2300      	movs	r3, #0
    5d5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	8c1b      	ldrh	r3, [r3, #32]
    5d62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    5d64:	89fb      	ldrh	r3, [r7, #14]
    5d66:	f023 0308 	bic.w	r3, r3, #8
    5d6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    5d6c:	89fa      	ldrh	r2, [r7, #14]
    5d6e:	887b      	ldrh	r3, [r7, #2]
    5d70:	4313      	orrs	r3, r2
    5d72:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	89fa      	ldrh	r2, [r7, #14]
    5d78:	841a      	strh	r2, [r3, #32]
}
    5d7a:	bf00      	nop
    5d7c:	3714      	adds	r7, #20
    5d7e:	46bd      	mov	sp, r7
    5d80:	bc80      	pop	{r7}
    5d82:	4770      	bx	lr

00005d84 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5d84:	b480      	push	{r7}
    5d86:	b085      	sub	sp, #20
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	460b      	mov	r3, r1
    5d8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5d90:	2300      	movs	r3, #0
    5d92:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    5d94:	687b      	ldr	r3, [r7, #4]
    5d96:	8c1b      	ldrh	r3, [r3, #32]
    5d98:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    5d9a:	89fb      	ldrh	r3, [r7, #14]
    5d9c:	f023 0320 	bic.w	r3, r3, #32
    5da0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    5da2:	887b      	ldrh	r3, [r7, #2]
    5da4:	011b      	lsls	r3, r3, #4
    5da6:	b29a      	uxth	r2, r3
    5da8:	89fb      	ldrh	r3, [r7, #14]
    5daa:	4313      	orrs	r3, r2
    5dac:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5dae:	687b      	ldr	r3, [r7, #4]
    5db0:	89fa      	ldrh	r2, [r7, #14]
    5db2:	841a      	strh	r2, [r3, #32]
}
    5db4:	bf00      	nop
    5db6:	3714      	adds	r7, #20
    5db8:	46bd      	mov	sp, r7
    5dba:	bc80      	pop	{r7}
    5dbc:	4770      	bx	lr

00005dbe <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5dbe:	b480      	push	{r7}
    5dc0:	b085      	sub	sp, #20
    5dc2:	af00      	add	r7, sp, #0
    5dc4:	6078      	str	r0, [r7, #4]
    5dc6:	460b      	mov	r3, r1
    5dc8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5dca:	2300      	movs	r3, #0
    5dcc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	8c1b      	ldrh	r3, [r3, #32]
    5dd2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    5dd4:	89fb      	ldrh	r3, [r7, #14]
    5dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5dda:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    5ddc:	887b      	ldrh	r3, [r7, #2]
    5dde:	011b      	lsls	r3, r3, #4
    5de0:	b29a      	uxth	r2, r3
    5de2:	89fb      	ldrh	r3, [r7, #14]
    5de4:	4313      	orrs	r3, r2
    5de6:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	89fa      	ldrh	r2, [r7, #14]
    5dec:	841a      	strh	r2, [r3, #32]
}
    5dee:	bf00      	nop
    5df0:	3714      	adds	r7, #20
    5df2:	46bd      	mov	sp, r7
    5df4:	bc80      	pop	{r7}
    5df6:	4770      	bx	lr

00005df8 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5df8:	b480      	push	{r7}
    5dfa:	b085      	sub	sp, #20
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
    5e00:	460b      	mov	r3, r1
    5e02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5e04:	2300      	movs	r3, #0
    5e06:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	8c1b      	ldrh	r3, [r3, #32]
    5e0c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    5e0e:	89fb      	ldrh	r3, [r7, #14]
    5e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5e14:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    5e16:	887b      	ldrh	r3, [r7, #2]
    5e18:	021b      	lsls	r3, r3, #8
    5e1a:	b29a      	uxth	r2, r3
    5e1c:	89fb      	ldrh	r3, [r7, #14]
    5e1e:	4313      	orrs	r3, r2
    5e20:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	89fa      	ldrh	r2, [r7, #14]
    5e26:	841a      	strh	r2, [r3, #32]
}
    5e28:	bf00      	nop
    5e2a:	3714      	adds	r7, #20
    5e2c:	46bd      	mov	sp, r7
    5e2e:	bc80      	pop	{r7}
    5e30:	4770      	bx	lr

00005e32 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    5e32:	b480      	push	{r7}
    5e34:	b085      	sub	sp, #20
    5e36:	af00      	add	r7, sp, #0
    5e38:	6078      	str	r0, [r7, #4]
    5e3a:	460b      	mov	r3, r1
    5e3c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5e3e:	2300      	movs	r3, #0
    5e40:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	8c1b      	ldrh	r3, [r3, #32]
    5e46:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    5e48:	89fb      	ldrh	r3, [r7, #14]
    5e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    5e4e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    5e50:	887b      	ldrh	r3, [r7, #2]
    5e52:	021b      	lsls	r3, r3, #8
    5e54:	b29a      	uxth	r2, r3
    5e56:	89fb      	ldrh	r3, [r7, #14]
    5e58:	4313      	orrs	r3, r2
    5e5a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	89fa      	ldrh	r2, [r7, #14]
    5e60:	841a      	strh	r2, [r3, #32]
}
    5e62:	bf00      	nop
    5e64:	3714      	adds	r7, #20
    5e66:	46bd      	mov	sp, r7
    5e68:	bc80      	pop	{r7}
    5e6a:	4770      	bx	lr

00005e6c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    5e6c:	b480      	push	{r7}
    5e6e:	b085      	sub	sp, #20
    5e70:	af00      	add	r7, sp, #0
    5e72:	6078      	str	r0, [r7, #4]
    5e74:	460b      	mov	r3, r1
    5e76:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    5e78:	2300      	movs	r3, #0
    5e7a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	8c1b      	ldrh	r3, [r3, #32]
    5e80:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    5e82:	89fb      	ldrh	r3, [r7, #14]
    5e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    5e88:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    5e8a:	887b      	ldrh	r3, [r7, #2]
    5e8c:	031b      	lsls	r3, r3, #12
    5e8e:	b29a      	uxth	r2, r3
    5e90:	89fb      	ldrh	r3, [r7, #14]
    5e92:	4313      	orrs	r3, r2
    5e94:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	89fa      	ldrh	r2, [r7, #14]
    5e9a:	841a      	strh	r2, [r3, #32]
}
    5e9c:	bf00      	nop
    5e9e:	3714      	adds	r7, #20
    5ea0:	46bd      	mov	sp, r7
    5ea2:	bc80      	pop	{r7}
    5ea4:	4770      	bx	lr

00005ea6 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    5ea6:	b480      	push	{r7}
    5ea8:	b085      	sub	sp, #20
    5eaa:	af00      	add	r7, sp, #0
    5eac:	6078      	str	r0, [r7, #4]
    5eae:	460b      	mov	r3, r1
    5eb0:	807b      	strh	r3, [r7, #2]
    5eb2:	4613      	mov	r3, r2
    5eb4:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    5eb6:	2300      	movs	r3, #0
    5eb8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    5eba:	887b      	ldrh	r3, [r7, #2]
    5ebc:	2201      	movs	r2, #1
    5ebe:	fa02 f303 	lsl.w	r3, r2, r3
    5ec2:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	8c1b      	ldrh	r3, [r3, #32]
    5ec8:	b29a      	uxth	r2, r3
    5eca:	89fb      	ldrh	r3, [r7, #14]
    5ecc:	43db      	mvns	r3, r3
    5ece:	b29b      	uxth	r3, r3
    5ed0:	4013      	ands	r3, r2
    5ed2:	b29a      	uxth	r2, r3
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	8c1b      	ldrh	r3, [r3, #32]
    5edc:	b29a      	uxth	r2, r3
    5ede:	8839      	ldrh	r1, [r7, #0]
    5ee0:	887b      	ldrh	r3, [r7, #2]
    5ee2:	fa01 f303 	lsl.w	r3, r1, r3
    5ee6:	b29b      	uxth	r3, r3
    5ee8:	4313      	orrs	r3, r2
    5eea:	b29a      	uxth	r2, r3
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	841a      	strh	r2, [r3, #32]
}
    5ef0:	bf00      	nop
    5ef2:	3714      	adds	r7, #20
    5ef4:	46bd      	mov	sp, r7
    5ef6:	bc80      	pop	{r7}
    5ef8:	4770      	bx	lr

00005efa <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    5efa:	b480      	push	{r7}
    5efc:	b085      	sub	sp, #20
    5efe:	af00      	add	r7, sp, #0
    5f00:	6078      	str	r0, [r7, #4]
    5f02:	460b      	mov	r3, r1
    5f04:	807b      	strh	r3, [r7, #2]
    5f06:	4613      	mov	r3, r2
    5f08:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    5f0a:	2300      	movs	r3, #0
    5f0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    5f0e:	887b      	ldrh	r3, [r7, #2]
    5f10:	2204      	movs	r2, #4
    5f12:	fa02 f303 	lsl.w	r3, r2, r3
    5f16:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	8c1b      	ldrh	r3, [r3, #32]
    5f1c:	b29a      	uxth	r2, r3
    5f1e:	89fb      	ldrh	r3, [r7, #14]
    5f20:	43db      	mvns	r3, r3
    5f22:	b29b      	uxth	r3, r3
    5f24:	4013      	ands	r3, r2
    5f26:	b29a      	uxth	r2, r3
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	8c1b      	ldrh	r3, [r3, #32]
    5f30:	b29a      	uxth	r2, r3
    5f32:	8839      	ldrh	r1, [r7, #0]
    5f34:	887b      	ldrh	r3, [r7, #2]
    5f36:	fa01 f303 	lsl.w	r3, r1, r3
    5f3a:	b29b      	uxth	r3, r3
    5f3c:	4313      	orrs	r3, r2
    5f3e:	b29a      	uxth	r2, r3
    5f40:	687b      	ldr	r3, [r7, #4]
    5f42:	841a      	strh	r2, [r3, #32]
}
    5f44:	bf00      	nop
    5f46:	3714      	adds	r7, #20
    5f48:	46bd      	mov	sp, r7
    5f4a:	bc80      	pop	{r7}
    5f4c:	4770      	bx	lr

00005f4e <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    5f4e:	b480      	push	{r7}
    5f50:	b085      	sub	sp, #20
    5f52:	af00      	add	r7, sp, #0
    5f54:	6078      	str	r0, [r7, #4]
    5f56:	460b      	mov	r3, r1
    5f58:	807b      	strh	r3, [r7, #2]
    5f5a:	4613      	mov	r3, r2
    5f5c:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    5f5e:	2300      	movs	r3, #0
    5f60:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    5f62:	2300      	movs	r3, #0
    5f64:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    5f6a:	68fb      	ldr	r3, [r7, #12]
    5f6c:	3318      	adds	r3, #24
    5f6e:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    5f70:	887b      	ldrh	r3, [r7, #2]
    5f72:	2201      	movs	r2, #1
    5f74:	fa02 f303 	lsl.w	r3, r2, r3
    5f78:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	8c1b      	ldrh	r3, [r3, #32]
    5f7e:	b29a      	uxth	r2, r3
    5f80:	897b      	ldrh	r3, [r7, #10]
    5f82:	43db      	mvns	r3, r3
    5f84:	b29b      	uxth	r3, r3
    5f86:	4013      	ands	r3, r2
    5f88:	b29a      	uxth	r2, r3
    5f8a:	687b      	ldr	r3, [r7, #4]
    5f8c:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    5f8e:	887b      	ldrh	r3, [r7, #2]
    5f90:	2b00      	cmp	r3, #0
    5f92:	d002      	beq.n	5f9a <TIM_SelectOCxM+0x4c>
    5f94:	887b      	ldrh	r3, [r7, #2]
    5f96:	2b08      	cmp	r3, #8
    5f98:	d113      	bne.n	5fc2 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
    5f9a:	887b      	ldrh	r3, [r7, #2]
    5f9c:	085b      	lsrs	r3, r3, #1
    5f9e:	b29b      	uxth	r3, r3
    5fa0:	461a      	mov	r2, r3
    5fa2:	68fb      	ldr	r3, [r7, #12]
    5fa4:	4413      	add	r3, r2
    5fa6:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    5fa8:	68fb      	ldr	r3, [r7, #12]
    5faa:	681a      	ldr	r2, [r3, #0]
    5fac:	68fb      	ldr	r3, [r7, #12]
    5fae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    5fb2:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    5fb4:	68fb      	ldr	r3, [r7, #12]
    5fb6:	6819      	ldr	r1, [r3, #0]
    5fb8:	883a      	ldrh	r2, [r7, #0]
    5fba:	68fb      	ldr	r3, [r7, #12]
    5fbc:	430a      	orrs	r2, r1
    5fbe:	601a      	str	r2, [r3, #0]
    5fc0:	e017      	b.n	5ff2 <TIM_SelectOCxM+0xa4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    5fc2:	887b      	ldrh	r3, [r7, #2]
    5fc4:	3b04      	subs	r3, #4
    5fc6:	b29b      	uxth	r3, r3
    5fc8:	085b      	lsrs	r3, r3, #1
    5fca:	b29b      	uxth	r3, r3
    5fcc:	461a      	mov	r2, r3
    5fce:	68fb      	ldr	r3, [r7, #12]
    5fd0:	4413      	add	r3, r2
    5fd2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    5fd4:	68fb      	ldr	r3, [r7, #12]
    5fd6:	681a      	ldr	r2, [r3, #0]
    5fd8:	68fb      	ldr	r3, [r7, #12]
    5fda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    5fde:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    5fe0:	68fb      	ldr	r3, [r7, #12]
    5fe2:	681a      	ldr	r2, [r3, #0]
    5fe4:	883b      	ldrh	r3, [r7, #0]
    5fe6:	021b      	lsls	r3, r3, #8
    5fe8:	b29b      	uxth	r3, r3
    5fea:	4619      	mov	r1, r3
    5fec:	68fb      	ldr	r3, [r7, #12]
    5fee:	430a      	orrs	r2, r1
    5ff0:	601a      	str	r2, [r3, #0]
  }
}
    5ff2:	bf00      	nop
    5ff4:	3714      	adds	r7, #20
    5ff6:	46bd      	mov	sp, r7
    5ff8:	bc80      	pop	{r7}
    5ffa:	4770      	bx	lr

00005ffc <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5ffc:	b480      	push	{r7}
    5ffe:	b083      	sub	sp, #12
    6000:	af00      	add	r7, sp, #0
    6002:	6078      	str	r0, [r7, #4]
    6004:	460b      	mov	r3, r1
    6006:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6008:	78fb      	ldrb	r3, [r7, #3]
    600a:	2b00      	cmp	r3, #0
    600c:	d008      	beq.n	6020 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	881b      	ldrh	r3, [r3, #0]
    6012:	b29b      	uxth	r3, r3
    6014:	f043 0302 	orr.w	r3, r3, #2
    6018:	b29a      	uxth	r2, r3
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
  }
}
    601e:	e007      	b.n	6030 <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	881b      	ldrh	r3, [r3, #0]
    6024:	b29b      	uxth	r3, r3
    6026:	f023 0302 	bic.w	r3, r3, #2
    602a:	b29a      	uxth	r2, r3
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	801a      	strh	r2, [r3, #0]
}
    6030:	bf00      	nop
    6032:	370c      	adds	r7, #12
    6034:	46bd      	mov	sp, r7
    6036:	bc80      	pop	{r7}
    6038:	4770      	bx	lr

0000603a <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    603a:	b480      	push	{r7}
    603c:	b083      	sub	sp, #12
    603e:	af00      	add	r7, sp, #0
    6040:	6078      	str	r0, [r7, #4]
    6042:	460b      	mov	r3, r1
    6044:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    6046:	887b      	ldrh	r3, [r7, #2]
    6048:	2b00      	cmp	r3, #0
    604a:	d008      	beq.n	605e <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	881b      	ldrh	r3, [r3, #0]
    6050:	b29b      	uxth	r3, r3
    6052:	f043 0304 	orr.w	r3, r3, #4
    6056:	b29a      	uxth	r2, r3
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
  }
}
    605c:	e007      	b.n	606e <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	881b      	ldrh	r3, [r3, #0]
    6062:	b29b      	uxth	r3, r3
    6064:	f023 0304 	bic.w	r3, r3, #4
    6068:	b29a      	uxth	r2, r3
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	801a      	strh	r2, [r3, #0]
}
    606e:	bf00      	nop
    6070:	370c      	adds	r7, #12
    6072:	46bd      	mov	sp, r7
    6074:	bc80      	pop	{r7}
    6076:	4770      	bx	lr

00006078 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    6078:	b480      	push	{r7}
    607a:	b083      	sub	sp, #12
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	460b      	mov	r3, r1
    6082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6084:	78fb      	ldrb	r3, [r7, #3]
    6086:	2b00      	cmp	r3, #0
    6088:	d008      	beq.n	609c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    608a:	687b      	ldr	r3, [r7, #4]
    608c:	889b      	ldrh	r3, [r3, #4]
    608e:	b29b      	uxth	r3, r3
    6090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6094:	b29a      	uxth	r2, r3
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
  }
}
    609a:	e007      	b.n	60ac <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	889b      	ldrh	r3, [r3, #4]
    60a0:	b29b      	uxth	r3, r3
    60a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    60a6:	b29a      	uxth	r2, r3
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	809a      	strh	r2, [r3, #4]
}
    60ac:	bf00      	nop
    60ae:	370c      	adds	r7, #12
    60b0:	46bd      	mov	sp, r7
    60b2:	bc80      	pop	{r7}
    60b4:	4770      	bx	lr

000060b6 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    60b6:	b480      	push	{r7}
    60b8:	b083      	sub	sp, #12
    60ba:	af00      	add	r7, sp, #0
    60bc:	6078      	str	r0, [r7, #4]
    60be:	460b      	mov	r3, r1
    60c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	881b      	ldrh	r3, [r3, #0]
    60c6:	b29b      	uxth	r3, r3
    60c8:	f023 0308 	bic.w	r3, r3, #8
    60cc:	b29a      	uxth	r2, r3
    60ce:	687b      	ldr	r3, [r7, #4]
    60d0:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	881b      	ldrh	r3, [r3, #0]
    60d6:	b29a      	uxth	r2, r3
    60d8:	887b      	ldrh	r3, [r7, #2]
    60da:	4313      	orrs	r3, r2
    60dc:	b29a      	uxth	r2, r3
    60de:	687b      	ldr	r3, [r7, #4]
    60e0:	801a      	strh	r2, [r3, #0]
}
    60e2:	bf00      	nop
    60e4:	370c      	adds	r7, #12
    60e6:	46bd      	mov	sp, r7
    60e8:	bc80      	pop	{r7}
    60ea:	4770      	bx	lr

000060ec <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    60ec:	b480      	push	{r7}
    60ee:	b083      	sub	sp, #12
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
    60f4:	460b      	mov	r3, r1
    60f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	889b      	ldrh	r3, [r3, #4]
    60fc:	b29b      	uxth	r3, r3
    60fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    6102:	b29a      	uxth	r2, r3
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    6108:	687b      	ldr	r3, [r7, #4]
    610a:	889b      	ldrh	r3, [r3, #4]
    610c:	b29a      	uxth	r2, r3
    610e:	887b      	ldrh	r3, [r7, #2]
    6110:	4313      	orrs	r3, r2
    6112:	b29a      	uxth	r2, r3
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	809a      	strh	r2, [r3, #4]
}
    6118:	bf00      	nop
    611a:	370c      	adds	r7, #12
    611c:	46bd      	mov	sp, r7
    611e:	bc80      	pop	{r7}
    6120:	4770      	bx	lr

00006122 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    6122:	b480      	push	{r7}
    6124:	b083      	sub	sp, #12
    6126:	af00      	add	r7, sp, #0
    6128:	6078      	str	r0, [r7, #4]
    612a:	460b      	mov	r3, r1
    612c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	891b      	ldrh	r3, [r3, #8]
    6132:	b29b      	uxth	r3, r3
    6134:	f023 0307 	bic.w	r3, r3, #7
    6138:	b29a      	uxth	r2, r3
    613a:	687b      	ldr	r3, [r7, #4]
    613c:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    613e:	687b      	ldr	r3, [r7, #4]
    6140:	891b      	ldrh	r3, [r3, #8]
    6142:	b29a      	uxth	r2, r3
    6144:	887b      	ldrh	r3, [r7, #2]
    6146:	4313      	orrs	r3, r2
    6148:	b29a      	uxth	r2, r3
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	811a      	strh	r2, [r3, #8]
}
    614e:	bf00      	nop
    6150:	370c      	adds	r7, #12
    6152:	46bd      	mov	sp, r7
    6154:	bc80      	pop	{r7}
    6156:	4770      	bx	lr

00006158 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    6158:	b480      	push	{r7}
    615a:	b083      	sub	sp, #12
    615c:	af00      	add	r7, sp, #0
    615e:	6078      	str	r0, [r7, #4]
    6160:	460b      	mov	r3, r1
    6162:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	891b      	ldrh	r3, [r3, #8]
    6168:	b29b      	uxth	r3, r3
    616a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    616e:	b29a      	uxth	r2, r3
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	891b      	ldrh	r3, [r3, #8]
    6178:	b29a      	uxth	r2, r3
    617a:	887b      	ldrh	r3, [r7, #2]
    617c:	4313      	orrs	r3, r2
    617e:	b29a      	uxth	r2, r3
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	811a      	strh	r2, [r3, #8]
}
    6184:	bf00      	nop
    6186:	370c      	adds	r7, #12
    6188:	46bd      	mov	sp, r7
    618a:	bc80      	pop	{r7}
    618c:	4770      	bx	lr

0000618e <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    618e:	b480      	push	{r7}
    6190:	b083      	sub	sp, #12
    6192:	af00      	add	r7, sp, #0
    6194:	6078      	str	r0, [r7, #4]
    6196:	460b      	mov	r3, r1
    6198:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	887a      	ldrh	r2, [r7, #2]
    619e:	849a      	strh	r2, [r3, #36]	; 0x24
}
    61a0:	bf00      	nop
    61a2:	370c      	adds	r7, #12
    61a4:	46bd      	mov	sp, r7
    61a6:	bc80      	pop	{r7}
    61a8:	4770      	bx	lr

000061aa <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    61aa:	b480      	push	{r7}
    61ac:	b083      	sub	sp, #12
    61ae:	af00      	add	r7, sp, #0
    61b0:	6078      	str	r0, [r7, #4]
    61b2:	460b      	mov	r3, r1
    61b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	887a      	ldrh	r2, [r7, #2]
    61ba:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    61bc:	bf00      	nop
    61be:	370c      	adds	r7, #12
    61c0:	46bd      	mov	sp, r7
    61c2:	bc80      	pop	{r7}
    61c4:	4770      	bx	lr

000061c6 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    61c6:	b480      	push	{r7}
    61c8:	b083      	sub	sp, #12
    61ca:	af00      	add	r7, sp, #0
    61cc:	6078      	str	r0, [r7, #4]
    61ce:	460b      	mov	r3, r1
    61d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	887a      	ldrh	r2, [r7, #2]
    61d6:	869a      	strh	r2, [r3, #52]	; 0x34
}
    61d8:	bf00      	nop
    61da:	370c      	adds	r7, #12
    61dc:	46bd      	mov	sp, r7
    61de:	bc80      	pop	{r7}
    61e0:	4770      	bx	lr

000061e2 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    61e2:	b480      	push	{r7}
    61e4:	b083      	sub	sp, #12
    61e6:	af00      	add	r7, sp, #0
    61e8:	6078      	str	r0, [r7, #4]
    61ea:	460b      	mov	r3, r1
    61ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	887a      	ldrh	r2, [r7, #2]
    61f2:	871a      	strh	r2, [r3, #56]	; 0x38
}
    61f4:	bf00      	nop
    61f6:	370c      	adds	r7, #12
    61f8:	46bd      	mov	sp, r7
    61fa:	bc80      	pop	{r7}
    61fc:	4770      	bx	lr

000061fe <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    61fe:	b480      	push	{r7}
    6200:	b083      	sub	sp, #12
    6202:	af00      	add	r7, sp, #0
    6204:	6078      	str	r0, [r7, #4]
    6206:	460b      	mov	r3, r1
    6208:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	887a      	ldrh	r2, [r7, #2]
    620e:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    6210:	bf00      	nop
    6212:	370c      	adds	r7, #12
    6214:	46bd      	mov	sp, r7
    6216:	bc80      	pop	{r7}
    6218:	4770      	bx	lr

0000621a <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    621a:	b480      	push	{r7}
    621c:	b083      	sub	sp, #12
    621e:	af00      	add	r7, sp, #0
    6220:	6078      	str	r0, [r7, #4]
    6222:	460b      	mov	r3, r1
    6224:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	887a      	ldrh	r2, [r7, #2]
    622a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    622e:	bf00      	nop
    6230:	370c      	adds	r7, #12
    6232:	46bd      	mov	sp, r7
    6234:	bc80      	pop	{r7}
    6236:	4770      	bx	lr

00006238 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    6238:	b480      	push	{r7}
    623a:	b083      	sub	sp, #12
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	460b      	mov	r3, r1
    6242:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	8b1b      	ldrh	r3, [r3, #24]
    6248:	b29b      	uxth	r3, r3
    624a:	f023 030c 	bic.w	r3, r3, #12
    624e:	b29a      	uxth	r2, r3
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	8b1b      	ldrh	r3, [r3, #24]
    6258:	b29a      	uxth	r2, r3
    625a:	887b      	ldrh	r3, [r7, #2]
    625c:	4313      	orrs	r3, r2
    625e:	b29a      	uxth	r2, r3
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	831a      	strh	r2, [r3, #24]
}
    6264:	bf00      	nop
    6266:	370c      	adds	r7, #12
    6268:	46bd      	mov	sp, r7
    626a:	bc80      	pop	{r7}
    626c:	4770      	bx	lr

0000626e <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    626e:	b480      	push	{r7}
    6270:	b083      	sub	sp, #12
    6272:	af00      	add	r7, sp, #0
    6274:	6078      	str	r0, [r7, #4]
    6276:	460b      	mov	r3, r1
    6278:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	8b1b      	ldrh	r3, [r3, #24]
    627e:	b29b      	uxth	r3, r3
    6280:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    6284:	b29a      	uxth	r2, r3
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	8b1b      	ldrh	r3, [r3, #24]
    628e:	b29a      	uxth	r2, r3
    6290:	887b      	ldrh	r3, [r7, #2]
    6292:	021b      	lsls	r3, r3, #8
    6294:	b29b      	uxth	r3, r3
    6296:	4313      	orrs	r3, r2
    6298:	b29a      	uxth	r2, r3
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	831a      	strh	r2, [r3, #24]
}
    629e:	bf00      	nop
    62a0:	370c      	adds	r7, #12
    62a2:	46bd      	mov	sp, r7
    62a4:	bc80      	pop	{r7}
    62a6:	4770      	bx	lr

000062a8 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    62a8:	b480      	push	{r7}
    62aa:	b083      	sub	sp, #12
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
    62b0:	460b      	mov	r3, r1
    62b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	8b9b      	ldrh	r3, [r3, #28]
    62b8:	b29b      	uxth	r3, r3
    62ba:	f023 030c 	bic.w	r3, r3, #12
    62be:	b29a      	uxth	r2, r3
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	8b9b      	ldrh	r3, [r3, #28]
    62c8:	b29a      	uxth	r2, r3
    62ca:	887b      	ldrh	r3, [r7, #2]
    62cc:	4313      	orrs	r3, r2
    62ce:	b29a      	uxth	r2, r3
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	839a      	strh	r2, [r3, #28]
}
    62d4:	bf00      	nop
    62d6:	370c      	adds	r7, #12
    62d8:	46bd      	mov	sp, r7
    62da:	bc80      	pop	{r7}
    62dc:	4770      	bx	lr

000062de <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    62de:	b480      	push	{r7}
    62e0:	b083      	sub	sp, #12
    62e2:	af00      	add	r7, sp, #0
    62e4:	6078      	str	r0, [r7, #4]
    62e6:	460b      	mov	r3, r1
    62e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    62ea:	687b      	ldr	r3, [r7, #4]
    62ec:	8b9b      	ldrh	r3, [r3, #28]
    62ee:	b29b      	uxth	r3, r3
    62f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    62f4:	b29a      	uxth	r2, r3
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	8b9b      	ldrh	r3, [r3, #28]
    62fe:	b29a      	uxth	r2, r3
    6300:	887b      	ldrh	r3, [r7, #2]
    6302:	021b      	lsls	r3, r3, #8
    6304:	b29b      	uxth	r3, r3
    6306:	4313      	orrs	r3, r2
    6308:	b29a      	uxth	r2, r3
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	839a      	strh	r2, [r3, #28]
}
    630e:	bf00      	nop
    6310:	370c      	adds	r7, #12
    6312:	46bd      	mov	sp, r7
    6314:	bc80      	pop	{r7}
    6316:	4770      	bx	lr

00006318 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    6318:	b480      	push	{r7}
    631a:	b083      	sub	sp, #12
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
    6320:	460b      	mov	r3, r1
    6322:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	881b      	ldrh	r3, [r3, #0]
    6328:	b29b      	uxth	r3, r3
    632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    632e:	b29a      	uxth	r2, r3
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	881b      	ldrh	r3, [r3, #0]
    6338:	b29a      	uxth	r2, r3
    633a:	887b      	ldrh	r3, [r7, #2]
    633c:	4313      	orrs	r3, r2
    633e:	b29a      	uxth	r2, r3
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	801a      	strh	r2, [r3, #0]
}
    6344:	bf00      	nop
    6346:	370c      	adds	r7, #12
    6348:	46bd      	mov	sp, r7
    634a:	bc80      	pop	{r7}
    634c:	4770      	bx	lr

0000634e <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    634e:	b480      	push	{r7}
    6350:	b083      	sub	sp, #12
    6352:	af00      	add	r7, sp, #0
    6354:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    635a:	b29b      	uxth	r3, r3
}
    635c:	4618      	mov	r0, r3
    635e:	370c      	adds	r7, #12
    6360:	46bd      	mov	sp, r7
    6362:	bc80      	pop	{r7}
    6364:	4770      	bx	lr

00006366 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    6366:	b480      	push	{r7}
    6368:	b083      	sub	sp, #12
    636a:	af00      	add	r7, sp, #0
    636c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    6372:	b29b      	uxth	r3, r3
}
    6374:	4618      	mov	r0, r3
    6376:	370c      	adds	r7, #12
    6378:	46bd      	mov	sp, r7
    637a:	bc80      	pop	{r7}
    637c:	4770      	bx	lr

0000637e <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    637e:	b480      	push	{r7}
    6380:	b083      	sub	sp, #12
    6382:	af00      	add	r7, sp, #0
    6384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    638a:	b29b      	uxth	r3, r3
}
    638c:	4618      	mov	r0, r3
    638e:	370c      	adds	r7, #12
    6390:	46bd      	mov	sp, r7
    6392:	bc80      	pop	{r7}
    6394:	4770      	bx	lr

00006396 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    6396:	b480      	push	{r7}
    6398:	b083      	sub	sp, #12
    639a:	af00      	add	r7, sp, #0
    639c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    63a4:	b29b      	uxth	r3, r3
}
    63a6:	4618      	mov	r0, r3
    63a8:	370c      	adds	r7, #12
    63aa:	46bd      	mov	sp, r7
    63ac:	bc80      	pop	{r7}
    63ae:	4770      	bx	lr

000063b0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    63b0:	b480      	push	{r7}
    63b2:	b083      	sub	sp, #12
    63b4:	af00      	add	r7, sp, #0
    63b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    63bc:	b29b      	uxth	r3, r3
}
    63be:	4618      	mov	r0, r3
    63c0:	370c      	adds	r7, #12
    63c2:	46bd      	mov	sp, r7
    63c4:	bc80      	pop	{r7}
    63c6:	4770      	bx	lr

000063c8 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    63c8:	b480      	push	{r7}
    63ca:	b083      	sub	sp, #12
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    63d4:	b29b      	uxth	r3, r3
}
    63d6:	4618      	mov	r0, r3
    63d8:	370c      	adds	r7, #12
    63da:	46bd      	mov	sp, r7
    63dc:	bc80      	pop	{r7}
    63de:	4770      	bx	lr

000063e0 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    63e0:	b480      	push	{r7}
    63e2:	b085      	sub	sp, #20
    63e4:	af00      	add	r7, sp, #0
    63e6:	6078      	str	r0, [r7, #4]
    63e8:	460b      	mov	r3, r1
    63ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    63ec:	2300      	movs	r3, #0
    63ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	8a1b      	ldrh	r3, [r3, #16]
    63f4:	b29a      	uxth	r2, r3
    63f6:	887b      	ldrh	r3, [r7, #2]
    63f8:	4013      	ands	r3, r2
    63fa:	b29b      	uxth	r3, r3
    63fc:	2b00      	cmp	r3, #0
    63fe:	d002      	beq.n	6406 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    6400:	2301      	movs	r3, #1
    6402:	73fb      	strb	r3, [r7, #15]
    6404:	e001      	b.n	640a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    6406:	2300      	movs	r3, #0
    6408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    640a:	7bfb      	ldrb	r3, [r7, #15]
}
    640c:	4618      	mov	r0, r3
    640e:	3714      	adds	r7, #20
    6410:	46bd      	mov	sp, r7
    6412:	bc80      	pop	{r7}
    6414:	4770      	bx	lr

00006416 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    6416:	b480      	push	{r7}
    6418:	b083      	sub	sp, #12
    641a:	af00      	add	r7, sp, #0
    641c:	6078      	str	r0, [r7, #4]
    641e:	460b      	mov	r3, r1
    6420:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    6422:	887b      	ldrh	r3, [r7, #2]
    6424:	43db      	mvns	r3, r3
    6426:	b29a      	uxth	r2, r3
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	821a      	strh	r2, [r3, #16]
}
    642c:	bf00      	nop
    642e:	370c      	adds	r7, #12
    6430:	46bd      	mov	sp, r7
    6432:	bc80      	pop	{r7}
    6434:	4770      	bx	lr

00006436 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    6436:	b480      	push	{r7}
    6438:	b085      	sub	sp, #20
    643a:	af00      	add	r7, sp, #0
    643c:	6078      	str	r0, [r7, #4]
    643e:	460b      	mov	r3, r1
    6440:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    6442:	2300      	movs	r3, #0
    6444:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    6446:	2300      	movs	r3, #0
    6448:	81bb      	strh	r3, [r7, #12]
    644a:	2300      	movs	r3, #0
    644c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	8a1b      	ldrh	r3, [r3, #16]
    6452:	b29a      	uxth	r2, r3
    6454:	887b      	ldrh	r3, [r7, #2]
    6456:	4013      	ands	r3, r2
    6458:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	899b      	ldrh	r3, [r3, #12]
    645e:	b29a      	uxth	r2, r3
    6460:	887b      	ldrh	r3, [r7, #2]
    6462:	4013      	ands	r3, r2
    6464:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    6466:	89bb      	ldrh	r3, [r7, #12]
    6468:	2b00      	cmp	r3, #0
    646a:	d005      	beq.n	6478 <TIM_GetITStatus+0x42>
    646c:	897b      	ldrh	r3, [r7, #10]
    646e:	2b00      	cmp	r3, #0
    6470:	d002      	beq.n	6478 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
    6472:	2301      	movs	r3, #1
    6474:	73fb      	strb	r3, [r7, #15]
    6476:	e001      	b.n	647c <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    6478:	2300      	movs	r3, #0
    647a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    647c:	7bfb      	ldrb	r3, [r7, #15]
}
    647e:	4618      	mov	r0, r3
    6480:	3714      	adds	r7, #20
    6482:	46bd      	mov	sp, r7
    6484:	bc80      	pop	{r7}
    6486:	4770      	bx	lr

00006488 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    6488:	b480      	push	{r7}
    648a:	b083      	sub	sp, #12
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
    6490:	460b      	mov	r3, r1
    6492:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    6494:	887b      	ldrh	r3, [r7, #2]
    6496:	43db      	mvns	r3, r3
    6498:	b29a      	uxth	r2, r3
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	821a      	strh	r2, [r3, #16]
}
    649e:	bf00      	nop
    64a0:	370c      	adds	r7, #12
    64a2:	46bd      	mov	sp, r7
    64a4:	bc80      	pop	{r7}
    64a6:	4770      	bx	lr

000064a8 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    64a8:	b480      	push	{r7}
    64aa:	b087      	sub	sp, #28
    64ac:	af00      	add	r7, sp, #0
    64ae:	60f8      	str	r0, [r7, #12]
    64b0:	4608      	mov	r0, r1
    64b2:	4611      	mov	r1, r2
    64b4:	461a      	mov	r2, r3
    64b6:	4603      	mov	r3, r0
    64b8:	817b      	strh	r3, [r7, #10]
    64ba:	460b      	mov	r3, r1
    64bc:	813b      	strh	r3, [r7, #8]
    64be:	4613      	mov	r3, r2
    64c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    64c2:	2300      	movs	r3, #0
    64c4:	82bb      	strh	r3, [r7, #20]
    64c6:	2300      	movs	r3, #0
    64c8:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    64ca:	68fb      	ldr	r3, [r7, #12]
    64cc:	8c1b      	ldrh	r3, [r3, #32]
    64ce:	b29b      	uxth	r3, r3
    64d0:	f023 0301 	bic.w	r3, r3, #1
    64d4:	b29a      	uxth	r2, r3
    64d6:	68fb      	ldr	r3, [r7, #12]
    64d8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	8b1b      	ldrh	r3, [r3, #24]
    64de:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    64e0:	68fb      	ldr	r3, [r7, #12]
    64e2:	8c1b      	ldrh	r3, [r3, #32]
    64e4:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    64e6:	8abb      	ldrh	r3, [r7, #20]
    64e8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    64ec:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    64ee:	88fb      	ldrh	r3, [r7, #6]
    64f0:	011b      	lsls	r3, r3, #4
    64f2:	b29a      	uxth	r2, r3
    64f4:	893b      	ldrh	r3, [r7, #8]
    64f6:	4313      	orrs	r3, r2
    64f8:	b29a      	uxth	r2, r3
    64fa:	8abb      	ldrh	r3, [r7, #20]
    64fc:	4313      	orrs	r3, r2
    64fe:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    6500:	68fb      	ldr	r3, [r7, #12]
    6502:	4a1c      	ldr	r2, [pc, #112]	; (6574 <TI1_Config+0xcc>)
    6504:	4293      	cmp	r3, r2
    6506:	d013      	beq.n	6530 <TI1_Config+0x88>
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	4a1b      	ldr	r2, [pc, #108]	; (6578 <TI1_Config+0xd0>)
    650c:	4293      	cmp	r3, r2
    650e:	d00f      	beq.n	6530 <TI1_Config+0x88>
    6510:	68fb      	ldr	r3, [r7, #12]
    6512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    6516:	d00b      	beq.n	6530 <TI1_Config+0x88>
    6518:	68fb      	ldr	r3, [r7, #12]
    651a:	4a18      	ldr	r2, [pc, #96]	; (657c <TI1_Config+0xd4>)
    651c:	4293      	cmp	r3, r2
    651e:	d007      	beq.n	6530 <TI1_Config+0x88>
    6520:	68fb      	ldr	r3, [r7, #12]
    6522:	4a17      	ldr	r2, [pc, #92]	; (6580 <TI1_Config+0xd8>)
    6524:	4293      	cmp	r3, r2
    6526:	d003      	beq.n	6530 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	4a16      	ldr	r2, [pc, #88]	; (6584 <TI1_Config+0xdc>)
    652c:	4293      	cmp	r3, r2
    652e:	d10b      	bne.n	6548 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    6530:	8afb      	ldrh	r3, [r7, #22]
    6532:	f023 0302 	bic.w	r3, r3, #2
    6536:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    6538:	897a      	ldrh	r2, [r7, #10]
    653a:	8afb      	ldrh	r3, [r7, #22]
    653c:	4313      	orrs	r3, r2
    653e:	b29b      	uxth	r3, r3
    6540:	f043 0301 	orr.w	r3, r3, #1
    6544:	82fb      	strh	r3, [r7, #22]
    6546:	e00a      	b.n	655e <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    6548:	8afb      	ldrh	r3, [r7, #22]
    654a:	f023 030a 	bic.w	r3, r3, #10
    654e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    6550:	897a      	ldrh	r2, [r7, #10]
    6552:	8afb      	ldrh	r3, [r7, #22]
    6554:	4313      	orrs	r3, r2
    6556:	b29b      	uxth	r3, r3
    6558:	f043 0301 	orr.w	r3, r3, #1
    655c:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    655e:	68fb      	ldr	r3, [r7, #12]
    6560:	8aba      	ldrh	r2, [r7, #20]
    6562:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	8afa      	ldrh	r2, [r7, #22]
    6568:	841a      	strh	r2, [r3, #32]
}
    656a:	bf00      	nop
    656c:	371c      	adds	r7, #28
    656e:	46bd      	mov	sp, r7
    6570:	bc80      	pop	{r7}
    6572:	4770      	bx	lr
    6574:	40012c00 	.word	0x40012c00
    6578:	40013400 	.word	0x40013400
    657c:	40000400 	.word	0x40000400
    6580:	40000800 	.word	0x40000800
    6584:	40000c00 	.word	0x40000c00

00006588 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    6588:	b480      	push	{r7}
    658a:	b087      	sub	sp, #28
    658c:	af00      	add	r7, sp, #0
    658e:	60f8      	str	r0, [r7, #12]
    6590:	4608      	mov	r0, r1
    6592:	4611      	mov	r1, r2
    6594:	461a      	mov	r2, r3
    6596:	4603      	mov	r3, r0
    6598:	817b      	strh	r3, [r7, #10]
    659a:	460b      	mov	r3, r1
    659c:	813b      	strh	r3, [r7, #8]
    659e:	4613      	mov	r3, r2
    65a0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    65a2:	2300      	movs	r3, #0
    65a4:	82bb      	strh	r3, [r7, #20]
    65a6:	2300      	movs	r3, #0
    65a8:	82fb      	strh	r3, [r7, #22]
    65aa:	2300      	movs	r3, #0
    65ac:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    65ae:	68fb      	ldr	r3, [r7, #12]
    65b0:	8c1b      	ldrh	r3, [r3, #32]
    65b2:	b29b      	uxth	r3, r3
    65b4:	f023 0310 	bic.w	r3, r3, #16
    65b8:	b29a      	uxth	r2, r3
    65ba:	68fb      	ldr	r3, [r7, #12]
    65bc:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    65be:	68fb      	ldr	r3, [r7, #12]
    65c0:	8b1b      	ldrh	r3, [r3, #24]
    65c2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    65c4:	68fb      	ldr	r3, [r7, #12]
    65c6:	8c1b      	ldrh	r3, [r3, #32]
    65c8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    65ca:	897b      	ldrh	r3, [r7, #10]
    65cc:	011b      	lsls	r3, r3, #4
    65ce:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    65d0:	8abb      	ldrh	r3, [r7, #20]
    65d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    65d6:	051b      	lsls	r3, r3, #20
    65d8:	0d1b      	lsrs	r3, r3, #20
    65da:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    65dc:	88fb      	ldrh	r3, [r7, #6]
    65de:	031b      	lsls	r3, r3, #12
    65e0:	b29a      	uxth	r2, r3
    65e2:	8abb      	ldrh	r3, [r7, #20]
    65e4:	4313      	orrs	r3, r2
    65e6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    65e8:	893b      	ldrh	r3, [r7, #8]
    65ea:	021b      	lsls	r3, r3, #8
    65ec:	b29a      	uxth	r2, r3
    65ee:	8abb      	ldrh	r3, [r7, #20]
    65f0:	4313      	orrs	r3, r2
    65f2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    65f4:	68fb      	ldr	r3, [r7, #12]
    65f6:	4a1c      	ldr	r2, [pc, #112]	; (6668 <TI2_Config+0xe0>)
    65f8:	4293      	cmp	r3, r2
    65fa:	d013      	beq.n	6624 <TI2_Config+0x9c>
    65fc:	68fb      	ldr	r3, [r7, #12]
    65fe:	4a1b      	ldr	r2, [pc, #108]	; (666c <TI2_Config+0xe4>)
    6600:	4293      	cmp	r3, r2
    6602:	d00f      	beq.n	6624 <TI2_Config+0x9c>
    6604:	68fb      	ldr	r3, [r7, #12]
    6606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    660a:	d00b      	beq.n	6624 <TI2_Config+0x9c>
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	4a18      	ldr	r2, [pc, #96]	; (6670 <TI2_Config+0xe8>)
    6610:	4293      	cmp	r3, r2
    6612:	d007      	beq.n	6624 <TI2_Config+0x9c>
    6614:	68fb      	ldr	r3, [r7, #12]
    6616:	4a17      	ldr	r2, [pc, #92]	; (6674 <TI2_Config+0xec>)
    6618:	4293      	cmp	r3, r2
    661a:	d003      	beq.n	6624 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    661c:	68fb      	ldr	r3, [r7, #12]
    661e:	4a16      	ldr	r2, [pc, #88]	; (6678 <TI2_Config+0xf0>)
    6620:	4293      	cmp	r3, r2
    6622:	d10b      	bne.n	663c <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    6624:	8afb      	ldrh	r3, [r7, #22]
    6626:	f023 0320 	bic.w	r3, r3, #32
    662a:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    662c:	8a7a      	ldrh	r2, [r7, #18]
    662e:	8afb      	ldrh	r3, [r7, #22]
    6630:	4313      	orrs	r3, r2
    6632:	b29b      	uxth	r3, r3
    6634:	f043 0310 	orr.w	r3, r3, #16
    6638:	82fb      	strh	r3, [r7, #22]
    663a:	e00a      	b.n	6652 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    663c:	8afb      	ldrh	r3, [r7, #22]
    663e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    6642:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    6644:	897a      	ldrh	r2, [r7, #10]
    6646:	8afb      	ldrh	r3, [r7, #22]
    6648:	4313      	orrs	r3, r2
    664a:	b29b      	uxth	r3, r3
    664c:	f043 0310 	orr.w	r3, r3, #16
    6650:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    6652:	68fb      	ldr	r3, [r7, #12]
    6654:	8aba      	ldrh	r2, [r7, #20]
    6656:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	8afa      	ldrh	r2, [r7, #22]
    665c:	841a      	strh	r2, [r3, #32]
}
    665e:	bf00      	nop
    6660:	371c      	adds	r7, #28
    6662:	46bd      	mov	sp, r7
    6664:	bc80      	pop	{r7}
    6666:	4770      	bx	lr
    6668:	40012c00 	.word	0x40012c00
    666c:	40013400 	.word	0x40013400
    6670:	40000400 	.word	0x40000400
    6674:	40000800 	.word	0x40000800
    6678:	40000c00 	.word	0x40000c00

0000667c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    667c:	b480      	push	{r7}
    667e:	b087      	sub	sp, #28
    6680:	af00      	add	r7, sp, #0
    6682:	60f8      	str	r0, [r7, #12]
    6684:	4608      	mov	r0, r1
    6686:	4611      	mov	r1, r2
    6688:	461a      	mov	r2, r3
    668a:	4603      	mov	r3, r0
    668c:	817b      	strh	r3, [r7, #10]
    668e:	460b      	mov	r3, r1
    6690:	813b      	strh	r3, [r7, #8]
    6692:	4613      	mov	r3, r2
    6694:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    6696:	2300      	movs	r3, #0
    6698:	82bb      	strh	r3, [r7, #20]
    669a:	2300      	movs	r3, #0
    669c:	82fb      	strh	r3, [r7, #22]
    669e:	2300      	movs	r3, #0
    66a0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    66a2:	68fb      	ldr	r3, [r7, #12]
    66a4:	8c1b      	ldrh	r3, [r3, #32]
    66a6:	b29b      	uxth	r3, r3
    66a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66ac:	b29a      	uxth	r2, r3
    66ae:	68fb      	ldr	r3, [r7, #12]
    66b0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    66b2:	68fb      	ldr	r3, [r7, #12]
    66b4:	8b9b      	ldrh	r3, [r3, #28]
    66b6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    66b8:	68fb      	ldr	r3, [r7, #12]
    66ba:	8c1b      	ldrh	r3, [r3, #32]
    66bc:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    66be:	897b      	ldrh	r3, [r7, #10]
    66c0:	021b      	lsls	r3, r3, #8
    66c2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    66c4:	8abb      	ldrh	r3, [r7, #20]
    66c6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    66ca:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    66cc:	88fb      	ldrh	r3, [r7, #6]
    66ce:	011b      	lsls	r3, r3, #4
    66d0:	b29a      	uxth	r2, r3
    66d2:	893b      	ldrh	r3, [r7, #8]
    66d4:	4313      	orrs	r3, r2
    66d6:	b29a      	uxth	r2, r3
    66d8:	8abb      	ldrh	r3, [r7, #20]
    66da:	4313      	orrs	r3, r2
    66dc:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    66de:	68fb      	ldr	r3, [r7, #12]
    66e0:	4a1c      	ldr	r2, [pc, #112]	; (6754 <TI3_Config+0xd8>)
    66e2:	4293      	cmp	r3, r2
    66e4:	d013      	beq.n	670e <TI3_Config+0x92>
    66e6:	68fb      	ldr	r3, [r7, #12]
    66e8:	4a1b      	ldr	r2, [pc, #108]	; (6758 <TI3_Config+0xdc>)
    66ea:	4293      	cmp	r3, r2
    66ec:	d00f      	beq.n	670e <TI3_Config+0x92>
    66ee:	68fb      	ldr	r3, [r7, #12]
    66f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    66f4:	d00b      	beq.n	670e <TI3_Config+0x92>
    66f6:	68fb      	ldr	r3, [r7, #12]
    66f8:	4a18      	ldr	r2, [pc, #96]	; (675c <TI3_Config+0xe0>)
    66fa:	4293      	cmp	r3, r2
    66fc:	d007      	beq.n	670e <TI3_Config+0x92>
    66fe:	68fb      	ldr	r3, [r7, #12]
    6700:	4a17      	ldr	r2, [pc, #92]	; (6760 <TI3_Config+0xe4>)
    6702:	4293      	cmp	r3, r2
    6704:	d003      	beq.n	670e <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
    6706:	68fb      	ldr	r3, [r7, #12]
    6708:	4a16      	ldr	r2, [pc, #88]	; (6764 <TI3_Config+0xe8>)
    670a:	4293      	cmp	r3, r2
    670c:	d10b      	bne.n	6726 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    670e:	8afb      	ldrh	r3, [r7, #22]
    6710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    6714:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    6716:	8a7a      	ldrh	r2, [r7, #18]
    6718:	8afb      	ldrh	r3, [r7, #22]
    671a:	4313      	orrs	r3, r2
    671c:	b29b      	uxth	r3, r3
    671e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6722:	82fb      	strh	r3, [r7, #22]
    6724:	e00a      	b.n	673c <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    6726:	8afb      	ldrh	r3, [r7, #22]
    6728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    672c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    672e:	897a      	ldrh	r2, [r7, #10]
    6730:	8afb      	ldrh	r3, [r7, #22]
    6732:	4313      	orrs	r3, r2
    6734:	b29b      	uxth	r3, r3
    6736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    673a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    673c:	68fb      	ldr	r3, [r7, #12]
    673e:	8aba      	ldrh	r2, [r7, #20]
    6740:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    6742:	68fb      	ldr	r3, [r7, #12]
    6744:	8afa      	ldrh	r2, [r7, #22]
    6746:	841a      	strh	r2, [r3, #32]
}
    6748:	bf00      	nop
    674a:	371c      	adds	r7, #28
    674c:	46bd      	mov	sp, r7
    674e:	bc80      	pop	{r7}
    6750:	4770      	bx	lr
    6752:	bf00      	nop
    6754:	40012c00 	.word	0x40012c00
    6758:	40013400 	.word	0x40013400
    675c:	40000400 	.word	0x40000400
    6760:	40000800 	.word	0x40000800
    6764:	40000c00 	.word	0x40000c00

00006768 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    6768:	b480      	push	{r7}
    676a:	b087      	sub	sp, #28
    676c:	af00      	add	r7, sp, #0
    676e:	60f8      	str	r0, [r7, #12]
    6770:	4608      	mov	r0, r1
    6772:	4611      	mov	r1, r2
    6774:	461a      	mov	r2, r3
    6776:	4603      	mov	r3, r0
    6778:	817b      	strh	r3, [r7, #10]
    677a:	460b      	mov	r3, r1
    677c:	813b      	strh	r3, [r7, #8]
    677e:	4613      	mov	r3, r2
    6780:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    6782:	2300      	movs	r3, #0
    6784:	82bb      	strh	r3, [r7, #20]
    6786:	2300      	movs	r3, #0
    6788:	82fb      	strh	r3, [r7, #22]
    678a:	2300      	movs	r3, #0
    678c:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    678e:	68fb      	ldr	r3, [r7, #12]
    6790:	8c1b      	ldrh	r3, [r3, #32]
    6792:	b29b      	uxth	r3, r3
    6794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    6798:	b29a      	uxth	r2, r3
    679a:	68fb      	ldr	r3, [r7, #12]
    679c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    679e:	68fb      	ldr	r3, [r7, #12]
    67a0:	8b9b      	ldrh	r3, [r3, #28]
    67a2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    67a4:	68fb      	ldr	r3, [r7, #12]
    67a6:	8c1b      	ldrh	r3, [r3, #32]
    67a8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    67aa:	897b      	ldrh	r3, [r7, #10]
    67ac:	031b      	lsls	r3, r3, #12
    67ae:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    67b0:	8abb      	ldrh	r3, [r7, #20]
    67b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    67b6:	051b      	lsls	r3, r3, #20
    67b8:	0d1b      	lsrs	r3, r3, #20
    67ba:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    67bc:	893b      	ldrh	r3, [r7, #8]
    67be:	021b      	lsls	r3, r3, #8
    67c0:	b29a      	uxth	r2, r3
    67c2:	8abb      	ldrh	r3, [r7, #20]
    67c4:	4313      	orrs	r3, r2
    67c6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    67c8:	88fb      	ldrh	r3, [r7, #6]
    67ca:	031b      	lsls	r3, r3, #12
    67cc:	b29a      	uxth	r2, r3
    67ce:	8abb      	ldrh	r3, [r7, #20]
    67d0:	4313      	orrs	r3, r2
    67d2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    67d4:	68fb      	ldr	r3, [r7, #12]
    67d6:	4a1d      	ldr	r2, [pc, #116]	; (684c <TI4_Config+0xe4>)
    67d8:	4293      	cmp	r3, r2
    67da:	d013      	beq.n	6804 <TI4_Config+0x9c>
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	4a1c      	ldr	r2, [pc, #112]	; (6850 <TI4_Config+0xe8>)
    67e0:	4293      	cmp	r3, r2
    67e2:	d00f      	beq.n	6804 <TI4_Config+0x9c>
    67e4:	68fb      	ldr	r3, [r7, #12]
    67e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    67ea:	d00b      	beq.n	6804 <TI4_Config+0x9c>
    67ec:	68fb      	ldr	r3, [r7, #12]
    67ee:	4a19      	ldr	r2, [pc, #100]	; (6854 <TI4_Config+0xec>)
    67f0:	4293      	cmp	r3, r2
    67f2:	d007      	beq.n	6804 <TI4_Config+0x9c>
    67f4:	68fb      	ldr	r3, [r7, #12]
    67f6:	4a18      	ldr	r2, [pc, #96]	; (6858 <TI4_Config+0xf0>)
    67f8:	4293      	cmp	r3, r2
    67fa:	d003      	beq.n	6804 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
    67fc:	68fb      	ldr	r3, [r7, #12]
    67fe:	4a17      	ldr	r2, [pc, #92]	; (685c <TI4_Config+0xf4>)
    6800:	4293      	cmp	r3, r2
    6802:	d10b      	bne.n	681c <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    6804:	8afb      	ldrh	r3, [r7, #22]
    6806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    680a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    680c:	8a7a      	ldrh	r2, [r7, #18]
    680e:	8afb      	ldrh	r3, [r7, #22]
    6810:	4313      	orrs	r3, r2
    6812:	b29b      	uxth	r3, r3
    6814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6818:	82fb      	strh	r3, [r7, #22]
    681a:	e00c      	b.n	6836 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    681c:	8afb      	ldrh	r3, [r7, #22]
    681e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    6822:	045b      	lsls	r3, r3, #17
    6824:	0c5b      	lsrs	r3, r3, #17
    6826:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    6828:	897a      	ldrh	r2, [r7, #10]
    682a:	8afb      	ldrh	r3, [r7, #22]
    682c:	4313      	orrs	r3, r2
    682e:	b29b      	uxth	r3, r3
    6830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6834:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    6836:	68fb      	ldr	r3, [r7, #12]
    6838:	8aba      	ldrh	r2, [r7, #20]
    683a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    683c:	68fb      	ldr	r3, [r7, #12]
    683e:	8afa      	ldrh	r2, [r7, #22]
    6840:	841a      	strh	r2, [r3, #32]
}
    6842:	bf00      	nop
    6844:	371c      	adds	r7, #28
    6846:	46bd      	mov	sp, r7
    6848:	bc80      	pop	{r7}
    684a:	4770      	bx	lr
    684c:	40012c00 	.word	0x40012c00
    6850:	40013400 	.word	0x40013400
    6854:	40000400 	.word	0x40000400
    6858:	40000800 	.word	0x40000800
    685c:	40000c00 	.word	0x40000c00

00006860 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    6860:	b480      	push	{r7}
    6862:	b083      	sub	sp, #12
    6864:	af00      	add	r7, sp, #0
    6866:	4603      	mov	r3, r0
    6868:	460a      	mov	r2, r1
    686a:	80fb      	strh	r3, [r7, #6]
    686c:	4613      	mov	r3, r2
    686e:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    6870:	797b      	ldrb	r3, [r7, #5]
    6872:	2b00      	cmp	r3, #0
    6874:	d008      	beq.n	6888 <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
    6876:	4b0c      	ldr	r3, [pc, #48]	; (68a8 <RTC_ITConfig+0x48>)
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	b29a      	uxth	r2, r3
    687c:	490a      	ldr	r1, [pc, #40]	; (68a8 <RTC_ITConfig+0x48>)
    687e:	88fb      	ldrh	r3, [r7, #6]
    6880:	4313      	orrs	r3, r2
    6882:	b29b      	uxth	r3, r3
    6884:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
    6886:	e009      	b.n	689c <RTC_ITConfig+0x3c>
    RTC->CRH &= (uint16_t)~RTC_IT;
    6888:	4b07      	ldr	r3, [pc, #28]	; (68a8 <RTC_ITConfig+0x48>)
    688a:	881b      	ldrh	r3, [r3, #0]
    688c:	b29a      	uxth	r2, r3
    688e:	88fb      	ldrh	r3, [r7, #6]
    6890:	43db      	mvns	r3, r3
    6892:	b29b      	uxth	r3, r3
    6894:	4904      	ldr	r1, [pc, #16]	; (68a8 <RTC_ITConfig+0x48>)
    6896:	4013      	ands	r3, r2
    6898:	b29b      	uxth	r3, r3
    689a:	800b      	strh	r3, [r1, #0]
}
    689c:	bf00      	nop
    689e:	370c      	adds	r7, #12
    68a0:	46bd      	mov	sp, r7
    68a2:	bc80      	pop	{r7}
    68a4:	4770      	bx	lr
    68a6:	bf00      	nop
    68a8:	40002800 	.word	0x40002800

000068ac <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    68ac:	b480      	push	{r7}
    68ae:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
    68b0:	4b05      	ldr	r3, [pc, #20]	; (68c8 <RTC_EnterConfigMode+0x1c>)
    68b2:	889b      	ldrh	r3, [r3, #4]
    68b4:	b29b      	uxth	r3, r3
    68b6:	4a04      	ldr	r2, [pc, #16]	; (68c8 <RTC_EnterConfigMode+0x1c>)
    68b8:	f043 0310 	orr.w	r3, r3, #16
    68bc:	b29b      	uxth	r3, r3
    68be:	8093      	strh	r3, [r2, #4]
}
    68c0:	bf00      	nop
    68c2:	46bd      	mov	sp, r7
    68c4:	bc80      	pop	{r7}
    68c6:	4770      	bx	lr
    68c8:	40002800 	.word	0x40002800

000068cc <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    68cc:	b480      	push	{r7}
    68ce:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    68d0:	4b05      	ldr	r3, [pc, #20]	; (68e8 <RTC_ExitConfigMode+0x1c>)
    68d2:	889b      	ldrh	r3, [r3, #4]
    68d4:	b29b      	uxth	r3, r3
    68d6:	4a04      	ldr	r2, [pc, #16]	; (68e8 <RTC_ExitConfigMode+0x1c>)
    68d8:	f023 0310 	bic.w	r3, r3, #16
    68dc:	b29b      	uxth	r3, r3
    68de:	8093      	strh	r3, [r2, #4]
}
    68e0:	bf00      	nop
    68e2:	46bd      	mov	sp, r7
    68e4:	bc80      	pop	{r7}
    68e6:	4770      	bx	lr
    68e8:	40002800 	.word	0x40002800

000068ec <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    68ec:	b480      	push	{r7}
    68ee:	b083      	sub	sp, #12
    68f0:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    68f2:	2300      	movs	r3, #0
    68f4:	80fb      	strh	r3, [r7, #6]
  tmp = RTC->CNTL;
    68f6:	4b07      	ldr	r3, [pc, #28]	; (6914 <RTC_GetCounter+0x28>)
    68f8:	8b9b      	ldrh	r3, [r3, #28]
    68fa:	80fb      	strh	r3, [r7, #6]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    68fc:	4b05      	ldr	r3, [pc, #20]	; (6914 <RTC_GetCounter+0x28>)
    68fe:	8b1b      	ldrh	r3, [r3, #24]
    6900:	b29b      	uxth	r3, r3
    6902:	041a      	lsls	r2, r3, #16
    6904:	88fb      	ldrh	r3, [r7, #6]
    6906:	4313      	orrs	r3, r2
}
    6908:	4618      	mov	r0, r3
    690a:	370c      	adds	r7, #12
    690c:	46bd      	mov	sp, r7
    690e:	bc80      	pop	{r7}
    6910:	4770      	bx	lr
    6912:	bf00      	nop
    6914:	40002800 	.word	0x40002800

00006918 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    6918:	b580      	push	{r7, lr}
    691a:	b082      	sub	sp, #8
    691c:	af00      	add	r7, sp, #0
    691e:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    6920:	f7ff ffc4 	bl	68ac <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	0c1a      	lsrs	r2, r3, #16
    6928:	4b06      	ldr	r3, [pc, #24]	; (6944 <RTC_SetCounter+0x2c>)
    692a:	b292      	uxth	r2, r2
    692c:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    692e:	4b05      	ldr	r3, [pc, #20]	; (6944 <RTC_SetCounter+0x2c>)
    6930:	687a      	ldr	r2, [r7, #4]
    6932:	b292      	uxth	r2, r2
    6934:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
    6936:	f7ff ffc9 	bl	68cc <RTC_ExitConfigMode>
}
    693a:	bf00      	nop
    693c:	3708      	adds	r7, #8
    693e:	46bd      	mov	sp, r7
    6940:	bd80      	pop	{r7, pc}
    6942:	bf00      	nop
    6944:	40002800 	.word	0x40002800

00006948 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    6948:	b580      	push	{r7, lr}
    694a:	b082      	sub	sp, #8
    694c:	af00      	add	r7, sp, #0
    694e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    6950:	f7ff ffac 	bl	68ac <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	0c1b      	lsrs	r3, r3, #16
    6958:	b29b      	uxth	r3, r3
    695a:	4a07      	ldr	r2, [pc, #28]	; (6978 <RTC_SetPrescaler+0x30>)
    695c:	f003 030f 	and.w	r3, r3, #15
    6960:	b29b      	uxth	r3, r3
    6962:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    6964:	4b04      	ldr	r3, [pc, #16]	; (6978 <RTC_SetPrescaler+0x30>)
    6966:	687a      	ldr	r2, [r7, #4]
    6968:	b292      	uxth	r2, r2
    696a:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
    696c:	f7ff ffae 	bl	68cc <RTC_ExitConfigMode>
}
    6970:	bf00      	nop
    6972:	3708      	adds	r7, #8
    6974:	46bd      	mov	sp, r7
    6976:	bd80      	pop	{r7, pc}
    6978:	40002800 	.word	0x40002800

0000697c <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    697c:	b580      	push	{r7, lr}
    697e:	b082      	sub	sp, #8
    6980:	af00      	add	r7, sp, #0
    6982:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
    6984:	f7ff ff92 	bl	68ac <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	0c1a      	lsrs	r2, r3, #16
    698c:	4b06      	ldr	r3, [pc, #24]	; (69a8 <RTC_SetAlarm+0x2c>)
    698e:	b292      	uxth	r2, r2
    6990:	841a      	strh	r2, [r3, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    6992:	4b05      	ldr	r3, [pc, #20]	; (69a8 <RTC_SetAlarm+0x2c>)
    6994:	687a      	ldr	r2, [r7, #4]
    6996:	b292      	uxth	r2, r2
    6998:	849a      	strh	r2, [r3, #36]	; 0x24
  RTC_ExitConfigMode();
    699a:	f7ff ff97 	bl	68cc <RTC_ExitConfigMode>
}
    699e:	bf00      	nop
    69a0:	3708      	adds	r7, #8
    69a2:	46bd      	mov	sp, r7
    69a4:	bd80      	pop	{r7, pc}
    69a6:	bf00      	nop
    69a8:	40002800 	.word	0x40002800

000069ac <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    69ac:	b480      	push	{r7}
    69ae:	b083      	sub	sp, #12
    69b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    69b2:	2300      	movs	r3, #0
    69b4:	607b      	str	r3, [r7, #4]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    69b6:	4b0a      	ldr	r3, [pc, #40]	; (69e0 <RTC_GetDivider+0x34>)
    69b8:	8a1b      	ldrh	r3, [r3, #16]
    69ba:	b29b      	uxth	r3, r3
    69bc:	041b      	lsls	r3, r3, #16
    69be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    69c2:	607b      	str	r3, [r7, #4]
  tmp |= RTC->DIVL;
    69c4:	4b06      	ldr	r3, [pc, #24]	; (69e0 <RTC_GetDivider+0x34>)
    69c6:	8a9b      	ldrh	r3, [r3, #20]
    69c8:	b29b      	uxth	r3, r3
    69ca:	461a      	mov	r2, r3
    69cc:	687b      	ldr	r3, [r7, #4]
    69ce:	4313      	orrs	r3, r2
    69d0:	607b      	str	r3, [r7, #4]
  return tmp;
    69d2:	687b      	ldr	r3, [r7, #4]
}
    69d4:	4618      	mov	r0, r3
    69d6:	370c      	adds	r7, #12
    69d8:	46bd      	mov	sp, r7
    69da:	bc80      	pop	{r7}
    69dc:	4770      	bx	lr
    69de:	bf00      	nop
    69e0:	40002800 	.word	0x40002800

000069e4 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    69e4:	b480      	push	{r7}
    69e6:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    69e8:	bf00      	nop
    69ea:	4b05      	ldr	r3, [pc, #20]	; (6a00 <RTC_WaitForLastTask+0x1c>)
    69ec:	889b      	ldrh	r3, [r3, #4]
    69ee:	b29b      	uxth	r3, r3
    69f0:	f003 0320 	and.w	r3, r3, #32
    69f4:	2b00      	cmp	r3, #0
    69f6:	d0f8      	beq.n	69ea <RTC_WaitForLastTask+0x6>
  {
  }
}
    69f8:	bf00      	nop
    69fa:	46bd      	mov	sp, r7
    69fc:	bc80      	pop	{r7}
    69fe:	4770      	bx	lr
    6a00:	40002800 	.word	0x40002800

00006a04 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    6a04:	b480      	push	{r7}
    6a06:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    6a08:	4b09      	ldr	r3, [pc, #36]	; (6a30 <RTC_WaitForSynchro+0x2c>)
    6a0a:	889b      	ldrh	r3, [r3, #4]
    6a0c:	b29b      	uxth	r3, r3
    6a0e:	4a08      	ldr	r2, [pc, #32]	; (6a30 <RTC_WaitForSynchro+0x2c>)
    6a10:	f023 0308 	bic.w	r3, r3, #8
    6a14:	b29b      	uxth	r3, r3
    6a16:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    6a18:	bf00      	nop
    6a1a:	4b05      	ldr	r3, [pc, #20]	; (6a30 <RTC_WaitForSynchro+0x2c>)
    6a1c:	889b      	ldrh	r3, [r3, #4]
    6a1e:	b29b      	uxth	r3, r3
    6a20:	f003 0308 	and.w	r3, r3, #8
    6a24:	2b00      	cmp	r3, #0
    6a26:	d0f8      	beq.n	6a1a <RTC_WaitForSynchro+0x16>
  {
  }
}
    6a28:	bf00      	nop
    6a2a:	46bd      	mov	sp, r7
    6a2c:	bc80      	pop	{r7}
    6a2e:	4770      	bx	lr
    6a30:	40002800 	.word	0x40002800

00006a34 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    6a34:	b480      	push	{r7}
    6a36:	b085      	sub	sp, #20
    6a38:	af00      	add	r7, sp, #0
    6a3a:	4603      	mov	r3, r0
    6a3c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
    6a3e:	2300      	movs	r3, #0
    6a40:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    6a42:	4b09      	ldr	r3, [pc, #36]	; (6a68 <RTC_GetFlagStatus+0x34>)
    6a44:	889b      	ldrh	r3, [r3, #4]
    6a46:	b29a      	uxth	r2, r3
    6a48:	88fb      	ldrh	r3, [r7, #6]
    6a4a:	4013      	ands	r3, r2
    6a4c:	b29b      	uxth	r3, r3
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d002      	beq.n	6a58 <RTC_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    6a52:	2301      	movs	r3, #1
    6a54:	73fb      	strb	r3, [r7, #15]
    6a56:	e001      	b.n	6a5c <RTC_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    6a58:	2300      	movs	r3, #0
    6a5a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    6a5c:	7bfb      	ldrb	r3, [r7, #15]
}
    6a5e:	4618      	mov	r0, r3
    6a60:	3714      	adds	r7, #20
    6a62:	46bd      	mov	sp, r7
    6a64:	bc80      	pop	{r7}
    6a66:	4770      	bx	lr
    6a68:	40002800 	.word	0x40002800

00006a6c <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    6a6c:	b480      	push	{r7}
    6a6e:	b083      	sub	sp, #12
    6a70:	af00      	add	r7, sp, #0
    6a72:	4603      	mov	r3, r0
    6a74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the corresponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    6a76:	4b07      	ldr	r3, [pc, #28]	; (6a94 <RTC_ClearFlag+0x28>)
    6a78:	889b      	ldrh	r3, [r3, #4]
    6a7a:	b29a      	uxth	r2, r3
    6a7c:	88fb      	ldrh	r3, [r7, #6]
    6a7e:	43db      	mvns	r3, r3
    6a80:	b29b      	uxth	r3, r3
    6a82:	4904      	ldr	r1, [pc, #16]	; (6a94 <RTC_ClearFlag+0x28>)
    6a84:	4013      	ands	r3, r2
    6a86:	b29b      	uxth	r3, r3
    6a88:	808b      	strh	r3, [r1, #4]
}
    6a8a:	bf00      	nop
    6a8c:	370c      	adds	r7, #12
    6a8e:	46bd      	mov	sp, r7
    6a90:	bc80      	pop	{r7}
    6a92:	4770      	bx	lr
    6a94:	40002800 	.word	0x40002800

00006a98 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    6a98:	b480      	push	{r7}
    6a9a:	b085      	sub	sp, #20
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	4603      	mov	r3, r0
    6aa0:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
    6aa2:	2300      	movs	r3, #0
    6aa4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    6aa6:	4b0f      	ldr	r3, [pc, #60]	; (6ae4 <RTC_GetITStatus+0x4c>)
    6aa8:	889b      	ldrh	r3, [r3, #4]
    6aaa:	b29b      	uxth	r3, r3
    6aac:	b2da      	uxtb	r2, r3
    6aae:	88fb      	ldrh	r3, [r7, #6]
    6ab0:	b2db      	uxtb	r3, r3
    6ab2:	4013      	ands	r3, r2
    6ab4:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    6ab6:	4b0b      	ldr	r3, [pc, #44]	; (6ae4 <RTC_GetITStatus+0x4c>)
    6ab8:	881b      	ldrh	r3, [r3, #0]
    6aba:	b29a      	uxth	r2, r3
    6abc:	88fb      	ldrh	r3, [r7, #6]
    6abe:	4013      	ands	r3, r2
    6ac0:	b29b      	uxth	r3, r3
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d005      	beq.n	6ad2 <RTC_GetITStatus+0x3a>
    6ac6:	7bfb      	ldrb	r3, [r7, #15]
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d002      	beq.n	6ad2 <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
    6acc:	2301      	movs	r3, #1
    6ace:	73fb      	strb	r3, [r7, #15]
    6ad0:	e001      	b.n	6ad6 <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
    6ad2:	2300      	movs	r3, #0
    6ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    6ad6:	7bfb      	ldrb	r3, [r7, #15]
}
    6ad8:	4618      	mov	r0, r3
    6ada:	3714      	adds	r7, #20
    6adc:	46bd      	mov	sp, r7
    6ade:	bc80      	pop	{r7}
    6ae0:	4770      	bx	lr
    6ae2:	bf00      	nop
    6ae4:	40002800 	.word	0x40002800

00006ae8 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    6ae8:	b480      	push	{r7}
    6aea:	b083      	sub	sp, #12
    6aec:	af00      	add	r7, sp, #0
    6aee:	4603      	mov	r3, r0
    6af0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    6af2:	4b07      	ldr	r3, [pc, #28]	; (6b10 <RTC_ClearITPendingBit+0x28>)
    6af4:	889b      	ldrh	r3, [r3, #4]
    6af6:	b29a      	uxth	r2, r3
    6af8:	88fb      	ldrh	r3, [r7, #6]
    6afa:	43db      	mvns	r3, r3
    6afc:	b29b      	uxth	r3, r3
    6afe:	4904      	ldr	r1, [pc, #16]	; (6b10 <RTC_ClearITPendingBit+0x28>)
    6b00:	4013      	ands	r3, r2
    6b02:	b29b      	uxth	r3, r3
    6b04:	808b      	strh	r3, [r1, #4]
}
    6b06:	bf00      	nop
    6b08:	370c      	adds	r7, #12
    6b0a:	46bd      	mov	sp, r7
    6b0c:	bc80      	pop	{r7}
    6b0e:	4770      	bx	lr
    6b10:	40002800 	.word	0x40002800

00006b14 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    6b18:	2101      	movs	r1, #1
    6b1a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    6b1e:	f7fc f9b1 	bl	2e84 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    6b22:	2100      	movs	r1, #0
    6b24:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    6b28:	f7fc f9ac 	bl	2e84 <RCC_APB1PeriphResetCmd>
}
    6b2c:	bf00      	nop
    6b2e:	bd80      	pop	{r7, pc}

00006b30 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
    6b30:	b480      	push	{r7}
    6b32:	b085      	sub	sp, #20
    6b34:	af00      	add	r7, sp, #0
    6b36:	6078      	str	r0, [r7, #4]
    6b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    6b3a:	2300      	movs	r3, #0
    6b3c:	60fb      	str	r3, [r7, #12]
    6b3e:	2300      	movs	r3, #0
    6b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
    6b42:	4b13      	ldr	r3, [pc, #76]	; (6b90 <DAC_Init+0x60>)
    6b44:	681b      	ldr	r3, [r3, #0]
    6b46:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    6b48:	f640 72fe 	movw	r2, #4094	; 0xffe
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	fa02 f303 	lsl.w	r3, r2, r3
    6b52:	43db      	mvns	r3, r3
    6b54:	68fa      	ldr	r2, [r7, #12]
    6b56:	4013      	ands	r3, r2
    6b58:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    6b5a:	683b      	ldr	r3, [r7, #0]
    6b5c:	681a      	ldr	r2, [r3, #0]
    6b5e:	683b      	ldr	r3, [r7, #0]
    6b60:	685b      	ldr	r3, [r3, #4]
    6b62:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    6b64:	683b      	ldr	r3, [r7, #0]
    6b66:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    6b68:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    6b6a:	683b      	ldr	r3, [r7, #0]
    6b6c:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    6b6e:	4313      	orrs	r3, r2
    6b70:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
    6b72:	68ba      	ldr	r2, [r7, #8]
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	fa02 f303 	lsl.w	r3, r2, r3
    6b7a:	68fa      	ldr	r2, [r7, #12]
    6b7c:	4313      	orrs	r3, r2
    6b7e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
    6b80:	4a03      	ldr	r2, [pc, #12]	; (6b90 <DAC_Init+0x60>)
    6b82:	68fb      	ldr	r3, [r7, #12]
    6b84:	6013      	str	r3, [r2, #0]
}
    6b86:	bf00      	nop
    6b88:	3714      	adds	r7, #20
    6b8a:	46bd      	mov	sp, r7
    6b8c:	bc80      	pop	{r7}
    6b8e:	4770      	bx	lr
    6b90:	40007400 	.word	0x40007400

00006b94 <DAC_StructInit>:
  * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
    6b94:	b480      	push	{r7}
    6b96:	b083      	sub	sp, #12
    6b98:	af00      	add	r7, sp, #0
    6b9a:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    6b9c:	687b      	ldr	r3, [r7, #4]
    6b9e:	2200      	movs	r2, #0
    6ba0:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    6ba2:	687b      	ldr	r3, [r7, #4]
    6ba4:	2200      	movs	r2, #0
    6ba6:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	2200      	movs	r2, #0
    6bac:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	2200      	movs	r2, #0
    6bb2:	60da      	str	r2, [r3, #12]
}
    6bb4:	bf00      	nop
    6bb6:	370c      	adds	r7, #12
    6bb8:	46bd      	mov	sp, r7
    6bba:	bc80      	pop	{r7}
    6bbc:	4770      	bx	lr

00006bbe <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    6bbe:	b480      	push	{r7}
    6bc0:	b083      	sub	sp, #12
    6bc2:	af00      	add	r7, sp, #0
    6bc4:	6078      	str	r0, [r7, #4]
    6bc6:	460b      	mov	r3, r1
    6bc8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6bca:	78fb      	ldrb	r3, [r7, #3]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d009      	beq.n	6be4 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    6bd0:	4b0c      	ldr	r3, [pc, #48]	; (6c04 <DAC_Cmd+0x46>)
    6bd2:	681a      	ldr	r2, [r3, #0]
    6bd4:	2101      	movs	r1, #1
    6bd6:	687b      	ldr	r3, [r7, #4]
    6bd8:	fa01 f303 	lsl.w	r3, r1, r3
    6bdc:	4909      	ldr	r1, [pc, #36]	; (6c04 <DAC_Cmd+0x46>)
    6bde:	4313      	orrs	r3, r2
    6be0:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
  }
}
    6be2:	e009      	b.n	6bf8 <DAC_Cmd+0x3a>
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    6be4:	4b07      	ldr	r3, [pc, #28]	; (6c04 <DAC_Cmd+0x46>)
    6be6:	681a      	ldr	r2, [r3, #0]
    6be8:	2101      	movs	r1, #1
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	fa01 f303 	lsl.w	r3, r1, r3
    6bf0:	43db      	mvns	r3, r3
    6bf2:	4904      	ldr	r1, [pc, #16]	; (6c04 <DAC_Cmd+0x46>)
    6bf4:	4013      	ands	r3, r2
    6bf6:	600b      	str	r3, [r1, #0]
}
    6bf8:	bf00      	nop
    6bfa:	370c      	adds	r7, #12
    6bfc:	46bd      	mov	sp, r7
    6bfe:	bc80      	pop	{r7}
    6c00:	4770      	bx	lr
    6c02:	bf00      	nop
    6c04:	40007400 	.word	0x40007400

00006c08 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    6c08:	b480      	push	{r7}
    6c0a:	b083      	sub	sp, #12
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
    6c10:	460b      	mov	r3, r1
    6c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6c14:	78fb      	ldrb	r3, [r7, #3]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d00a      	beq.n	6c30 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    6c1a:	4b0d      	ldr	r3, [pc, #52]	; (6c50 <DAC_DMACmd+0x48>)
    6c1c:	681a      	ldr	r2, [r3, #0]
    6c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	fa01 f303 	lsl.w	r3, r1, r3
    6c28:	4909      	ldr	r1, [pc, #36]	; (6c50 <DAC_DMACmd+0x48>)
    6c2a:	4313      	orrs	r3, r2
    6c2c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
  }
}
    6c2e:	e00a      	b.n	6c46 <DAC_DMACmd+0x3e>
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    6c30:	4b07      	ldr	r3, [pc, #28]	; (6c50 <DAC_DMACmd+0x48>)
    6c32:	681a      	ldr	r2, [r3, #0]
    6c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	fa01 f303 	lsl.w	r3, r1, r3
    6c3e:	43db      	mvns	r3, r3
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <DAC_DMACmd+0x48>)
    6c42:	4013      	ands	r3, r2
    6c44:	600b      	str	r3, [r1, #0]
}
    6c46:	bf00      	nop
    6c48:	370c      	adds	r7, #12
    6c4a:	46bd      	mov	sp, r7
    6c4c:	bc80      	pop	{r7}
    6c4e:	4770      	bx	lr
    6c50:	40007400 	.word	0x40007400

00006c54 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
    6c54:	b480      	push	{r7}
    6c56:	b083      	sub	sp, #12
    6c58:	af00      	add	r7, sp, #0
    6c5a:	6078      	str	r0, [r7, #4]
    6c5c:	460b      	mov	r3, r1
    6c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6c60:	78fb      	ldrb	r3, [r7, #3]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d00a      	beq.n	6c7c <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    6c66:	4b0d      	ldr	r3, [pc, #52]	; (6c9c <DAC_SoftwareTriggerCmd+0x48>)
    6c68:	685a      	ldr	r2, [r3, #4]
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	091b      	lsrs	r3, r3, #4
    6c6e:	2101      	movs	r1, #1
    6c70:	fa01 f303 	lsl.w	r3, r1, r3
    6c74:	4909      	ldr	r1, [pc, #36]	; (6c9c <DAC_SoftwareTriggerCmd+0x48>)
    6c76:	4313      	orrs	r3, r2
    6c78:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
    6c7a:	e00a      	b.n	6c92 <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    6c7c:	4b07      	ldr	r3, [pc, #28]	; (6c9c <DAC_SoftwareTriggerCmd+0x48>)
    6c7e:	685a      	ldr	r2, [r3, #4]
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	091b      	lsrs	r3, r3, #4
    6c84:	2101      	movs	r1, #1
    6c86:	fa01 f303 	lsl.w	r3, r1, r3
    6c8a:	43db      	mvns	r3, r3
    6c8c:	4903      	ldr	r1, [pc, #12]	; (6c9c <DAC_SoftwareTriggerCmd+0x48>)
    6c8e:	4013      	ands	r3, r2
    6c90:	604b      	str	r3, [r1, #4]
}
    6c92:	bf00      	nop
    6c94:	370c      	adds	r7, #12
    6c96:	46bd      	mov	sp, r7
    6c98:	bc80      	pop	{r7}
    6c9a:	4770      	bx	lr
    6c9c:	40007400 	.word	0x40007400

00006ca0 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
    6ca0:	b480      	push	{r7}
    6ca2:	b083      	sub	sp, #12
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	4603      	mov	r3, r0
    6ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6caa:	79fb      	ldrb	r3, [r7, #7]
    6cac:	2b00      	cmp	r3, #0
    6cae:	d006      	beq.n	6cbe <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
    6cb0:	4b08      	ldr	r3, [pc, #32]	; (6cd4 <DAC_DualSoftwareTriggerCmd+0x34>)
    6cb2:	685b      	ldr	r3, [r3, #4]
    6cb4:	4a07      	ldr	r2, [pc, #28]	; (6cd4 <DAC_DualSoftwareTriggerCmd+0x34>)
    6cb6:	f043 0303 	orr.w	r3, r3, #3
    6cba:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
    6cbc:	e005      	b.n	6cca <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    6cbe:	4b05      	ldr	r3, [pc, #20]	; (6cd4 <DAC_DualSoftwareTriggerCmd+0x34>)
    6cc0:	685b      	ldr	r3, [r3, #4]
    6cc2:	4a04      	ldr	r2, [pc, #16]	; (6cd4 <DAC_DualSoftwareTriggerCmd+0x34>)
    6cc4:	f023 0303 	bic.w	r3, r3, #3
    6cc8:	6053      	str	r3, [r2, #4]
}
    6cca:	bf00      	nop
    6ccc:	370c      	adds	r7, #12
    6cce:	46bd      	mov	sp, r7
    6cd0:	bc80      	pop	{r7}
    6cd2:	4770      	bx	lr
    6cd4:	40007400 	.word	0x40007400

00006cd8 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
    6cd8:	b480      	push	{r7}
    6cda:	b085      	sub	sp, #20
    6cdc:	af00      	add	r7, sp, #0
    6cde:	60f8      	str	r0, [r7, #12]
    6ce0:	60b9      	str	r1, [r7, #8]
    6ce2:	4613      	mov	r3, r2
    6ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    6ce6:	79fb      	ldrb	r3, [r7, #7]
    6ce8:	2b00      	cmp	r3, #0
    6cea:	d009      	beq.n	6d00 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
    6cec:	4b0c      	ldr	r3, [pc, #48]	; (6d20 <DAC_WaveGenerationCmd+0x48>)
    6cee:	681a      	ldr	r2, [r3, #0]
    6cf0:	68b9      	ldr	r1, [r7, #8]
    6cf2:	68fb      	ldr	r3, [r7, #12]
    6cf4:	fa01 f303 	lsl.w	r3, r1, r3
    6cf8:	4909      	ldr	r1, [pc, #36]	; (6d20 <DAC_WaveGenerationCmd+0x48>)
    6cfa:	4313      	orrs	r3, r2
    6cfc:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
    6cfe:	e009      	b.n	6d14 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
    6d00:	4b07      	ldr	r3, [pc, #28]	; (6d20 <DAC_WaveGenerationCmd+0x48>)
    6d02:	681a      	ldr	r2, [r3, #0]
    6d04:	68b9      	ldr	r1, [r7, #8]
    6d06:	68fb      	ldr	r3, [r7, #12]
    6d08:	fa01 f303 	lsl.w	r3, r1, r3
    6d0c:	43db      	mvns	r3, r3
    6d0e:	4904      	ldr	r1, [pc, #16]	; (6d20 <DAC_WaveGenerationCmd+0x48>)
    6d10:	4013      	ands	r3, r2
    6d12:	600b      	str	r3, [r1, #0]
}
    6d14:	bf00      	nop
    6d16:	3714      	adds	r7, #20
    6d18:	46bd      	mov	sp, r7
    6d1a:	bc80      	pop	{r7}
    6d1c:	4770      	bx	lr
    6d1e:	bf00      	nop
    6d20:	40007400 	.word	0x40007400

00006d24 <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
    6d24:	b480      	push	{r7}
    6d26:	b085      	sub	sp, #20
    6d28:	af00      	add	r7, sp, #0
    6d2a:	6078      	str	r0, [r7, #4]
    6d2c:	460b      	mov	r3, r1
    6d2e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    6d30:	2300      	movs	r3, #0
    6d32:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
    6d34:	4b07      	ldr	r3, [pc, #28]	; (6d54 <DAC_SetChannel1Data+0x30>)
    6d36:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
    6d38:	68fa      	ldr	r2, [r7, #12]
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	4413      	add	r3, r2
    6d3e:	3308      	adds	r3, #8
    6d40:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
    6d42:	68fb      	ldr	r3, [r7, #12]
    6d44:	461a      	mov	r2, r3
    6d46:	887b      	ldrh	r3, [r7, #2]
    6d48:	6013      	str	r3, [r2, #0]
}
    6d4a:	bf00      	nop
    6d4c:	3714      	adds	r7, #20
    6d4e:	46bd      	mov	sp, r7
    6d50:	bc80      	pop	{r7}
    6d52:	4770      	bx	lr
    6d54:	40007400 	.word	0x40007400

00006d58 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
    6d58:	b480      	push	{r7}
    6d5a:	b085      	sub	sp, #20
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
    6d60:	460b      	mov	r3, r1
    6d62:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
    6d64:	2300      	movs	r3, #0
    6d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
    6d68:	4b07      	ldr	r3, [pc, #28]	; (6d88 <DAC_SetChannel2Data+0x30>)
    6d6a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
    6d6c:	68fa      	ldr	r2, [r7, #12]
    6d6e:	687b      	ldr	r3, [r7, #4]
    6d70:	4413      	add	r3, r2
    6d72:	3314      	adds	r3, #20
    6d74:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
    6d76:	68fb      	ldr	r3, [r7, #12]
    6d78:	461a      	mov	r2, r3
    6d7a:	887b      	ldrh	r3, [r7, #2]
    6d7c:	6013      	str	r3, [r2, #0]
}
    6d7e:	bf00      	nop
    6d80:	3714      	adds	r7, #20
    6d82:	46bd      	mov	sp, r7
    6d84:	bc80      	pop	{r7}
    6d86:	4770      	bx	lr
    6d88:	40007400 	.word	0x40007400

00006d8c <DAC_SetDualChannelData>:
  * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
  *   holding register.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
    6d8c:	b480      	push	{r7}
    6d8e:	b085      	sub	sp, #20
    6d90:	af00      	add	r7, sp, #0
    6d92:	6078      	str	r0, [r7, #4]
    6d94:	460b      	mov	r3, r1
    6d96:	807b      	strh	r3, [r7, #2]
    6d98:	4613      	mov	r3, r2
    6d9a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
    6d9c:	2300      	movs	r3, #0
    6d9e:	60fb      	str	r3, [r7, #12]
    6da0:	2300      	movs	r3, #0
    6da2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	2b08      	cmp	r3, #8
    6da8:	d105      	bne.n	6db6 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
    6daa:	887b      	ldrh	r3, [r7, #2]
    6dac:	021a      	lsls	r2, r3, #8
    6dae:	883b      	ldrh	r3, [r7, #0]
    6db0:	4313      	orrs	r3, r2
    6db2:	60fb      	str	r3, [r7, #12]
    6db4:	e004      	b.n	6dc0 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
    6db6:	887b      	ldrh	r3, [r7, #2]
    6db8:	041a      	lsls	r2, r3, #16
    6dba:	883b      	ldrh	r3, [r7, #0]
    6dbc:	4313      	orrs	r3, r2
    6dbe:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
    6dc0:	4b07      	ldr	r3, [pc, #28]	; (6de0 <DAC_SetDualChannelData+0x54>)
    6dc2:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
    6dc4:	687a      	ldr	r2, [r7, #4]
    6dc6:	68bb      	ldr	r3, [r7, #8]
    6dc8:	4413      	add	r3, r2
    6dca:	3320      	adds	r3, #32
    6dcc:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
    6dce:	68bb      	ldr	r3, [r7, #8]
    6dd0:	68fa      	ldr	r2, [r7, #12]
    6dd2:	601a      	str	r2, [r3, #0]
}
    6dd4:	bf00      	nop
    6dd6:	3714      	adds	r7, #20
    6dd8:	46bd      	mov	sp, r7
    6dda:	bc80      	pop	{r7}
    6ddc:	4770      	bx	lr
    6dde:	bf00      	nop
    6de0:	40007400 	.word	0x40007400

00006de4 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
    6de4:	b480      	push	{r7}
    6de6:	b085      	sub	sp, #20
    6de8:	af00      	add	r7, sp, #0
    6dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
    6dec:	2300      	movs	r3, #0
    6dee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
    6df0:	4b07      	ldr	r3, [pc, #28]	; (6e10 <DAC_GetDataOutputValue+0x2c>)
    6df2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	089a      	lsrs	r2, r3, #2
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	4413      	add	r3, r2
    6dfc:	332c      	adds	r3, #44	; 0x2c
    6dfe:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
    6e00:	68fb      	ldr	r3, [r7, #12]
    6e02:	681b      	ldr	r3, [r3, #0]
    6e04:	b29b      	uxth	r3, r3
}
    6e06:	4618      	mov	r0, r3
    6e08:	3714      	adds	r7, #20
    6e0a:	46bd      	mov	sp, r7
    6e0c:	bc80      	pop	{r7}
    6e0e:	4770      	bx	lr
    6e10:	40007400 	.word	0x40007400

00006e14 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    6e14:	b480      	push	{r7}
    6e16:	b083      	sub	sp, #12
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    6e1c:	4a05      	ldr	r2, [pc, #20]	; (6e34 <NVIC_PriorityGroupConfig+0x20>)
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    6e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6e28:	60d3      	str	r3, [r2, #12]
}
    6e2a:	bf00      	nop
    6e2c:	370c      	adds	r7, #12
    6e2e:	46bd      	mov	sp, r7
    6e30:	bc80      	pop	{r7}
    6e32:	4770      	bx	lr
    6e34:	e000ed00 	.word	0xe000ed00

00006e38 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    6e38:	b480      	push	{r7}
    6e3a:	b087      	sub	sp, #28
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    6e40:	2300      	movs	r3, #0
    6e42:	617b      	str	r3, [r7, #20]
    6e44:	2300      	movs	r3, #0
    6e46:	613b      	str	r3, [r7, #16]
    6e48:	230f      	movs	r3, #15
    6e4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	78db      	ldrb	r3, [r3, #3]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d03a      	beq.n	6eca <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    6e54:	4b27      	ldr	r3, [pc, #156]	; (6ef4 <NVIC_Init+0xbc>)
    6e56:	68db      	ldr	r3, [r3, #12]
    6e58:	43db      	mvns	r3, r3
    6e5a:	0a1b      	lsrs	r3, r3, #8
    6e5c:	f003 0307 	and.w	r3, r3, #7
    6e60:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    6e62:	697b      	ldr	r3, [r7, #20]
    6e64:	f1c3 0304 	rsb	r3, r3, #4
    6e68:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    6e6a:	68fa      	ldr	r2, [r7, #12]
    6e6c:	697b      	ldr	r3, [r7, #20]
    6e6e:	fa22 f303 	lsr.w	r3, r2, r3
    6e72:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	785b      	ldrb	r3, [r3, #1]
    6e78:	461a      	mov	r2, r3
    6e7a:	693b      	ldr	r3, [r7, #16]
    6e7c:	fa02 f303 	lsl.w	r3, r2, r3
    6e80:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	789b      	ldrb	r3, [r3, #2]
    6e86:	461a      	mov	r2, r3
    6e88:	68fb      	ldr	r3, [r7, #12]
    6e8a:	4013      	ands	r3, r2
    6e8c:	697a      	ldr	r2, [r7, #20]
    6e8e:	4313      	orrs	r3, r2
    6e90:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    6e92:	697b      	ldr	r3, [r7, #20]
    6e94:	011b      	lsls	r3, r3, #4
    6e96:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    6e98:	4a17      	ldr	r2, [pc, #92]	; (6ef8 <NVIC_Init+0xc0>)
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	6979      	ldr	r1, [r7, #20]
    6ea0:	b2c9      	uxtb	r1, r1
    6ea2:	4413      	add	r3, r2
    6ea4:	460a      	mov	r2, r1
    6ea6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6eb2:	4911      	ldr	r1, [pc, #68]	; (6ef8 <NVIC_Init+0xc0>)
    6eb4:	687a      	ldr	r2, [r7, #4]
    6eb6:	7812      	ldrb	r2, [r2, #0]
    6eb8:	0952      	lsrs	r2, r2, #5
    6eba:	b2d2      	uxtb	r2, r2
    6ebc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6ebe:	2201      	movs	r2, #1
    6ec0:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6ec4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    6ec8:	e00f      	b.n	6eea <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	781b      	ldrb	r3, [r3, #0]
    6ece:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6ed2:	4909      	ldr	r1, [pc, #36]	; (6ef8 <NVIC_Init+0xc0>)
    6ed4:	687a      	ldr	r2, [r7, #4]
    6ed6:	7812      	ldrb	r2, [r2, #0]
    6ed8:	0952      	lsrs	r2, r2, #5
    6eda:	b2d2      	uxtb	r2, r2
    6edc:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    6ede:	2201      	movs	r2, #1
    6ee0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    6ee2:	f100 0320 	add.w	r3, r0, #32
    6ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6eea:	bf00      	nop
    6eec:	371c      	adds	r7, #28
    6eee:	46bd      	mov	sp, r7
    6ef0:	bc80      	pop	{r7}
    6ef2:	4770      	bx	lr
    6ef4:	e000ed00 	.word	0xe000ed00
    6ef8:	e000e100 	.word	0xe000e100

00006efc <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    6efc:	b480      	push	{r7}
    6efe:	b083      	sub	sp, #12
    6f00:	af00      	add	r7, sp, #0
    6f02:	6078      	str	r0, [r7, #4]
    6f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    6f06:	683b      	ldr	r3, [r7, #0]
    6f08:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    6f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6f10:	4904      	ldr	r1, [pc, #16]	; (6f24 <NVIC_SetVectorTable+0x28>)
    6f12:	687a      	ldr	r2, [r7, #4]
    6f14:	4313      	orrs	r3, r2
    6f16:	608b      	str	r3, [r1, #8]
}
    6f18:	bf00      	nop
    6f1a:	370c      	adds	r7, #12
    6f1c:	46bd      	mov	sp, r7
    6f1e:	bc80      	pop	{r7}
    6f20:	4770      	bx	lr
    6f22:	bf00      	nop
    6f24:	e000ed00 	.word	0xe000ed00

00006f28 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    6f28:	b480      	push	{r7}
    6f2a:	b083      	sub	sp, #12
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	4603      	mov	r3, r0
    6f30:	460a      	mov	r2, r1
    6f32:	71fb      	strb	r3, [r7, #7]
    6f34:	4613      	mov	r3, r2
    6f36:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    6f38:	79bb      	ldrb	r3, [r7, #6]
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d006      	beq.n	6f4c <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
    6f3e:	4b09      	ldr	r3, [pc, #36]	; (6f64 <NVIC_SystemLPConfig+0x3c>)
    6f40:	691a      	ldr	r2, [r3, #16]
    6f42:	79fb      	ldrb	r3, [r7, #7]
    6f44:	4907      	ldr	r1, [pc, #28]	; (6f64 <NVIC_SystemLPConfig+0x3c>)
    6f46:	4313      	orrs	r3, r2
    6f48:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
    6f4a:	e006      	b.n	6f5a <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    6f4c:	4b05      	ldr	r3, [pc, #20]	; (6f64 <NVIC_SystemLPConfig+0x3c>)
    6f4e:	691a      	ldr	r2, [r3, #16]
    6f50:	79fb      	ldrb	r3, [r7, #7]
    6f52:	43db      	mvns	r3, r3
    6f54:	4903      	ldr	r1, [pc, #12]	; (6f64 <NVIC_SystemLPConfig+0x3c>)
    6f56:	4013      	ands	r3, r2
    6f58:	610b      	str	r3, [r1, #16]
}
    6f5a:	bf00      	nop
    6f5c:	370c      	adds	r7, #12
    6f5e:	46bd      	mov	sp, r7
    6f60:	bc80      	pop	{r7}
    6f62:	4770      	bx	lr
    6f64:	e000ed00 	.word	0xe000ed00

00006f68 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    6f68:	b480      	push	{r7}
    6f6a:	b083      	sub	sp, #12
    6f6c:	af00      	add	r7, sp, #0
    6f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    6f70:	687b      	ldr	r3, [r7, #4]
    6f72:	2b04      	cmp	r3, #4
    6f74:	d106      	bne.n	6f84 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    6f76:	4b09      	ldr	r3, [pc, #36]	; (6f9c <SysTick_CLKSourceConfig+0x34>)
    6f78:	681b      	ldr	r3, [r3, #0]
    6f7a:	4a08      	ldr	r2, [pc, #32]	; (6f9c <SysTick_CLKSourceConfig+0x34>)
    6f7c:	f043 0304 	orr.w	r3, r3, #4
    6f80:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
    6f82:	e005      	b.n	6f90 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    6f84:	4b05      	ldr	r3, [pc, #20]	; (6f9c <SysTick_CLKSourceConfig+0x34>)
    6f86:	681b      	ldr	r3, [r3, #0]
    6f88:	4a04      	ldr	r2, [pc, #16]	; (6f9c <SysTick_CLKSourceConfig+0x34>)
    6f8a:	f023 0304 	bic.w	r3, r3, #4
    6f8e:	6013      	str	r3, [r2, #0]
}
    6f90:	bf00      	nop
    6f92:	370c      	adds	r7, #12
    6f94:	46bd      	mov	sp, r7
    6f96:	bc80      	pop	{r7}
    6f98:	4770      	bx	lr
    6f9a:	bf00      	nop
    6f9c:	e000e010 	.word	0xe000e010

00006fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    6fa0:	b480      	push	{r7}
    6fa2:	b083      	sub	sp, #12
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	f103 0208 	add.w	r2, r3, #8
    6fae:	687b      	ldr	r3, [r7, #4]
    6fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	f103 0208 	add.w	r2, r3, #8
    6fc0:	687b      	ldr	r3, [r7, #4]
    6fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	f103 0208 	add.w	r2, r3, #8
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	2200      	movs	r2, #0
    6fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    6fd4:	bf00      	nop
    6fd6:	370c      	adds	r7, #12
    6fd8:	46bd      	mov	sp, r7
    6fda:	bc80      	pop	{r7}
    6fdc:	4770      	bx	lr

00006fde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    6fde:	b480      	push	{r7}
    6fe0:	b083      	sub	sp, #12
    6fe2:	af00      	add	r7, sp, #0
    6fe4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	2200      	movs	r2, #0
    6fea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    6fec:	bf00      	nop
    6fee:	370c      	adds	r7, #12
    6ff0:	46bd      	mov	sp, r7
    6ff2:	bc80      	pop	{r7}
    6ff4:	4770      	bx	lr

00006ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6ff6:	b480      	push	{r7}
    6ff8:	b085      	sub	sp, #20
    6ffa:	af00      	add	r7, sp, #0
    6ffc:	6078      	str	r0, [r7, #4]
    6ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    7000:	687b      	ldr	r3, [r7, #4]
    7002:	685b      	ldr	r3, [r3, #4]
    7004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    7006:	683b      	ldr	r3, [r7, #0]
    7008:	68fa      	ldr	r2, [r7, #12]
    700a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    700c:	68fb      	ldr	r3, [r7, #12]
    700e:	689a      	ldr	r2, [r3, #8]
    7010:	683b      	ldr	r3, [r7, #0]
    7012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    7014:	68fb      	ldr	r3, [r7, #12]
    7016:	689b      	ldr	r3, [r3, #8]
    7018:	683a      	ldr	r2, [r7, #0]
    701a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    701c:	68fb      	ldr	r3, [r7, #12]
    701e:	683a      	ldr	r2, [r7, #0]
    7020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7022:	683b      	ldr	r3, [r7, #0]
    7024:	687a      	ldr	r2, [r7, #4]
    7026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	1c5a      	adds	r2, r3, #1
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	601a      	str	r2, [r3, #0]
}
    7032:	bf00      	nop
    7034:	3714      	adds	r7, #20
    7036:	46bd      	mov	sp, r7
    7038:	bc80      	pop	{r7}
    703a:	4770      	bx	lr

0000703c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    703c:	b480      	push	{r7}
    703e:	b085      	sub	sp, #20
    7040:	af00      	add	r7, sp, #0
    7042:	6078      	str	r0, [r7, #4]
    7044:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    7046:	683b      	ldr	r3, [r7, #0]
    7048:	681b      	ldr	r3, [r3, #0]
    704a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    704c:	68bb      	ldr	r3, [r7, #8]
    704e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7052:	d103      	bne.n	705c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	691b      	ldr	r3, [r3, #16]
    7058:	60fb      	str	r3, [r7, #12]
    705a:	e00c      	b.n	7076 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	3308      	adds	r3, #8
    7060:	60fb      	str	r3, [r7, #12]
    7062:	e002      	b.n	706a <vListInsert+0x2e>
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	685b      	ldr	r3, [r3, #4]
    7068:	60fb      	str	r3, [r7, #12]
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	685b      	ldr	r3, [r3, #4]
    706e:	681b      	ldr	r3, [r3, #0]
    7070:	68ba      	ldr	r2, [r7, #8]
    7072:	429a      	cmp	r2, r3
    7074:	d2f6      	bcs.n	7064 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	685a      	ldr	r2, [r3, #4]
    707a:	683b      	ldr	r3, [r7, #0]
    707c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    707e:	683b      	ldr	r3, [r7, #0]
    7080:	685b      	ldr	r3, [r3, #4]
    7082:	683a      	ldr	r2, [r7, #0]
    7084:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    7086:	683b      	ldr	r3, [r7, #0]
    7088:	68fa      	ldr	r2, [r7, #12]
    708a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    708c:	68fb      	ldr	r3, [r7, #12]
    708e:	683a      	ldr	r2, [r7, #0]
    7090:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7092:	683b      	ldr	r3, [r7, #0]
    7094:	687a      	ldr	r2, [r7, #4]
    7096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	681b      	ldr	r3, [r3, #0]
    709c:	1c5a      	adds	r2, r3, #1
    709e:	687b      	ldr	r3, [r7, #4]
    70a0:	601a      	str	r2, [r3, #0]
}
    70a2:	bf00      	nop
    70a4:	3714      	adds	r7, #20
    70a6:	46bd      	mov	sp, r7
    70a8:	bc80      	pop	{r7}
    70aa:	4770      	bx	lr

000070ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    70ac:	b480      	push	{r7}
    70ae:	b085      	sub	sp, #20
    70b0:	af00      	add	r7, sp, #0
    70b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	691b      	ldr	r3, [r3, #16]
    70b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    70ba:	687b      	ldr	r3, [r7, #4]
    70bc:	685b      	ldr	r3, [r3, #4]
    70be:	687a      	ldr	r2, [r7, #4]
    70c0:	6892      	ldr	r2, [r2, #8]
    70c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	689b      	ldr	r3, [r3, #8]
    70c8:	687a      	ldr	r2, [r7, #4]
    70ca:	6852      	ldr	r2, [r2, #4]
    70cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    70ce:	68fb      	ldr	r3, [r7, #12]
    70d0:	685b      	ldr	r3, [r3, #4]
    70d2:	687a      	ldr	r2, [r7, #4]
    70d4:	429a      	cmp	r2, r3
    70d6:	d103      	bne.n	70e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	689a      	ldr	r2, [r3, #8]
    70dc:	68fb      	ldr	r3, [r7, #12]
    70de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	2200      	movs	r2, #0
    70e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    70e6:	68fb      	ldr	r3, [r7, #12]
    70e8:	681b      	ldr	r3, [r3, #0]
    70ea:	1e5a      	subs	r2, r3, #1
    70ec:	68fb      	ldr	r3, [r7, #12]
    70ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    70f0:	68fb      	ldr	r3, [r7, #12]
    70f2:	681b      	ldr	r3, [r3, #0]
}
    70f4:	4618      	mov	r0, r3
    70f6:	3714      	adds	r7, #20
    70f8:	46bd      	mov	sp, r7
    70fa:	bc80      	pop	{r7}
    70fc:	4770      	bx	lr
	...

00007100 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    7100:	b580      	push	{r7, lr}
    7102:	b084      	sub	sp, #16
    7104:	af00      	add	r7, sp, #0
    7106:	6078      	str	r0, [r7, #4]
    7108:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    710a:	687b      	ldr	r3, [r7, #4]
    710c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    710e:	f002 ffe7 	bl	a0e0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	681a      	ldr	r2, [r3, #0]
    7116:	68fb      	ldr	r3, [r7, #12]
    7118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    711a:	68f9      	ldr	r1, [r7, #12]
    711c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    711e:	fb01 f303 	mul.w	r3, r1, r3
    7122:	441a      	add	r2, r3
    7124:	68fb      	ldr	r3, [r7, #12]
    7126:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    7128:	68fb      	ldr	r3, [r7, #12]
    712a:	2200      	movs	r2, #0
    712c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    712e:	68fb      	ldr	r3, [r7, #12]
    7130:	681a      	ldr	r2, [r3, #0]
    7132:	68fb      	ldr	r3, [r7, #12]
    7134:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    7136:	68fb      	ldr	r3, [r7, #12]
    7138:	681a      	ldr	r2, [r3, #0]
    713a:	68fb      	ldr	r3, [r7, #12]
    713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    713e:	3b01      	subs	r3, #1
    7140:	68f9      	ldr	r1, [r7, #12]
    7142:	6c09      	ldr	r1, [r1, #64]	; 0x40
    7144:	fb01 f303 	mul.w	r3, r1, r3
    7148:	441a      	add	r2, r3
    714a:	68fb      	ldr	r3, [r7, #12]
    714c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    714e:	68fb      	ldr	r3, [r7, #12]
    7150:	22ff      	movs	r2, #255	; 0xff
    7152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    7156:	68fb      	ldr	r3, [r7, #12]
    7158:	22ff      	movs	r2, #255	; 0xff
    715a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    715e:	683b      	ldr	r3, [r7, #0]
    7160:	2b00      	cmp	r3, #0
    7162:	d114      	bne.n	718e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7164:	68fb      	ldr	r3, [r7, #12]
    7166:	691b      	ldr	r3, [r3, #16]
    7168:	2b00      	cmp	r3, #0
    716a:	d01a      	beq.n	71a2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    716c:	68fb      	ldr	r3, [r7, #12]
    716e:	3310      	adds	r3, #16
    7170:	4618      	mov	r0, r3
    7172:	f001 fcbd 	bl	8af0 <xTaskRemoveFromEventList>
    7176:	4603      	mov	r3, r0
    7178:	2b00      	cmp	r3, #0
    717a:	d012      	beq.n	71a2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
    717c:	4b0c      	ldr	r3, [pc, #48]	; (71b0 <xQueueGenericReset+0xb0>)
    717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7182:	601a      	str	r2, [r3, #0]
    7184:	f3bf 8f4f 	dsb	sy
    7188:	f3bf 8f6f 	isb	sy
    718c:	e009      	b.n	71a2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    718e:	68fb      	ldr	r3, [r7, #12]
    7190:	3310      	adds	r3, #16
    7192:	4618      	mov	r0, r3
    7194:	f7ff ff04 	bl	6fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    7198:	68fb      	ldr	r3, [r7, #12]
    719a:	3324      	adds	r3, #36	; 0x24
    719c:	4618      	mov	r0, r3
    719e:	f7ff feff 	bl	6fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    71a2:	f002 ffb5 	bl	a110 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    71a6:	2301      	movs	r3, #1
}
    71a8:	4618      	mov	r0, r3
    71aa:	3710      	adds	r7, #16
    71ac:	46bd      	mov	sp, r7
    71ae:	bd80      	pop	{r7, pc}
    71b0:	e000ed04 	.word	0xe000ed04

000071b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    71b4:	b580      	push	{r7, lr}
    71b6:	b08a      	sub	sp, #40	; 0x28
    71b8:	af02      	add	r7, sp, #8
    71ba:	60f8      	str	r0, [r7, #12]
    71bc:	60b9      	str	r1, [r7, #8]
    71be:	4613      	mov	r3, r2
    71c0:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    71c2:	68bb      	ldr	r3, [r7, #8]
    71c4:	2b00      	cmp	r3, #0
    71c6:	d102      	bne.n	71ce <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    71c8:	2300      	movs	r3, #0
    71ca:	61fb      	str	r3, [r7, #28]
    71cc:	e004      	b.n	71d8 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    71ce:	68fb      	ldr	r3, [r7, #12]
    71d0:	68ba      	ldr	r2, [r7, #8]
    71d2:	fb02 f303 	mul.w	r3, r2, r3
    71d6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    71d8:	69fb      	ldr	r3, [r7, #28]
    71da:	3348      	adds	r3, #72	; 0x48
    71dc:	4618      	mov	r0, r3
    71de:	f7f8 ff95 	bl	10c <pvPortMalloc>
    71e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    71e4:	69bb      	ldr	r3, [r7, #24]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d00b      	beq.n	7202 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    71ea:	69bb      	ldr	r3, [r7, #24]
    71ec:	3348      	adds	r3, #72	; 0x48
    71ee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    71f0:	79fa      	ldrb	r2, [r7, #7]
    71f2:	69bb      	ldr	r3, [r7, #24]
    71f4:	9300      	str	r3, [sp, #0]
    71f6:	4613      	mov	r3, r2
    71f8:	697a      	ldr	r2, [r7, #20]
    71fa:	68b9      	ldr	r1, [r7, #8]
    71fc:	68f8      	ldr	r0, [r7, #12]
    71fe:	f000 f805 	bl	720c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    7202:	69bb      	ldr	r3, [r7, #24]
	}
    7204:	4618      	mov	r0, r3
    7206:	3720      	adds	r7, #32
    7208:	46bd      	mov	sp, r7
    720a:	bd80      	pop	{r7, pc}

0000720c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    720c:	b580      	push	{r7, lr}
    720e:	b084      	sub	sp, #16
    7210:	af00      	add	r7, sp, #0
    7212:	60f8      	str	r0, [r7, #12]
    7214:	60b9      	str	r1, [r7, #8]
    7216:	607a      	str	r2, [r7, #4]
    7218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    721a:	68bb      	ldr	r3, [r7, #8]
    721c:	2b00      	cmp	r3, #0
    721e:	d103      	bne.n	7228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    7220:	69bb      	ldr	r3, [r7, #24]
    7222:	69ba      	ldr	r2, [r7, #24]
    7224:	601a      	str	r2, [r3, #0]
    7226:	e002      	b.n	722e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    7228:	69bb      	ldr	r3, [r7, #24]
    722a:	687a      	ldr	r2, [r7, #4]
    722c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    722e:	69bb      	ldr	r3, [r7, #24]
    7230:	68fa      	ldr	r2, [r7, #12]
    7232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    7234:	69bb      	ldr	r3, [r7, #24]
    7236:	68ba      	ldr	r2, [r7, #8]
    7238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    723a:	2101      	movs	r1, #1
    723c:	69b8      	ldr	r0, [r7, #24]
    723e:	f7ff ff5f 	bl	7100 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    7242:	bf00      	nop
    7244:	3710      	adds	r7, #16
    7246:	46bd      	mov	sp, r7
    7248:	bd80      	pop	{r7, pc}

0000724a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    724a:	b580      	push	{r7, lr}
    724c:	b082      	sub	sp, #8
    724e:	af00      	add	r7, sp, #0
    7250:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	2b00      	cmp	r3, #0
    7256:	d00e      	beq.n	7276 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	2200      	movs	r2, #0
    725c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	2200      	movs	r2, #0
    7262:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	2200      	movs	r2, #0
    7268:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    726a:	2300      	movs	r3, #0
    726c:	2200      	movs	r2, #0
    726e:	2100      	movs	r1, #0
    7270:	6878      	ldr	r0, [r7, #4]
    7272:	f000 f81c 	bl	72ae <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    7276:	bf00      	nop
    7278:	3708      	adds	r7, #8
    727a:	46bd      	mov	sp, r7
    727c:	bd80      	pop	{r7, pc}

0000727e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    727e:	b580      	push	{r7, lr}
    7280:	b086      	sub	sp, #24
    7282:	af00      	add	r7, sp, #0
    7284:	4603      	mov	r3, r0
    7286:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    7288:	2301      	movs	r3, #1
    728a:	617b      	str	r3, [r7, #20]
    728c:	2300      	movs	r3, #0
    728e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    7290:	79fb      	ldrb	r3, [r7, #7]
    7292:	461a      	mov	r2, r3
    7294:	6939      	ldr	r1, [r7, #16]
    7296:	6978      	ldr	r0, [r7, #20]
    7298:	f7ff ff8c 	bl	71b4 <xQueueGenericCreate>
    729c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    729e:	68f8      	ldr	r0, [r7, #12]
    72a0:	f7ff ffd3 	bl	724a <prvInitialiseMutex>

		return pxNewQueue;
    72a4:	68fb      	ldr	r3, [r7, #12]
	}
    72a6:	4618      	mov	r0, r3
    72a8:	3718      	adds	r7, #24
    72aa:	46bd      	mov	sp, r7
    72ac:	bd80      	pop	{r7, pc}

000072ae <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    72ae:	b580      	push	{r7, lr}
    72b0:	b08a      	sub	sp, #40	; 0x28
    72b2:	af00      	add	r7, sp, #0
    72b4:	60f8      	str	r0, [r7, #12]
    72b6:	60b9      	str	r1, [r7, #8]
    72b8:	607a      	str	r2, [r7, #4]
    72ba:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    72bc:	2300      	movs	r3, #0
    72be:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    72c0:	68fb      	ldr	r3, [r7, #12]
    72c2:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    72c4:	f002 ff0c 	bl	a0e0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    72c8:	6a3b      	ldr	r3, [r7, #32]
    72ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    72cc:	6a3b      	ldr	r3, [r7, #32]
    72ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    72d0:	429a      	cmp	r2, r3
    72d2:	d302      	bcc.n	72da <xQueueGenericSend+0x2c>
    72d4:	683b      	ldr	r3, [r7, #0]
    72d6:	2b02      	cmp	r3, #2
    72d8:	d129      	bne.n	732e <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    72da:	683a      	ldr	r2, [r7, #0]
    72dc:	68b9      	ldr	r1, [r7, #8]
    72de:	6a38      	ldr	r0, [r7, #32]
    72e0:	f000 fc28 	bl	7b34 <prvCopyDataToQueue>
    72e4:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    72e6:	6a3b      	ldr	r3, [r7, #32]
    72e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72ea:	2b00      	cmp	r3, #0
    72ec:	d010      	beq.n	7310 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    72ee:	6a3b      	ldr	r3, [r7, #32]
    72f0:	3324      	adds	r3, #36	; 0x24
    72f2:	4618      	mov	r0, r3
    72f4:	f001 fbfc 	bl	8af0 <xTaskRemoveFromEventList>
    72f8:	4603      	mov	r3, r0
    72fa:	2b00      	cmp	r3, #0
    72fc:	d013      	beq.n	7326 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    72fe:	4b40      	ldr	r3, [pc, #256]	; (7400 <xQueueGenericSend+0x152>)
    7300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7304:	601a      	str	r2, [r3, #0]
    7306:	f3bf 8f4f 	dsb	sy
    730a:	f3bf 8f6f 	isb	sy
    730e:	e00a      	b.n	7326 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    7310:	69fb      	ldr	r3, [r7, #28]
    7312:	2b00      	cmp	r3, #0
    7314:	d007      	beq.n	7326 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    7316:	4b3a      	ldr	r3, [pc, #232]	; (7400 <xQueueGenericSend+0x152>)
    7318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    731c:	601a      	str	r2, [r3, #0]
    731e:	f3bf 8f4f 	dsb	sy
    7322:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    7326:	f002 fef3 	bl	a110 <vPortExitCritical>
				return pdPASS;
    732a:	2301      	movs	r3, #1
    732c:	e063      	b.n	73f6 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    732e:	687b      	ldr	r3, [r7, #4]
    7330:	2b00      	cmp	r3, #0
    7332:	d103      	bne.n	733c <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7334:	f002 feec 	bl	a110 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    7338:	2300      	movs	r3, #0
    733a:	e05c      	b.n	73f6 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    733e:	2b00      	cmp	r3, #0
    7340:	d106      	bne.n	7350 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7342:	f107 0314 	add.w	r3, r7, #20
    7346:	4618      	mov	r0, r3
    7348:	f001 fc80 	bl	8c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    734c:	2301      	movs	r3, #1
    734e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7350:	f002 fede 	bl	a110 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    7354:	f001 f9c2 	bl	86dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    7358:	f002 fec2 	bl	a0e0 <vPortEnterCritical>
    735c:	6a3b      	ldr	r3, [r7, #32]
    735e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    7362:	b25b      	sxtb	r3, r3
    7364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7368:	d103      	bne.n	7372 <xQueueGenericSend+0xc4>
    736a:	6a3b      	ldr	r3, [r7, #32]
    736c:	2200      	movs	r2, #0
    736e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    7372:	6a3b      	ldr	r3, [r7, #32]
    7374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    7378:	b25b      	sxtb	r3, r3
    737a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    737e:	d103      	bne.n	7388 <xQueueGenericSend+0xda>
    7380:	6a3b      	ldr	r3, [r7, #32]
    7382:	2200      	movs	r2, #0
    7384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    7388:	f002 fec2 	bl	a110 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    738c:	1d3a      	adds	r2, r7, #4
    738e:	f107 0314 	add.w	r3, r7, #20
    7392:	4611      	mov	r1, r2
    7394:	4618      	mov	r0, r3
    7396:	f001 fc6f 	bl	8c78 <xTaskCheckForTimeOut>
    739a:	4603      	mov	r3, r0
    739c:	2b00      	cmp	r3, #0
    739e:	d124      	bne.n	73ea <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    73a0:	6a38      	ldr	r0, [r7, #32]
    73a2:	f000 fcd2 	bl	7d4a <prvIsQueueFull>
    73a6:	4603      	mov	r3, r0
    73a8:	2b00      	cmp	r3, #0
    73aa:	d018      	beq.n	73de <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    73ac:	6a3b      	ldr	r3, [r7, #32]
    73ae:	3310      	adds	r3, #16
    73b0:	687a      	ldr	r2, [r7, #4]
    73b2:	4611      	mov	r1, r2
    73b4:	4618      	mov	r0, r3
    73b6:	f001 fb67 	bl	8a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    73ba:	6a38      	ldr	r0, [r7, #32]
    73bc:	f000 fc4a 	bl	7c54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    73c0:	f001 f99a 	bl	86f8 <xTaskResumeAll>
    73c4:	4603      	mov	r3, r0
    73c6:	2b00      	cmp	r3, #0
    73c8:	f47f af7c 	bne.w	72c4 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    73cc:	4b0c      	ldr	r3, [pc, #48]	; (7400 <xQueueGenericSend+0x152>)
    73ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    73d2:	601a      	str	r2, [r3, #0]
    73d4:	f3bf 8f4f 	dsb	sy
    73d8:	f3bf 8f6f 	isb	sy
    73dc:	e772      	b.n	72c4 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    73de:	6a38      	ldr	r0, [r7, #32]
    73e0:	f000 fc38 	bl	7c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    73e4:	f001 f988 	bl	86f8 <xTaskResumeAll>
    73e8:	e76c      	b.n	72c4 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    73ea:	6a38      	ldr	r0, [r7, #32]
    73ec:	f000 fc32 	bl	7c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    73f0:	f001 f982 	bl	86f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    73f4:	2300      	movs	r3, #0
		}
	}
}
    73f6:	4618      	mov	r0, r3
    73f8:	3728      	adds	r7, #40	; 0x28
    73fa:	46bd      	mov	sp, r7
    73fc:	bd80      	pop	{r7, pc}
    73fe:	bf00      	nop
    7400:	e000ed04 	.word	0xe000ed04

00007404 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7404:	b580      	push	{r7, lr}
    7406:	b08c      	sub	sp, #48	; 0x30
    7408:	af00      	add	r7, sp, #0
    740a:	60f8      	str	r0, [r7, #12]
    740c:	60b9      	str	r1, [r7, #8]
    740e:	607a      	str	r2, [r7, #4]
    7410:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7412:	68fb      	ldr	r3, [r7, #12]
    7414:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    7416:	f3ef 8211 	mrs	r2, BASEPRI
    741a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    741e:	f383 8811 	msr	BASEPRI, r3
    7422:	f3bf 8f6f 	isb	sy
    7426:	f3bf 8f4f 	dsb	sy
    742a:	61fa      	str	r2, [r7, #28]
    742c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    742e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7430:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    7432:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7436:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    743a:	429a      	cmp	r2, r3
    743c:	d302      	bcc.n	7444 <xQueueGenericSendFromISR+0x40>
    743e:	683b      	ldr	r3, [r7, #0]
    7440:	2b02      	cmp	r3, #2
    7442:	d12c      	bne.n	749e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    7444:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    744e:	683a      	ldr	r2, [r7, #0]
    7450:	68b9      	ldr	r1, [r7, #8]
    7452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7454:	f000 fb6e 	bl	7b34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7458:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
    745c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7460:	d112      	bne.n	7488 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7466:	2b00      	cmp	r3, #0
    7468:	d016      	beq.n	7498 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    746c:	3324      	adds	r3, #36	; 0x24
    746e:	4618      	mov	r0, r3
    7470:	f001 fb3e 	bl	8af0 <xTaskRemoveFromEventList>
    7474:	4603      	mov	r3, r0
    7476:	2b00      	cmp	r3, #0
    7478:	d00e      	beq.n	7498 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	2b00      	cmp	r3, #0
    747e:	d00b      	beq.n	7498 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    7480:	687b      	ldr	r3, [r7, #4]
    7482:	2201      	movs	r2, #1
    7484:	601a      	str	r2, [r3, #0]
    7486:	e007      	b.n	7498 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    748c:	3301      	adds	r3, #1
    748e:	b2db      	uxtb	r3, r3
    7490:	b25a      	sxtb	r2, r3
    7492:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    7498:	2301      	movs	r3, #1
    749a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
    749c:	e001      	b.n	74a2 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    749e:	2300      	movs	r3, #0
    74a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    74a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    74a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    74a6:	697b      	ldr	r3, [r7, #20]
    74a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    74ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    74ae:	4618      	mov	r0, r3
    74b0:	3730      	adds	r7, #48	; 0x30
    74b2:	46bd      	mov	sp, r7
    74b4:	bd80      	pop	{r7, pc}

000074b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    74b6:	b580      	push	{r7, lr}
    74b8:	b08a      	sub	sp, #40	; 0x28
    74ba:	af00      	add	r7, sp, #0
    74bc:	6078      	str	r0, [r7, #4]
    74be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	623b      	str	r3, [r7, #32]
	__asm volatile
    74c4:	f3ef 8211 	mrs	r2, BASEPRI
    74c8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    74cc:	f383 8811 	msr	BASEPRI, r3
    74d0:	f3bf 8f6f 	isb	sy
    74d4:	f3bf 8f4f 	dsb	sy
    74d8:	613a      	str	r2, [r7, #16]
    74da:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    74dc:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    74de:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    74e0:	6a3b      	ldr	r3, [r7, #32]
    74e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    74e4:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    74e6:	6a3b      	ldr	r3, [r7, #32]
    74e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    74ea:	69ba      	ldr	r2, [r7, #24]
    74ec:	429a      	cmp	r2, r3
    74ee:	d229      	bcs.n	7544 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    74f0:	6a3b      	ldr	r3, [r7, #32]
    74f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    74f6:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    74f8:	69bb      	ldr	r3, [r7, #24]
    74fa:	1c5a      	adds	r2, r3, #1
    74fc:	6a3b      	ldr	r3, [r7, #32]
    74fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7500:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7508:	d112      	bne.n	7530 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    750a:	6a3b      	ldr	r3, [r7, #32]
    750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    750e:	2b00      	cmp	r3, #0
    7510:	d015      	beq.n	753e <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7512:	6a3b      	ldr	r3, [r7, #32]
    7514:	3324      	adds	r3, #36	; 0x24
    7516:	4618      	mov	r0, r3
    7518:	f001 faea 	bl	8af0 <xTaskRemoveFromEventList>
    751c:	4603      	mov	r3, r0
    751e:	2b00      	cmp	r3, #0
    7520:	d00d      	beq.n	753e <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    7522:	683b      	ldr	r3, [r7, #0]
    7524:	2b00      	cmp	r3, #0
    7526:	d00a      	beq.n	753e <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    7528:	683b      	ldr	r3, [r7, #0]
    752a:	2201      	movs	r2, #1
    752c:	601a      	str	r2, [r3, #0]
    752e:	e006      	b.n	753e <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7530:	7dfb      	ldrb	r3, [r7, #23]
    7532:	3301      	adds	r3, #1
    7534:	b2db      	uxtb	r3, r3
    7536:	b25a      	sxtb	r2, r3
    7538:	6a3b      	ldr	r3, [r7, #32]
    753a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    753e:	2301      	movs	r3, #1
    7540:	627b      	str	r3, [r7, #36]	; 0x24
    7542:	e001      	b.n	7548 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    7544:	2300      	movs	r3, #0
    7546:	627b      	str	r3, [r7, #36]	; 0x24
    7548:	69fb      	ldr	r3, [r7, #28]
    754a:	60bb      	str	r3, [r7, #8]
	__asm volatile
    754c:	68bb      	ldr	r3, [r7, #8]
    754e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    7552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7554:	4618      	mov	r0, r3
    7556:	3728      	adds	r7, #40	; 0x28
    7558:	46bd      	mov	sp, r7
    755a:	bd80      	pop	{r7, pc}

0000755c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    755c:	b580      	push	{r7, lr}
    755e:	b08a      	sub	sp, #40	; 0x28
    7560:	af00      	add	r7, sp, #0
    7562:	60f8      	str	r0, [r7, #12]
    7564:	60b9      	str	r1, [r7, #8]
    7566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    7568:	2300      	movs	r3, #0
    756a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    756c:	68fb      	ldr	r3, [r7, #12]
    756e:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7570:	f002 fdb6 	bl	a0e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7574:	6a3b      	ldr	r3, [r7, #32]
    7576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7578:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    757a:	69fb      	ldr	r3, [r7, #28]
    757c:	2b00      	cmp	r3, #0
    757e:	d01f      	beq.n	75c0 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    7580:	68b9      	ldr	r1, [r7, #8]
    7582:	6a38      	ldr	r0, [r7, #32]
    7584:	f000 fb40 	bl	7c08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    7588:	69fb      	ldr	r3, [r7, #28]
    758a:	1e5a      	subs	r2, r3, #1
    758c:	6a3b      	ldr	r3, [r7, #32]
    758e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7590:	6a3b      	ldr	r3, [r7, #32]
    7592:	691b      	ldr	r3, [r3, #16]
    7594:	2b00      	cmp	r3, #0
    7596:	d00f      	beq.n	75b8 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7598:	6a3b      	ldr	r3, [r7, #32]
    759a:	3310      	adds	r3, #16
    759c:	4618      	mov	r0, r3
    759e:	f001 faa7 	bl	8af0 <xTaskRemoveFromEventList>
    75a2:	4603      	mov	r3, r0
    75a4:	2b00      	cmp	r3, #0
    75a6:	d007      	beq.n	75b8 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    75a8:	4b3c      	ldr	r3, [pc, #240]	; (769c <xQueueReceive+0x140>)
    75aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    75ae:	601a      	str	r2, [r3, #0]
    75b0:	f3bf 8f4f 	dsb	sy
    75b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    75b8:	f002 fdaa 	bl	a110 <vPortExitCritical>
				return pdPASS;
    75bc:	2301      	movs	r3, #1
    75be:	e069      	b.n	7694 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	2b00      	cmp	r3, #0
    75c4:	d103      	bne.n	75ce <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    75c6:	f002 fda3 	bl	a110 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    75ca:	2300      	movs	r3, #0
    75cc:	e062      	b.n	7694 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
    75ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75d0:	2b00      	cmp	r3, #0
    75d2:	d106      	bne.n	75e2 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    75d4:	f107 0314 	add.w	r3, r7, #20
    75d8:	4618      	mov	r0, r3
    75da:	f001 fb37 	bl	8c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    75de:	2301      	movs	r3, #1
    75e0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    75e2:	f002 fd95 	bl	a110 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    75e6:	f001 f879 	bl	86dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    75ea:	f002 fd79 	bl	a0e0 <vPortEnterCritical>
    75ee:	6a3b      	ldr	r3, [r7, #32]
    75f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    75f4:	b25b      	sxtb	r3, r3
    75f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    75fa:	d103      	bne.n	7604 <xQueueReceive+0xa8>
    75fc:	6a3b      	ldr	r3, [r7, #32]
    75fe:	2200      	movs	r2, #0
    7600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    7604:	6a3b      	ldr	r3, [r7, #32]
    7606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    760a:	b25b      	sxtb	r3, r3
    760c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7610:	d103      	bne.n	761a <xQueueReceive+0xbe>
    7612:	6a3b      	ldr	r3, [r7, #32]
    7614:	2200      	movs	r2, #0
    7616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    761a:	f002 fd79 	bl	a110 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    761e:	1d3a      	adds	r2, r7, #4
    7620:	f107 0314 	add.w	r3, r7, #20
    7624:	4611      	mov	r1, r2
    7626:	4618      	mov	r0, r3
    7628:	f001 fb26 	bl	8c78 <xTaskCheckForTimeOut>
    762c:	4603      	mov	r3, r0
    762e:	2b00      	cmp	r3, #0
    7630:	d123      	bne.n	767a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7632:	6a38      	ldr	r0, [r7, #32]
    7634:	f000 fb60 	bl	7cf8 <prvIsQueueEmpty>
    7638:	4603      	mov	r3, r0
    763a:	2b00      	cmp	r3, #0
    763c:	d017      	beq.n	766e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    763e:	6a3b      	ldr	r3, [r7, #32]
    7640:	3324      	adds	r3, #36	; 0x24
    7642:	687a      	ldr	r2, [r7, #4]
    7644:	4611      	mov	r1, r2
    7646:	4618      	mov	r0, r3
    7648:	f001 fa1e 	bl	8a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    764c:	6a38      	ldr	r0, [r7, #32]
    764e:	f000 fb01 	bl	7c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    7652:	f001 f851 	bl	86f8 <xTaskResumeAll>
    7656:	4603      	mov	r3, r0
    7658:	2b00      	cmp	r3, #0
    765a:	d189      	bne.n	7570 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
    765c:	4b0f      	ldr	r3, [pc, #60]	; (769c <xQueueReceive+0x140>)
    765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7662:	601a      	str	r2, [r3, #0]
    7664:	f3bf 8f4f 	dsb	sy
    7668:	f3bf 8f6f 	isb	sy
    766c:	e780      	b.n	7570 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    766e:	6a38      	ldr	r0, [r7, #32]
    7670:	f000 faf0 	bl	7c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    7674:	f001 f840 	bl	86f8 <xTaskResumeAll>
    7678:	e77a      	b.n	7570 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    767a:	6a38      	ldr	r0, [r7, #32]
    767c:	f000 faea 	bl	7c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    7680:	f001 f83a 	bl	86f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7684:	6a38      	ldr	r0, [r7, #32]
    7686:	f000 fb37 	bl	7cf8 <prvIsQueueEmpty>
    768a:	4603      	mov	r3, r0
    768c:	2b00      	cmp	r3, #0
    768e:	f43f af6f 	beq.w	7570 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    7692:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7694:	4618      	mov	r0, r3
    7696:	3728      	adds	r7, #40	; 0x28
    7698:	46bd      	mov	sp, r7
    769a:	bd80      	pop	{r7, pc}
    769c:	e000ed04 	.word	0xe000ed04

000076a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    76a0:	b580      	push	{r7, lr}
    76a2:	b08a      	sub	sp, #40	; 0x28
    76a4:	af00      	add	r7, sp, #0
    76a6:	6078      	str	r0, [r7, #4]
    76a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    76aa:	2300      	movs	r3, #0
    76ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    76b2:	2300      	movs	r3, #0
    76b4:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    76b6:	f002 fd13 	bl	a0e0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    76ba:	69fb      	ldr	r3, [r7, #28]
    76bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    76be:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    76c0:	69bb      	ldr	r3, [r7, #24]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d024      	beq.n	7710 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    76c6:	69bb      	ldr	r3, [r7, #24]
    76c8:	1e5a      	subs	r2, r3, #1
    76ca:	69fb      	ldr	r3, [r7, #28]
    76cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    76ce:	69fb      	ldr	r3, [r7, #28]
    76d0:	681b      	ldr	r3, [r3, #0]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d104      	bne.n	76e0 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    76d6:	f001 fd67 	bl	91a8 <pvTaskIncrementMutexHeldCount>
    76da:	4602      	mov	r2, r0
    76dc:	69fb      	ldr	r3, [r7, #28]
    76de:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    76e0:	69fb      	ldr	r3, [r7, #28]
    76e2:	691b      	ldr	r3, [r3, #16]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d00f      	beq.n	7708 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    76e8:	69fb      	ldr	r3, [r7, #28]
    76ea:	3310      	adds	r3, #16
    76ec:	4618      	mov	r0, r3
    76ee:	f001 f9ff 	bl	8af0 <xTaskRemoveFromEventList>
    76f2:	4603      	mov	r3, r0
    76f4:	2b00      	cmp	r3, #0
    76f6:	d007      	beq.n	7708 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
    76f8:	4b4c      	ldr	r3, [pc, #304]	; (782c <xQueueSemaphoreTake+0x18c>)
    76fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    76fe:	601a      	str	r2, [r3, #0]
    7700:	f3bf 8f4f 	dsb	sy
    7704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7708:	f002 fd02 	bl	a110 <vPortExitCritical>
				return pdPASS;
    770c:	2301      	movs	r3, #1
    770e:	e089      	b.n	7824 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7710:	683b      	ldr	r3, [r7, #0]
    7712:	2b00      	cmp	r3, #0
    7714:	d103      	bne.n	771e <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    7716:	f002 fcfb 	bl	a110 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    771a:	2300      	movs	r3, #0
    771c:	e082      	b.n	7824 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
    771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7720:	2b00      	cmp	r3, #0
    7722:	d106      	bne.n	7732 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7724:	f107 030c 	add.w	r3, r7, #12
    7728:	4618      	mov	r0, r3
    772a:	f001 fa8f 	bl	8c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    772e:	2301      	movs	r3, #1
    7730:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7732:	f002 fced 	bl	a110 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    7736:	f000 ffd1 	bl	86dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    773a:	f002 fcd1 	bl	a0e0 <vPortEnterCritical>
    773e:	69fb      	ldr	r3, [r7, #28]
    7740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    7744:	b25b      	sxtb	r3, r3
    7746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    774a:	d103      	bne.n	7754 <xQueueSemaphoreTake+0xb4>
    774c:	69fb      	ldr	r3, [r7, #28]
    774e:	2200      	movs	r2, #0
    7750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    7754:	69fb      	ldr	r3, [r7, #28]
    7756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    775a:	b25b      	sxtb	r3, r3
    775c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7760:	d103      	bne.n	776a <xQueueSemaphoreTake+0xca>
    7762:	69fb      	ldr	r3, [r7, #28]
    7764:	2200      	movs	r2, #0
    7766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    776a:	f002 fcd1 	bl	a110 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    776e:	463a      	mov	r2, r7
    7770:	f107 030c 	add.w	r3, r7, #12
    7774:	4611      	mov	r1, r2
    7776:	4618      	mov	r0, r3
    7778:	f001 fa7e 	bl	8c78 <xTaskCheckForTimeOut>
    777c:	4603      	mov	r3, r0
    777e:	2b00      	cmp	r3, #0
    7780:	d132      	bne.n	77e8 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7782:	69f8      	ldr	r0, [r7, #28]
    7784:	f000 fab8 	bl	7cf8 <prvIsQueueEmpty>
    7788:	4603      	mov	r3, r0
    778a:	2b00      	cmp	r3, #0
    778c:	d026      	beq.n	77dc <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    778e:	69fb      	ldr	r3, [r7, #28]
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	2b00      	cmp	r3, #0
    7794:	d109      	bne.n	77aa <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
    7796:	f002 fca3 	bl	a0e0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    779a:	69fb      	ldr	r3, [r7, #28]
    779c:	685b      	ldr	r3, [r3, #4]
    779e:	4618      	mov	r0, r3
    77a0:	f001 fb82 	bl	8ea8 <xTaskPriorityInherit>
    77a4:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
    77a6:	f002 fcb3 	bl	a110 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    77aa:	69fb      	ldr	r3, [r7, #28]
    77ac:	3324      	adds	r3, #36	; 0x24
    77ae:	683a      	ldr	r2, [r7, #0]
    77b0:	4611      	mov	r1, r2
    77b2:	4618      	mov	r0, r3
    77b4:	f001 f968 	bl	8a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    77b8:	69f8      	ldr	r0, [r7, #28]
    77ba:	f000 fa4b 	bl	7c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    77be:	f000 ff9b 	bl	86f8 <xTaskResumeAll>
    77c2:	4603      	mov	r3, r0
    77c4:	2b00      	cmp	r3, #0
    77c6:	f47f af76 	bne.w	76b6 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
    77ca:	4b18      	ldr	r3, [pc, #96]	; (782c <xQueueSemaphoreTake+0x18c>)
    77cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    77d0:	601a      	str	r2, [r3, #0]
    77d2:	f3bf 8f4f 	dsb	sy
    77d6:	f3bf 8f6f 	isb	sy
    77da:	e76c      	b.n	76b6 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    77dc:	69f8      	ldr	r0, [r7, #28]
    77de:	f000 fa39 	bl	7c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    77e2:	f000 ff89 	bl	86f8 <xTaskResumeAll>
    77e6:	e766      	b.n	76b6 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    77e8:	69f8      	ldr	r0, [r7, #28]
    77ea:	f000 fa33 	bl	7c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    77ee:	f000 ff83 	bl	86f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    77f2:	69f8      	ldr	r0, [r7, #28]
    77f4:	f000 fa80 	bl	7cf8 <prvIsQueueEmpty>
    77f8:	4603      	mov	r3, r0
    77fa:	2b00      	cmp	r3, #0
    77fc:	f43f af5b 	beq.w	76b6 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    7800:	6a3b      	ldr	r3, [r7, #32]
    7802:	2b00      	cmp	r3, #0
    7804:	d00d      	beq.n	7822 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
    7806:	f002 fc6b 	bl	a0e0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    780a:	69f8      	ldr	r0, [r7, #28]
    780c:	f000 f97b 	bl	7b06 <prvGetDisinheritPriorityAfterTimeout>
    7810:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    7812:	69fb      	ldr	r3, [r7, #28]
    7814:	685b      	ldr	r3, [r3, #4]
    7816:	6979      	ldr	r1, [r7, #20]
    7818:	4618      	mov	r0, r3
    781a:	f001 fc2f 	bl	907c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
    781e:	f002 fc77 	bl	a110 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    7822:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7824:	4618      	mov	r0, r3
    7826:	3728      	adds	r7, #40	; 0x28
    7828:	46bd      	mov	sp, r7
    782a:	bd80      	pop	{r7, pc}
    782c:	e000ed04 	.word	0xe000ed04

00007830 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    7830:	b580      	push	{r7, lr}
    7832:	b08a      	sub	sp, #40	; 0x28
    7834:	af00      	add	r7, sp, #0
    7836:	60f8      	str	r0, [r7, #12]
    7838:	60b9      	str	r1, [r7, #8]
    783a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    783c:	2300      	movs	r3, #0
    783e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7840:	68fb      	ldr	r3, [r7, #12]
    7842:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7844:	f002 fc4c 	bl	a0e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7848:	6a3b      	ldr	r3, [r7, #32]
    784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    784c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    784e:	69fb      	ldr	r3, [r7, #28]
    7850:	2b00      	cmp	r3, #0
    7852:	d021      	beq.n	7898 <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    7854:	6a3b      	ldr	r3, [r7, #32]
    7856:	68db      	ldr	r3, [r3, #12]
    7858:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    785a:	68b9      	ldr	r1, [r7, #8]
    785c:	6a38      	ldr	r0, [r7, #32]
    785e:	f000 f9d3 	bl	7c08 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    7862:	6a3b      	ldr	r3, [r7, #32]
    7864:	69ba      	ldr	r2, [r7, #24]
    7866:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7868:	6a3b      	ldr	r3, [r7, #32]
    786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    786c:	2b00      	cmp	r3, #0
    786e:	d00f      	beq.n	7890 <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7870:	6a3b      	ldr	r3, [r7, #32]
    7872:	3324      	adds	r3, #36	; 0x24
    7874:	4618      	mov	r0, r3
    7876:	f001 f93b 	bl	8af0 <xTaskRemoveFromEventList>
    787a:	4603      	mov	r3, r0
    787c:	2b00      	cmp	r3, #0
    787e:	d007      	beq.n	7890 <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    7880:	4b3c      	ldr	r3, [pc, #240]	; (7974 <xQueuePeek+0x144>)
    7882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7886:	601a      	str	r2, [r3, #0]
    7888:	f3bf 8f4f 	dsb	sy
    788c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7890:	f002 fc3e 	bl	a110 <vPortExitCritical>
				return pdPASS;
    7894:	2301      	movs	r3, #1
    7896:	e069      	b.n	796c <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	2b00      	cmp	r3, #0
    789c:	d103      	bne.n	78a6 <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    789e:	f002 fc37 	bl	a110 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    78a2:	2300      	movs	r3, #0
    78a4:	e062      	b.n	796c <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
    78a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78a8:	2b00      	cmp	r3, #0
    78aa:	d106      	bne.n	78ba <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    78ac:	f107 0310 	add.w	r3, r7, #16
    78b0:	4618      	mov	r0, r3
    78b2:	f001 f9cb 	bl	8c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    78b6:	2301      	movs	r3, #1
    78b8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    78ba:	f002 fc29 	bl	a110 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    78be:	f000 ff0d 	bl	86dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    78c2:	f002 fc0d 	bl	a0e0 <vPortEnterCritical>
    78c6:	6a3b      	ldr	r3, [r7, #32]
    78c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    78cc:	b25b      	sxtb	r3, r3
    78ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    78d2:	d103      	bne.n	78dc <xQueuePeek+0xac>
    78d4:	6a3b      	ldr	r3, [r7, #32]
    78d6:	2200      	movs	r2, #0
    78d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    78dc:	6a3b      	ldr	r3, [r7, #32]
    78de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    78e2:	b25b      	sxtb	r3, r3
    78e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    78e8:	d103      	bne.n	78f2 <xQueuePeek+0xc2>
    78ea:	6a3b      	ldr	r3, [r7, #32]
    78ec:	2200      	movs	r2, #0
    78ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    78f2:	f002 fc0d 	bl	a110 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    78f6:	1d3a      	adds	r2, r7, #4
    78f8:	f107 0310 	add.w	r3, r7, #16
    78fc:	4611      	mov	r1, r2
    78fe:	4618      	mov	r0, r3
    7900:	f001 f9ba 	bl	8c78 <xTaskCheckForTimeOut>
    7904:	4603      	mov	r3, r0
    7906:	2b00      	cmp	r3, #0
    7908:	d123      	bne.n	7952 <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    790a:	6a38      	ldr	r0, [r7, #32]
    790c:	f000 f9f4 	bl	7cf8 <prvIsQueueEmpty>
    7910:	4603      	mov	r3, r0
    7912:	2b00      	cmp	r3, #0
    7914:	d017      	beq.n	7946 <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7916:	6a3b      	ldr	r3, [r7, #32]
    7918:	3324      	adds	r3, #36	; 0x24
    791a:	687a      	ldr	r2, [r7, #4]
    791c:	4611      	mov	r1, r2
    791e:	4618      	mov	r0, r3
    7920:	f001 f8b2 	bl	8a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    7924:	6a38      	ldr	r0, [r7, #32]
    7926:	f000 f995 	bl	7c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    792a:	f000 fee5 	bl	86f8 <xTaskResumeAll>
    792e:	4603      	mov	r3, r0
    7930:	2b00      	cmp	r3, #0
    7932:	d187      	bne.n	7844 <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
    7934:	4b0f      	ldr	r3, [pc, #60]	; (7974 <xQueuePeek+0x144>)
    7936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    793a:	601a      	str	r2, [r3, #0]
    793c:	f3bf 8f4f 	dsb	sy
    7940:	f3bf 8f6f 	isb	sy
    7944:	e77e      	b.n	7844 <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    7946:	6a38      	ldr	r0, [r7, #32]
    7948:	f000 f984 	bl	7c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    794c:	f000 fed4 	bl	86f8 <xTaskResumeAll>
    7950:	e778      	b.n	7844 <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    7952:	6a38      	ldr	r0, [r7, #32]
    7954:	f000 f97e 	bl	7c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    7958:	f000 fece 	bl	86f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    795c:	6a38      	ldr	r0, [r7, #32]
    795e:	f000 f9cb 	bl	7cf8 <prvIsQueueEmpty>
    7962:	4603      	mov	r3, r0
    7964:	2b00      	cmp	r3, #0
    7966:	f43f af6d 	beq.w	7844 <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    796a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    796c:	4618      	mov	r0, r3
    796e:	3728      	adds	r7, #40	; 0x28
    7970:	46bd      	mov	sp, r7
    7972:	bd80      	pop	{r7, pc}
    7974:	e000ed04 	.word	0xe000ed04

00007978 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    7978:	b580      	push	{r7, lr}
    797a:	b08c      	sub	sp, #48	; 0x30
    797c:	af00      	add	r7, sp, #0
    797e:	60f8      	str	r0, [r7, #12]
    7980:	60b9      	str	r1, [r7, #8]
    7982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7984:	68fb      	ldr	r3, [r7, #12]
    7986:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    7988:	f3ef 8211 	mrs	r2, BASEPRI
    798c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    7990:	f383 8811 	msr	BASEPRI, r3
    7994:	f3bf 8f6f 	isb	sy
    7998:	f3bf 8f4f 	dsb	sy
    799c:	61ba      	str	r2, [r7, #24]
    799e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    79a0:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    79a2:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    79a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    79a8:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    79aa:	6a3b      	ldr	r3, [r7, #32]
    79ac:	2b00      	cmp	r3, #0
    79ae:	d02d      	beq.n	7a0c <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    79b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    79b6:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    79b8:	68b9      	ldr	r1, [r7, #8]
    79ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    79bc:	f000 f924 	bl	7c08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    79c0:	6a3b      	ldr	r3, [r7, #32]
    79c2:	1e5a      	subs	r2, r3, #1
    79c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    79c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    79cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    79d0:	d112      	bne.n	79f8 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    79d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79d4:	691b      	ldr	r3, [r3, #16]
    79d6:	2b00      	cmp	r3, #0
    79d8:	d015      	beq.n	7a06 <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    79da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79dc:	3310      	adds	r3, #16
    79de:	4618      	mov	r0, r3
    79e0:	f001 f886 	bl	8af0 <xTaskRemoveFromEventList>
    79e4:	4603      	mov	r3, r0
    79e6:	2b00      	cmp	r3, #0
    79e8:	d00d      	beq.n	7a06 <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d00a      	beq.n	7a06 <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	2201      	movs	r2, #1
    79f4:	601a      	str	r2, [r3, #0]
    79f6:	e006      	b.n	7a06 <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    79f8:	7ffb      	ldrb	r3, [r7, #31]
    79fa:	3301      	adds	r3, #1
    79fc:	b2db      	uxtb	r3, r3
    79fe:	b25a      	sxtb	r2, r3
    7a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    7a06:	2301      	movs	r3, #1
    7a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    7a0a:	e001      	b.n	7a10 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
    7a0c:	2300      	movs	r3, #0
    7a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7a12:	613b      	str	r3, [r7, #16]
	__asm volatile
    7a14:	693b      	ldr	r3, [r7, #16]
    7a16:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    7a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    7a1c:	4618      	mov	r0, r3
    7a1e:	3730      	adds	r7, #48	; 0x30
    7a20:	46bd      	mov	sp, r7
    7a22:	bd80      	pop	{r7, pc}

00007a24 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b08a      	sub	sp, #40	; 0x28
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
    7a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7a2e:	687b      	ldr	r3, [r7, #4]
    7a30:	623b      	str	r3, [r7, #32]
	__asm volatile
    7a32:	f3ef 8211 	mrs	r2, BASEPRI
    7a36:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    7a3a:	f383 8811 	msr	BASEPRI, r3
    7a3e:	f3bf 8f6f 	isb	sy
    7a42:	f3bf 8f4f 	dsb	sy
    7a46:	617a      	str	r2, [r7, #20]
    7a48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
    7a4a:	697b      	ldr	r3, [r7, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7a4c:	61fb      	str	r3, [r7, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    7a4e:	6a3b      	ldr	r3, [r7, #32]
    7a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7a52:	2b00      	cmp	r3, #0
    7a54:	d00c      	beq.n	7a70 <xQueuePeekFromISR+0x4c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    7a56:	6a3b      	ldr	r3, [r7, #32]
    7a58:	68db      	ldr	r3, [r3, #12]
    7a5a:	61bb      	str	r3, [r7, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    7a5c:	6839      	ldr	r1, [r7, #0]
    7a5e:	6a38      	ldr	r0, [r7, #32]
    7a60:	f000 f8d2 	bl	7c08 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    7a64:	6a3b      	ldr	r3, [r7, #32]
    7a66:	69ba      	ldr	r2, [r7, #24]
    7a68:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
    7a6a:	2301      	movs	r3, #1
    7a6c:	627b      	str	r3, [r7, #36]	; 0x24
    7a6e:	e001      	b.n	7a74 <xQueuePeekFromISR+0x50>
		}
		else
		{
			xReturn = pdFAIL;
    7a70:	2300      	movs	r3, #0
    7a72:	627b      	str	r3, [r7, #36]	; 0x24
    7a74:	69fb      	ldr	r3, [r7, #28]
    7a76:	60fb      	str	r3, [r7, #12]
	__asm volatile
    7a78:	68fb      	ldr	r3, [r7, #12]
    7a7a:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    7a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7a80:	4618      	mov	r0, r3
    7a82:	3728      	adds	r7, #40	; 0x28
    7a84:	46bd      	mov	sp, r7
    7a86:	bd80      	pop	{r7, pc}

00007a88 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    7a88:	b580      	push	{r7, lr}
    7a8a:	b084      	sub	sp, #16
    7a8c:	af00      	add	r7, sp, #0
    7a8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    7a90:	f002 fb26 	bl	a0e0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7a98:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
    7a9a:	f002 fb39 	bl	a110 <vPortExitCritical>

	return uxReturn;
    7a9e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    7aa0:	4618      	mov	r0, r3
    7aa2:	3710      	adds	r7, #16
    7aa4:	46bd      	mov	sp, r7
    7aa6:	bd80      	pop	{r7, pc}

00007aa8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    7aa8:	b580      	push	{r7, lr}
    7aaa:	b084      	sub	sp, #16
    7aac:	af00      	add	r7, sp, #0
    7aae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    7ab4:	f002 fb14 	bl	a0e0 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    7ab8:	68fb      	ldr	r3, [r7, #12]
    7aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7abc:	68fb      	ldr	r3, [r7, #12]
    7abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7ac0:	1ad3      	subs	r3, r2, r3
    7ac2:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
    7ac4:	f002 fb24 	bl	a110 <vPortExitCritical>

	return uxReturn;
    7ac8:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    7aca:	4618      	mov	r0, r3
    7acc:	3710      	adds	r7, #16
    7ace:	46bd      	mov	sp, r7
    7ad0:	bd80      	pop	{r7, pc}

00007ad2 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    7ad2:	b480      	push	{r7}
    7ad4:	b085      	sub	sp, #20
    7ad6:	af00      	add	r7, sp, #0
    7ad8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7ade:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    7ae0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    7ae2:	4618      	mov	r0, r3
    7ae4:	3714      	adds	r7, #20
    7ae6:	46bd      	mov	sp, r7
    7ae8:	bc80      	pop	{r7}
    7aea:	4770      	bx	lr

00007aec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    7aec:	b580      	push	{r7, lr}
    7aee:	b084      	sub	sp, #16
    7af0:	af00      	add	r7, sp, #0
    7af2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	60fb      	str	r3, [r7, #12]

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    7af8:	68f8      	ldr	r0, [r7, #12]
    7afa:	f7f8 fb4d 	bl	198 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    7afe:	bf00      	nop
    7b00:	3710      	adds	r7, #16
    7b02:	46bd      	mov	sp, r7
    7b04:	bd80      	pop	{r7, pc}

00007b06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    7b06:	b480      	push	{r7}
    7b08:	b085      	sub	sp, #20
    7b0a:	af00      	add	r7, sp, #0
    7b0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b12:	2b00      	cmp	r3, #0
    7b14:	d006      	beq.n	7b24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b1a:	681b      	ldr	r3, [r3, #0]
    7b1c:	f1c3 0305 	rsb	r3, r3, #5
    7b20:	60fb      	str	r3, [r7, #12]
    7b22:	e001      	b.n	7b28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7b24:	2300      	movs	r3, #0
    7b26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    7b28:	68fb      	ldr	r3, [r7, #12]
	}
    7b2a:	4618      	mov	r0, r3
    7b2c:	3714      	adds	r7, #20
    7b2e:	46bd      	mov	sp, r7
    7b30:	bc80      	pop	{r7}
    7b32:	4770      	bx	lr

00007b34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b086      	sub	sp, #24
    7b38:	af00      	add	r7, sp, #0
    7b3a:	60f8      	str	r0, [r7, #12]
    7b3c:	60b9      	str	r1, [r7, #8]
    7b3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    7b40:	2300      	movs	r3, #0
    7b42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7b44:	68fb      	ldr	r3, [r7, #12]
    7b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    7b4a:	68fb      	ldr	r3, [r7, #12]
    7b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d10d      	bne.n	7b6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7b52:	68fb      	ldr	r3, [r7, #12]
    7b54:	681b      	ldr	r3, [r3, #0]
    7b56:	2b00      	cmp	r3, #0
    7b58:	d14d      	bne.n	7bf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    7b5a:	68fb      	ldr	r3, [r7, #12]
    7b5c:	685b      	ldr	r3, [r3, #4]
    7b5e:	4618      	mov	r0, r3
    7b60:	f001 fa28 	bl	8fb4 <xTaskPriorityDisinherit>
    7b64:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    7b66:	68fb      	ldr	r3, [r7, #12]
    7b68:	2200      	movs	r2, #0
    7b6a:	605a      	str	r2, [r3, #4]
    7b6c:	e043      	b.n	7bf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d119      	bne.n	7ba8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    7b74:	68fb      	ldr	r3, [r7, #12]
    7b76:	6898      	ldr	r0, [r3, #8]
    7b78:	68fb      	ldr	r3, [r7, #12]
    7b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7b7c:	461a      	mov	r2, r3
    7b7e:	68b9      	ldr	r1, [r7, #8]
    7b80:	f002 fb3e 	bl	a200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    7b84:	68fb      	ldr	r3, [r7, #12]
    7b86:	689a      	ldr	r2, [r3, #8]
    7b88:	68fb      	ldr	r3, [r7, #12]
    7b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7b8c:	441a      	add	r2, r3
    7b8e:	68fb      	ldr	r3, [r7, #12]
    7b90:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7b92:	68fb      	ldr	r3, [r7, #12]
    7b94:	689a      	ldr	r2, [r3, #8]
    7b96:	68fb      	ldr	r3, [r7, #12]
    7b98:	685b      	ldr	r3, [r3, #4]
    7b9a:	429a      	cmp	r2, r3
    7b9c:	d32b      	bcc.n	7bf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7b9e:	68fb      	ldr	r3, [r7, #12]
    7ba0:	681a      	ldr	r2, [r3, #0]
    7ba2:	68fb      	ldr	r3, [r7, #12]
    7ba4:	609a      	str	r2, [r3, #8]
    7ba6:	e026      	b.n	7bf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	68d8      	ldr	r0, [r3, #12]
    7bac:	68fb      	ldr	r3, [r7, #12]
    7bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7bb0:	461a      	mov	r2, r3
    7bb2:	68b9      	ldr	r1, [r7, #8]
    7bb4:	f002 fb24 	bl	a200 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    7bb8:	68fb      	ldr	r3, [r7, #12]
    7bba:	68da      	ldr	r2, [r3, #12]
    7bbc:	68fb      	ldr	r3, [r7, #12]
    7bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7bc0:	425b      	negs	r3, r3
    7bc2:	441a      	add	r2, r3
    7bc4:	68fb      	ldr	r3, [r7, #12]
    7bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7bc8:	68fb      	ldr	r3, [r7, #12]
    7bca:	68da      	ldr	r2, [r3, #12]
    7bcc:	68fb      	ldr	r3, [r7, #12]
    7bce:	681b      	ldr	r3, [r3, #0]
    7bd0:	429a      	cmp	r2, r3
    7bd2:	d207      	bcs.n	7be4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    7bd4:	68fb      	ldr	r3, [r7, #12]
    7bd6:	685a      	ldr	r2, [r3, #4]
    7bd8:	68fb      	ldr	r3, [r7, #12]
    7bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7bdc:	425b      	negs	r3, r3
    7bde:	441a      	add	r2, r3
    7be0:	68fb      	ldr	r3, [r7, #12]
    7be2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	2b02      	cmp	r3, #2
    7be8:	d105      	bne.n	7bf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7bea:	693b      	ldr	r3, [r7, #16]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d002      	beq.n	7bf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7bf0:	693b      	ldr	r3, [r7, #16]
    7bf2:	3b01      	subs	r3, #1
    7bf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7bf6:	693b      	ldr	r3, [r7, #16]
    7bf8:	1c5a      	adds	r2, r3, #1
    7bfa:	68fb      	ldr	r3, [r7, #12]
    7bfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7bfe:	697b      	ldr	r3, [r7, #20]
}
    7c00:	4618      	mov	r0, r3
    7c02:	3718      	adds	r7, #24
    7c04:	46bd      	mov	sp, r7
    7c06:	bd80      	pop	{r7, pc}

00007c08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    7c08:	b580      	push	{r7, lr}
    7c0a:	b082      	sub	sp, #8
    7c0c:	af00      	add	r7, sp, #0
    7c0e:	6078      	str	r0, [r7, #4]
    7c10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7c12:	687b      	ldr	r3, [r7, #4]
    7c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c16:	2b00      	cmp	r3, #0
    7c18:	d018      	beq.n	7c4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	68da      	ldr	r2, [r3, #12]
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c22:	441a      	add	r2, r3
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    7c28:	687b      	ldr	r3, [r7, #4]
    7c2a:	68da      	ldr	r2, [r3, #12]
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	685b      	ldr	r3, [r3, #4]
    7c30:	429a      	cmp	r2, r3
    7c32:	d303      	bcc.n	7c3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	681a      	ldr	r2, [r3, #0]
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	68d9      	ldr	r1, [r3, #12]
    7c40:	687b      	ldr	r3, [r7, #4]
    7c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c44:	461a      	mov	r2, r3
    7c46:	6838      	ldr	r0, [r7, #0]
    7c48:	f002 fada 	bl	a200 <memcpy>
	}
}
    7c4c:	bf00      	nop
    7c4e:	3708      	adds	r7, #8
    7c50:	46bd      	mov	sp, r7
    7c52:	bd80      	pop	{r7, pc}

00007c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	af00      	add	r7, sp, #0
    7c5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    7c5c:	f002 fa40 	bl	a0e0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    7c60:	687b      	ldr	r3, [r7, #4]
    7c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    7c66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7c68:	e011      	b.n	7c8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7c6a:	687b      	ldr	r3, [r7, #4]
    7c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d012      	beq.n	7c98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7c72:	687b      	ldr	r3, [r7, #4]
    7c74:	3324      	adds	r3, #36	; 0x24
    7c76:	4618      	mov	r0, r3
    7c78:	f000 ff3a 	bl	8af0 <xTaskRemoveFromEventList>
    7c7c:	4603      	mov	r3, r0
    7c7e:	2b00      	cmp	r3, #0
    7c80:	d001      	beq.n	7c86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    7c82:	f001 f83f 	bl	8d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    7c86:	7bfb      	ldrb	r3, [r7, #15]
    7c88:	3b01      	subs	r3, #1
    7c8a:	b2db      	uxtb	r3, r3
    7c8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7c92:	2b00      	cmp	r3, #0
    7c94:	dce9      	bgt.n	7c6a <prvUnlockQueue+0x16>
    7c96:	e000      	b.n	7c9a <prvUnlockQueue+0x46>
					break;
    7c98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	22ff      	movs	r2, #255	; 0xff
    7c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    7ca2:	f002 fa35 	bl	a110 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    7ca6:	f002 fa1b 	bl	a0e0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    7cb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7cb2:	e011      	b.n	7cd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	691b      	ldr	r3, [r3, #16]
    7cb8:	2b00      	cmp	r3, #0
    7cba:	d012      	beq.n	7ce2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	3310      	adds	r3, #16
    7cc0:	4618      	mov	r0, r3
    7cc2:	f000 ff15 	bl	8af0 <xTaskRemoveFromEventList>
    7cc6:	4603      	mov	r3, r0
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d001      	beq.n	7cd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    7ccc:	f001 f81a 	bl	8d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    7cd0:	7bbb      	ldrb	r3, [r7, #14]
    7cd2:	3b01      	subs	r3, #1
    7cd4:	b2db      	uxtb	r3, r3
    7cd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    7cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
    7cdc:	2b00      	cmp	r3, #0
    7cde:	dce9      	bgt.n	7cb4 <prvUnlockQueue+0x60>
    7ce0:	e000      	b.n	7ce4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    7ce2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	22ff      	movs	r2, #255	; 0xff
    7ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    7cec:	f002 fa10 	bl	a110 <vPortExitCritical>
}
    7cf0:	bf00      	nop
    7cf2:	3710      	adds	r7, #16
    7cf4:	46bd      	mov	sp, r7
    7cf6:	bd80      	pop	{r7, pc}

00007cf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    7cf8:	b580      	push	{r7, lr}
    7cfa:	b084      	sub	sp, #16
    7cfc:	af00      	add	r7, sp, #0
    7cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7d00:	f002 f9ee 	bl	a0e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    7d04:	687b      	ldr	r3, [r7, #4]
    7d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d102      	bne.n	7d12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    7d0c:	2301      	movs	r3, #1
    7d0e:	60fb      	str	r3, [r7, #12]
    7d10:	e001      	b.n	7d16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    7d12:	2300      	movs	r3, #0
    7d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7d16:	f002 f9fb 	bl	a110 <vPortExitCritical>

	return xReturn;
    7d1a:	68fb      	ldr	r3, [r7, #12]
}
    7d1c:	4618      	mov	r0, r3
    7d1e:	3710      	adds	r7, #16
    7d20:	46bd      	mov	sp, r7
    7d22:	bd80      	pop	{r7, pc}

00007d24 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    7d24:	b480      	push	{r7}
    7d26:	b085      	sub	sp, #20
    7d28:	af00      	add	r7, sp, #0
    7d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7d30:	2b00      	cmp	r3, #0
    7d32:	d102      	bne.n	7d3a <xQueueIsQueueEmptyFromISR+0x16>
	{
		xReturn = pdTRUE;
    7d34:	2301      	movs	r3, #1
    7d36:	60fb      	str	r3, [r7, #12]
    7d38:	e001      	b.n	7d3e <xQueueIsQueueEmptyFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
    7d3a:	2300      	movs	r3, #0
    7d3c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    7d3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    7d40:	4618      	mov	r0, r3
    7d42:	3714      	adds	r7, #20
    7d44:	46bd      	mov	sp, r7
    7d46:	bc80      	pop	{r7}
    7d48:	4770      	bx	lr

00007d4a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    7d4a:	b580      	push	{r7, lr}
    7d4c:	b084      	sub	sp, #16
    7d4e:	af00      	add	r7, sp, #0
    7d50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7d52:	f002 f9c5 	bl	a0e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7d5a:	687b      	ldr	r3, [r7, #4]
    7d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7d5e:	429a      	cmp	r2, r3
    7d60:	d102      	bne.n	7d68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    7d62:	2301      	movs	r3, #1
    7d64:	60fb      	str	r3, [r7, #12]
    7d66:	e001      	b.n	7d6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    7d68:	2300      	movs	r3, #0
    7d6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7d6c:	f002 f9d0 	bl	a110 <vPortExitCritical>

	return xReturn;
    7d70:	68fb      	ldr	r3, [r7, #12]
}
    7d72:	4618      	mov	r0, r3
    7d74:	3710      	adds	r7, #16
    7d76:	46bd      	mov	sp, r7
    7d78:	bd80      	pop	{r7, pc}

00007d7a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    7d7a:	b480      	push	{r7}
    7d7c:	b085      	sub	sp, #20
    7d7e:	af00      	add	r7, sp, #0
    7d80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    7d82:	687b      	ldr	r3, [r7, #4]
    7d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7d86:	687b      	ldr	r3, [r7, #4]
    7d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7d8a:	429a      	cmp	r2, r3
    7d8c:	d102      	bne.n	7d94 <xQueueIsQueueFullFromISR+0x1a>
	{
		xReturn = pdTRUE;
    7d8e:	2301      	movs	r3, #1
    7d90:	60fb      	str	r3, [r7, #12]
    7d92:	e001      	b.n	7d98 <xQueueIsQueueFullFromISR+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
    7d94:	2300      	movs	r3, #0
    7d96:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    7d98:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    7d9a:	4618      	mov	r0, r3
    7d9c:	3714      	adds	r7, #20
    7d9e:	46bd      	mov	sp, r7
    7da0:	bc80      	pop	{r7}
    7da2:	4770      	bx	lr

00007da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    7da4:	b580      	push	{r7, lr}
    7da6:	b08c      	sub	sp, #48	; 0x30
    7da8:	af04      	add	r7, sp, #16
    7daa:	60f8      	str	r0, [r7, #12]
    7dac:	60b9      	str	r1, [r7, #8]
    7dae:	603b      	str	r3, [r7, #0]
    7db0:	4613      	mov	r3, r2
    7db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7db4:	88fb      	ldrh	r3, [r7, #6]
    7db6:	009b      	lsls	r3, r3, #2
    7db8:	4618      	mov	r0, r3
    7dba:	f7f8 f9a7 	bl	10c <pvPortMalloc>
    7dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    7dc0:	697b      	ldr	r3, [r7, #20]
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d00e      	beq.n	7de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    7dc6:	2054      	movs	r0, #84	; 0x54
    7dc8:	f7f8 f9a0 	bl	10c <pvPortMalloc>
    7dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    7dce:	69fb      	ldr	r3, [r7, #28]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d003      	beq.n	7ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    7dd4:	69fb      	ldr	r3, [r7, #28]
    7dd6:	697a      	ldr	r2, [r7, #20]
    7dd8:	631a      	str	r2, [r3, #48]	; 0x30
    7dda:	e005      	b.n	7de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    7ddc:	6978      	ldr	r0, [r7, #20]
    7dde:	f7f8 f9db 	bl	198 <vPortFree>
    7de2:	e001      	b.n	7de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    7de4:	2300      	movs	r3, #0
    7de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    7de8:	69fb      	ldr	r3, [r7, #28]
    7dea:	2b00      	cmp	r3, #0
    7dec:	d013      	beq.n	7e16 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    7dee:	88fa      	ldrh	r2, [r7, #6]
    7df0:	2300      	movs	r3, #0
    7df2:	9303      	str	r3, [sp, #12]
    7df4:	69fb      	ldr	r3, [r7, #28]
    7df6:	9302      	str	r3, [sp, #8]
    7df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7dfa:	9301      	str	r3, [sp, #4]
    7dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7dfe:	9300      	str	r3, [sp, #0]
    7e00:	683b      	ldr	r3, [r7, #0]
    7e02:	68b9      	ldr	r1, [r7, #8]
    7e04:	68f8      	ldr	r0, [r7, #12]
    7e06:	f000 f80e 	bl	7e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    7e0a:	69f8      	ldr	r0, [r7, #28]
    7e0c:	f000 f87a 	bl	7f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    7e10:	2301      	movs	r3, #1
    7e12:	61bb      	str	r3, [r7, #24]
    7e14:	e002      	b.n	7e1c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    7e1c:	69bb      	ldr	r3, [r7, #24]
	}
    7e1e:	4618      	mov	r0, r3
    7e20:	3720      	adds	r7, #32
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}

00007e26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    7e26:	b580      	push	{r7, lr}
    7e28:	b086      	sub	sp, #24
    7e2a:	af00      	add	r7, sp, #0
    7e2c:	60f8      	str	r0, [r7, #12]
    7e2e:	60b9      	str	r1, [r7, #8]
    7e30:	607a      	str	r2, [r7, #4]
    7e32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7e3e:	3b01      	subs	r3, #1
    7e40:	009b      	lsls	r3, r3, #2
    7e42:	4413      	add	r3, r2
    7e44:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7e46:	693b      	ldr	r3, [r7, #16]
    7e48:	f023 0307 	bic.w	r3, r3, #7
    7e4c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7e4e:	2300      	movs	r3, #0
    7e50:	617b      	str	r3, [r7, #20]
    7e52:	e012      	b.n	7e7a <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7e54:	68ba      	ldr	r2, [r7, #8]
    7e56:	697b      	ldr	r3, [r7, #20]
    7e58:	4413      	add	r3, r2
    7e5a:	7819      	ldrb	r1, [r3, #0]
    7e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7e5e:	697b      	ldr	r3, [r7, #20]
    7e60:	4413      	add	r3, r2
    7e62:	3334      	adds	r3, #52	; 0x34
    7e64:	460a      	mov	r2, r1
    7e66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    7e68:	68ba      	ldr	r2, [r7, #8]
    7e6a:	697b      	ldr	r3, [r7, #20]
    7e6c:	4413      	add	r3, r2
    7e6e:	781b      	ldrb	r3, [r3, #0]
    7e70:	2b00      	cmp	r3, #0
    7e72:	d006      	beq.n	7e82 <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7e74:	697b      	ldr	r3, [r7, #20]
    7e76:	3301      	adds	r3, #1
    7e78:	617b      	str	r3, [r7, #20]
    7e7a:	697b      	ldr	r3, [r7, #20]
    7e7c:	2b0f      	cmp	r3, #15
    7e7e:	d9e9      	bls.n	7e54 <prvInitialiseNewTask+0x2e>
    7e80:	e000      	b.n	7e84 <prvInitialiseNewTask+0x5e>
		{
			break;
    7e82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    7e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e86:	2200      	movs	r2, #0
    7e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    7e8c:	6a3b      	ldr	r3, [r7, #32]
    7e8e:	2b04      	cmp	r3, #4
    7e90:	d901      	bls.n	7e96 <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    7e92:	2304      	movs	r3, #4
    7e94:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    7e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e98:	6a3a      	ldr	r2, [r7, #32]
    7e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    7e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e9e:	6a3a      	ldr	r2, [r7, #32]
    7ea0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    7ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ea4:	2200      	movs	r2, #0
    7ea6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eaa:	3304      	adds	r3, #4
    7eac:	4618      	mov	r0, r3
    7eae:	f7ff f896 	bl	6fde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    7eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eb4:	3318      	adds	r3, #24
    7eb6:	4618      	mov	r0, r3
    7eb8:	f7ff f891 	bl	6fde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7ec0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7ec2:	6a3b      	ldr	r3, [r7, #32]
    7ec4:	f1c3 0205 	rsb	r2, r3, #5
    7ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7ed0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    7ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ed4:	2200      	movs	r2, #0
    7ed6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eda:	2200      	movs	r2, #0
    7edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7ee0:	683a      	ldr	r2, [r7, #0]
    7ee2:	68f9      	ldr	r1, [r7, #12]
    7ee4:	6938      	ldr	r0, [r7, #16]
    7ee6:	f002 f86b 	bl	9fc0 <pxPortInitialiseStack>
    7eea:	4602      	mov	r2, r0
    7eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    7ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d002      	beq.n	7efc <prvInitialiseNewTask+0xd6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7efa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7efc:	bf00      	nop
    7efe:	3718      	adds	r7, #24
    7f00:	46bd      	mov	sp, r7
    7f02:	bd80      	pop	{r7, pc}

00007f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    7f04:	b580      	push	{r7, lr}
    7f06:	b082      	sub	sp, #8
    7f08:	af00      	add	r7, sp, #0
    7f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    7f0c:	f002 f8e8 	bl	a0e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    7f10:	4b2a      	ldr	r3, [pc, #168]	; (7fbc <prvAddNewTaskToReadyList+0xb8>)
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	3301      	adds	r3, #1
    7f16:	4a29      	ldr	r2, [pc, #164]	; (7fbc <prvAddNewTaskToReadyList+0xb8>)
    7f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    7f1a:	4b29      	ldr	r3, [pc, #164]	; (7fc0 <prvAddNewTaskToReadyList+0xbc>)
    7f1c:	681b      	ldr	r3, [r3, #0]
    7f1e:	2b00      	cmp	r3, #0
    7f20:	d109      	bne.n	7f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    7f22:	4a27      	ldr	r2, [pc, #156]	; (7fc0 <prvAddNewTaskToReadyList+0xbc>)
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7f28:	4b24      	ldr	r3, [pc, #144]	; (7fbc <prvAddNewTaskToReadyList+0xb8>)
    7f2a:	681b      	ldr	r3, [r3, #0]
    7f2c:	2b01      	cmp	r3, #1
    7f2e:	d110      	bne.n	7f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    7f30:	f000 ff0c 	bl	8d4c <prvInitialiseTaskLists>
    7f34:	e00d      	b.n	7f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    7f36:	4b23      	ldr	r3, [pc, #140]	; (7fc4 <prvAddNewTaskToReadyList+0xc0>)
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d109      	bne.n	7f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    7f3e:	4b20      	ldr	r3, [pc, #128]	; (7fc0 <prvAddNewTaskToReadyList+0xbc>)
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f48:	429a      	cmp	r2, r3
    7f4a:	d802      	bhi.n	7f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    7f4c:	4a1c      	ldr	r2, [pc, #112]	; (7fc0 <prvAddNewTaskToReadyList+0xbc>)
    7f4e:	687b      	ldr	r3, [r7, #4]
    7f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    7f52:	4b1d      	ldr	r3, [pc, #116]	; (7fc8 <prvAddNewTaskToReadyList+0xc4>)
    7f54:	681b      	ldr	r3, [r3, #0]
    7f56:	3301      	adds	r3, #1
    7f58:	4a1b      	ldr	r2, [pc, #108]	; (7fc8 <prvAddNewTaskToReadyList+0xc4>)
    7f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f60:	2201      	movs	r2, #1
    7f62:	409a      	lsls	r2, r3
    7f64:	4b19      	ldr	r3, [pc, #100]	; (7fcc <prvAddNewTaskToReadyList+0xc8>)
    7f66:	681b      	ldr	r3, [r3, #0]
    7f68:	4313      	orrs	r3, r2
    7f6a:	4a18      	ldr	r2, [pc, #96]	; (7fcc <prvAddNewTaskToReadyList+0xc8>)
    7f6c:	6013      	str	r3, [r2, #0]
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f72:	4613      	mov	r3, r2
    7f74:	009b      	lsls	r3, r3, #2
    7f76:	4413      	add	r3, r2
    7f78:	009b      	lsls	r3, r3, #2
    7f7a:	4a15      	ldr	r2, [pc, #84]	; (7fd0 <prvAddNewTaskToReadyList+0xcc>)
    7f7c:	441a      	add	r2, r3
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	3304      	adds	r3, #4
    7f82:	4619      	mov	r1, r3
    7f84:	4610      	mov	r0, r2
    7f86:	f7ff f836 	bl	6ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    7f8a:	f002 f8c1 	bl	a110 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    7f8e:	4b0d      	ldr	r3, [pc, #52]	; (7fc4 <prvAddNewTaskToReadyList+0xc0>)
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	2b00      	cmp	r3, #0
    7f94:	d00e      	beq.n	7fb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7f96:	4b0a      	ldr	r3, [pc, #40]	; (7fc0 <prvAddNewTaskToReadyList+0xbc>)
    7f98:	681b      	ldr	r3, [r3, #0]
    7f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fa0:	429a      	cmp	r2, r3
    7fa2:	d207      	bcs.n	7fb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
    7fa4:	4b0b      	ldr	r3, [pc, #44]	; (7fd4 <prvAddNewTaskToReadyList+0xd0>)
    7fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7faa:	601a      	str	r2, [r3, #0]
    7fac:	f3bf 8f4f 	dsb	sy
    7fb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7fb4:	bf00      	nop
    7fb6:	3708      	adds	r7, #8
    7fb8:	46bd      	mov	sp, r7
    7fba:	bd80      	pop	{r7, pc}
    7fbc:	200049b4 	.word	0x200049b4
    7fc0:	200048dc 	.word	0x200048dc
    7fc4:	200049c0 	.word	0x200049c0
    7fc8:	200049d0 	.word	0x200049d0
    7fcc:	200049bc 	.word	0x200049bc
    7fd0:	200048e0 	.word	0x200048e0
    7fd4:	e000ed04 	.word	0xe000ed04

00007fd8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b084      	sub	sp, #16
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    7fe0:	f002 f87e 	bl	a0e0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d102      	bne.n	7ff0 <vTaskDelete+0x18>
    7fea:	4b31      	ldr	r3, [pc, #196]	; (80b0 <vTaskDelete+0xd8>)
    7fec:	681b      	ldr	r3, [r3, #0]
    7fee:	e000      	b.n	7ff2 <vTaskDelete+0x1a>
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7ff4:	68fb      	ldr	r3, [r7, #12]
    7ff6:	3304      	adds	r3, #4
    7ff8:	4618      	mov	r0, r3
    7ffa:	f7ff f857 	bl	70ac <uxListRemove>
    7ffe:	4603      	mov	r3, r0
    8000:	2b00      	cmp	r3, #0
    8002:	d115      	bne.n	8030 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    8004:	68fb      	ldr	r3, [r7, #12]
    8006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8008:	492a      	ldr	r1, [pc, #168]	; (80b4 <vTaskDelete+0xdc>)
    800a:	4613      	mov	r3, r2
    800c:	009b      	lsls	r3, r3, #2
    800e:	4413      	add	r3, r2
    8010:	009b      	lsls	r3, r3, #2
    8012:	440b      	add	r3, r1
    8014:	681b      	ldr	r3, [r3, #0]
    8016:	2b00      	cmp	r3, #0
    8018:	d10a      	bne.n	8030 <vTaskDelete+0x58>
    801a:	68fb      	ldr	r3, [r7, #12]
    801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    801e:	2201      	movs	r2, #1
    8020:	fa02 f303 	lsl.w	r3, r2, r3
    8024:	43da      	mvns	r2, r3
    8026:	4b24      	ldr	r3, [pc, #144]	; (80b8 <vTaskDelete+0xe0>)
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	4013      	ands	r3, r2
    802c:	4a22      	ldr	r2, [pc, #136]	; (80b8 <vTaskDelete+0xe0>)
    802e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8030:	68fb      	ldr	r3, [r7, #12]
    8032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8034:	2b00      	cmp	r3, #0
    8036:	d004      	beq.n	8042 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8038:	68fb      	ldr	r3, [r7, #12]
    803a:	3318      	adds	r3, #24
    803c:	4618      	mov	r0, r3
    803e:	f7ff f835 	bl	70ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    8042:	4b1e      	ldr	r3, [pc, #120]	; (80bc <vTaskDelete+0xe4>)
    8044:	681b      	ldr	r3, [r3, #0]
    8046:	3301      	adds	r3, #1
    8048:	4a1c      	ldr	r2, [pc, #112]	; (80bc <vTaskDelete+0xe4>)
    804a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
    804c:	4b18      	ldr	r3, [pc, #96]	; (80b0 <vTaskDelete+0xd8>)
    804e:	681b      	ldr	r3, [r3, #0]
    8050:	68fa      	ldr	r2, [r7, #12]
    8052:	429a      	cmp	r2, r3
    8054:	d10b      	bne.n	806e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    8056:	68fb      	ldr	r3, [r7, #12]
    8058:	3304      	adds	r3, #4
    805a:	4619      	mov	r1, r3
    805c:	4818      	ldr	r0, [pc, #96]	; (80c0 <vTaskDelete+0xe8>)
    805e:	f7fe ffca 	bl	6ff6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    8062:	4b18      	ldr	r3, [pc, #96]	; (80c4 <vTaskDelete+0xec>)
    8064:	681b      	ldr	r3, [r3, #0]
    8066:	3301      	adds	r3, #1
    8068:	4a16      	ldr	r2, [pc, #88]	; (80c4 <vTaskDelete+0xec>)
    806a:	6013      	str	r3, [r2, #0]
    806c:	e009      	b.n	8082 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    806e:	4b16      	ldr	r3, [pc, #88]	; (80c8 <vTaskDelete+0xf0>)
    8070:	681b      	ldr	r3, [r3, #0]
    8072:	3b01      	subs	r3, #1
    8074:	4a14      	ldr	r2, [pc, #80]	; (80c8 <vTaskDelete+0xf0>)
    8076:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
    8078:	68f8      	ldr	r0, [r7, #12]
    807a:	f000 fed3 	bl	8e24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    807e:	f000 fee1 	bl	8e44 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    8082:	f002 f845 	bl	a110 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    8086:	4b11      	ldr	r3, [pc, #68]	; (80cc <vTaskDelete+0xf4>)
    8088:	681b      	ldr	r3, [r3, #0]
    808a:	2b00      	cmp	r3, #0
    808c:	d00c      	beq.n	80a8 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
    808e:	4b08      	ldr	r3, [pc, #32]	; (80b0 <vTaskDelete+0xd8>)
    8090:	681b      	ldr	r3, [r3, #0]
    8092:	68fa      	ldr	r2, [r7, #12]
    8094:	429a      	cmp	r2, r3
    8096:	d107      	bne.n	80a8 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    8098:	4b0d      	ldr	r3, [pc, #52]	; (80d0 <vTaskDelete+0xf8>)
    809a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    809e:	601a      	str	r2, [r3, #0]
    80a0:	f3bf 8f4f 	dsb	sy
    80a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    80a8:	bf00      	nop
    80aa:	3710      	adds	r7, #16
    80ac:	46bd      	mov	sp, r7
    80ae:	bd80      	pop	{r7, pc}
    80b0:	200048dc 	.word	0x200048dc
    80b4:	200048e0 	.word	0x200048e0
    80b8:	200049bc 	.word	0x200049bc
    80bc:	200049d0 	.word	0x200049d0
    80c0:	20004988 	.word	0x20004988
    80c4:	2000499c 	.word	0x2000499c
    80c8:	200049b4 	.word	0x200049b4
    80cc:	200049c0 	.word	0x200049c0
    80d0:	e000ed04 	.word	0xe000ed04

000080d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    80d4:	b580      	push	{r7, lr}
    80d6:	b086      	sub	sp, #24
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
    80dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    80de:	2300      	movs	r3, #0
    80e0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    80e2:	f000 fafb 	bl	86dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    80e6:	4b21      	ldr	r3, [pc, #132]	; (816c <vTaskDelayUntil+0x98>)
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	683a      	ldr	r2, [r7, #0]
    80f2:	4413      	add	r3, r2
    80f4:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	681b      	ldr	r3, [r3, #0]
    80fa:	693a      	ldr	r2, [r7, #16]
    80fc:	429a      	cmp	r2, r3
    80fe:	d20b      	bcs.n	8118 <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    8100:	687b      	ldr	r3, [r7, #4]
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	68fa      	ldr	r2, [r7, #12]
    8106:	429a      	cmp	r2, r3
    8108:	d211      	bcs.n	812e <vTaskDelayUntil+0x5a>
    810a:	68fa      	ldr	r2, [r7, #12]
    810c:	693b      	ldr	r3, [r7, #16]
    810e:	429a      	cmp	r2, r3
    8110:	d90d      	bls.n	812e <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
    8112:	2301      	movs	r3, #1
    8114:	617b      	str	r3, [r7, #20]
    8116:	e00a      	b.n	812e <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	681b      	ldr	r3, [r3, #0]
    811c:	68fa      	ldr	r2, [r7, #12]
    811e:	429a      	cmp	r2, r3
    8120:	d303      	bcc.n	812a <vTaskDelayUntil+0x56>
    8122:	68fa      	ldr	r2, [r7, #12]
    8124:	693b      	ldr	r3, [r7, #16]
    8126:	429a      	cmp	r2, r3
    8128:	d901      	bls.n	812e <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
    812a:	2301      	movs	r3, #1
    812c:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	68fa      	ldr	r2, [r7, #12]
    8132:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    8134:	697b      	ldr	r3, [r7, #20]
    8136:	2b00      	cmp	r3, #0
    8138:	d006      	beq.n	8148 <vTaskDelayUntil+0x74>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    813a:	68fa      	ldr	r2, [r7, #12]
    813c:	693b      	ldr	r3, [r7, #16]
    813e:	1ad3      	subs	r3, r2, r3
    8140:	2100      	movs	r1, #0
    8142:	4618      	mov	r0, r3
    8144:	f001 faac 	bl	96a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    8148:	f000 fad6 	bl	86f8 <xTaskResumeAll>
    814c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    814e:	68bb      	ldr	r3, [r7, #8]
    8150:	2b00      	cmp	r3, #0
    8152:	d107      	bne.n	8164 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
    8154:	4b06      	ldr	r3, [pc, #24]	; (8170 <vTaskDelayUntil+0x9c>)
    8156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    815a:	601a      	str	r2, [r3, #0]
    815c:	f3bf 8f4f 	dsb	sy
    8160:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8164:	bf00      	nop
    8166:	3718      	adds	r7, #24
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	200049b8 	.word	0x200049b8
    8170:	e000ed04 	.word	0xe000ed04

00008174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    8174:	b580      	push	{r7, lr}
    8176:	b084      	sub	sp, #16
    8178:	af00      	add	r7, sp, #0
    817a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    817c:	2300      	movs	r3, #0
    817e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	2b00      	cmp	r3, #0
    8184:	d008      	beq.n	8198 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    8186:	f000 faa9 	bl	86dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    818a:	2100      	movs	r1, #0
    818c:	6878      	ldr	r0, [r7, #4]
    818e:	f001 fa87 	bl	96a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    8192:	f000 fab1 	bl	86f8 <xTaskResumeAll>
    8196:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    8198:	68fb      	ldr	r3, [r7, #12]
    819a:	2b00      	cmp	r3, #0
    819c:	d107      	bne.n	81ae <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    819e:	4b06      	ldr	r3, [pc, #24]	; (81b8 <vTaskDelay+0x44>)
    81a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    81a4:	601a      	str	r2, [r3, #0]
    81a6:	f3bf 8f4f 	dsb	sy
    81aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    81ae:	bf00      	nop
    81b0:	3710      	adds	r7, #16
    81b2:	46bd      	mov	sp, r7
    81b4:	bd80      	pop	{r7, pc}
    81b6:	bf00      	nop
    81b8:	e000ed04 	.word	0xe000ed04

000081bc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    81bc:	b580      	push	{r7, lr}
    81be:	b084      	sub	sp, #16
    81c0:	af00      	add	r7, sp, #0
    81c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    81c4:	f001 ff8c 	bl	a0e0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d102      	bne.n	81d4 <uxTaskPriorityGet+0x18>
    81ce:	4b07      	ldr	r3, [pc, #28]	; (81ec <uxTaskPriorityGet+0x30>)
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	e000      	b.n	81d6 <uxTaskPriorityGet+0x1a>
    81d4:	687b      	ldr	r3, [r7, #4]
    81d6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    81d8:	68fb      	ldr	r3, [r7, #12]
    81da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    81dc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    81de:	f001 ff97 	bl	a110 <vPortExitCritical>

		return uxReturn;
    81e2:	68bb      	ldr	r3, [r7, #8]
	}
    81e4:	4618      	mov	r0, r3
    81e6:	3710      	adds	r7, #16
    81e8:	46bd      	mov	sp, r7
    81ea:	bd80      	pop	{r7, pc}
    81ec:	200048dc 	.word	0x200048dc

000081f0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    81f0:	b480      	push	{r7}
    81f2:	b089      	sub	sp, #36	; 0x24
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
	__asm volatile
    81f8:	f3ef 8211 	mrs	r2, BASEPRI
    81fc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8200:	f383 8811 	msr	BASEPRI, r3
    8204:	f3bf 8f6f 	isb	sy
    8208:	f3bf 8f4f 	dsb	sy
    820c:	613a      	str	r2, [r7, #16]
    820e:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    8210:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    8212:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	2b00      	cmp	r3, #0
    8218:	d102      	bne.n	8220 <uxTaskPriorityGetFromISR+0x30>
    821a:	4b09      	ldr	r3, [pc, #36]	; (8240 <uxTaskPriorityGetFromISR+0x50>)
    821c:	681b      	ldr	r3, [r3, #0]
    821e:	e000      	b.n	8222 <uxTaskPriorityGetFromISR+0x32>
    8220:	687b      	ldr	r3, [r7, #4]
    8222:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
    8224:	69bb      	ldr	r3, [r7, #24]
    8226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8228:	617b      	str	r3, [r7, #20]
    822a:	69fb      	ldr	r3, [r7, #28]
    822c:	60bb      	str	r3, [r7, #8]
	__asm volatile
    822e:	68bb      	ldr	r3, [r7, #8]
    8230:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    8234:	697b      	ldr	r3, [r7, #20]
	}
    8236:	4618      	mov	r0, r3
    8238:	3724      	adds	r7, #36	; 0x24
    823a:	46bd      	mov	sp, r7
    823c:	bc80      	pop	{r7}
    823e:	4770      	bx	lr
    8240:	200048dc 	.word	0x200048dc

00008244 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    8244:	b580      	push	{r7, lr}
    8246:	b086      	sub	sp, #24
    8248:	af00      	add	r7, sp, #0
    824a:	6078      	str	r0, [r7, #4]
    824c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    824e:	2300      	movs	r3, #0
    8250:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    8252:	683b      	ldr	r3, [r7, #0]
    8254:	2b04      	cmp	r3, #4
    8256:	d901      	bls.n	825c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    8258:	2304      	movs	r3, #4
    825a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    825c:	f001 ff40 	bl	a0e0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	2b00      	cmp	r3, #0
    8264:	d102      	bne.n	826c <vTaskPrioritySet+0x28>
    8266:	4b43      	ldr	r3, [pc, #268]	; (8374 <vTaskPrioritySet+0x130>)
    8268:	681b      	ldr	r3, [r3, #0]
    826a:	e000      	b.n	826e <vTaskPrioritySet+0x2a>
    826c:	687b      	ldr	r3, [r7, #4]
    826e:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    8270:	693b      	ldr	r3, [r7, #16]
    8272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8274:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    8276:	68fa      	ldr	r2, [r7, #12]
    8278:	683b      	ldr	r3, [r7, #0]
    827a:	429a      	cmp	r2, r3
    827c:	d074      	beq.n	8368 <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    827e:	683a      	ldr	r2, [r7, #0]
    8280:	68fb      	ldr	r3, [r7, #12]
    8282:	429a      	cmp	r2, r3
    8284:	d90d      	bls.n	82a2 <vTaskPrioritySet+0x5e>
				{
					if( pxTCB != pxCurrentTCB )
    8286:	4b3b      	ldr	r3, [pc, #236]	; (8374 <vTaskPrioritySet+0x130>)
    8288:	681b      	ldr	r3, [r3, #0]
    828a:	693a      	ldr	r2, [r7, #16]
    828c:	429a      	cmp	r2, r3
    828e:	d00f      	beq.n	82b0 <vTaskPrioritySet+0x6c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    8290:	4b38      	ldr	r3, [pc, #224]	; (8374 <vTaskPrioritySet+0x130>)
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8296:	683a      	ldr	r2, [r7, #0]
    8298:	429a      	cmp	r2, r3
    829a:	d309      	bcc.n	82b0 <vTaskPrioritySet+0x6c>
						{
							xYieldRequired = pdTRUE;
    829c:	2301      	movs	r3, #1
    829e:	617b      	str	r3, [r7, #20]
    82a0:	e006      	b.n	82b0 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    82a2:	4b34      	ldr	r3, [pc, #208]	; (8374 <vTaskPrioritySet+0x130>)
    82a4:	681b      	ldr	r3, [r3, #0]
    82a6:	693a      	ldr	r2, [r7, #16]
    82a8:	429a      	cmp	r2, r3
    82aa:	d101      	bne.n	82b0 <vTaskPrioritySet+0x6c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    82ac:	2301      	movs	r3, #1
    82ae:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    82b0:	693b      	ldr	r3, [r7, #16]
    82b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82b4:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    82b6:	693b      	ldr	r3, [r7, #16]
    82b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    82ba:	693b      	ldr	r3, [r7, #16]
    82bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82be:	429a      	cmp	r2, r3
    82c0:	d102      	bne.n	82c8 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    82c2:	693b      	ldr	r3, [r7, #16]
    82c4:	683a      	ldr	r2, [r7, #0]
    82c6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    82c8:	693b      	ldr	r3, [r7, #16]
    82ca:	683a      	ldr	r2, [r7, #0]
    82cc:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    82ce:	693b      	ldr	r3, [r7, #16]
    82d0:	699b      	ldr	r3, [r3, #24]
    82d2:	2b00      	cmp	r3, #0
    82d4:	db04      	blt.n	82e0 <vTaskPrioritySet+0x9c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    82d6:	683b      	ldr	r3, [r7, #0]
    82d8:	f1c3 0205 	rsb	r2, r3, #5
    82dc:	693b      	ldr	r3, [r7, #16]
    82de:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    82e0:	693b      	ldr	r3, [r7, #16]
    82e2:	6959      	ldr	r1, [r3, #20]
    82e4:	68ba      	ldr	r2, [r7, #8]
    82e6:	4613      	mov	r3, r2
    82e8:	009b      	lsls	r3, r3, #2
    82ea:	4413      	add	r3, r2
    82ec:	009b      	lsls	r3, r3, #2
    82ee:	4a22      	ldr	r2, [pc, #136]	; (8378 <vTaskPrioritySet+0x134>)
    82f0:	4413      	add	r3, r2
    82f2:	4299      	cmp	r1, r3
    82f4:	d101      	bne.n	82fa <vTaskPrioritySet+0xb6>
    82f6:	2301      	movs	r3, #1
    82f8:	e000      	b.n	82fc <vTaskPrioritySet+0xb8>
    82fa:	2300      	movs	r3, #0
    82fc:	2b00      	cmp	r3, #0
    82fe:	d028      	beq.n	8352 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8300:	693b      	ldr	r3, [r7, #16]
    8302:	3304      	adds	r3, #4
    8304:	4618      	mov	r0, r3
    8306:	f7fe fed1 	bl	70ac <uxListRemove>
    830a:	4603      	mov	r3, r0
    830c:	2b00      	cmp	r3, #0
    830e:	d109      	bne.n	8324 <vTaskPrioritySet+0xe0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
    8310:	2201      	movs	r2, #1
    8312:	68bb      	ldr	r3, [r7, #8]
    8314:	fa02 f303 	lsl.w	r3, r2, r3
    8318:	43da      	mvns	r2, r3
    831a:	4b18      	ldr	r3, [pc, #96]	; (837c <vTaskPrioritySet+0x138>)
    831c:	681b      	ldr	r3, [r3, #0]
    831e:	4013      	ands	r3, r2
    8320:	4a16      	ldr	r2, [pc, #88]	; (837c <vTaskPrioritySet+0x138>)
    8322:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    8324:	693b      	ldr	r3, [r7, #16]
    8326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8328:	2201      	movs	r2, #1
    832a:	409a      	lsls	r2, r3
    832c:	4b13      	ldr	r3, [pc, #76]	; (837c <vTaskPrioritySet+0x138>)
    832e:	681b      	ldr	r3, [r3, #0]
    8330:	4313      	orrs	r3, r2
    8332:	4a12      	ldr	r2, [pc, #72]	; (837c <vTaskPrioritySet+0x138>)
    8334:	6013      	str	r3, [r2, #0]
    8336:	693b      	ldr	r3, [r7, #16]
    8338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    833a:	4613      	mov	r3, r2
    833c:	009b      	lsls	r3, r3, #2
    833e:	4413      	add	r3, r2
    8340:	009b      	lsls	r3, r3, #2
    8342:	4a0d      	ldr	r2, [pc, #52]	; (8378 <vTaskPrioritySet+0x134>)
    8344:	441a      	add	r2, r3
    8346:	693b      	ldr	r3, [r7, #16]
    8348:	3304      	adds	r3, #4
    834a:	4619      	mov	r1, r3
    834c:	4610      	mov	r0, r2
    834e:	f7fe fe52 	bl	6ff6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    8352:	697b      	ldr	r3, [r7, #20]
    8354:	2b00      	cmp	r3, #0
    8356:	d007      	beq.n	8368 <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
    8358:	4b09      	ldr	r3, [pc, #36]	; (8380 <vTaskPrioritySet+0x13c>)
    835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    835e:	601a      	str	r2, [r3, #0]
    8360:	f3bf 8f4f 	dsb	sy
    8364:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    8368:	f001 fed2 	bl	a110 <vPortExitCritical>
	}
    836c:	bf00      	nop
    836e:	3718      	adds	r7, #24
    8370:	46bd      	mov	sp, r7
    8372:	bd80      	pop	{r7, pc}
    8374:	200048dc 	.word	0x200048dc
    8378:	200048e0 	.word	0x200048e0
    837c:	200049bc 	.word	0x200049bc
    8380:	e000ed04 	.word	0xe000ed04

00008384 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    8384:	b580      	push	{r7, lr}
    8386:	b084      	sub	sp, #16
    8388:	af00      	add	r7, sp, #0
    838a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    838c:	f001 fea8 	bl	a0e0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	2b00      	cmp	r3, #0
    8394:	d102      	bne.n	839c <vTaskSuspend+0x18>
    8396:	4b35      	ldr	r3, [pc, #212]	; (846c <vTaskSuspend+0xe8>)
    8398:	681b      	ldr	r3, [r3, #0]
    839a:	e000      	b.n	839e <vTaskSuspend+0x1a>
    839c:	687b      	ldr	r3, [r7, #4]
    839e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    83a0:	68fb      	ldr	r3, [r7, #12]
    83a2:	3304      	adds	r3, #4
    83a4:	4618      	mov	r0, r3
    83a6:	f7fe fe81 	bl	70ac <uxListRemove>
    83aa:	4603      	mov	r3, r0
    83ac:	2b00      	cmp	r3, #0
    83ae:	d115      	bne.n	83dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    83b0:	68fb      	ldr	r3, [r7, #12]
    83b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    83b4:	492e      	ldr	r1, [pc, #184]	; (8470 <vTaskSuspend+0xec>)
    83b6:	4613      	mov	r3, r2
    83b8:	009b      	lsls	r3, r3, #2
    83ba:	4413      	add	r3, r2
    83bc:	009b      	lsls	r3, r3, #2
    83be:	440b      	add	r3, r1
    83c0:	681b      	ldr	r3, [r3, #0]
    83c2:	2b00      	cmp	r3, #0
    83c4:	d10a      	bne.n	83dc <vTaskSuspend+0x58>
    83c6:	68fb      	ldr	r3, [r7, #12]
    83c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83ca:	2201      	movs	r2, #1
    83cc:	fa02 f303 	lsl.w	r3, r2, r3
    83d0:	43da      	mvns	r2, r3
    83d2:	4b28      	ldr	r3, [pc, #160]	; (8474 <vTaskSuspend+0xf0>)
    83d4:	681b      	ldr	r3, [r3, #0]
    83d6:	4013      	ands	r3, r2
    83d8:	4a26      	ldr	r2, [pc, #152]	; (8474 <vTaskSuspend+0xf0>)
    83da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    83dc:	68fb      	ldr	r3, [r7, #12]
    83de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83e0:	2b00      	cmp	r3, #0
    83e2:	d004      	beq.n	83ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    83e4:	68fb      	ldr	r3, [r7, #12]
    83e6:	3318      	adds	r3, #24
    83e8:	4618      	mov	r0, r3
    83ea:	f7fe fe5f 	bl	70ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    83ee:	68fb      	ldr	r3, [r7, #12]
    83f0:	3304      	adds	r3, #4
    83f2:	4619      	mov	r1, r3
    83f4:	4820      	ldr	r0, [pc, #128]	; (8478 <vTaskSuspend+0xf4>)
    83f6:	f7fe fdfe 	bl	6ff6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    83fa:	68fb      	ldr	r3, [r7, #12]
    83fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    8400:	b2db      	uxtb	r3, r3
    8402:	2b01      	cmp	r3, #1
    8404:	d103      	bne.n	840e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8406:	68fb      	ldr	r3, [r7, #12]
    8408:	2200      	movs	r2, #0
    840a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    840e:	f001 fe7f 	bl	a110 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    8412:	4b1a      	ldr	r3, [pc, #104]	; (847c <vTaskSuspend+0xf8>)
    8414:	681b      	ldr	r3, [r3, #0]
    8416:	2b00      	cmp	r3, #0
    8418:	d005      	beq.n	8426 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    841a:	f001 fe61 	bl	a0e0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    841e:	f000 fd11 	bl	8e44 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    8422:	f001 fe75 	bl	a110 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    8426:	4b11      	ldr	r3, [pc, #68]	; (846c <vTaskSuspend+0xe8>)
    8428:	681b      	ldr	r3, [r3, #0]
    842a:	68fa      	ldr	r2, [r7, #12]
    842c:	429a      	cmp	r2, r3
    842e:	d118      	bne.n	8462 <vTaskSuspend+0xde>
		{
			if( xSchedulerRunning != pdFALSE )
    8430:	4b12      	ldr	r3, [pc, #72]	; (847c <vTaskSuspend+0xf8>)
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	2b00      	cmp	r3, #0
    8436:	d008      	beq.n	844a <vTaskSuspend+0xc6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    8438:	4b11      	ldr	r3, [pc, #68]	; (8480 <vTaskSuspend+0xfc>)
    843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    843e:	601a      	str	r2, [r3, #0]
    8440:	f3bf 8f4f 	dsb	sy
    8444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8448:	e00b      	b.n	8462 <vTaskSuspend+0xde>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    844a:	4b0b      	ldr	r3, [pc, #44]	; (8478 <vTaskSuspend+0xf4>)
    844c:	681a      	ldr	r2, [r3, #0]
    844e:	4b0d      	ldr	r3, [pc, #52]	; (8484 <vTaskSuspend+0x100>)
    8450:	681b      	ldr	r3, [r3, #0]
    8452:	429a      	cmp	r2, r3
    8454:	d103      	bne.n	845e <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
    8456:	4b05      	ldr	r3, [pc, #20]	; (846c <vTaskSuspend+0xe8>)
    8458:	2200      	movs	r2, #0
    845a:	601a      	str	r2, [r3, #0]
	}
    845c:	e001      	b.n	8462 <vTaskSuspend+0xde>
					vTaskSwitchContext();
    845e:	f000 facd 	bl	89fc <vTaskSwitchContext>
	}
    8462:	bf00      	nop
    8464:	3710      	adds	r7, #16
    8466:	46bd      	mov	sp, r7
    8468:	bd80      	pop	{r7, pc}
    846a:	bf00      	nop
    846c:	200048dc 	.word	0x200048dc
    8470:	200048e0 	.word	0x200048e0
    8474:	200049bc 	.word	0x200049bc
    8478:	200049a0 	.word	0x200049a0
    847c:	200049c0 	.word	0x200049c0
    8480:	e000ed04 	.word	0xe000ed04
    8484:	200049b4 	.word	0x200049b4

00008488 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    8488:	b480      	push	{r7}
    848a:	b085      	sub	sp, #20
    848c:	af00      	add	r7, sp, #0
    848e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    8490:	2300      	movs	r3, #0
    8492:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    8498:	68bb      	ldr	r3, [r7, #8]
    849a:	695b      	ldr	r3, [r3, #20]
    849c:	4a0e      	ldr	r2, [pc, #56]	; (84d8 <prvTaskIsTaskSuspended+0x50>)
    849e:	4293      	cmp	r3, r2
    84a0:	d101      	bne.n	84a6 <prvTaskIsTaskSuspended+0x1e>
    84a2:	2301      	movs	r3, #1
    84a4:	e000      	b.n	84a8 <prvTaskIsTaskSuspended+0x20>
    84a6:	2300      	movs	r3, #0
    84a8:	2b00      	cmp	r3, #0
    84aa:	d00f      	beq.n	84cc <prvTaskIsTaskSuspended+0x44>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    84ac:	68bb      	ldr	r3, [r7, #8]
    84ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84b0:	4a0a      	ldr	r2, [pc, #40]	; (84dc <prvTaskIsTaskSuspended+0x54>)
    84b2:	4293      	cmp	r3, r2
    84b4:	d00a      	beq.n	84cc <prvTaskIsTaskSuspended+0x44>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    84b6:	68bb      	ldr	r3, [r7, #8]
    84b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84ba:	2b00      	cmp	r3, #0
    84bc:	d101      	bne.n	84c2 <prvTaskIsTaskSuspended+0x3a>
    84be:	2301      	movs	r3, #1
    84c0:	e000      	b.n	84c4 <prvTaskIsTaskSuspended+0x3c>
    84c2:	2300      	movs	r3, #0
    84c4:	2b00      	cmp	r3, #0
    84c6:	d001      	beq.n	84cc <prvTaskIsTaskSuspended+0x44>
				{
					xReturn = pdTRUE;
    84c8:	2301      	movs	r3, #1
    84ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    84cc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    84ce:	4618      	mov	r0, r3
    84d0:	3714      	adds	r7, #20
    84d2:	46bd      	mov	sp, r7
    84d4:	bc80      	pop	{r7}
    84d6:	4770      	bx	lr
    84d8:	200049a0 	.word	0x200049a0
    84dc:	20004974 	.word	0x20004974

000084e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    84e0:	b580      	push	{r7, lr}
    84e2:	b084      	sub	sp, #16
    84e4:	af00      	add	r7, sp, #0
    84e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	2b00      	cmp	r3, #0
    84f0:	d039      	beq.n	8566 <vTaskResume+0x86>
    84f2:	4b1f      	ldr	r3, [pc, #124]	; (8570 <vTaskResume+0x90>)
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	68fa      	ldr	r2, [r7, #12]
    84f8:	429a      	cmp	r2, r3
    84fa:	d034      	beq.n	8566 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    84fc:	f001 fdf0 	bl	a0e0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    8500:	68f8      	ldr	r0, [r7, #12]
    8502:	f7ff ffc1 	bl	8488 <prvTaskIsTaskSuspended>
    8506:	4603      	mov	r3, r0
    8508:	2b00      	cmp	r3, #0
    850a:	d02a      	beq.n	8562 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    850c:	68fb      	ldr	r3, [r7, #12]
    850e:	3304      	adds	r3, #4
    8510:	4618      	mov	r0, r3
    8512:	f7fe fdcb 	bl	70ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    8516:	68fb      	ldr	r3, [r7, #12]
    8518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    851a:	2201      	movs	r2, #1
    851c:	409a      	lsls	r2, r3
    851e:	4b15      	ldr	r3, [pc, #84]	; (8574 <vTaskResume+0x94>)
    8520:	681b      	ldr	r3, [r3, #0]
    8522:	4313      	orrs	r3, r2
    8524:	4a13      	ldr	r2, [pc, #76]	; (8574 <vTaskResume+0x94>)
    8526:	6013      	str	r3, [r2, #0]
    8528:	68fb      	ldr	r3, [r7, #12]
    852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    852c:	4613      	mov	r3, r2
    852e:	009b      	lsls	r3, r3, #2
    8530:	4413      	add	r3, r2
    8532:	009b      	lsls	r3, r3, #2
    8534:	4a10      	ldr	r2, [pc, #64]	; (8578 <vTaskResume+0x98>)
    8536:	441a      	add	r2, r3
    8538:	68fb      	ldr	r3, [r7, #12]
    853a:	3304      	adds	r3, #4
    853c:	4619      	mov	r1, r3
    853e:	4610      	mov	r0, r2
    8540:	f7fe fd59 	bl	6ff6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8544:	68fb      	ldr	r3, [r7, #12]
    8546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8548:	4b09      	ldr	r3, [pc, #36]	; (8570 <vTaskResume+0x90>)
    854a:	681b      	ldr	r3, [r3, #0]
    854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    854e:	429a      	cmp	r2, r3
    8550:	d307      	bcc.n	8562 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    8552:	4b0a      	ldr	r3, [pc, #40]	; (857c <vTaskResume+0x9c>)
    8554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8558:	601a      	str	r2, [r3, #0]
    855a:	f3bf 8f4f 	dsb	sy
    855e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    8562:	f001 fdd5 	bl	a110 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8566:	bf00      	nop
    8568:	3710      	adds	r7, #16
    856a:	46bd      	mov	sp, r7
    856c:	bd80      	pop	{r7, pc}
    856e:	bf00      	nop
    8570:	200048dc 	.word	0x200048dc
    8574:	200049bc 	.word	0x200049bc
    8578:	200048e0 	.word	0x200048e0
    857c:	e000ed04 	.word	0xe000ed04

00008580 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    8580:	b580      	push	{r7, lr}
    8582:	b088      	sub	sp, #32
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    8588:	2300      	movs	r3, #0
    858a:	61fb      	str	r3, [r7, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	61bb      	str	r3, [r7, #24]
	__asm volatile
    8590:	f3ef 8211 	mrs	r2, BASEPRI
    8594:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8598:	f383 8811 	msr	BASEPRI, r3
    859c:	f3bf 8f6f 	isb	sy
    85a0:	f3bf 8f4f 	dsb	sy
    85a4:	613a      	str	r2, [r7, #16]
    85a6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    85a8:	693b      	ldr	r3, [r7, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    85aa:	617b      	str	r3, [r7, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    85ac:	69b8      	ldr	r0, [r7, #24]
    85ae:	f7ff ff6b 	bl	8488 <prvTaskIsTaskSuspended>
    85b2:	4603      	mov	r3, r0
    85b4:	2b00      	cmp	r3, #0
    85b6:	d02f      	beq.n	8618 <xTaskResumeFromISR+0x98>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    85b8:	4b1c      	ldr	r3, [pc, #112]	; (862c <xTaskResumeFromISR+0xac>)
    85ba:	681b      	ldr	r3, [r3, #0]
    85bc:	2b00      	cmp	r3, #0
    85be:	d125      	bne.n	860c <xTaskResumeFromISR+0x8c>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    85c0:	69bb      	ldr	r3, [r7, #24]
    85c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85c4:	4b1a      	ldr	r3, [pc, #104]	; (8630 <xTaskResumeFromISR+0xb0>)
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    85ca:	429a      	cmp	r2, r3
    85cc:	d301      	bcc.n	85d2 <xTaskResumeFromISR+0x52>
					{
						xYieldRequired = pdTRUE;
    85ce:	2301      	movs	r3, #1
    85d0:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    85d2:	69bb      	ldr	r3, [r7, #24]
    85d4:	3304      	adds	r3, #4
    85d6:	4618      	mov	r0, r3
    85d8:	f7fe fd68 	bl	70ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    85dc:	69bb      	ldr	r3, [r7, #24]
    85de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    85e0:	2201      	movs	r2, #1
    85e2:	409a      	lsls	r2, r3
    85e4:	4b13      	ldr	r3, [pc, #76]	; (8634 <xTaskResumeFromISR+0xb4>)
    85e6:	681b      	ldr	r3, [r3, #0]
    85e8:	4313      	orrs	r3, r2
    85ea:	4a12      	ldr	r2, [pc, #72]	; (8634 <xTaskResumeFromISR+0xb4>)
    85ec:	6013      	str	r3, [r2, #0]
    85ee:	69bb      	ldr	r3, [r7, #24]
    85f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85f2:	4613      	mov	r3, r2
    85f4:	009b      	lsls	r3, r3, #2
    85f6:	4413      	add	r3, r2
    85f8:	009b      	lsls	r3, r3, #2
    85fa:	4a0f      	ldr	r2, [pc, #60]	; (8638 <xTaskResumeFromISR+0xb8>)
    85fc:	441a      	add	r2, r3
    85fe:	69bb      	ldr	r3, [r7, #24]
    8600:	3304      	adds	r3, #4
    8602:	4619      	mov	r1, r3
    8604:	4610      	mov	r0, r2
    8606:	f7fe fcf6 	bl	6ff6 <vListInsertEnd>
    860a:	e005      	b.n	8618 <xTaskResumeFromISR+0x98>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    860c:	69bb      	ldr	r3, [r7, #24]
    860e:	3318      	adds	r3, #24
    8610:	4619      	mov	r1, r3
    8612:	480a      	ldr	r0, [pc, #40]	; (863c <xTaskResumeFromISR+0xbc>)
    8614:	f7fe fcef 	bl	6ff6 <vListInsertEnd>
    8618:	697b      	ldr	r3, [r7, #20]
    861a:	60bb      	str	r3, [r7, #8]
	__asm volatile
    861c:	68bb      	ldr	r3, [r7, #8]
    861e:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    8622:	69fb      	ldr	r3, [r7, #28]
	}
    8624:	4618      	mov	r0, r3
    8626:	3720      	adds	r7, #32
    8628:	46bd      	mov	sp, r7
    862a:	bd80      	pop	{r7, pc}
    862c:	200049dc 	.word	0x200049dc
    8630:	200048dc 	.word	0x200048dc
    8634:	200049bc 	.word	0x200049bc
    8638:	200048e0 	.word	0x200048e0
    863c:	20004974 	.word	0x20004974

00008640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    8640:	b580      	push	{r7, lr}
    8642:	b084      	sub	sp, #16
    8644:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    8646:	4b13      	ldr	r3, [pc, #76]	; (8694 <vTaskStartScheduler+0x54>)
    8648:	9301      	str	r3, [sp, #4]
    864a:	2300      	movs	r3, #0
    864c:	9300      	str	r3, [sp, #0]
    864e:	2300      	movs	r3, #0
    8650:	2280      	movs	r2, #128	; 0x80
    8652:	4911      	ldr	r1, [pc, #68]	; (8698 <vTaskStartScheduler+0x58>)
    8654:	4811      	ldr	r0, [pc, #68]	; (869c <vTaskStartScheduler+0x5c>)
    8656:	f7ff fba5 	bl	7da4 <xTaskCreate>
    865a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	2b01      	cmp	r3, #1
    8660:	d114      	bne.n	868c <vTaskStartScheduler+0x4c>
	__asm volatile
    8662:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    8666:	f383 8811 	msr	BASEPRI, r3
    866a:	f3bf 8f6f 	isb	sy
    866e:	f3bf 8f4f 	dsb	sy
    8672:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    8674:	4b0a      	ldr	r3, [pc, #40]	; (86a0 <vTaskStartScheduler+0x60>)
    8676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    867a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    867c:	4b09      	ldr	r3, [pc, #36]	; (86a4 <vTaskStartScheduler+0x64>)
    867e:	2201      	movs	r2, #1
    8680:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    8682:	4b09      	ldr	r3, [pc, #36]	; (86a8 <vTaskStartScheduler+0x68>)
    8684:	2200      	movs	r2, #0
    8686:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    8688:	f001 fd03 	bl	a092 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    868c:	bf00      	nop
    868e:	3708      	adds	r7, #8
    8690:	46bd      	mov	sp, r7
    8692:	bd80      	pop	{r7, pc}
    8694:	200049d8 	.word	0x200049d8
    8698:	0000a828 	.word	0x0000a828
    869c:	00008d1d 	.word	0x00008d1d
    86a0:	200049d4 	.word	0x200049d4
    86a4:	200049c0 	.word	0x200049c0
    86a8:	200049b8 	.word	0x200049b8

000086ac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    86ac:	b580      	push	{r7, lr}
    86ae:	b082      	sub	sp, #8
    86b0:	af00      	add	r7, sp, #0
    86b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    86b6:	f383 8811 	msr	BASEPRI, r3
    86ba:	f3bf 8f6f 	isb	sy
    86be:	f3bf 8f4f 	dsb	sy
    86c2:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    86c4:	4b04      	ldr	r3, [pc, #16]	; (86d8 <vTaskEndScheduler+0x2c>)
    86c6:	2200      	movs	r2, #0
    86c8:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    86ca:	f001 fd03 	bl	a0d4 <vPortEndScheduler>
}
    86ce:	bf00      	nop
    86d0:	3708      	adds	r7, #8
    86d2:	46bd      	mov	sp, r7
    86d4:	bd80      	pop	{r7, pc}
    86d6:	bf00      	nop
    86d8:	200049c0 	.word	0x200049c0

000086dc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    86dc:	b480      	push	{r7}
    86de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    86e0:	4b04      	ldr	r3, [pc, #16]	; (86f4 <vTaskSuspendAll+0x18>)
    86e2:	681b      	ldr	r3, [r3, #0]
    86e4:	3301      	adds	r3, #1
    86e6:	4a03      	ldr	r2, [pc, #12]	; (86f4 <vTaskSuspendAll+0x18>)
    86e8:	6013      	str	r3, [r2, #0]
}
    86ea:	bf00      	nop
    86ec:	46bd      	mov	sp, r7
    86ee:	bc80      	pop	{r7}
    86f0:	4770      	bx	lr
    86f2:	bf00      	nop
    86f4:	200049dc 	.word	0x200049dc

000086f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    86f8:	b580      	push	{r7, lr}
    86fa:	b084      	sub	sp, #16
    86fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    86fe:	2300      	movs	r3, #0
    8700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    8702:	2300      	movs	r3, #0
    8704:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    8706:	f001 fceb 	bl	a0e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    870a:	4b39      	ldr	r3, [pc, #228]	; (87f0 <xTaskResumeAll+0xf8>)
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	3b01      	subs	r3, #1
    8710:	4a37      	ldr	r2, [pc, #220]	; (87f0 <xTaskResumeAll+0xf8>)
    8712:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8714:	4b36      	ldr	r3, [pc, #216]	; (87f0 <xTaskResumeAll+0xf8>)
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	2b00      	cmp	r3, #0
    871a:	d161      	bne.n	87e0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    871c:	4b35      	ldr	r3, [pc, #212]	; (87f4 <xTaskResumeAll+0xfc>)
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	2b00      	cmp	r3, #0
    8722:	d05d      	beq.n	87e0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8724:	e02e      	b.n	8784 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    8726:	4b34      	ldr	r3, [pc, #208]	; (87f8 <xTaskResumeAll+0x100>)
    8728:	68db      	ldr	r3, [r3, #12]
    872a:	68db      	ldr	r3, [r3, #12]
    872c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    872e:	68fb      	ldr	r3, [r7, #12]
    8730:	3318      	adds	r3, #24
    8732:	4618      	mov	r0, r3
    8734:	f7fe fcba 	bl	70ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8738:	68fb      	ldr	r3, [r7, #12]
    873a:	3304      	adds	r3, #4
    873c:	4618      	mov	r0, r3
    873e:	f7fe fcb5 	bl	70ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    8742:	68fb      	ldr	r3, [r7, #12]
    8744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8746:	2201      	movs	r2, #1
    8748:	409a      	lsls	r2, r3
    874a:	4b2c      	ldr	r3, [pc, #176]	; (87fc <xTaskResumeAll+0x104>)
    874c:	681b      	ldr	r3, [r3, #0]
    874e:	4313      	orrs	r3, r2
    8750:	4a2a      	ldr	r2, [pc, #168]	; (87fc <xTaskResumeAll+0x104>)
    8752:	6013      	str	r3, [r2, #0]
    8754:	68fb      	ldr	r3, [r7, #12]
    8756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8758:	4613      	mov	r3, r2
    875a:	009b      	lsls	r3, r3, #2
    875c:	4413      	add	r3, r2
    875e:	009b      	lsls	r3, r3, #2
    8760:	4a27      	ldr	r2, [pc, #156]	; (8800 <xTaskResumeAll+0x108>)
    8762:	441a      	add	r2, r3
    8764:	68fb      	ldr	r3, [r7, #12]
    8766:	3304      	adds	r3, #4
    8768:	4619      	mov	r1, r3
    876a:	4610      	mov	r0, r2
    876c:	f7fe fc43 	bl	6ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8770:	68fb      	ldr	r3, [r7, #12]
    8772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8774:	4b23      	ldr	r3, [pc, #140]	; (8804 <xTaskResumeAll+0x10c>)
    8776:	681b      	ldr	r3, [r3, #0]
    8778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    877a:	429a      	cmp	r2, r3
    877c:	d302      	bcc.n	8784 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    877e:	4b22      	ldr	r3, [pc, #136]	; (8808 <xTaskResumeAll+0x110>)
    8780:	2201      	movs	r2, #1
    8782:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8784:	4b1c      	ldr	r3, [pc, #112]	; (87f8 <xTaskResumeAll+0x100>)
    8786:	681b      	ldr	r3, [r3, #0]
    8788:	2b00      	cmp	r3, #0
    878a:	d1cc      	bne.n	8726 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    878c:	68fb      	ldr	r3, [r7, #12]
    878e:	2b00      	cmp	r3, #0
    8790:	d001      	beq.n	8796 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    8792:	f000 fb57 	bl	8e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    8796:	4b1d      	ldr	r3, [pc, #116]	; (880c <xTaskResumeAll+0x114>)
    8798:	681b      	ldr	r3, [r3, #0]
    879a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	2b00      	cmp	r3, #0
    87a0:	d010      	beq.n	87c4 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    87a2:	f000 f875 	bl	8890 <xTaskIncrementTick>
    87a6:	4603      	mov	r3, r0
    87a8:	2b00      	cmp	r3, #0
    87aa:	d002      	beq.n	87b2 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
    87ac:	4b16      	ldr	r3, [pc, #88]	; (8808 <xTaskResumeAll+0x110>)
    87ae:	2201      	movs	r2, #1
    87b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    87b2:	687b      	ldr	r3, [r7, #4]
    87b4:	3b01      	subs	r3, #1
    87b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    87b8:	687b      	ldr	r3, [r7, #4]
    87ba:	2b00      	cmp	r3, #0
    87bc:	d1f1      	bne.n	87a2 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    87be:	4b13      	ldr	r3, [pc, #76]	; (880c <xTaskResumeAll+0x114>)
    87c0:	2200      	movs	r2, #0
    87c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    87c4:	4b10      	ldr	r3, [pc, #64]	; (8808 <xTaskResumeAll+0x110>)
    87c6:	681b      	ldr	r3, [r3, #0]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d009      	beq.n	87e0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    87cc:	2301      	movs	r3, #1
    87ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    87d0:	4b0f      	ldr	r3, [pc, #60]	; (8810 <xTaskResumeAll+0x118>)
    87d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    87d6:	601a      	str	r2, [r3, #0]
    87d8:	f3bf 8f4f 	dsb	sy
    87dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    87e0:	f001 fc96 	bl	a110 <vPortExitCritical>

	return xAlreadyYielded;
    87e4:	68bb      	ldr	r3, [r7, #8]
}
    87e6:	4618      	mov	r0, r3
    87e8:	3710      	adds	r7, #16
    87ea:	46bd      	mov	sp, r7
    87ec:	bd80      	pop	{r7, pc}
    87ee:	bf00      	nop
    87f0:	200049dc 	.word	0x200049dc
    87f4:	200049b4 	.word	0x200049b4
    87f8:	20004974 	.word	0x20004974
    87fc:	200049bc 	.word	0x200049bc
    8800:	200048e0 	.word	0x200048e0
    8804:	200048dc 	.word	0x200048dc
    8808:	200049c8 	.word	0x200049c8
    880c:	200049c4 	.word	0x200049c4
    8810:	e000ed04 	.word	0xe000ed04

00008814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    8814:	b480      	push	{r7}
    8816:	b083      	sub	sp, #12
    8818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    881a:	4b04      	ldr	r3, [pc, #16]	; (882c <xTaskGetTickCount+0x18>)
    881c:	681b      	ldr	r3, [r3, #0]
    881e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8820:	687b      	ldr	r3, [r7, #4]
}
    8822:	4618      	mov	r0, r3
    8824:	370c      	adds	r7, #12
    8826:	46bd      	mov	sp, r7
    8828:	bc80      	pop	{r7}
    882a:	4770      	bx	lr
    882c:	200049b8 	.word	0x200049b8

00008830 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    8830:	b480      	push	{r7}
    8832:	b083      	sub	sp, #12
    8834:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    8836:	2300      	movs	r3, #0
    8838:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
    883a:	4b04      	ldr	r3, [pc, #16]	; (884c <xTaskGetTickCountFromISR+0x1c>)
    883c:	681b      	ldr	r3, [r3, #0]
    883e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    8840:	683b      	ldr	r3, [r7, #0]
}
    8842:	4618      	mov	r0, r3
    8844:	370c      	adds	r7, #12
    8846:	46bd      	mov	sp, r7
    8848:	bc80      	pop	{r7}
    884a:	4770      	bx	lr
    884c:	200049b8 	.word	0x200049b8

00008850 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    8850:	b480      	push	{r7}
    8852:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    8854:	4b02      	ldr	r3, [pc, #8]	; (8860 <uxTaskGetNumberOfTasks+0x10>)
    8856:	681b      	ldr	r3, [r3, #0]
}
    8858:	4618      	mov	r0, r3
    885a:	46bd      	mov	sp, r7
    885c:	bc80      	pop	{r7}
    885e:	4770      	bx	lr
    8860:	200049b4 	.word	0x200049b4

00008864 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    8864:	b480      	push	{r7}
    8866:	b085      	sub	sp, #20
    8868:	af00      	add	r7, sp, #0
    886a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    886c:	687b      	ldr	r3, [r7, #4]
    886e:	2b00      	cmp	r3, #0
    8870:	d102      	bne.n	8878 <pcTaskGetName+0x14>
    8872:	4b06      	ldr	r3, [pc, #24]	; (888c <pcTaskGetName+0x28>)
    8874:	681b      	ldr	r3, [r3, #0]
    8876:	e000      	b.n	887a <pcTaskGetName+0x16>
    8878:	687b      	ldr	r3, [r7, #4]
    887a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    887c:	68fb      	ldr	r3, [r7, #12]
    887e:	3334      	adds	r3, #52	; 0x34
}
    8880:	4618      	mov	r0, r3
    8882:	3714      	adds	r7, #20
    8884:	46bd      	mov	sp, r7
    8886:	bc80      	pop	{r7}
    8888:	4770      	bx	lr
    888a:	bf00      	nop
    888c:	200048dc 	.word	0x200048dc

00008890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8890:	b580      	push	{r7, lr}
    8892:	b086      	sub	sp, #24
    8894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    8896:	2300      	movs	r3, #0
    8898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    889a:	4b4d      	ldr	r3, [pc, #308]	; (89d0 <xTaskIncrementTick+0x140>)
    889c:	681b      	ldr	r3, [r3, #0]
    889e:	2b00      	cmp	r3, #0
    88a0:	f040 8083 	bne.w	89aa <xTaskIncrementTick+0x11a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    88a4:	4b4b      	ldr	r3, [pc, #300]	; (89d4 <xTaskIncrementTick+0x144>)
    88a6:	681b      	ldr	r3, [r3, #0]
    88a8:	3301      	adds	r3, #1
    88aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    88ac:	4a49      	ldr	r2, [pc, #292]	; (89d4 <xTaskIncrementTick+0x144>)
    88ae:	693b      	ldr	r3, [r7, #16]
    88b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    88b2:	693b      	ldr	r3, [r7, #16]
    88b4:	2b00      	cmp	r3, #0
    88b6:	d110      	bne.n	88da <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
    88b8:	4b47      	ldr	r3, [pc, #284]	; (89d8 <xTaskIncrementTick+0x148>)
    88ba:	681b      	ldr	r3, [r3, #0]
    88bc:	60fb      	str	r3, [r7, #12]
    88be:	4b47      	ldr	r3, [pc, #284]	; (89dc <xTaskIncrementTick+0x14c>)
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	4a45      	ldr	r2, [pc, #276]	; (89d8 <xTaskIncrementTick+0x148>)
    88c4:	6013      	str	r3, [r2, #0]
    88c6:	4a45      	ldr	r2, [pc, #276]	; (89dc <xTaskIncrementTick+0x14c>)
    88c8:	68fb      	ldr	r3, [r7, #12]
    88ca:	6013      	str	r3, [r2, #0]
    88cc:	4b44      	ldr	r3, [pc, #272]	; (89e0 <xTaskIncrementTick+0x150>)
    88ce:	681b      	ldr	r3, [r3, #0]
    88d0:	3301      	adds	r3, #1
    88d2:	4a43      	ldr	r2, [pc, #268]	; (89e0 <xTaskIncrementTick+0x150>)
    88d4:	6013      	str	r3, [r2, #0]
    88d6:	f000 fab5 	bl	8e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    88da:	4b42      	ldr	r3, [pc, #264]	; (89e4 <xTaskIncrementTick+0x154>)
    88dc:	681b      	ldr	r3, [r3, #0]
    88de:	693a      	ldr	r2, [r7, #16]
    88e0:	429a      	cmp	r2, r3
    88e2:	d34d      	bcc.n	8980 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    88e4:	4b3c      	ldr	r3, [pc, #240]	; (89d8 <xTaskIncrementTick+0x148>)
    88e6:	681b      	ldr	r3, [r3, #0]
    88e8:	681b      	ldr	r3, [r3, #0]
    88ea:	2b00      	cmp	r3, #0
    88ec:	d101      	bne.n	88f2 <xTaskIncrementTick+0x62>
    88ee:	2301      	movs	r3, #1
    88f0:	e000      	b.n	88f4 <xTaskIncrementTick+0x64>
    88f2:	2300      	movs	r3, #0
    88f4:	2b00      	cmp	r3, #0
    88f6:	d004      	beq.n	8902 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    88f8:	4b3a      	ldr	r3, [pc, #232]	; (89e4 <xTaskIncrementTick+0x154>)
    88fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    88fe:	601a      	str	r2, [r3, #0]
					break;
    8900:	e03e      	b.n	8980 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8902:	4b35      	ldr	r3, [pc, #212]	; (89d8 <xTaskIncrementTick+0x148>)
    8904:	681b      	ldr	r3, [r3, #0]
    8906:	68db      	ldr	r3, [r3, #12]
    8908:	68db      	ldr	r3, [r3, #12]
    890a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    890c:	68bb      	ldr	r3, [r7, #8]
    890e:	685b      	ldr	r3, [r3, #4]
    8910:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    8912:	693a      	ldr	r2, [r7, #16]
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	429a      	cmp	r2, r3
    8918:	d203      	bcs.n	8922 <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    891a:	4a32      	ldr	r2, [pc, #200]	; (89e4 <xTaskIncrementTick+0x154>)
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	6013      	str	r3, [r2, #0]
						break;
    8920:	e02e      	b.n	8980 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8922:	68bb      	ldr	r3, [r7, #8]
    8924:	3304      	adds	r3, #4
    8926:	4618      	mov	r0, r3
    8928:	f7fe fbc0 	bl	70ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    892c:	68bb      	ldr	r3, [r7, #8]
    892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8930:	2b00      	cmp	r3, #0
    8932:	d004      	beq.n	893e <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8934:	68bb      	ldr	r3, [r7, #8]
    8936:	3318      	adds	r3, #24
    8938:	4618      	mov	r0, r3
    893a:	f7fe fbb7 	bl	70ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    893e:	68bb      	ldr	r3, [r7, #8]
    8940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8942:	2201      	movs	r2, #1
    8944:	409a      	lsls	r2, r3
    8946:	4b28      	ldr	r3, [pc, #160]	; (89e8 <xTaskIncrementTick+0x158>)
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	4313      	orrs	r3, r2
    894c:	4a26      	ldr	r2, [pc, #152]	; (89e8 <xTaskIncrementTick+0x158>)
    894e:	6013      	str	r3, [r2, #0]
    8950:	68bb      	ldr	r3, [r7, #8]
    8952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8954:	4613      	mov	r3, r2
    8956:	009b      	lsls	r3, r3, #2
    8958:	4413      	add	r3, r2
    895a:	009b      	lsls	r3, r3, #2
    895c:	4a23      	ldr	r2, [pc, #140]	; (89ec <xTaskIncrementTick+0x15c>)
    895e:	441a      	add	r2, r3
    8960:	68bb      	ldr	r3, [r7, #8]
    8962:	3304      	adds	r3, #4
    8964:	4619      	mov	r1, r3
    8966:	4610      	mov	r0, r2
    8968:	f7fe fb45 	bl	6ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    896c:	68bb      	ldr	r3, [r7, #8]
    896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8970:	4b1f      	ldr	r3, [pc, #124]	; (89f0 <xTaskIncrementTick+0x160>)
    8972:	681b      	ldr	r3, [r3, #0]
    8974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8976:	429a      	cmp	r2, r3
    8978:	d3b4      	bcc.n	88e4 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
    897a:	2301      	movs	r3, #1
    897c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    897e:	e7b1      	b.n	88e4 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8980:	4b1b      	ldr	r3, [pc, #108]	; (89f0 <xTaskIncrementTick+0x160>)
    8982:	681b      	ldr	r3, [r3, #0]
    8984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8986:	4919      	ldr	r1, [pc, #100]	; (89ec <xTaskIncrementTick+0x15c>)
    8988:	4613      	mov	r3, r2
    898a:	009b      	lsls	r3, r3, #2
    898c:	4413      	add	r3, r2
    898e:	009b      	lsls	r3, r3, #2
    8990:	440b      	add	r3, r1
    8992:	681b      	ldr	r3, [r3, #0]
    8994:	2b01      	cmp	r3, #1
    8996:	d901      	bls.n	899c <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
    8998:	2301      	movs	r3, #1
    899a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    899c:	4b15      	ldr	r3, [pc, #84]	; (89f4 <xTaskIncrementTick+0x164>)
    899e:	681b      	ldr	r3, [r3, #0]
    89a0:	2b00      	cmp	r3, #0
    89a2:	d109      	bne.n	89b8 <xTaskIncrementTick+0x128>
			{
				vApplicationTickHook();
    89a4:	f7f8 fe74 	bl	1690 <vApplicationTickHook>
    89a8:	e006      	b.n	89b8 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    89aa:	4b12      	ldr	r3, [pc, #72]	; (89f4 <xTaskIncrementTick+0x164>)
    89ac:	681b      	ldr	r3, [r3, #0]
    89ae:	3301      	adds	r3, #1
    89b0:	4a10      	ldr	r2, [pc, #64]	; (89f4 <xTaskIncrementTick+0x164>)
    89b2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    89b4:	f7f8 fe6c 	bl	1690 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    89b8:	4b0f      	ldr	r3, [pc, #60]	; (89f8 <xTaskIncrementTick+0x168>)
    89ba:	681b      	ldr	r3, [r3, #0]
    89bc:	2b00      	cmp	r3, #0
    89be:	d001      	beq.n	89c4 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
    89c0:	2301      	movs	r3, #1
    89c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    89c4:	697b      	ldr	r3, [r7, #20]
}
    89c6:	4618      	mov	r0, r3
    89c8:	3718      	adds	r7, #24
    89ca:	46bd      	mov	sp, r7
    89cc:	bd80      	pop	{r7, pc}
    89ce:	bf00      	nop
    89d0:	200049dc 	.word	0x200049dc
    89d4:	200049b8 	.word	0x200049b8
    89d8:	2000496c 	.word	0x2000496c
    89dc:	20004970 	.word	0x20004970
    89e0:	200049cc 	.word	0x200049cc
    89e4:	200049d4 	.word	0x200049d4
    89e8:	200049bc 	.word	0x200049bc
    89ec:	200048e0 	.word	0x200048e0
    89f0:	200048dc 	.word	0x200048dc
    89f4:	200049c4 	.word	0x200049c4
    89f8:	200049c8 	.word	0x200049c8

000089fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    89fc:	b480      	push	{r7}
    89fe:	b085      	sub	sp, #20
    8a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    8a02:	4b1c      	ldr	r3, [pc, #112]	; (8a74 <vTaskSwitchContext+0x78>)
    8a04:	681b      	ldr	r3, [r3, #0]
    8a06:	2b00      	cmp	r3, #0
    8a08:	d003      	beq.n	8a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8a0a:	4b1b      	ldr	r3, [pc, #108]	; (8a78 <vTaskSwitchContext+0x7c>)
    8a0c:	2201      	movs	r2, #1
    8a0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8a10:	e02a      	b.n	8a68 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
    8a12:	4b19      	ldr	r3, [pc, #100]	; (8a78 <vTaskSwitchContext+0x7c>)
    8a14:	2200      	movs	r2, #0
    8a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8a18:	4b18      	ldr	r3, [pc, #96]	; (8a7c <vTaskSwitchContext+0x80>)
    8a1a:	681b      	ldr	r3, [r3, #0]
    8a1c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	fab3 f383 	clz	r3, r3
    8a24:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    8a26:	78fb      	ldrb	r3, [r7, #3]
    8a28:	f1c3 031f 	rsb	r3, r3, #31
    8a2c:	60fb      	str	r3, [r7, #12]
    8a2e:	68fa      	ldr	r2, [r7, #12]
    8a30:	4613      	mov	r3, r2
    8a32:	009b      	lsls	r3, r3, #2
    8a34:	4413      	add	r3, r2
    8a36:	009b      	lsls	r3, r3, #2
    8a38:	4a11      	ldr	r2, [pc, #68]	; (8a80 <vTaskSwitchContext+0x84>)
    8a3a:	4413      	add	r3, r2
    8a3c:	60bb      	str	r3, [r7, #8]
    8a3e:	68bb      	ldr	r3, [r7, #8]
    8a40:	685b      	ldr	r3, [r3, #4]
    8a42:	685a      	ldr	r2, [r3, #4]
    8a44:	68bb      	ldr	r3, [r7, #8]
    8a46:	605a      	str	r2, [r3, #4]
    8a48:	68bb      	ldr	r3, [r7, #8]
    8a4a:	685a      	ldr	r2, [r3, #4]
    8a4c:	68bb      	ldr	r3, [r7, #8]
    8a4e:	3308      	adds	r3, #8
    8a50:	429a      	cmp	r2, r3
    8a52:	d104      	bne.n	8a5e <vTaskSwitchContext+0x62>
    8a54:	68bb      	ldr	r3, [r7, #8]
    8a56:	685b      	ldr	r3, [r3, #4]
    8a58:	685a      	ldr	r2, [r3, #4]
    8a5a:	68bb      	ldr	r3, [r7, #8]
    8a5c:	605a      	str	r2, [r3, #4]
    8a5e:	68bb      	ldr	r3, [r7, #8]
    8a60:	685b      	ldr	r3, [r3, #4]
    8a62:	68db      	ldr	r3, [r3, #12]
    8a64:	4a07      	ldr	r2, [pc, #28]	; (8a84 <vTaskSwitchContext+0x88>)
    8a66:	6013      	str	r3, [r2, #0]
}
    8a68:	bf00      	nop
    8a6a:	3714      	adds	r7, #20
    8a6c:	46bd      	mov	sp, r7
    8a6e:	bc80      	pop	{r7}
    8a70:	4770      	bx	lr
    8a72:	bf00      	nop
    8a74:	200049dc 	.word	0x200049dc
    8a78:	200049c8 	.word	0x200049c8
    8a7c:	200049bc 	.word	0x200049bc
    8a80:	200048e0 	.word	0x200048e0
    8a84:	200048dc 	.word	0x200048dc

00008a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    8a88:	b580      	push	{r7, lr}
    8a8a:	b082      	sub	sp, #8
    8a8c:	af00      	add	r7, sp, #0
    8a8e:	6078      	str	r0, [r7, #4]
    8a90:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8a92:	4b07      	ldr	r3, [pc, #28]	; (8ab0 <vTaskPlaceOnEventList+0x28>)
    8a94:	681b      	ldr	r3, [r3, #0]
    8a96:	3318      	adds	r3, #24
    8a98:	4619      	mov	r1, r3
    8a9a:	6878      	ldr	r0, [r7, #4]
    8a9c:	f7fe face 	bl	703c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8aa0:	2101      	movs	r1, #1
    8aa2:	6838      	ldr	r0, [r7, #0]
    8aa4:	f000 fdfc 	bl	96a0 <prvAddCurrentTaskToDelayedList>
}
    8aa8:	bf00      	nop
    8aaa:	3708      	adds	r7, #8
    8aac:	46bd      	mov	sp, r7
    8aae:	bd80      	pop	{r7, pc}
    8ab0:	200048dc 	.word	0x200048dc

00008ab4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    8ab4:	b580      	push	{r7, lr}
    8ab6:	b084      	sub	sp, #16
    8ab8:	af00      	add	r7, sp, #0
    8aba:	60f8      	str	r0, [r7, #12]
    8abc:	60b9      	str	r1, [r7, #8]
    8abe:	607a      	str	r2, [r7, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    8ac0:	4b0a      	ldr	r3, [pc, #40]	; (8aec <vTaskPlaceOnUnorderedEventList+0x38>)
    8ac2:	681b      	ldr	r3, [r3, #0]
    8ac4:	68ba      	ldr	r2, [r7, #8]
    8ac6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8aca:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8acc:	4b07      	ldr	r3, [pc, #28]	; (8aec <vTaskPlaceOnUnorderedEventList+0x38>)
    8ace:	681b      	ldr	r3, [r3, #0]
    8ad0:	3318      	adds	r3, #24
    8ad2:	4619      	mov	r1, r3
    8ad4:	68f8      	ldr	r0, [r7, #12]
    8ad6:	f7fe fa8e 	bl	6ff6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8ada:	2101      	movs	r1, #1
    8adc:	6878      	ldr	r0, [r7, #4]
    8ade:	f000 fddf 	bl	96a0 <prvAddCurrentTaskToDelayedList>
}
    8ae2:	bf00      	nop
    8ae4:	3710      	adds	r7, #16
    8ae6:	46bd      	mov	sp, r7
    8ae8:	bd80      	pop	{r7, pc}
    8aea:	bf00      	nop
    8aec:	200048dc 	.word	0x200048dc

00008af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b084      	sub	sp, #16
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8af8:	687b      	ldr	r3, [r7, #4]
    8afa:	68db      	ldr	r3, [r3, #12]
    8afc:	68db      	ldr	r3, [r3, #12]
    8afe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    8b00:	68bb      	ldr	r3, [r7, #8]
    8b02:	3318      	adds	r3, #24
    8b04:	4618      	mov	r0, r3
    8b06:	f7fe fad1 	bl	70ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8b0a:	4b1d      	ldr	r3, [pc, #116]	; (8b80 <xTaskRemoveFromEventList+0x90>)
    8b0c:	681b      	ldr	r3, [r3, #0]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	d11c      	bne.n	8b4c <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8b12:	68bb      	ldr	r3, [r7, #8]
    8b14:	3304      	adds	r3, #4
    8b16:	4618      	mov	r0, r3
    8b18:	f7fe fac8 	bl	70ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    8b1c:	68bb      	ldr	r3, [r7, #8]
    8b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b20:	2201      	movs	r2, #1
    8b22:	409a      	lsls	r2, r3
    8b24:	4b17      	ldr	r3, [pc, #92]	; (8b84 <xTaskRemoveFromEventList+0x94>)
    8b26:	681b      	ldr	r3, [r3, #0]
    8b28:	4313      	orrs	r3, r2
    8b2a:	4a16      	ldr	r2, [pc, #88]	; (8b84 <xTaskRemoveFromEventList+0x94>)
    8b2c:	6013      	str	r3, [r2, #0]
    8b2e:	68bb      	ldr	r3, [r7, #8]
    8b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8b32:	4613      	mov	r3, r2
    8b34:	009b      	lsls	r3, r3, #2
    8b36:	4413      	add	r3, r2
    8b38:	009b      	lsls	r3, r3, #2
    8b3a:	4a13      	ldr	r2, [pc, #76]	; (8b88 <xTaskRemoveFromEventList+0x98>)
    8b3c:	441a      	add	r2, r3
    8b3e:	68bb      	ldr	r3, [r7, #8]
    8b40:	3304      	adds	r3, #4
    8b42:	4619      	mov	r1, r3
    8b44:	4610      	mov	r0, r2
    8b46:	f7fe fa56 	bl	6ff6 <vListInsertEnd>
    8b4a:	e005      	b.n	8b58 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    8b4c:	68bb      	ldr	r3, [r7, #8]
    8b4e:	3318      	adds	r3, #24
    8b50:	4619      	mov	r1, r3
    8b52:	480e      	ldr	r0, [pc, #56]	; (8b8c <xTaskRemoveFromEventList+0x9c>)
    8b54:	f7fe fa4f 	bl	6ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    8b58:	68bb      	ldr	r3, [r7, #8]
    8b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8b5c:	4b0c      	ldr	r3, [pc, #48]	; (8b90 <xTaskRemoveFromEventList+0xa0>)
    8b5e:	681b      	ldr	r3, [r3, #0]
    8b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b62:	429a      	cmp	r2, r3
    8b64:	d905      	bls.n	8b72 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    8b66:	2301      	movs	r3, #1
    8b68:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    8b6a:	4b0a      	ldr	r3, [pc, #40]	; (8b94 <xTaskRemoveFromEventList+0xa4>)
    8b6c:	2201      	movs	r2, #1
    8b6e:	601a      	str	r2, [r3, #0]
    8b70:	e001      	b.n	8b76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    8b72:	2300      	movs	r3, #0
    8b74:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    8b76:	68fb      	ldr	r3, [r7, #12]
}
    8b78:	4618      	mov	r0, r3
    8b7a:	3710      	adds	r7, #16
    8b7c:	46bd      	mov	sp, r7
    8b7e:	bd80      	pop	{r7, pc}
    8b80:	200049dc 	.word	0x200049dc
    8b84:	200049bc 	.word	0x200049bc
    8b88:	200048e0 	.word	0x200048e0
    8b8c:	20004974 	.word	0x20004974
    8b90:	200048dc 	.word	0x200048dc
    8b94:	200049c8 	.word	0x200049c8

00008b98 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b084      	sub	sp, #16
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
    8ba0:	6039      	str	r1, [r7, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    8ba2:	683b      	ldr	r3, [r7, #0]
    8ba4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	68db      	ldr	r3, [r3, #12]
    8bb0:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    8bb2:	6878      	ldr	r0, [r7, #4]
    8bb4:	f7fe fa7a 	bl	70ac <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8bb8:	68fb      	ldr	r3, [r7, #12]
    8bba:	3304      	adds	r3, #4
    8bbc:	4618      	mov	r0, r3
    8bbe:	f7fe fa75 	bl	70ac <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    8bc2:	68fb      	ldr	r3, [r7, #12]
    8bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8bc6:	2201      	movs	r2, #1
    8bc8:	409a      	lsls	r2, r3
    8bca:	4b10      	ldr	r3, [pc, #64]	; (8c0c <vTaskRemoveFromUnorderedEventList+0x74>)
    8bcc:	681b      	ldr	r3, [r3, #0]
    8bce:	4313      	orrs	r3, r2
    8bd0:	4a0e      	ldr	r2, [pc, #56]	; (8c0c <vTaskRemoveFromUnorderedEventList+0x74>)
    8bd2:	6013      	str	r3, [r2, #0]
    8bd4:	68fb      	ldr	r3, [r7, #12]
    8bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bd8:	4613      	mov	r3, r2
    8bda:	009b      	lsls	r3, r3, #2
    8bdc:	4413      	add	r3, r2
    8bde:	009b      	lsls	r3, r3, #2
    8be0:	4a0b      	ldr	r2, [pc, #44]	; (8c10 <vTaskRemoveFromUnorderedEventList+0x78>)
    8be2:	441a      	add	r2, r3
    8be4:	68fb      	ldr	r3, [r7, #12]
    8be6:	3304      	adds	r3, #4
    8be8:	4619      	mov	r1, r3
    8bea:	4610      	mov	r0, r2
    8bec:	f7fe fa03 	bl	6ff6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    8bf0:	68fb      	ldr	r3, [r7, #12]
    8bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bf4:	4b07      	ldr	r3, [pc, #28]	; (8c14 <vTaskRemoveFromUnorderedEventList+0x7c>)
    8bf6:	681b      	ldr	r3, [r3, #0]
    8bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8bfa:	429a      	cmp	r2, r3
    8bfc:	d902      	bls.n	8c04 <vTaskRemoveFromUnorderedEventList+0x6c>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    8bfe:	4b06      	ldr	r3, [pc, #24]	; (8c18 <vTaskRemoveFromUnorderedEventList+0x80>)
    8c00:	2201      	movs	r2, #1
    8c02:	601a      	str	r2, [r3, #0]
	}
}
    8c04:	bf00      	nop
    8c06:	3710      	adds	r7, #16
    8c08:	46bd      	mov	sp, r7
    8c0a:	bd80      	pop	{r7, pc}
    8c0c:	200049bc 	.word	0x200049bc
    8c10:	200048e0 	.word	0x200048e0
    8c14:	200048dc 	.word	0x200048dc
    8c18:	200049c8 	.word	0x200049c8

00008c1c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    8c1c:	b580      	push	{r7, lr}
    8c1e:	b082      	sub	sp, #8
    8c20:	af00      	add	r7, sp, #0
    8c22:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    8c24:	f001 fa5c 	bl	a0e0 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    8c28:	4b06      	ldr	r3, [pc, #24]	; (8c44 <vTaskSetTimeOutState+0x28>)
    8c2a:	681a      	ldr	r2, [r3, #0]
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    8c30:	4b05      	ldr	r3, [pc, #20]	; (8c48 <vTaskSetTimeOutState+0x2c>)
    8c32:	681a      	ldr	r2, [r3, #0]
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    8c38:	f001 fa6a 	bl	a110 <vPortExitCritical>
}
    8c3c:	bf00      	nop
    8c3e:	3708      	adds	r7, #8
    8c40:	46bd      	mov	sp, r7
    8c42:	bd80      	pop	{r7, pc}
    8c44:	200049cc 	.word	0x200049cc
    8c48:	200049b8 	.word	0x200049b8

00008c4c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    8c4c:	b480      	push	{r7}
    8c4e:	b083      	sub	sp, #12
    8c50:	af00      	add	r7, sp, #0
    8c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    8c54:	4b06      	ldr	r3, [pc, #24]	; (8c70 <vTaskInternalSetTimeOutState+0x24>)
    8c56:	681a      	ldr	r2, [r3, #0]
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    8c5c:	4b05      	ldr	r3, [pc, #20]	; (8c74 <vTaskInternalSetTimeOutState+0x28>)
    8c5e:	681a      	ldr	r2, [r3, #0]
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	605a      	str	r2, [r3, #4]
}
    8c64:	bf00      	nop
    8c66:	370c      	adds	r7, #12
    8c68:	46bd      	mov	sp, r7
    8c6a:	bc80      	pop	{r7}
    8c6c:	4770      	bx	lr
    8c6e:	bf00      	nop
    8c70:	200049cc 	.word	0x200049cc
    8c74:	200049b8 	.word	0x200049b8

00008c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    8c78:	b580      	push	{r7, lr}
    8c7a:	b086      	sub	sp, #24
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	6078      	str	r0, [r7, #4]
    8c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    8c82:	f001 fa2d 	bl	a0e0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    8c86:	4b1d      	ldr	r3, [pc, #116]	; (8cfc <xTaskCheckForTimeOut+0x84>)
    8c88:	681b      	ldr	r3, [r3, #0]
    8c8a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	685b      	ldr	r3, [r3, #4]
    8c90:	693a      	ldr	r2, [r7, #16]
    8c92:	1ad3      	subs	r3, r2, r3
    8c94:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8c96:	683b      	ldr	r3, [r7, #0]
    8c98:	681b      	ldr	r3, [r3, #0]
    8c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8c9e:	d102      	bne.n	8ca6 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    8ca0:	2300      	movs	r3, #0
    8ca2:	617b      	str	r3, [r7, #20]
    8ca4:	e023      	b.n	8cee <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	681a      	ldr	r2, [r3, #0]
    8caa:	4b15      	ldr	r3, [pc, #84]	; (8d00 <xTaskCheckForTimeOut+0x88>)
    8cac:	681b      	ldr	r3, [r3, #0]
    8cae:	429a      	cmp	r2, r3
    8cb0:	d007      	beq.n	8cc2 <xTaskCheckForTimeOut+0x4a>
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	685b      	ldr	r3, [r3, #4]
    8cb6:	693a      	ldr	r2, [r7, #16]
    8cb8:	429a      	cmp	r2, r3
    8cba:	d302      	bcc.n	8cc2 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    8cbc:	2301      	movs	r3, #1
    8cbe:	617b      	str	r3, [r7, #20]
    8cc0:	e015      	b.n	8cee <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    8cc2:	683b      	ldr	r3, [r7, #0]
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	68fa      	ldr	r2, [r7, #12]
    8cc8:	429a      	cmp	r2, r3
    8cca:	d20b      	bcs.n	8ce4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    8ccc:	683b      	ldr	r3, [r7, #0]
    8cce:	681a      	ldr	r2, [r3, #0]
    8cd0:	68fb      	ldr	r3, [r7, #12]
    8cd2:	1ad2      	subs	r2, r2, r3
    8cd4:	683b      	ldr	r3, [r7, #0]
    8cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    8cd8:	6878      	ldr	r0, [r7, #4]
    8cda:	f7ff ffb7 	bl	8c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    8cde:	2300      	movs	r3, #0
    8ce0:	617b      	str	r3, [r7, #20]
    8ce2:	e004      	b.n	8cee <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
    8ce4:	683b      	ldr	r3, [r7, #0]
    8ce6:	2200      	movs	r2, #0
    8ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    8cea:	2301      	movs	r3, #1
    8cec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    8cee:	f001 fa0f 	bl	a110 <vPortExitCritical>

	return xReturn;
    8cf2:	697b      	ldr	r3, [r7, #20]
}
    8cf4:	4618      	mov	r0, r3
    8cf6:	3718      	adds	r7, #24
    8cf8:	46bd      	mov	sp, r7
    8cfa:	bd80      	pop	{r7, pc}
    8cfc:	200049b8 	.word	0x200049b8
    8d00:	200049cc 	.word	0x200049cc

00008d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    8d04:	b480      	push	{r7}
    8d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    8d08:	4b03      	ldr	r3, [pc, #12]	; (8d18 <vTaskMissedYield+0x14>)
    8d0a:	2201      	movs	r2, #1
    8d0c:	601a      	str	r2, [r3, #0]
}
    8d0e:	bf00      	nop
    8d10:	46bd      	mov	sp, r7
    8d12:	bc80      	pop	{r7}
    8d14:	4770      	bx	lr
    8d16:	bf00      	nop
    8d18:	200049c8 	.word	0x200049c8

00008d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b082      	sub	sp, #8
    8d20:	af00      	add	r7, sp, #0
    8d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    8d24:	f000 f852 	bl	8dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    8d28:	4b06      	ldr	r3, [pc, #24]	; (8d44 <prvIdleTask+0x28>)
    8d2a:	681b      	ldr	r3, [r3, #0]
    8d2c:	2b01      	cmp	r3, #1
    8d2e:	d9f9      	bls.n	8d24 <prvIdleTask+0x8>
			{
				taskYIELD();
    8d30:	4b05      	ldr	r3, [pc, #20]	; (8d48 <prvIdleTask+0x2c>)
    8d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8d36:	601a      	str	r2, [r3, #0]
    8d38:	f3bf 8f4f 	dsb	sy
    8d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
    8d40:	e7f0      	b.n	8d24 <prvIdleTask+0x8>
    8d42:	bf00      	nop
    8d44:	200048e0 	.word	0x200048e0
    8d48:	e000ed04 	.word	0xe000ed04

00008d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    8d4c:	b580      	push	{r7, lr}
    8d4e:	b082      	sub	sp, #8
    8d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8d52:	2300      	movs	r3, #0
    8d54:	607b      	str	r3, [r7, #4]
    8d56:	e00c      	b.n	8d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    8d58:	687a      	ldr	r2, [r7, #4]
    8d5a:	4613      	mov	r3, r2
    8d5c:	009b      	lsls	r3, r3, #2
    8d5e:	4413      	add	r3, r2
    8d60:	009b      	lsls	r3, r3, #2
    8d62:	4a12      	ldr	r2, [pc, #72]	; (8dac <prvInitialiseTaskLists+0x60>)
    8d64:	4413      	add	r3, r2
    8d66:	4618      	mov	r0, r3
    8d68:	f7fe f91a 	bl	6fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8d6c:	687b      	ldr	r3, [r7, #4]
    8d6e:	3301      	adds	r3, #1
    8d70:	607b      	str	r3, [r7, #4]
    8d72:	687b      	ldr	r3, [r7, #4]
    8d74:	2b04      	cmp	r3, #4
    8d76:	d9ef      	bls.n	8d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    8d78:	480d      	ldr	r0, [pc, #52]	; (8db0 <prvInitialiseTaskLists+0x64>)
    8d7a:	f7fe f911 	bl	6fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    8d7e:	480d      	ldr	r0, [pc, #52]	; (8db4 <prvInitialiseTaskLists+0x68>)
    8d80:	f7fe f90e 	bl	6fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    8d84:	480c      	ldr	r0, [pc, #48]	; (8db8 <prvInitialiseTaskLists+0x6c>)
    8d86:	f7fe f90b 	bl	6fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    8d8a:	480c      	ldr	r0, [pc, #48]	; (8dbc <prvInitialiseTaskLists+0x70>)
    8d8c:	f7fe f908 	bl	6fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    8d90:	480b      	ldr	r0, [pc, #44]	; (8dc0 <prvInitialiseTaskLists+0x74>)
    8d92:	f7fe f905 	bl	6fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    8d96:	4b0b      	ldr	r3, [pc, #44]	; (8dc4 <prvInitialiseTaskLists+0x78>)
    8d98:	4a05      	ldr	r2, [pc, #20]	; (8db0 <prvInitialiseTaskLists+0x64>)
    8d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    8d9c:	4b0a      	ldr	r3, [pc, #40]	; (8dc8 <prvInitialiseTaskLists+0x7c>)
    8d9e:	4a05      	ldr	r2, [pc, #20]	; (8db4 <prvInitialiseTaskLists+0x68>)
    8da0:	601a      	str	r2, [r3, #0]
}
    8da2:	bf00      	nop
    8da4:	3708      	adds	r7, #8
    8da6:	46bd      	mov	sp, r7
    8da8:	bd80      	pop	{r7, pc}
    8daa:	bf00      	nop
    8dac:	200048e0 	.word	0x200048e0
    8db0:	20004944 	.word	0x20004944
    8db4:	20004958 	.word	0x20004958
    8db8:	20004974 	.word	0x20004974
    8dbc:	20004988 	.word	0x20004988
    8dc0:	200049a0 	.word	0x200049a0
    8dc4:	2000496c 	.word	0x2000496c
    8dc8:	20004970 	.word	0x20004970

00008dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b082      	sub	sp, #8
    8dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    8dd2:	e019      	b.n	8e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    8dd4:	f001 f984 	bl	a0e0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    8dd8:	4b0f      	ldr	r3, [pc, #60]	; (8e18 <prvCheckTasksWaitingTermination+0x4c>)
    8dda:	68db      	ldr	r3, [r3, #12]
    8ddc:	68db      	ldr	r3, [r3, #12]
    8dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8de0:	687b      	ldr	r3, [r7, #4]
    8de2:	3304      	adds	r3, #4
    8de4:	4618      	mov	r0, r3
    8de6:	f7fe f961 	bl	70ac <uxListRemove>
				--uxCurrentNumberOfTasks;
    8dea:	4b0c      	ldr	r3, [pc, #48]	; (8e1c <prvCheckTasksWaitingTermination+0x50>)
    8dec:	681b      	ldr	r3, [r3, #0]
    8dee:	3b01      	subs	r3, #1
    8df0:	4a0a      	ldr	r2, [pc, #40]	; (8e1c <prvCheckTasksWaitingTermination+0x50>)
    8df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    8df4:	4b0a      	ldr	r3, [pc, #40]	; (8e20 <prvCheckTasksWaitingTermination+0x54>)
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	3b01      	subs	r3, #1
    8dfa:	4a09      	ldr	r2, [pc, #36]	; (8e20 <prvCheckTasksWaitingTermination+0x54>)
    8dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    8dfe:	f001 f987 	bl	a110 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    8e02:	6878      	ldr	r0, [r7, #4]
    8e04:	f000 f80e 	bl	8e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    8e08:	4b05      	ldr	r3, [pc, #20]	; (8e20 <prvCheckTasksWaitingTermination+0x54>)
    8e0a:	681b      	ldr	r3, [r3, #0]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d1e1      	bne.n	8dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    8e10:	bf00      	nop
    8e12:	3708      	adds	r7, #8
    8e14:	46bd      	mov	sp, r7
    8e16:	bd80      	pop	{r7, pc}
    8e18:	20004988 	.word	0x20004988
    8e1c:	200049b4 	.word	0x200049b4
    8e20:	2000499c 	.word	0x2000499c

00008e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8e30:	4618      	mov	r0, r3
    8e32:	f7f7 f9b1 	bl	198 <vPortFree>
			vPortFree( pxTCB );
    8e36:	6878      	ldr	r0, [r7, #4]
    8e38:	f7f7 f9ae 	bl	198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    8e3c:	bf00      	nop
    8e3e:	3708      	adds	r7, #8
    8e40:	46bd      	mov	sp, r7
    8e42:	bd80      	pop	{r7, pc}

00008e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8e44:	b480      	push	{r7}
    8e46:	b083      	sub	sp, #12
    8e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8e4a:	4b0e      	ldr	r3, [pc, #56]	; (8e84 <prvResetNextTaskUnblockTime+0x40>)
    8e4c:	681b      	ldr	r3, [r3, #0]
    8e4e:	681b      	ldr	r3, [r3, #0]
    8e50:	2b00      	cmp	r3, #0
    8e52:	d101      	bne.n	8e58 <prvResetNextTaskUnblockTime+0x14>
    8e54:	2301      	movs	r3, #1
    8e56:	e000      	b.n	8e5a <prvResetNextTaskUnblockTime+0x16>
    8e58:	2300      	movs	r3, #0
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d004      	beq.n	8e68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    8e5e:	4b0a      	ldr	r3, [pc, #40]	; (8e88 <prvResetNextTaskUnblockTime+0x44>)
    8e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8e64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    8e66:	e008      	b.n	8e7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8e68:	4b06      	ldr	r3, [pc, #24]	; (8e84 <prvResetNextTaskUnblockTime+0x40>)
    8e6a:	681b      	ldr	r3, [r3, #0]
    8e6c:	68db      	ldr	r3, [r3, #12]
    8e6e:	68db      	ldr	r3, [r3, #12]
    8e70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	685b      	ldr	r3, [r3, #4]
    8e76:	4a04      	ldr	r2, [pc, #16]	; (8e88 <prvResetNextTaskUnblockTime+0x44>)
    8e78:	6013      	str	r3, [r2, #0]
}
    8e7a:	bf00      	nop
    8e7c:	370c      	adds	r7, #12
    8e7e:	46bd      	mov	sp, r7
    8e80:	bc80      	pop	{r7}
    8e82:	4770      	bx	lr
    8e84:	2000496c 	.word	0x2000496c
    8e88:	200049d4 	.word	0x200049d4

00008e8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    8e8c:	b480      	push	{r7}
    8e8e:	b083      	sub	sp, #12
    8e90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    8e92:	4b04      	ldr	r3, [pc, #16]	; (8ea4 <xTaskGetCurrentTaskHandle+0x18>)
    8e94:	681b      	ldr	r3, [r3, #0]
    8e96:	607b      	str	r3, [r7, #4]

		return xReturn;
    8e98:	687b      	ldr	r3, [r7, #4]
	}
    8e9a:	4618      	mov	r0, r3
    8e9c:	370c      	adds	r7, #12
    8e9e:	46bd      	mov	sp, r7
    8ea0:	bc80      	pop	{r7}
    8ea2:	4770      	bx	lr
    8ea4:	200048dc 	.word	0x200048dc

00008ea8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    8ea8:	b580      	push	{r7, lr}
    8eaa:	b084      	sub	sp, #16
    8eac:	af00      	add	r7, sp, #0
    8eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8eb4:	2300      	movs	r3, #0
    8eb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d06e      	beq.n	8f9c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    8ebe:	68bb      	ldr	r3, [r7, #8]
    8ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ec2:	4b39      	ldr	r3, [pc, #228]	; (8fa8 <xTaskPriorityInherit+0x100>)
    8ec4:	681b      	ldr	r3, [r3, #0]
    8ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8ec8:	429a      	cmp	r2, r3
    8eca:	d25e      	bcs.n	8f8a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    8ecc:	68bb      	ldr	r3, [r7, #8]
    8ece:	699b      	ldr	r3, [r3, #24]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	db06      	blt.n	8ee2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8ed4:	4b34      	ldr	r3, [pc, #208]	; (8fa8 <xTaskPriorityInherit+0x100>)
    8ed6:	681b      	ldr	r3, [r3, #0]
    8ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8eda:	f1c3 0205 	rsb	r2, r3, #5
    8ede:	68bb      	ldr	r3, [r7, #8]
    8ee0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    8ee2:	68bb      	ldr	r3, [r7, #8]
    8ee4:	6959      	ldr	r1, [r3, #20]
    8ee6:	68bb      	ldr	r3, [r7, #8]
    8ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8eea:	4613      	mov	r3, r2
    8eec:	009b      	lsls	r3, r3, #2
    8eee:	4413      	add	r3, r2
    8ef0:	009b      	lsls	r3, r3, #2
    8ef2:	4a2e      	ldr	r2, [pc, #184]	; (8fac <xTaskPriorityInherit+0x104>)
    8ef4:	4413      	add	r3, r2
    8ef6:	4299      	cmp	r1, r3
    8ef8:	d101      	bne.n	8efe <xTaskPriorityInherit+0x56>
    8efa:	2301      	movs	r3, #1
    8efc:	e000      	b.n	8f00 <xTaskPriorityInherit+0x58>
    8efe:	2300      	movs	r3, #0
    8f00:	2b00      	cmp	r3, #0
    8f02:	d03a      	beq.n	8f7a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8f04:	68bb      	ldr	r3, [r7, #8]
    8f06:	3304      	adds	r3, #4
    8f08:	4618      	mov	r0, r3
    8f0a:	f7fe f8cf 	bl	70ac <uxListRemove>
    8f0e:	4603      	mov	r3, r0
    8f10:	2b00      	cmp	r3, #0
    8f12:	d115      	bne.n	8f40 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
    8f14:	68bb      	ldr	r3, [r7, #8]
    8f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f18:	4924      	ldr	r1, [pc, #144]	; (8fac <xTaskPriorityInherit+0x104>)
    8f1a:	4613      	mov	r3, r2
    8f1c:	009b      	lsls	r3, r3, #2
    8f1e:	4413      	add	r3, r2
    8f20:	009b      	lsls	r3, r3, #2
    8f22:	440b      	add	r3, r1
    8f24:	681b      	ldr	r3, [r3, #0]
    8f26:	2b00      	cmp	r3, #0
    8f28:	d10a      	bne.n	8f40 <xTaskPriorityInherit+0x98>
    8f2a:	68bb      	ldr	r3, [r7, #8]
    8f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f2e:	2201      	movs	r2, #1
    8f30:	fa02 f303 	lsl.w	r3, r2, r3
    8f34:	43da      	mvns	r2, r3
    8f36:	4b1e      	ldr	r3, [pc, #120]	; (8fb0 <xTaskPriorityInherit+0x108>)
    8f38:	681b      	ldr	r3, [r3, #0]
    8f3a:	4013      	ands	r3, r2
    8f3c:	4a1c      	ldr	r2, [pc, #112]	; (8fb0 <xTaskPriorityInherit+0x108>)
    8f3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8f40:	4b19      	ldr	r3, [pc, #100]	; (8fa8 <xTaskPriorityInherit+0x100>)
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f46:	68bb      	ldr	r3, [r7, #8]
    8f48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    8f4a:	68bb      	ldr	r3, [r7, #8]
    8f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f4e:	2201      	movs	r2, #1
    8f50:	409a      	lsls	r2, r3
    8f52:	4b17      	ldr	r3, [pc, #92]	; (8fb0 <xTaskPriorityInherit+0x108>)
    8f54:	681b      	ldr	r3, [r3, #0]
    8f56:	4313      	orrs	r3, r2
    8f58:	4a15      	ldr	r2, [pc, #84]	; (8fb0 <xTaskPriorityInherit+0x108>)
    8f5a:	6013      	str	r3, [r2, #0]
    8f5c:	68bb      	ldr	r3, [r7, #8]
    8f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f60:	4613      	mov	r3, r2
    8f62:	009b      	lsls	r3, r3, #2
    8f64:	4413      	add	r3, r2
    8f66:	009b      	lsls	r3, r3, #2
    8f68:	4a10      	ldr	r2, [pc, #64]	; (8fac <xTaskPriorityInherit+0x104>)
    8f6a:	441a      	add	r2, r3
    8f6c:	68bb      	ldr	r3, [r7, #8]
    8f6e:	3304      	adds	r3, #4
    8f70:	4619      	mov	r1, r3
    8f72:	4610      	mov	r0, r2
    8f74:	f7fe f83f 	bl	6ff6 <vListInsertEnd>
    8f78:	e004      	b.n	8f84 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8f7a:	4b0b      	ldr	r3, [pc, #44]	; (8fa8 <xTaskPriorityInherit+0x100>)
    8f7c:	681b      	ldr	r3, [r3, #0]
    8f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f80:	68bb      	ldr	r3, [r7, #8]
    8f82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    8f84:	2301      	movs	r3, #1
    8f86:	60fb      	str	r3, [r7, #12]
    8f88:	e008      	b.n	8f9c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    8f8a:	68bb      	ldr	r3, [r7, #8]
    8f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8f8e:	4b06      	ldr	r3, [pc, #24]	; (8fa8 <xTaskPriorityInherit+0x100>)
    8f90:	681b      	ldr	r3, [r3, #0]
    8f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f94:	429a      	cmp	r2, r3
    8f96:	d201      	bcs.n	8f9c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    8f98:	2301      	movs	r3, #1
    8f9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8f9c:	68fb      	ldr	r3, [r7, #12]
	}
    8f9e:	4618      	mov	r0, r3
    8fa0:	3710      	adds	r7, #16
    8fa2:	46bd      	mov	sp, r7
    8fa4:	bd80      	pop	{r7, pc}
    8fa6:	bf00      	nop
    8fa8:	200048dc 	.word	0x200048dc
    8fac:	200048e0 	.word	0x200048e0
    8fb0:	200049bc 	.word	0x200049bc

00008fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    8fb4:	b580      	push	{r7, lr}
    8fb6:	b084      	sub	sp, #16
    8fb8:	af00      	add	r7, sp, #0
    8fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8fc0:	2300      	movs	r3, #0
    8fc2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	2b00      	cmp	r3, #0
    8fc8:	d04f      	beq.n	906a <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    8fca:	68bb      	ldr	r3, [r7, #8]
    8fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8fce:	1e5a      	subs	r2, r3, #1
    8fd0:	68bb      	ldr	r3, [r7, #8]
    8fd2:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8fd4:	68bb      	ldr	r3, [r7, #8]
    8fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8fd8:	68bb      	ldr	r3, [r7, #8]
    8fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8fdc:	429a      	cmp	r2, r3
    8fde:	d044      	beq.n	906a <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    8fe0:	68bb      	ldr	r3, [r7, #8]
    8fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8fe4:	2b00      	cmp	r3, #0
    8fe6:	d140      	bne.n	906a <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8fe8:	68bb      	ldr	r3, [r7, #8]
    8fea:	3304      	adds	r3, #4
    8fec:	4618      	mov	r0, r3
    8fee:	f7fe f85d 	bl	70ac <uxListRemove>
    8ff2:	4603      	mov	r3, r0
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d115      	bne.n	9024 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    8ff8:	68bb      	ldr	r3, [r7, #8]
    8ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ffc:	491d      	ldr	r1, [pc, #116]	; (9074 <xTaskPriorityDisinherit+0xc0>)
    8ffe:	4613      	mov	r3, r2
    9000:	009b      	lsls	r3, r3, #2
    9002:	4413      	add	r3, r2
    9004:	009b      	lsls	r3, r3, #2
    9006:	440b      	add	r3, r1
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	2b00      	cmp	r3, #0
    900c:	d10a      	bne.n	9024 <xTaskPriorityDisinherit+0x70>
    900e:	68bb      	ldr	r3, [r7, #8]
    9010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9012:	2201      	movs	r2, #1
    9014:	fa02 f303 	lsl.w	r3, r2, r3
    9018:	43da      	mvns	r2, r3
    901a:	4b17      	ldr	r3, [pc, #92]	; (9078 <xTaskPriorityDisinherit+0xc4>)
    901c:	681b      	ldr	r3, [r3, #0]
    901e:	4013      	ands	r3, r2
    9020:	4a15      	ldr	r2, [pc, #84]	; (9078 <xTaskPriorityDisinherit+0xc4>)
    9022:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    9024:	68bb      	ldr	r3, [r7, #8]
    9026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9028:	68bb      	ldr	r3, [r7, #8]
    902a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    902c:	68bb      	ldr	r3, [r7, #8]
    902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9030:	f1c3 0205 	rsb	r2, r3, #5
    9034:	68bb      	ldr	r3, [r7, #8]
    9036:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    9038:	68bb      	ldr	r3, [r7, #8]
    903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    903c:	2201      	movs	r2, #1
    903e:	409a      	lsls	r2, r3
    9040:	4b0d      	ldr	r3, [pc, #52]	; (9078 <xTaskPriorityDisinherit+0xc4>)
    9042:	681b      	ldr	r3, [r3, #0]
    9044:	4313      	orrs	r3, r2
    9046:	4a0c      	ldr	r2, [pc, #48]	; (9078 <xTaskPriorityDisinherit+0xc4>)
    9048:	6013      	str	r3, [r2, #0]
    904a:	68bb      	ldr	r3, [r7, #8]
    904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    904e:	4613      	mov	r3, r2
    9050:	009b      	lsls	r3, r3, #2
    9052:	4413      	add	r3, r2
    9054:	009b      	lsls	r3, r3, #2
    9056:	4a07      	ldr	r2, [pc, #28]	; (9074 <xTaskPriorityDisinherit+0xc0>)
    9058:	441a      	add	r2, r3
    905a:	68bb      	ldr	r3, [r7, #8]
    905c:	3304      	adds	r3, #4
    905e:	4619      	mov	r1, r3
    9060:	4610      	mov	r0, r2
    9062:	f7fd ffc8 	bl	6ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    9066:	2301      	movs	r3, #1
    9068:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    906a:	68fb      	ldr	r3, [r7, #12]
	}
    906c:	4618      	mov	r0, r3
    906e:	3710      	adds	r7, #16
    9070:	46bd      	mov	sp, r7
    9072:	bd80      	pop	{r7, pc}
    9074:	200048e0 	.word	0x200048e0
    9078:	200049bc 	.word	0x200049bc

0000907c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    907c:	b580      	push	{r7, lr}
    907e:	b086      	sub	sp, #24
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9086:	687b      	ldr	r3, [r7, #4]
    9088:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    908a:	2301      	movs	r3, #1
    908c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    908e:	687b      	ldr	r3, [r7, #4]
    9090:	2b00      	cmp	r3, #0
    9092:	d068      	beq.n	9166 <vTaskPriorityDisinheritAfterTimeout+0xea>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    9094:	693b      	ldr	r3, [r7, #16]
    9096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9098:	683a      	ldr	r2, [r7, #0]
    909a:	429a      	cmp	r2, r3
    909c:	d902      	bls.n	90a4 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    909e:	683b      	ldr	r3, [r7, #0]
    90a0:	617b      	str	r3, [r7, #20]
    90a2:	e002      	b.n	90aa <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    90a4:	693b      	ldr	r3, [r7, #16]
    90a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    90a8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    90aa:	693b      	ldr	r3, [r7, #16]
    90ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    90ae:	697a      	ldr	r2, [r7, #20]
    90b0:	429a      	cmp	r2, r3
    90b2:	d058      	beq.n	9166 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    90b4:	693b      	ldr	r3, [r7, #16]
    90b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    90b8:	68fa      	ldr	r2, [r7, #12]
    90ba:	429a      	cmp	r2, r3
    90bc:	d153      	bne.n	9166 <vTaskPriorityDisinheritAfterTimeout+0xea>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    90be:	693b      	ldr	r3, [r7, #16]
    90c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    90c2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    90c4:	693b      	ldr	r3, [r7, #16]
    90c6:	697a      	ldr	r2, [r7, #20]
    90c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    90ca:	693b      	ldr	r3, [r7, #16]
    90cc:	699b      	ldr	r3, [r3, #24]
    90ce:	2b00      	cmp	r3, #0
    90d0:	db04      	blt.n	90dc <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    90d2:	697b      	ldr	r3, [r7, #20]
    90d4:	f1c3 0205 	rsb	r2, r3, #5
    90d8:	693b      	ldr	r3, [r7, #16]
    90da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    90dc:	693b      	ldr	r3, [r7, #16]
    90de:	6959      	ldr	r1, [r3, #20]
    90e0:	68ba      	ldr	r2, [r7, #8]
    90e2:	4613      	mov	r3, r2
    90e4:	009b      	lsls	r3, r3, #2
    90e6:	4413      	add	r3, r2
    90e8:	009b      	lsls	r3, r3, #2
    90ea:	4a21      	ldr	r2, [pc, #132]	; (9170 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    90ec:	4413      	add	r3, r2
    90ee:	4299      	cmp	r1, r3
    90f0:	d101      	bne.n	90f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
    90f2:	2301      	movs	r3, #1
    90f4:	e000      	b.n	90f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    90f6:	2300      	movs	r3, #0
    90f8:	2b00      	cmp	r3, #0
    90fa:	d034      	beq.n	9166 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    90fc:	693b      	ldr	r3, [r7, #16]
    90fe:	3304      	adds	r3, #4
    9100:	4618      	mov	r0, r3
    9102:	f7fd ffd3 	bl	70ac <uxListRemove>
    9106:	4603      	mov	r3, r0
    9108:	2b00      	cmp	r3, #0
    910a:	d115      	bne.n	9138 <vTaskPriorityDisinheritAfterTimeout+0xbc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    910c:	693b      	ldr	r3, [r7, #16]
    910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9110:	4917      	ldr	r1, [pc, #92]	; (9170 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    9112:	4613      	mov	r3, r2
    9114:	009b      	lsls	r3, r3, #2
    9116:	4413      	add	r3, r2
    9118:	009b      	lsls	r3, r3, #2
    911a:	440b      	add	r3, r1
    911c:	681b      	ldr	r3, [r3, #0]
    911e:	2b00      	cmp	r3, #0
    9120:	d10a      	bne.n	9138 <vTaskPriorityDisinheritAfterTimeout+0xbc>
    9122:	693b      	ldr	r3, [r7, #16]
    9124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9126:	2201      	movs	r2, #1
    9128:	fa02 f303 	lsl.w	r3, r2, r3
    912c:	43da      	mvns	r2, r3
    912e:	4b11      	ldr	r3, [pc, #68]	; (9174 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    9130:	681b      	ldr	r3, [r3, #0]
    9132:	4013      	ands	r3, r2
    9134:	4a0f      	ldr	r2, [pc, #60]	; (9174 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    9136:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    9138:	693b      	ldr	r3, [r7, #16]
    913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    913c:	2201      	movs	r2, #1
    913e:	409a      	lsls	r2, r3
    9140:	4b0c      	ldr	r3, [pc, #48]	; (9174 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    9142:	681b      	ldr	r3, [r3, #0]
    9144:	4313      	orrs	r3, r2
    9146:	4a0b      	ldr	r2, [pc, #44]	; (9174 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    9148:	6013      	str	r3, [r2, #0]
    914a:	693b      	ldr	r3, [r7, #16]
    914c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    914e:	4613      	mov	r3, r2
    9150:	009b      	lsls	r3, r3, #2
    9152:	4413      	add	r3, r2
    9154:	009b      	lsls	r3, r3, #2
    9156:	4a06      	ldr	r2, [pc, #24]	; (9170 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    9158:	441a      	add	r2, r3
    915a:	693b      	ldr	r3, [r7, #16]
    915c:	3304      	adds	r3, #4
    915e:	4619      	mov	r1, r3
    9160:	4610      	mov	r0, r2
    9162:	f7fd ff48 	bl	6ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9166:	bf00      	nop
    9168:	3718      	adds	r7, #24
    916a:	46bd      	mov	sp, r7
    916c:	bd80      	pop	{r7, pc}
    916e:	bf00      	nop
    9170:	200048e0 	.word	0x200048e0
    9174:	200049bc 	.word	0x200049bc

00009178 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    9178:	b480      	push	{r7}
    917a:	b083      	sub	sp, #12
    917c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    917e:	4b09      	ldr	r3, [pc, #36]	; (91a4 <uxTaskResetEventItemValue+0x2c>)
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	699b      	ldr	r3, [r3, #24]
    9184:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9186:	4b07      	ldr	r3, [pc, #28]	; (91a4 <uxTaskResetEventItemValue+0x2c>)
    9188:	681b      	ldr	r3, [r3, #0]
    918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    918c:	4b05      	ldr	r3, [pc, #20]	; (91a4 <uxTaskResetEventItemValue+0x2c>)
    918e:	681b      	ldr	r3, [r3, #0]
    9190:	f1c2 0205 	rsb	r2, r2, #5
    9194:	619a      	str	r2, [r3, #24]

	return uxReturn;
    9196:	687b      	ldr	r3, [r7, #4]
}
    9198:	4618      	mov	r0, r3
    919a:	370c      	adds	r7, #12
    919c:	46bd      	mov	sp, r7
    919e:	bc80      	pop	{r7}
    91a0:	4770      	bx	lr
    91a2:	bf00      	nop
    91a4:	200048dc 	.word	0x200048dc

000091a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    91a8:	b480      	push	{r7}
    91aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    91ac:	4b07      	ldr	r3, [pc, #28]	; (91cc <pvTaskIncrementMutexHeldCount+0x24>)
    91ae:	681b      	ldr	r3, [r3, #0]
    91b0:	2b00      	cmp	r3, #0
    91b2:	d004      	beq.n	91be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    91b4:	4b05      	ldr	r3, [pc, #20]	; (91cc <pvTaskIncrementMutexHeldCount+0x24>)
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    91ba:	3201      	adds	r2, #1
    91bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    91be:	4b03      	ldr	r3, [pc, #12]	; (91cc <pvTaskIncrementMutexHeldCount+0x24>)
    91c0:	681b      	ldr	r3, [r3, #0]
	}
    91c2:	4618      	mov	r0, r3
    91c4:	46bd      	mov	sp, r7
    91c6:	bc80      	pop	{r7}
    91c8:	4770      	bx	lr
    91ca:	bf00      	nop
    91cc:	200048dc 	.word	0x200048dc

000091d0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    91d0:	b580      	push	{r7, lr}
    91d2:	b084      	sub	sp, #16
    91d4:	af00      	add	r7, sp, #0
    91d6:	6078      	str	r0, [r7, #4]
    91d8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    91da:	f000 ff81 	bl	a0e0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    91de:	4b1e      	ldr	r3, [pc, #120]	; (9258 <ulTaskNotifyTake+0x88>)
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    91e4:	2b00      	cmp	r3, #0
    91e6:	d113      	bne.n	9210 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    91e8:	4b1b      	ldr	r3, [pc, #108]	; (9258 <ulTaskNotifyTake+0x88>)
    91ea:	681b      	ldr	r3, [r3, #0]
    91ec:	2201      	movs	r2, #1
    91ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
    91f2:	683b      	ldr	r3, [r7, #0]
    91f4:	2b00      	cmp	r3, #0
    91f6:	d00b      	beq.n	9210 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    91f8:	2101      	movs	r1, #1
    91fa:	6838      	ldr	r0, [r7, #0]
    91fc:	f000 fa50 	bl	96a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    9200:	4b16      	ldr	r3, [pc, #88]	; (925c <ulTaskNotifyTake+0x8c>)
    9202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9206:	601a      	str	r2, [r3, #0]
    9208:	f3bf 8f4f 	dsb	sy
    920c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    9210:	f000 ff7e 	bl	a110 <vPortExitCritical>

		taskENTER_CRITICAL();
    9214:	f000 ff64 	bl	a0e0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    9218:	4b0f      	ldr	r3, [pc, #60]	; (9258 <ulTaskNotifyTake+0x88>)
    921a:	681b      	ldr	r3, [r3, #0]
    921c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    921e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
    9220:	68fb      	ldr	r3, [r7, #12]
    9222:	2b00      	cmp	r3, #0
    9224:	d00c      	beq.n	9240 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	2b00      	cmp	r3, #0
    922a:	d004      	beq.n	9236 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    922c:	4b0a      	ldr	r3, [pc, #40]	; (9258 <ulTaskNotifyTake+0x88>)
    922e:	681b      	ldr	r3, [r3, #0]
    9230:	2200      	movs	r2, #0
    9232:	64da      	str	r2, [r3, #76]	; 0x4c
    9234:	e004      	b.n	9240 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    9236:	4b08      	ldr	r3, [pc, #32]	; (9258 <ulTaskNotifyTake+0x88>)
    9238:	681b      	ldr	r3, [r3, #0]
    923a:	68fa      	ldr	r2, [r7, #12]
    923c:	3a01      	subs	r2, #1
    923e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    9240:	4b05      	ldr	r3, [pc, #20]	; (9258 <ulTaskNotifyTake+0x88>)
    9242:	681b      	ldr	r3, [r3, #0]
    9244:	2200      	movs	r2, #0
    9246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
    924a:	f000 ff61 	bl	a110 <vPortExitCritical>

		return ulReturn;
    924e:	68fb      	ldr	r3, [r7, #12]
	}
    9250:	4618      	mov	r0, r3
    9252:	3710      	adds	r7, #16
    9254:	46bd      	mov	sp, r7
    9256:	bd80      	pop	{r7, pc}
    9258:	200048dc 	.word	0x200048dc
    925c:	e000ed04 	.word	0xe000ed04

00009260 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    9260:	b580      	push	{r7, lr}
    9262:	b086      	sub	sp, #24
    9264:	af00      	add	r7, sp, #0
    9266:	60f8      	str	r0, [r7, #12]
    9268:	60b9      	str	r1, [r7, #8]
    926a:	607a      	str	r2, [r7, #4]
    926c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    926e:	f000 ff37 	bl	a0e0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    9272:	4b26      	ldr	r3, [pc, #152]	; (930c <xTaskNotifyWait+0xac>)
    9274:	681b      	ldr	r3, [r3, #0]
    9276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    927a:	b2db      	uxtb	r3, r3
    927c:	2b02      	cmp	r3, #2
    927e:	d01a      	beq.n	92b6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    9280:	4b22      	ldr	r3, [pc, #136]	; (930c <xTaskNotifyWait+0xac>)
    9282:	681b      	ldr	r3, [r3, #0]
    9284:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    9286:	68fa      	ldr	r2, [r7, #12]
    9288:	43d2      	mvns	r2, r2
    928a:	400a      	ands	r2, r1
    928c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    928e:	4b1f      	ldr	r3, [pc, #124]	; (930c <xTaskNotifyWait+0xac>)
    9290:	681b      	ldr	r3, [r3, #0]
    9292:	2201      	movs	r2, #1
    9294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
    9298:	683b      	ldr	r3, [r7, #0]
    929a:	2b00      	cmp	r3, #0
    929c:	d00b      	beq.n	92b6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    929e:	2101      	movs	r1, #1
    92a0:	6838      	ldr	r0, [r7, #0]
    92a2:	f000 f9fd 	bl	96a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    92a6:	4b1a      	ldr	r3, [pc, #104]	; (9310 <xTaskNotifyWait+0xb0>)
    92a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    92ac:	601a      	str	r2, [r3, #0]
    92ae:	f3bf 8f4f 	dsb	sy
    92b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    92b6:	f000 ff2b 	bl	a110 <vPortExitCritical>

		taskENTER_CRITICAL();
    92ba:	f000 ff11 	bl	a0e0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	2b00      	cmp	r3, #0
    92c2:	d004      	beq.n	92ce <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    92c4:	4b11      	ldr	r3, [pc, #68]	; (930c <xTaskNotifyWait+0xac>)
    92c6:	681b      	ldr	r3, [r3, #0]
    92c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    92ce:	4b0f      	ldr	r3, [pc, #60]	; (930c <xTaskNotifyWait+0xac>)
    92d0:	681b      	ldr	r3, [r3, #0]
    92d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    92d6:	b2db      	uxtb	r3, r3
    92d8:	2b02      	cmp	r3, #2
    92da:	d002      	beq.n	92e2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    92dc:	2300      	movs	r3, #0
    92de:	617b      	str	r3, [r7, #20]
    92e0:	e008      	b.n	92f4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    92e2:	4b0a      	ldr	r3, [pc, #40]	; (930c <xTaskNotifyWait+0xac>)
    92e4:	681b      	ldr	r3, [r3, #0]
    92e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    92e8:	68ba      	ldr	r2, [r7, #8]
    92ea:	43d2      	mvns	r2, r2
    92ec:	400a      	ands	r2, r1
    92ee:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
    92f0:	2301      	movs	r3, #1
    92f2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    92f4:	4b05      	ldr	r3, [pc, #20]	; (930c <xTaskNotifyWait+0xac>)
    92f6:	681b      	ldr	r3, [r3, #0]
    92f8:	2200      	movs	r2, #0
    92fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
    92fe:	f000 ff07 	bl	a110 <vPortExitCritical>

		return xReturn;
    9302:	697b      	ldr	r3, [r7, #20]
	}
    9304:	4618      	mov	r0, r3
    9306:	3718      	adds	r7, #24
    9308:	46bd      	mov	sp, r7
    930a:	bd80      	pop	{r7, pc}
    930c:	200048dc 	.word	0x200048dc
    9310:	e000ed04 	.word	0xe000ed04

00009314 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    9314:	b580      	push	{r7, lr}
    9316:	b088      	sub	sp, #32
    9318:	af00      	add	r7, sp, #0
    931a:	60f8      	str	r0, [r7, #12]
    931c:	60b9      	str	r1, [r7, #8]
    931e:	603b      	str	r3, [r7, #0]
    9320:	4613      	mov	r3, r2
    9322:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    9324:	2301      	movs	r3, #1
    9326:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    9328:	68fb      	ldr	r3, [r7, #12]
    932a:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
    932c:	f000 fed8 	bl	a0e0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    9330:	683b      	ldr	r3, [r7, #0]
    9332:	2b00      	cmp	r3, #0
    9334:	d003      	beq.n	933e <xTaskGenericNotify+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    9336:	69bb      	ldr	r3, [r7, #24]
    9338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    933a:	683b      	ldr	r3, [r7, #0]
    933c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    933e:	69bb      	ldr	r3, [r7, #24]
    9340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    9344:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    9346:	69bb      	ldr	r3, [r7, #24]
    9348:	2202      	movs	r2, #2
    934a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
    934e:	79fb      	ldrb	r3, [r7, #7]
    9350:	2b04      	cmp	r3, #4
    9352:	d828      	bhi.n	93a6 <xTaskGenericNotify+0x92>
    9354:	a201      	add	r2, pc, #4	; (adr r2, 935c <xTaskGenericNotify+0x48>)
    9356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    935a:	bf00      	nop
    935c:	000093a7 	.word	0x000093a7
    9360:	00009371 	.word	0x00009371
    9364:	0000937f 	.word	0x0000937f
    9368:	0000938b 	.word	0x0000938b
    936c:	00009393 	.word	0x00009393
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    9370:	69bb      	ldr	r3, [r7, #24]
    9372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9374:	68bb      	ldr	r3, [r7, #8]
    9376:	431a      	orrs	r2, r3
    9378:	69bb      	ldr	r3, [r7, #24]
    937a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    937c:	e013      	b.n	93a6 <xTaskGenericNotify+0x92>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    937e:	69bb      	ldr	r3, [r7, #24]
    9380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9382:	1c5a      	adds	r2, r3, #1
    9384:	69bb      	ldr	r3, [r7, #24]
    9386:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    9388:	e00d      	b.n	93a6 <xTaskGenericNotify+0x92>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    938a:	69bb      	ldr	r3, [r7, #24]
    938c:	68ba      	ldr	r2, [r7, #8]
    938e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    9390:	e009      	b.n	93a6 <xTaskGenericNotify+0x92>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    9392:	7dfb      	ldrb	r3, [r7, #23]
    9394:	2b02      	cmp	r3, #2
    9396:	d003      	beq.n	93a0 <xTaskGenericNotify+0x8c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    9398:	69bb      	ldr	r3, [r7, #24]
    939a:	68ba      	ldr	r2, [r7, #8]
    939c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    939e:	e001      	b.n	93a4 <xTaskGenericNotify+0x90>
						xReturn = pdFAIL;
    93a0:	2300      	movs	r3, #0
    93a2:	61fb      	str	r3, [r7, #28]
					break;
    93a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    93a6:	7dfb      	ldrb	r3, [r7, #23]
    93a8:	2b01      	cmp	r3, #1
    93aa:	d12a      	bne.n	9402 <xTaskGenericNotify+0xee>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    93ac:	69bb      	ldr	r3, [r7, #24]
    93ae:	3304      	adds	r3, #4
    93b0:	4618      	mov	r0, r3
    93b2:	f7fd fe7b 	bl	70ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    93b6:	69bb      	ldr	r3, [r7, #24]
    93b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    93ba:	2201      	movs	r2, #1
    93bc:	409a      	lsls	r2, r3
    93be:	4b14      	ldr	r3, [pc, #80]	; (9410 <xTaskGenericNotify+0xfc>)
    93c0:	681b      	ldr	r3, [r3, #0]
    93c2:	4313      	orrs	r3, r2
    93c4:	4a12      	ldr	r2, [pc, #72]	; (9410 <xTaskGenericNotify+0xfc>)
    93c6:	6013      	str	r3, [r2, #0]
    93c8:	69bb      	ldr	r3, [r7, #24]
    93ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93cc:	4613      	mov	r3, r2
    93ce:	009b      	lsls	r3, r3, #2
    93d0:	4413      	add	r3, r2
    93d2:	009b      	lsls	r3, r3, #2
    93d4:	4a0f      	ldr	r2, [pc, #60]	; (9414 <xTaskGenericNotify+0x100>)
    93d6:	441a      	add	r2, r3
    93d8:	69bb      	ldr	r3, [r7, #24]
    93da:	3304      	adds	r3, #4
    93dc:	4619      	mov	r1, r3
    93de:	4610      	mov	r0, r2
    93e0:	f7fd fe09 	bl	6ff6 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    93e4:	69bb      	ldr	r3, [r7, #24]
    93e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93e8:	4b0b      	ldr	r3, [pc, #44]	; (9418 <xTaskGenericNotify+0x104>)
    93ea:	681b      	ldr	r3, [r3, #0]
    93ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    93ee:	429a      	cmp	r2, r3
    93f0:	d907      	bls.n	9402 <xTaskGenericNotify+0xee>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    93f2:	4b0a      	ldr	r3, [pc, #40]	; (941c <xTaskGenericNotify+0x108>)
    93f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    93f8:	601a      	str	r2, [r3, #0]
    93fa:	f3bf 8f4f 	dsb	sy
    93fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    9402:	f000 fe85 	bl	a110 <vPortExitCritical>

		return xReturn;
    9406:	69fb      	ldr	r3, [r7, #28]
	}
    9408:	4618      	mov	r0, r3
    940a:	3720      	adds	r7, #32
    940c:	46bd      	mov	sp, r7
    940e:	bd80      	pop	{r7, pc}
    9410:	200049bc 	.word	0x200049bc
    9414:	200048e0 	.word	0x200048e0
    9418:	200048dc 	.word	0x200048dc
    941c:	e000ed04 	.word	0xe000ed04

00009420 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    9420:	b580      	push	{r7, lr}
    9422:	b08c      	sub	sp, #48	; 0x30
    9424:	af00      	add	r7, sp, #0
    9426:	60f8      	str	r0, [r7, #12]
    9428:	60b9      	str	r1, [r7, #8]
    942a:	603b      	str	r3, [r7, #0]
    942c:	4613      	mov	r3, r2
    942e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    9430:	2301      	movs	r3, #1
    9432:	62fb      	str	r3, [r7, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    9434:	68fb      	ldr	r3, [r7, #12]
    9436:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
    9438:	f3ef 8211 	mrs	r2, BASEPRI
    943c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9440:	f383 8811 	msr	BASEPRI, r3
    9444:	f3bf 8f6f 	isb	sy
    9448:	f3bf 8f4f 	dsb	sy
    944c:	61fa      	str	r2, [r7, #28]
    944e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
    9450:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9452:	627b      	str	r3, [r7, #36]	; 0x24
		{
			if( pulPreviousNotificationValue != NULL )
    9454:	683b      	ldr	r3, [r7, #0]
    9456:	2b00      	cmp	r3, #0
    9458:	d003      	beq.n	9462 <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    945c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    945e:	683b      	ldr	r3, [r7, #0]
    9460:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    9462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    9468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    946e:	2202      	movs	r2, #2
    9470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
    9474:	79fb      	ldrb	r3, [r7, #7]
    9476:	2b04      	cmp	r3, #4
    9478:	d828      	bhi.n	94cc <xTaskGenericNotifyFromISR+0xac>
    947a:	a201      	add	r2, pc, #4	; (adr r2, 9480 <xTaskGenericNotifyFromISR+0x60>)
    947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9480:	000094cd 	.word	0x000094cd
    9484:	00009495 	.word	0x00009495
    9488:	000094a3 	.word	0x000094a3
    948c:	000094af 	.word	0x000094af
    9490:	000094b7 	.word	0x000094b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    9494:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9498:	68bb      	ldr	r3, [r7, #8]
    949a:	431a      	orrs	r2, r3
    949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    949e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    94a0:	e014      	b.n	94cc <xTaskGenericNotifyFromISR+0xac>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    94a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    94a6:	1c5a      	adds	r2, r3, #1
    94a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    94ac:	e00e      	b.n	94cc <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    94ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b0:	68ba      	ldr	r2, [r7, #8]
    94b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
    94b4:	e00a      	b.n	94cc <xTaskGenericNotifyFromISR+0xac>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    94b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    94ba:	2b02      	cmp	r3, #2
    94bc:	d003      	beq.n	94c6 <xTaskGenericNotifyFromISR+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
    94be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94c0:	68ba      	ldr	r2, [r7, #8]
    94c2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    94c4:	e001      	b.n	94ca <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
    94c6:	2300      	movs	r3, #0
    94c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
    94ca:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    94cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    94d0:	2b01      	cmp	r3, #1
    94d2:	d137      	bne.n	9544 <xTaskGenericNotifyFromISR+0x124>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    94d4:	4b20      	ldr	r3, [pc, #128]	; (9558 <xTaskGenericNotifyFromISR+0x138>)
    94d6:	681b      	ldr	r3, [r3, #0]
    94d8:	2b00      	cmp	r3, #0
    94da:	d11c      	bne.n	9516 <xTaskGenericNotifyFromISR+0xf6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    94dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94de:	3304      	adds	r3, #4
    94e0:	4618      	mov	r0, r3
    94e2:	f7fd fde3 	bl	70ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    94e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    94ea:	2201      	movs	r2, #1
    94ec:	409a      	lsls	r2, r3
    94ee:	4b1b      	ldr	r3, [pc, #108]	; (955c <xTaskGenericNotifyFromISR+0x13c>)
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	4313      	orrs	r3, r2
    94f4:	4a19      	ldr	r2, [pc, #100]	; (955c <xTaskGenericNotifyFromISR+0x13c>)
    94f6:	6013      	str	r3, [r2, #0]
    94f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94fc:	4613      	mov	r3, r2
    94fe:	009b      	lsls	r3, r3, #2
    9500:	4413      	add	r3, r2
    9502:	009b      	lsls	r3, r3, #2
    9504:	4a16      	ldr	r2, [pc, #88]	; (9560 <xTaskGenericNotifyFromISR+0x140>)
    9506:	441a      	add	r2, r3
    9508:	6abb      	ldr	r3, [r7, #40]	; 0x28
    950a:	3304      	adds	r3, #4
    950c:	4619      	mov	r1, r3
    950e:	4610      	mov	r0, r2
    9510:	f7fd fd71 	bl	6ff6 <vListInsertEnd>
    9514:	e005      	b.n	9522 <xTaskGenericNotifyFromISR+0x102>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    9516:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9518:	3318      	adds	r3, #24
    951a:	4619      	mov	r1, r3
    951c:	4811      	ldr	r0, [pc, #68]	; (9564 <xTaskGenericNotifyFromISR+0x144>)
    951e:	f7fd fd6a 	bl	6ff6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    9522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9526:	4b10      	ldr	r3, [pc, #64]	; (9568 <xTaskGenericNotifyFromISR+0x148>)
    9528:	681b      	ldr	r3, [r3, #0]
    952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    952c:	429a      	cmp	r2, r3
    952e:	d909      	bls.n	9544 <xTaskGenericNotifyFromISR+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    9530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9532:	2b00      	cmp	r3, #0
    9534:	d003      	beq.n	953e <xTaskGenericNotifyFromISR+0x11e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    9536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9538:	2201      	movs	r2, #1
    953a:	601a      	str	r2, [r3, #0]
    953c:	e002      	b.n	9544 <xTaskGenericNotifyFromISR+0x124>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    953e:	4b0b      	ldr	r3, [pc, #44]	; (956c <xTaskGenericNotifyFromISR+0x14c>)
    9540:	2201      	movs	r2, #1
    9542:	601a      	str	r2, [r3, #0]
    9544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9546:	617b      	str	r3, [r7, #20]
	__asm volatile
    9548:	697b      	ldr	r3, [r7, #20]
    954a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
    9550:	4618      	mov	r0, r3
    9552:	3730      	adds	r7, #48	; 0x30
    9554:	46bd      	mov	sp, r7
    9556:	bd80      	pop	{r7, pc}
    9558:	200049dc 	.word	0x200049dc
    955c:	200049bc 	.word	0x200049bc
    9560:	200048e0 	.word	0x200048e0
    9564:	20004974 	.word	0x20004974
    9568:	200048dc 	.word	0x200048dc
    956c:	200049c8 	.word	0x200049c8

00009570 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    9570:	b580      	push	{r7, lr}
    9572:	b088      	sub	sp, #32
    9574:	af00      	add	r7, sp, #0
    9576:	6078      	str	r0, [r7, #4]
    9578:	6039      	str	r1, [r7, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	61fb      	str	r3, [r7, #28]
	__asm volatile
    957e:	f3ef 8211 	mrs	r2, BASEPRI
    9582:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9586:	f383 8811 	msr	BASEPRI, r3
    958a:	f3bf 8f6f 	isb	sy
    958e:	f3bf 8f4f 	dsb	sy
    9592:	613a      	str	r2, [r7, #16]
    9594:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    9596:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9598:	61bb      	str	r3, [r7, #24]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    959a:	69fb      	ldr	r3, [r7, #28]
    959c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    95a0:	75fb      	strb	r3, [r7, #23]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    95a2:	69fb      	ldr	r3, [r7, #28]
    95a4:	2202      	movs	r2, #2
    95a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    95aa:	69fb      	ldr	r3, [r7, #28]
    95ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    95ae:	1c5a      	adds	r2, r3, #1
    95b0:	69fb      	ldr	r3, [r7, #28]
    95b2:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    95b4:	7dfb      	ldrb	r3, [r7, #23]
    95b6:	2b01      	cmp	r3, #1
    95b8:	d137      	bne.n	962a <vTaskNotifyGiveFromISR+0xba>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    95ba:	4b20      	ldr	r3, [pc, #128]	; (963c <vTaskNotifyGiveFromISR+0xcc>)
    95bc:	681b      	ldr	r3, [r3, #0]
    95be:	2b00      	cmp	r3, #0
    95c0:	d11c      	bne.n	95fc <vTaskNotifyGiveFromISR+0x8c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    95c2:	69fb      	ldr	r3, [r7, #28]
    95c4:	3304      	adds	r3, #4
    95c6:	4618      	mov	r0, r3
    95c8:	f7fd fd70 	bl	70ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    95cc:	69fb      	ldr	r3, [r7, #28]
    95ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95d0:	2201      	movs	r2, #1
    95d2:	409a      	lsls	r2, r3
    95d4:	4b1a      	ldr	r3, [pc, #104]	; (9640 <vTaskNotifyGiveFromISR+0xd0>)
    95d6:	681b      	ldr	r3, [r3, #0]
    95d8:	4313      	orrs	r3, r2
    95da:	4a19      	ldr	r2, [pc, #100]	; (9640 <vTaskNotifyGiveFromISR+0xd0>)
    95dc:	6013      	str	r3, [r2, #0]
    95de:	69fb      	ldr	r3, [r7, #28]
    95e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95e2:	4613      	mov	r3, r2
    95e4:	009b      	lsls	r3, r3, #2
    95e6:	4413      	add	r3, r2
    95e8:	009b      	lsls	r3, r3, #2
    95ea:	4a16      	ldr	r2, [pc, #88]	; (9644 <vTaskNotifyGiveFromISR+0xd4>)
    95ec:	441a      	add	r2, r3
    95ee:	69fb      	ldr	r3, [r7, #28]
    95f0:	3304      	adds	r3, #4
    95f2:	4619      	mov	r1, r3
    95f4:	4610      	mov	r0, r2
    95f6:	f7fd fcfe 	bl	6ff6 <vListInsertEnd>
    95fa:	e005      	b.n	9608 <vTaskNotifyGiveFromISR+0x98>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    95fc:	69fb      	ldr	r3, [r7, #28]
    95fe:	3318      	adds	r3, #24
    9600:	4619      	mov	r1, r3
    9602:	4811      	ldr	r0, [pc, #68]	; (9648 <vTaskNotifyGiveFromISR+0xd8>)
    9604:	f7fd fcf7 	bl	6ff6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    9608:	69fb      	ldr	r3, [r7, #28]
    960a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    960c:	4b0f      	ldr	r3, [pc, #60]	; (964c <vTaskNotifyGiveFromISR+0xdc>)
    960e:	681b      	ldr	r3, [r3, #0]
    9610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9612:	429a      	cmp	r2, r3
    9614:	d909      	bls.n	962a <vTaskNotifyGiveFromISR+0xba>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    9616:	683b      	ldr	r3, [r7, #0]
    9618:	2b00      	cmp	r3, #0
    961a:	d003      	beq.n	9624 <vTaskNotifyGiveFromISR+0xb4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    961c:	683b      	ldr	r3, [r7, #0]
    961e:	2201      	movs	r2, #1
    9620:	601a      	str	r2, [r3, #0]
    9622:	e002      	b.n	962a <vTaskNotifyGiveFromISR+0xba>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    9624:	4b0a      	ldr	r3, [pc, #40]	; (9650 <vTaskNotifyGiveFromISR+0xe0>)
    9626:	2201      	movs	r2, #1
    9628:	601a      	str	r2, [r3, #0]
    962a:	69bb      	ldr	r3, [r7, #24]
    962c:	60bb      	str	r3, [r7, #8]
	__asm volatile
    962e:	68bb      	ldr	r3, [r7, #8]
    9630:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    9634:	bf00      	nop
    9636:	3720      	adds	r7, #32
    9638:	46bd      	mov	sp, r7
    963a:	bd80      	pop	{r7, pc}
    963c:	200049dc 	.word	0x200049dc
    9640:	200049bc 	.word	0x200049bc
    9644:	200048e0 	.word	0x200048e0
    9648:	20004974 	.word	0x20004974
    964c:	200048dc 	.word	0x200048dc
    9650:	200049c8 	.word	0x200049c8

00009654 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    9654:	b580      	push	{r7, lr}
    9656:	b084      	sub	sp, #16
    9658:	af00      	add	r7, sp, #0
    965a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	2b00      	cmp	r3, #0
    9660:	d102      	bne.n	9668 <xTaskNotifyStateClear+0x14>
    9662:	4b0e      	ldr	r3, [pc, #56]	; (969c <xTaskNotifyStateClear+0x48>)
    9664:	681b      	ldr	r3, [r3, #0]
    9666:	e000      	b.n	966a <xTaskNotifyStateClear+0x16>
    9668:	687b      	ldr	r3, [r7, #4]
    966a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
    966c:	f000 fd38 	bl	a0e0 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    9670:	68bb      	ldr	r3, [r7, #8]
    9672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    9676:	b2db      	uxtb	r3, r3
    9678:	2b02      	cmp	r3, #2
    967a:	d106      	bne.n	968a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    967c:	68bb      	ldr	r3, [r7, #8]
    967e:	2200      	movs	r2, #0
    9680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
    9684:	2301      	movs	r3, #1
    9686:	60fb      	str	r3, [r7, #12]
    9688:	e001      	b.n	968e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
    968a:	2300      	movs	r3, #0
    968c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    968e:	f000 fd3f 	bl	a110 <vPortExitCritical>

		return xReturn;
    9692:	68fb      	ldr	r3, [r7, #12]
	}
    9694:	4618      	mov	r0, r3
    9696:	3710      	adds	r7, #16
    9698:	46bd      	mov	sp, r7
    969a:	bd80      	pop	{r7, pc}
    969c:	200048dc 	.word	0x200048dc

000096a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b084      	sub	sp, #16
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
    96a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    96aa:	4b29      	ldr	r3, [pc, #164]	; (9750 <prvAddCurrentTaskToDelayedList+0xb0>)
    96ac:	681b      	ldr	r3, [r3, #0]
    96ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    96b0:	4b28      	ldr	r3, [pc, #160]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    96b2:	681b      	ldr	r3, [r3, #0]
    96b4:	3304      	adds	r3, #4
    96b6:	4618      	mov	r0, r3
    96b8:	f7fd fcf8 	bl	70ac <uxListRemove>
    96bc:	4603      	mov	r3, r0
    96be:	2b00      	cmp	r3, #0
    96c0:	d10b      	bne.n	96da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
    96c2:	4b24      	ldr	r3, [pc, #144]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    96c4:	681b      	ldr	r3, [r3, #0]
    96c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    96c8:	2201      	movs	r2, #1
    96ca:	fa02 f303 	lsl.w	r3, r2, r3
    96ce:	43da      	mvns	r2, r3
    96d0:	4b21      	ldr	r3, [pc, #132]	; (9758 <prvAddCurrentTaskToDelayedList+0xb8>)
    96d2:	681b      	ldr	r3, [r3, #0]
    96d4:	4013      	ands	r3, r2
    96d6:	4a20      	ldr	r2, [pc, #128]	; (9758 <prvAddCurrentTaskToDelayedList+0xb8>)
    96d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    96e0:	d10a      	bne.n	96f8 <prvAddCurrentTaskToDelayedList+0x58>
    96e2:	683b      	ldr	r3, [r7, #0]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d007      	beq.n	96f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    96e8:	4b1a      	ldr	r3, [pc, #104]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    96ea:	681b      	ldr	r3, [r3, #0]
    96ec:	3304      	adds	r3, #4
    96ee:	4619      	mov	r1, r3
    96f0:	481a      	ldr	r0, [pc, #104]	; (975c <prvAddCurrentTaskToDelayedList+0xbc>)
    96f2:	f7fd fc80 	bl	6ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    96f6:	e026      	b.n	9746 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
    96f8:	68fa      	ldr	r2, [r7, #12]
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	4413      	add	r3, r2
    96fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9700:	4b14      	ldr	r3, [pc, #80]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    9702:	681b      	ldr	r3, [r3, #0]
    9704:	68ba      	ldr	r2, [r7, #8]
    9706:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    9708:	68ba      	ldr	r2, [r7, #8]
    970a:	68fb      	ldr	r3, [r7, #12]
    970c:	429a      	cmp	r2, r3
    970e:	d209      	bcs.n	9724 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9710:	4b13      	ldr	r3, [pc, #76]	; (9760 <prvAddCurrentTaskToDelayedList+0xc0>)
    9712:	681a      	ldr	r2, [r3, #0]
    9714:	4b0f      	ldr	r3, [pc, #60]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    9716:	681b      	ldr	r3, [r3, #0]
    9718:	3304      	adds	r3, #4
    971a:	4619      	mov	r1, r3
    971c:	4610      	mov	r0, r2
    971e:	f7fd fc8d 	bl	703c <vListInsert>
}
    9722:	e010      	b.n	9746 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9724:	4b0f      	ldr	r3, [pc, #60]	; (9764 <prvAddCurrentTaskToDelayedList+0xc4>)
    9726:	681a      	ldr	r2, [r3, #0]
    9728:	4b0a      	ldr	r3, [pc, #40]	; (9754 <prvAddCurrentTaskToDelayedList+0xb4>)
    972a:	681b      	ldr	r3, [r3, #0]
    972c:	3304      	adds	r3, #4
    972e:	4619      	mov	r1, r3
    9730:	4610      	mov	r0, r2
    9732:	f7fd fc83 	bl	703c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    9736:	4b0c      	ldr	r3, [pc, #48]	; (9768 <prvAddCurrentTaskToDelayedList+0xc8>)
    9738:	681b      	ldr	r3, [r3, #0]
    973a:	68ba      	ldr	r2, [r7, #8]
    973c:	429a      	cmp	r2, r3
    973e:	d202      	bcs.n	9746 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
    9740:	4a09      	ldr	r2, [pc, #36]	; (9768 <prvAddCurrentTaskToDelayedList+0xc8>)
    9742:	68bb      	ldr	r3, [r7, #8]
    9744:	6013      	str	r3, [r2, #0]
}
    9746:	bf00      	nop
    9748:	3710      	adds	r7, #16
    974a:	46bd      	mov	sp, r7
    974c:	bd80      	pop	{r7, pc}
    974e:	bf00      	nop
    9750:	200049b8 	.word	0x200049b8
    9754:	200048dc 	.word	0x200048dc
    9758:	200049bc 	.word	0x200049bc
    975c:	200049a0 	.word	0x200049a0
    9760:	20004970 	.word	0x20004970
    9764:	2000496c 	.word	0x2000496c
    9768:	200049d4 	.word	0x200049d4

0000976c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    976c:	b580      	push	{r7, lr}
    976e:	b088      	sub	sp, #32
    9770:	af02      	add	r7, sp, #8
    9772:	60f8      	str	r0, [r7, #12]
    9774:	60b9      	str	r1, [r7, #8]
    9776:	607a      	str	r2, [r7, #4]
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    9778:	68bb      	ldr	r3, [r7, #8]
    977a:	2b00      	cmp	r3, #0
    977c:	d101      	bne.n	9782 <xStreamBufferGenericCreate+0x16>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
    977e:	2301      	movs	r3, #1
    9780:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    9782:	68fb      	ldr	r3, [r7, #12]
    9784:	3301      	adds	r3, #1
    9786:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    9788:	68fb      	ldr	r3, [r7, #12]
    978a:	3320      	adds	r3, #32
    978c:	4618      	mov	r0, r3
    978e:	f7f6 fcbd 	bl	10c <pvPortMalloc>
    9792:	6178      	str	r0, [r7, #20]

		if( pucAllocatedMemory != NULL )
    9794:	697b      	ldr	r3, [r7, #20]
    9796:	2b00      	cmp	r3, #0
    9798:	d009      	beq.n	97ae <xStreamBufferGenericCreate+0x42>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    979a:	697b      	ldr	r3, [r7, #20]
    979c:	f103 0120 	add.w	r1, r3, #32
    97a0:	687b      	ldr	r3, [r7, #4]
    97a2:	9300      	str	r3, [sp, #0]
    97a4:	68bb      	ldr	r3, [r7, #8]
    97a6:	68fa      	ldr	r2, [r7, #12]
    97a8:	6978      	ldr	r0, [r7, #20]
    97aa:	f000 fbe4 	bl	9f76 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    97ae:	697b      	ldr	r3, [r7, #20]
	}
    97b0:	4618      	mov	r0, r3
    97b2:	3718      	adds	r7, #24
    97b4:	46bd      	mov	sp, r7
    97b6:	bd80      	pop	{r7, pc}

000097b8 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b084      	sub	sp, #16
    97bc:	af00      	add	r7, sp, #0
    97be:	6078      	str	r0, [r7, #4]
StreamBuffer_t * pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	7f1b      	ldrb	r3, [r3, #28]
    97c8:	f003 0302 	and.w	r3, r3, #2
    97cc:	2b00      	cmp	r3, #0
    97ce:	d103      	bne.n	97d8 <vStreamBufferDelete+0x20>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    97d0:	68f8      	ldr	r0, [r7, #12]
    97d2:	f7f6 fce1 	bl	198 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
    97d6:	e004      	b.n	97e2 <vStreamBufferDelete+0x2a>
		memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    97d8:	2220      	movs	r2, #32
    97da:	2100      	movs	r1, #0
    97dc:	68f8      	ldr	r0, [r7, #12]
    97de:	f000 fd85 	bl	a2ec <memset>
}
    97e2:	bf00      	nop
    97e4:	3710      	adds	r7, #16
    97e6:	46bd      	mov	sp, r7
    97e8:	bd80      	pop	{r7, pc}

000097ea <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    97ea:	b580      	push	{r7, lr}
    97ec:	b088      	sub	sp, #32
    97ee:	af02      	add	r7, sp, #8
    97f0:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	60fb      	str	r3, [r7, #12]
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
    97f6:	2300      	movs	r3, #0
    97f8:	617b      	str	r3, [r7, #20]
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    97fa:	68fb      	ldr	r3, [r7, #12]
    97fc:	691b      	ldr	r3, [r3, #16]
    97fe:	2b00      	cmp	r3, #0
    9800:	d11c      	bne.n	983c <xStreamBufferReset+0x52>
	{
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    9802:	68fb      	ldr	r3, [r7, #12]
    9804:	695b      	ldr	r3, [r3, #20]
    9806:	2b00      	cmp	r3, #0
    9808:	d118      	bne.n	983c <xStreamBufferReset+0x52>
		{
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    980a:	68fb      	ldr	r3, [r7, #12]
    980c:	7f1b      	ldrb	r3, [r3, #28]
    980e:	f003 0301 	and.w	r3, r3, #1
    9812:	2b00      	cmp	r3, #0
    9814:	d002      	beq.n	981c <xStreamBufferReset+0x32>
			{
				xIsMessageBuffer = pdTRUE;
    9816:	2301      	movs	r3, #1
    9818:	613b      	str	r3, [r7, #16]
    981a:	e001      	b.n	9820 <xStreamBufferReset+0x36>
			}
			else
			{
				xIsMessageBuffer = pdFALSE;
    981c:	2300      	movs	r3, #0
    981e:	613b      	str	r3, [r7, #16]
			}

			prvInitialiseNewStreamBuffer( pxStreamBuffer,
    9820:	68fb      	ldr	r3, [r7, #12]
    9822:	6999      	ldr	r1, [r3, #24]
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	689a      	ldr	r2, [r3, #8]
    9828:	68fb      	ldr	r3, [r7, #12]
    982a:	68d8      	ldr	r0, [r3, #12]
    982c:	693b      	ldr	r3, [r7, #16]
    982e:	9300      	str	r3, [sp, #0]
    9830:	4603      	mov	r3, r0
    9832:	68f8      	ldr	r0, [r7, #12]
    9834:	f000 fb9f 	bl	9f76 <prvInitialiseNewStreamBuffer>
										  pxStreamBuffer->pucBuffer,
										  pxStreamBuffer->xLength,
										  pxStreamBuffer->xTriggerLevelBytes,
										  xIsMessageBuffer );
			xReturn = pdPASS;
    9838:	2301      	movs	r3, #1
    983a:	617b      	str	r3, [r7, #20]

			traceSTREAM_BUFFER_RESET( xStreamBuffer );
		}
	}

	return xReturn;
    983c:	697b      	ldr	r3, [r7, #20]
}
    983e:	4618      	mov	r0, r3
    9840:	3718      	adds	r7, #24
    9842:	46bd      	mov	sp, r7
    9844:	bd80      	pop	{r7, pc}

00009846 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    9846:	b480      	push	{r7}
    9848:	b085      	sub	sp, #20
    984a:	af00      	add	r7, sp, #0
    984c:	6078      	str	r0, [r7, #4]
    984e:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9850:	687b      	ldr	r3, [r7, #4]
    9852:	60bb      	str	r3, [r7, #8]
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    9854:	683b      	ldr	r3, [r7, #0]
    9856:	2b00      	cmp	r3, #0
    9858:	d101      	bne.n	985e <xStreamBufferSetTriggerLevel+0x18>
	{
		xTriggerLevel = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
    985a:	2301      	movs	r3, #1
    985c:	603b      	str	r3, [r7, #0]
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    985e:	68bb      	ldr	r3, [r7, #8]
    9860:	689b      	ldr	r3, [r3, #8]
    9862:	683a      	ldr	r2, [r7, #0]
    9864:	429a      	cmp	r2, r3
    9866:	d805      	bhi.n	9874 <xStreamBufferSetTriggerLevel+0x2e>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    9868:	68bb      	ldr	r3, [r7, #8]
    986a:	683a      	ldr	r2, [r7, #0]
    986c:	60da      	str	r2, [r3, #12]
		xReturn = pdPASS;
    986e:	2301      	movs	r3, #1
    9870:	60fb      	str	r3, [r7, #12]
    9872:	e001      	b.n	9878 <xStreamBufferSetTriggerLevel+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    9874:	2300      	movs	r3, #0
    9876:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    9878:	68fb      	ldr	r3, [r7, #12]
}
    987a:	4618      	mov	r0, r3
    987c:	3714      	adds	r7, #20
    987e:	46bd      	mov	sp, r7
    9880:	bc80      	pop	{r7}
    9882:	4770      	bx	lr

00009884 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    9884:	b480      	push	{r7}
    9886:	b085      	sub	sp, #20
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    988c:	687b      	ldr	r3, [r7, #4]
    988e:	60bb      	str	r3, [r7, #8]
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    9890:	68bb      	ldr	r3, [r7, #8]
    9892:	689a      	ldr	r2, [r3, #8]
    9894:	68bb      	ldr	r3, [r7, #8]
    9896:	681b      	ldr	r3, [r3, #0]
    9898:	4413      	add	r3, r2
    989a:	60fb      	str	r3, [r7, #12]
	xSpace -= pxStreamBuffer->xHead;
    989c:	68bb      	ldr	r3, [r7, #8]
    989e:	685b      	ldr	r3, [r3, #4]
    98a0:	68fa      	ldr	r2, [r7, #12]
    98a2:	1ad3      	subs	r3, r2, r3
    98a4:	60fb      	str	r3, [r7, #12]
	xSpace -= ( size_t ) 1;
    98a6:	68fb      	ldr	r3, [r7, #12]
    98a8:	3b01      	subs	r3, #1
    98aa:	60fb      	str	r3, [r7, #12]

	if( xSpace >= pxStreamBuffer->xLength )
    98ac:	68bb      	ldr	r3, [r7, #8]
    98ae:	689b      	ldr	r3, [r3, #8]
    98b0:	68fa      	ldr	r2, [r7, #12]
    98b2:	429a      	cmp	r2, r3
    98b4:	d304      	bcc.n	98c0 <xStreamBufferSpacesAvailable+0x3c>
	{
		xSpace -= pxStreamBuffer->xLength;
    98b6:	68bb      	ldr	r3, [r7, #8]
    98b8:	689b      	ldr	r3, [r3, #8]
    98ba:	68fa      	ldr	r2, [r7, #12]
    98bc:	1ad3      	subs	r3, r2, r3
    98be:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    98c0:	68fb      	ldr	r3, [r7, #12]
}
    98c2:	4618      	mov	r0, r3
    98c4:	3714      	adds	r7, #20
    98c6:	46bd      	mov	sp, r7
    98c8:	bc80      	pop	{r7}
    98ca:	4770      	bx	lr

000098cc <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    98cc:	b580      	push	{r7, lr}
    98ce:	b084      	sub	sp, #16
    98d0:	af00      	add	r7, sp, #0
    98d2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	60fb      	str	r3, [r7, #12]
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    98d8:	68f8      	ldr	r0, [r7, #12]
    98da:	f000 fb2d 	bl	9f38 <prvBytesInBuffer>
    98de:	60b8      	str	r0, [r7, #8]
	return xReturn;
    98e0:	68bb      	ldr	r3, [r7, #8]
}
    98e2:	4618      	mov	r0, r3
    98e4:	3710      	adds	r7, #16
    98e6:	46bd      	mov	sp, r7
    98e8:	bd80      	pop	{r7, pc}

000098ea <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    98ea:	b580      	push	{r7, lr}
    98ec:	b08c      	sub	sp, #48	; 0x30
    98ee:	af02      	add	r7, sp, #8
    98f0:	60f8      	str	r0, [r7, #12]
    98f2:	60b9      	str	r1, [r7, #8]
    98f4:	607a      	str	r2, [r7, #4]
    98f6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    98f8:	68fb      	ldr	r3, [r7, #12]
    98fa:	61fb      	str	r3, [r7, #28]
size_t xReturn, xSpace = 0;
    98fc:	2300      	movs	r3, #0
    98fe:	627b      	str	r3, [r7, #36]	; 0x24
size_t xRequiredSpace = xDataLengthBytes;
    9900:	687b      	ldr	r3, [r7, #4]
    9902:	623b      	str	r3, [r7, #32]

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    9904:	69fb      	ldr	r3, [r7, #28]
    9906:	7f1b      	ldrb	r3, [r3, #28]
    9908:	f003 0301 	and.w	r3, r3, #1
    990c:	2b00      	cmp	r3, #0
    990e:	d002      	beq.n	9916 <xStreamBufferSend+0x2c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    9910:	6a3b      	ldr	r3, [r7, #32]
    9912:	3304      	adds	r3, #4
    9914:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    9916:	683b      	ldr	r3, [r7, #0]
    9918:	2b00      	cmp	r3, #0
    991a:	d030      	beq.n	997e <xStreamBufferSend+0x94>
	{
		vTaskSetTimeOutState( &xTimeOut );
    991c:	f107 0310 	add.w	r3, r7, #16
    9920:	4618      	mov	r0, r3
    9922:	f7ff f97b 	bl	8c1c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    9926:	f000 fbdb 	bl	a0e0 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    992a:	69f8      	ldr	r0, [r7, #28]
    992c:	f7ff ffaa 	bl	9884 <xStreamBufferSpacesAvailable>
    9930:	6278      	str	r0, [r7, #36]	; 0x24

				if( xSpace < xRequiredSpace )
    9932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9934:	6a3b      	ldr	r3, [r7, #32]
    9936:	429a      	cmp	r2, r3
    9938:	d208      	bcs.n	994c <xStreamBufferSend+0x62>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    993a:	2000      	movs	r0, #0
    993c:	f7ff fe8a 	bl	9654 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    9940:	f7ff faa4 	bl	8e8c <xTaskGetCurrentTaskHandle>
    9944:	4602      	mov	r2, r0
    9946:	69fb      	ldr	r3, [r7, #28]
    9948:	615a      	str	r2, [r3, #20]
    994a:	e002      	b.n	9952 <xStreamBufferSend+0x68>
				}
				else
				{
					taskEXIT_CRITICAL();
    994c:	f000 fbe0 	bl	a110 <vPortExitCritical>
					break;
    9950:	e015      	b.n	997e <xStreamBufferSend+0x94>
				}
			}
			taskEXIT_CRITICAL();
    9952:	f000 fbdd 	bl	a110 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    9956:	683b      	ldr	r3, [r7, #0]
    9958:	2200      	movs	r2, #0
    995a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    995e:	2000      	movs	r0, #0
    9960:	f7ff fc7e 	bl	9260 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    9964:	69fb      	ldr	r3, [r7, #28]
    9966:	2200      	movs	r2, #0
    9968:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    996a:	463a      	mov	r2, r7
    996c:	f107 0310 	add.w	r3, r7, #16
    9970:	4611      	mov	r1, r2
    9972:	4618      	mov	r0, r3
    9974:	f7ff f980 	bl	8c78 <xTaskCheckForTimeOut>
    9978:	4603      	mov	r3, r0
    997a:	2b00      	cmp	r3, #0
    997c:	d0d3      	beq.n	9926 <xStreamBufferSend+0x3c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9980:	2b00      	cmp	r3, #0
    9982:	d103      	bne.n	998c <xStreamBufferSend+0xa2>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    9984:	69f8      	ldr	r0, [r7, #28]
    9986:	f7ff ff7d 	bl	9884 <xStreamBufferSpacesAvailable>
    998a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    998c:	6a3b      	ldr	r3, [r7, #32]
    998e:	9300      	str	r3, [sp, #0]
    9990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9992:	687a      	ldr	r2, [r7, #4]
    9994:	68b9      	ldr	r1, [r7, #8]
    9996:	69f8      	ldr	r0, [r7, #28]
    9998:	f000 f877 	bl	9a8a <prvWriteMessageToBuffer>
    999c:	61b8      	str	r0, [r7, #24]

	if( xReturn > ( size_t ) 0 )
    999e:	69bb      	ldr	r3, [r7, #24]
    99a0:	2b00      	cmp	r3, #0
    99a2:	d019      	beq.n	99d8 <xStreamBufferSend+0xee>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    99a4:	69f8      	ldr	r0, [r7, #28]
    99a6:	f000 fac7 	bl	9f38 <prvBytesInBuffer>
    99aa:	4602      	mov	r2, r0
    99ac:	69fb      	ldr	r3, [r7, #28]
    99ae:	68db      	ldr	r3, [r3, #12]
    99b0:	429a      	cmp	r2, r3
    99b2:	d311      	bcc.n	99d8 <xStreamBufferSend+0xee>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    99b4:	f7fe fe92 	bl	86dc <vTaskSuspendAll>
    99b8:	69fb      	ldr	r3, [r7, #28]
    99ba:	691b      	ldr	r3, [r3, #16]
    99bc:	2b00      	cmp	r3, #0
    99be:	d009      	beq.n	99d4 <xStreamBufferSend+0xea>
    99c0:	69fb      	ldr	r3, [r7, #28]
    99c2:	6918      	ldr	r0, [r3, #16]
    99c4:	2300      	movs	r3, #0
    99c6:	2200      	movs	r2, #0
    99c8:	2100      	movs	r1, #0
    99ca:	f7ff fca3 	bl	9314 <xTaskGenericNotify>
    99ce:	69fb      	ldr	r3, [r7, #28]
    99d0:	2200      	movs	r2, #0
    99d2:	611a      	str	r2, [r3, #16]
    99d4:	f7fe fe90 	bl	86f8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    99d8:	69bb      	ldr	r3, [r7, #24]
}
    99da:	4618      	mov	r0, r3
    99dc:	3728      	adds	r7, #40	; 0x28
    99de:	46bd      	mov	sp, r7
    99e0:	bd80      	pop	{r7, pc}

000099e2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    99e2:	b580      	push	{r7, lr}
    99e4:	b08e      	sub	sp, #56	; 0x38
    99e6:	af02      	add	r7, sp, #8
    99e8:	60f8      	str	r0, [r7, #12]
    99ea:	60b9      	str	r1, [r7, #8]
    99ec:	607a      	str	r2, [r7, #4]
    99ee:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    99f0:	68fb      	ldr	r3, [r7, #12]
    99f2:	62bb      	str	r3, [r7, #40]	; 0x28
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    99f4:	687b      	ldr	r3, [r7, #4]
    99f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    99f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99fa:	7f1b      	ldrb	r3, [r3, #28]
    99fc:	f003 0301 	and.w	r3, r3, #1
    9a00:	2b00      	cmp	r3, #0
    9a02:	d002      	beq.n	9a0a <xStreamBufferSendFromISR+0x28>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    9a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a06:	3304      	adds	r3, #4
    9a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    9a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9a0c:	f7ff ff3a 	bl	9884 <xStreamBufferSpacesAvailable>
    9a10:	6278      	str	r0, [r7, #36]	; 0x24
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    9a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a14:	9300      	str	r3, [sp, #0]
    9a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9a18:	687a      	ldr	r2, [r7, #4]
    9a1a:	68b9      	ldr	r1, [r7, #8]
    9a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9a1e:	f000 f834 	bl	9a8a <prvWriteMessageToBuffer>
    9a22:	6238      	str	r0, [r7, #32]

	if( xReturn > ( size_t ) 0 )
    9a24:	6a3b      	ldr	r3, [r7, #32]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d02a      	beq.n	9a80 <xStreamBufferSendFromISR+0x9e>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    9a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9a2c:	f000 fa84 	bl	9f38 <prvBytesInBuffer>
    9a30:	4602      	mov	r2, r0
    9a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a34:	68db      	ldr	r3, [r3, #12]
    9a36:	429a      	cmp	r2, r3
    9a38:	d322      	bcc.n	9a80 <xStreamBufferSendFromISR+0x9e>
	__asm volatile
    9a3a:	f3ef 8211 	mrs	r2, BASEPRI
    9a3e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9a42:	f383 8811 	msr	BASEPRI, r3
    9a46:	f3bf 8f6f 	isb	sy
    9a4a:	f3bf 8f4f 	dsb	sy
    9a4e:	61ba      	str	r2, [r7, #24]
    9a50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    9a52:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    9a54:	61fb      	str	r3, [r7, #28]
    9a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a58:	691b      	ldr	r3, [r3, #16]
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d00b      	beq.n	9a76 <xStreamBufferSendFromISR+0x94>
    9a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a60:	6918      	ldr	r0, [r3, #16]
    9a62:	683b      	ldr	r3, [r7, #0]
    9a64:	9300      	str	r3, [sp, #0]
    9a66:	2300      	movs	r3, #0
    9a68:	2200      	movs	r2, #0
    9a6a:	2100      	movs	r1, #0
    9a6c:	f7ff fcd8 	bl	9420 <xTaskGenericNotifyFromISR>
    9a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a72:	2200      	movs	r2, #0
    9a74:	611a      	str	r2, [r3, #16]
    9a76:	69fb      	ldr	r3, [r7, #28]
    9a78:	613b      	str	r3, [r7, #16]
	__asm volatile
    9a7a:	693b      	ldr	r3, [r7, #16]
    9a7c:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    9a80:	6a3b      	ldr	r3, [r7, #32]
}
    9a82:	4618      	mov	r0, r3
    9a84:	3730      	adds	r7, #48	; 0x30
    9a86:	46bd      	mov	sp, r7
    9a88:	bd80      	pop	{r7, pc}

00009a8a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    9a8a:	b580      	push	{r7, lr}
    9a8c:	b086      	sub	sp, #24
    9a8e:	af00      	add	r7, sp, #0
    9a90:	60f8      	str	r0, [r7, #12]
    9a92:	60b9      	str	r1, [r7, #8]
    9a94:	607a      	str	r2, [r7, #4]
    9a96:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    9a98:	683b      	ldr	r3, [r7, #0]
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d102      	bne.n	9aa4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    9a9e:	2300      	movs	r3, #0
    9aa0:	617b      	str	r3, [r7, #20]
    9aa2:	e01d      	b.n	9ae0 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    9aa4:	68fb      	ldr	r3, [r7, #12]
    9aa6:	7f1b      	ldrb	r3, [r3, #28]
    9aa8:	f003 0301 	and.w	r3, r3, #1
    9aac:	2b00      	cmp	r3, #0
    9aae:	d108      	bne.n	9ac2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    9ab0:	2301      	movs	r3, #1
    9ab2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
    9ab4:	687a      	ldr	r2, [r7, #4]
    9ab6:	683b      	ldr	r3, [r7, #0]
    9ab8:	4293      	cmp	r3, r2
    9aba:	bf28      	it	cs
    9abc:	4613      	movcs	r3, r2
    9abe:	607b      	str	r3, [r7, #4]
    9ac0:	e00e      	b.n	9ae0 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
    9ac2:	683a      	ldr	r2, [r7, #0]
    9ac4:	6a3b      	ldr	r3, [r7, #32]
    9ac6:	429a      	cmp	r2, r3
    9ac8:	d308      	bcc.n	9adc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    9aca:	2301      	movs	r3, #1
    9acc:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    9ace:	1d3b      	adds	r3, r7, #4
    9ad0:	2204      	movs	r2, #4
    9ad2:	4619      	mov	r1, r3
    9ad4:	68f8      	ldr	r0, [r7, #12]
    9ad6:	f000 f9a5 	bl	9e24 <prvWriteBytesToBuffer>
    9ada:	e001      	b.n	9ae0 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    9adc:	2300      	movs	r3, #0
    9ade:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
    9ae0:	697b      	ldr	r3, [r7, #20]
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	d007      	beq.n	9af6 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    9ae6:	687b      	ldr	r3, [r7, #4]
    9ae8:	461a      	mov	r2, r3
    9aea:	68b9      	ldr	r1, [r7, #8]
    9aec:	68f8      	ldr	r0, [r7, #12]
    9aee:	f000 f999 	bl	9e24 <prvWriteBytesToBuffer>
    9af2:	6138      	str	r0, [r7, #16]
    9af4:	e001      	b.n	9afa <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
    9af6:	2300      	movs	r3, #0
    9af8:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
    9afa:	693b      	ldr	r3, [r7, #16]
}
    9afc:	4618      	mov	r0, r3
    9afe:	3718      	adds	r7, #24
    9b00:	46bd      	mov	sp, r7
    9b02:	bd80      	pop	{r7, pc}

00009b04 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b08a      	sub	sp, #40	; 0x28
    9b08:	af02      	add	r7, sp, #8
    9b0a:	60f8      	str	r0, [r7, #12]
    9b0c:	60b9      	str	r1, [r7, #8]
    9b0e:	607a      	str	r2, [r7, #4]
    9b10:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9b12:	68fb      	ldr	r3, [r7, #12]
    9b14:	613b      	str	r3, [r7, #16]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    9b16:	2300      	movs	r3, #0
    9b18:	61fb      	str	r3, [r7, #28]
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    9b1a:	693b      	ldr	r3, [r7, #16]
    9b1c:	7f1b      	ldrb	r3, [r3, #28]
    9b1e:	f003 0301 	and.w	r3, r3, #1
    9b22:	2b00      	cmp	r3, #0
    9b24:	d002      	beq.n	9b2c <xStreamBufferReceive+0x28>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    9b26:	2304      	movs	r3, #4
    9b28:	617b      	str	r3, [r7, #20]
    9b2a:	e001      	b.n	9b30 <xStreamBufferReceive+0x2c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    9b2c:	2300      	movs	r3, #0
    9b2e:	617b      	str	r3, [r7, #20]
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    9b30:	683b      	ldr	r3, [r7, #0]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d026      	beq.n	9b84 <xStreamBufferReceive+0x80>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    9b36:	f000 fad3 	bl	a0e0 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    9b3a:	6938      	ldr	r0, [r7, #16]
    9b3c:	f000 f9fc 	bl	9f38 <prvBytesInBuffer>
    9b40:	61b8      	str	r0, [r7, #24]
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    9b42:	69ba      	ldr	r2, [r7, #24]
    9b44:	697b      	ldr	r3, [r7, #20]
    9b46:	429a      	cmp	r2, r3
    9b48:	d807      	bhi.n	9b5a <xStreamBufferReceive+0x56>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    9b4a:	2000      	movs	r0, #0
    9b4c:	f7ff fd82 	bl	9654 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    9b50:	f7ff f99c 	bl	8e8c <xTaskGetCurrentTaskHandle>
    9b54:	4602      	mov	r2, r0
    9b56:	693b      	ldr	r3, [r7, #16]
    9b58:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    9b5a:	f000 fad9 	bl	a110 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    9b5e:	69ba      	ldr	r2, [r7, #24]
    9b60:	697b      	ldr	r3, [r7, #20]
    9b62:	429a      	cmp	r2, r3
    9b64:	d812      	bhi.n	9b8c <xStreamBufferReceive+0x88>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    9b66:	683b      	ldr	r3, [r7, #0]
    9b68:	2200      	movs	r2, #0
    9b6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9b6e:	2000      	movs	r0, #0
    9b70:	f7ff fb76 	bl	9260 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    9b74:	693b      	ldr	r3, [r7, #16]
    9b76:	2200      	movs	r2, #0
    9b78:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    9b7a:	6938      	ldr	r0, [r7, #16]
    9b7c:	f000 f9dc 	bl	9f38 <prvBytesInBuffer>
    9b80:	61b8      	str	r0, [r7, #24]
    9b82:	e003      	b.n	9b8c <xStreamBufferReceive+0x88>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    9b84:	6938      	ldr	r0, [r7, #16]
    9b86:	f000 f9d7 	bl	9f38 <prvBytesInBuffer>
    9b8a:	61b8      	str	r0, [r7, #24]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    9b8c:	69ba      	ldr	r2, [r7, #24]
    9b8e:	697b      	ldr	r3, [r7, #20]
    9b90:	429a      	cmp	r2, r3
    9b92:	d91d      	bls.n	9bd0 <xStreamBufferReceive+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    9b94:	697b      	ldr	r3, [r7, #20]
    9b96:	9300      	str	r3, [sp, #0]
    9b98:	69bb      	ldr	r3, [r7, #24]
    9b9a:	687a      	ldr	r2, [r7, #4]
    9b9c:	68b9      	ldr	r1, [r7, #8]
    9b9e:	6938      	ldr	r0, [r7, #16]
    9ba0:	f000 f86d 	bl	9c7e <prvReadMessageFromBuffer>
    9ba4:	61f8      	str	r0, [r7, #28]

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    9ba6:	69fb      	ldr	r3, [r7, #28]
    9ba8:	2b00      	cmp	r3, #0
    9baa:	d011      	beq.n	9bd0 <xStreamBufferReceive+0xcc>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    9bac:	f7fe fd96 	bl	86dc <vTaskSuspendAll>
    9bb0:	693b      	ldr	r3, [r7, #16]
    9bb2:	695b      	ldr	r3, [r3, #20]
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	d009      	beq.n	9bcc <xStreamBufferReceive+0xc8>
    9bb8:	693b      	ldr	r3, [r7, #16]
    9bba:	6958      	ldr	r0, [r3, #20]
    9bbc:	2300      	movs	r3, #0
    9bbe:	2200      	movs	r2, #0
    9bc0:	2100      	movs	r1, #0
    9bc2:	f7ff fba7 	bl	9314 <xTaskGenericNotify>
    9bc6:	693b      	ldr	r3, [r7, #16]
    9bc8:	2200      	movs	r2, #0
    9bca:	615a      	str	r2, [r3, #20]
    9bcc:	f7fe fd94 	bl	86f8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    9bd0:	69fb      	ldr	r3, [r7, #28]
}
    9bd2:	4618      	mov	r0, r3
    9bd4:	3720      	adds	r7, #32
    9bd6:	46bd      	mov	sp, r7
    9bd8:	bd80      	pop	{r7, pc}

00009bda <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    9bda:	b580      	push	{r7, lr}
    9bdc:	b08e      	sub	sp, #56	; 0x38
    9bde:	af02      	add	r7, sp, #8
    9be0:	60f8      	str	r0, [r7, #12]
    9be2:	60b9      	str	r1, [r7, #8]
    9be4:	607a      	str	r2, [r7, #4]
    9be6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9be8:	68fb      	ldr	r3, [r7, #12]
    9bea:	627b      	str	r3, [r7, #36]	; 0x24
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    9bec:	2300      	movs	r3, #0
    9bee:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    9bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9bf2:	7f1b      	ldrb	r3, [r3, #28]
    9bf4:	f003 0301 	and.w	r3, r3, #1
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d002      	beq.n	9c02 <xStreamBufferReceiveFromISR+0x28>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    9bfc:	2304      	movs	r3, #4
    9bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    9c00:	e001      	b.n	9c06 <xStreamBufferReceiveFromISR+0x2c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    9c02:	2300      	movs	r3, #0
    9c04:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    9c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9c08:	f000 f996 	bl	9f38 <prvBytesInBuffer>
    9c0c:	6238      	str	r0, [r7, #32]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    9c0e:	6a3a      	ldr	r2, [r7, #32]
    9c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c12:	429a      	cmp	r2, r3
    9c14:	d92e      	bls.n	9c74 <xStreamBufferReceiveFromISR+0x9a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    9c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c18:	9300      	str	r3, [sp, #0]
    9c1a:	6a3b      	ldr	r3, [r7, #32]
    9c1c:	687a      	ldr	r2, [r7, #4]
    9c1e:	68b9      	ldr	r1, [r7, #8]
    9c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9c22:	f000 f82c 	bl	9c7e <prvReadMessageFromBuffer>
    9c26:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    9c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	d022      	beq.n	9c74 <xStreamBufferReceiveFromISR+0x9a>
	__asm volatile
    9c2e:	f3ef 8211 	mrs	r2, BASEPRI
    9c32:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9c36:	f383 8811 	msr	BASEPRI, r3
    9c3a:	f3bf 8f6f 	isb	sy
    9c3e:	f3bf 8f4f 	dsb	sy
    9c42:	61ba      	str	r2, [r7, #24]
    9c44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
    9c46:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    9c48:	61fb      	str	r3, [r7, #28]
    9c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c4c:	695b      	ldr	r3, [r3, #20]
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d00b      	beq.n	9c6a <xStreamBufferReceiveFromISR+0x90>
    9c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c54:	6958      	ldr	r0, [r3, #20]
    9c56:	683b      	ldr	r3, [r7, #0]
    9c58:	9300      	str	r3, [sp, #0]
    9c5a:	2300      	movs	r3, #0
    9c5c:	2200      	movs	r2, #0
    9c5e:	2100      	movs	r1, #0
    9c60:	f7ff fbde 	bl	9420 <xTaskGenericNotifyFromISR>
    9c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c66:	2200      	movs	r2, #0
    9c68:	615a      	str	r2, [r3, #20]
    9c6a:	69fb      	ldr	r3, [r7, #28]
    9c6c:	613b      	str	r3, [r7, #16]
	__asm volatile
    9c6e:	693b      	ldr	r3, [r7, #16]
    9c70:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    9c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    9c76:	4618      	mov	r0, r3
    9c78:	3730      	adds	r7, #48	; 0x30
    9c7a:	46bd      	mov	sp, r7
    9c7c:	bd80      	pop	{r7, pc}

00009c7e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    9c7e:	b580      	push	{r7, lr}
    9c80:	b088      	sub	sp, #32
    9c82:	af00      	add	r7, sp, #0
    9c84:	60f8      	str	r0, [r7, #12]
    9c86:	60b9      	str	r1, [r7, #8]
    9c88:	607a      	str	r2, [r7, #4]
    9c8a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    9c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d017      	beq.n	9cc2 <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    9c92:	68fb      	ldr	r3, [r7, #12]
    9c94:	681b      	ldr	r3, [r3, #0]
    9c96:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    9c98:	f107 0114 	add.w	r1, r7, #20
    9c9c:	683b      	ldr	r3, [r7, #0]
    9c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9ca0:	68f8      	ldr	r0, [r7, #12]
    9ca2:	f000 f8ff 	bl	9ea4 <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    9ca6:	683a      	ldr	r2, [r7, #0]
    9ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9caa:	1ad3      	subs	r3, r2, r3
    9cac:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    9cae:	697b      	ldr	r3, [r7, #20]
    9cb0:	687a      	ldr	r2, [r7, #4]
    9cb2:	429a      	cmp	r2, r3
    9cb4:	d207      	bcs.n	9cc6 <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    9cb6:	68fb      	ldr	r3, [r7, #12]
    9cb8:	69fa      	ldr	r2, [r7, #28]
    9cba:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
    9cbc:	2300      	movs	r3, #0
    9cbe:	617b      	str	r3, [r7, #20]
    9cc0:	e001      	b.n	9cc6 <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    9cc6:	697a      	ldr	r2, [r7, #20]
    9cc8:	683b      	ldr	r3, [r7, #0]
    9cca:	68b9      	ldr	r1, [r7, #8]
    9ccc:	68f8      	ldr	r0, [r7, #12]
    9cce:	f000 f8e9 	bl	9ea4 <prvReadBytesFromBuffer>
    9cd2:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
    9cd4:	69bb      	ldr	r3, [r7, #24]
}
    9cd6:	4618      	mov	r0, r3
    9cd8:	3720      	adds	r7, #32
    9cda:	46bd      	mov	sp, r7
    9cdc:	bd80      	pop	{r7, pc}

00009cde <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    9cde:	b480      	push	{r7}
    9ce0:	b087      	sub	sp, #28
    9ce2:	af00      	add	r7, sp, #0
    9ce4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	613b      	str	r3, [r7, #16]
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    9cea:	693b      	ldr	r3, [r7, #16]
    9cec:	681b      	ldr	r3, [r3, #0]
    9cee:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
    9cf0:	693b      	ldr	r3, [r7, #16]
    9cf2:	685b      	ldr	r3, [r3, #4]
    9cf4:	68fa      	ldr	r2, [r7, #12]
    9cf6:	429a      	cmp	r2, r3
    9cf8:	d102      	bne.n	9d00 <xStreamBufferIsEmpty+0x22>
	{
		xReturn = pdTRUE;
    9cfa:	2301      	movs	r3, #1
    9cfc:	617b      	str	r3, [r7, #20]
    9cfe:	e001      	b.n	9d04 <xStreamBufferIsEmpty+0x26>
	}
	else
	{
		xReturn = pdFALSE;
    9d00:	2300      	movs	r3, #0
    9d02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    9d04:	697b      	ldr	r3, [r7, #20]
}
    9d06:	4618      	mov	r0, r3
    9d08:	371c      	adds	r7, #28
    9d0a:	46bd      	mov	sp, r7
    9d0c:	bc80      	pop	{r7}
    9d0e:	4770      	bx	lr

00009d10 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    9d10:	b580      	push	{r7, lr}
    9d12:	b086      	sub	sp, #24
    9d14:	af00      	add	r7, sp, #0
    9d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	60fb      	str	r3, [r7, #12]

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    9d1c:	68fb      	ldr	r3, [r7, #12]
    9d1e:	7f1b      	ldrb	r3, [r3, #28]
    9d20:	f003 0301 	and.w	r3, r3, #1
    9d24:	2b00      	cmp	r3, #0
    9d26:	d002      	beq.n	9d2e <xStreamBufferIsFull+0x1e>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    9d28:	2304      	movs	r3, #4
    9d2a:	613b      	str	r3, [r7, #16]
    9d2c:	e001      	b.n	9d32 <xStreamBufferIsFull+0x22>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    9d2e:	2300      	movs	r3, #0
    9d30:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    9d32:	6878      	ldr	r0, [r7, #4]
    9d34:	f7ff fda6 	bl	9884 <xStreamBufferSpacesAvailable>
    9d38:	4602      	mov	r2, r0
    9d3a:	693b      	ldr	r3, [r7, #16]
    9d3c:	4293      	cmp	r3, r2
    9d3e:	d302      	bcc.n	9d46 <xStreamBufferIsFull+0x36>
	{
		xReturn = pdTRUE;
    9d40:	2301      	movs	r3, #1
    9d42:	617b      	str	r3, [r7, #20]
    9d44:	e001      	b.n	9d4a <xStreamBufferIsFull+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
    9d46:	2300      	movs	r3, #0
    9d48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    9d4a:	697b      	ldr	r3, [r7, #20]
}
    9d4c:	4618      	mov	r0, r3
    9d4e:	3718      	adds	r7, #24
    9d50:	46bd      	mov	sp, r7
    9d52:	bd80      	pop	{r7, pc}

00009d54 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    9d54:	b580      	push	{r7, lr}
    9d56:	b08a      	sub	sp, #40	; 0x28
    9d58:	af02      	add	r7, sp, #8
    9d5a:	6078      	str	r0, [r7, #4]
    9d5c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9d5e:	687b      	ldr	r3, [r7, #4]
    9d60:	61bb      	str	r3, [r7, #24]
	__asm volatile
    9d62:	f3ef 8211 	mrs	r2, BASEPRI
    9d66:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9d6a:	f383 8811 	msr	BASEPRI, r3
    9d6e:	f3bf 8f6f 	isb	sy
    9d72:	f3bf 8f4f 	dsb	sy
    9d76:	613a      	str	r2, [r7, #16]
    9d78:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    9d7a:	693b      	ldr	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    9d7c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    9d7e:	69bb      	ldr	r3, [r7, #24]
    9d80:	691b      	ldr	r3, [r3, #16]
    9d82:	2b00      	cmp	r3, #0
    9d84:	d00e      	beq.n	9da4 <xStreamBufferSendCompletedFromISR+0x50>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    9d86:	69bb      	ldr	r3, [r7, #24]
    9d88:	6918      	ldr	r0, [r3, #16]
    9d8a:	683b      	ldr	r3, [r7, #0]
    9d8c:	9300      	str	r3, [sp, #0]
    9d8e:	2300      	movs	r3, #0
    9d90:	2200      	movs	r2, #0
    9d92:	2100      	movs	r1, #0
    9d94:	f7ff fb44 	bl	9420 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    9d98:	69bb      	ldr	r3, [r7, #24]
    9d9a:	2200      	movs	r2, #0
    9d9c:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
    9d9e:	2301      	movs	r3, #1
    9da0:	61fb      	str	r3, [r7, #28]
    9da2:	e001      	b.n	9da8 <xStreamBufferSendCompletedFromISR+0x54>
		}
		else
		{
			xReturn = pdFALSE;
    9da4:	2300      	movs	r3, #0
    9da6:	61fb      	str	r3, [r7, #28]
    9da8:	697b      	ldr	r3, [r7, #20]
    9daa:	60bb      	str	r3, [r7, #8]
	__asm volatile
    9dac:	68bb      	ldr	r3, [r7, #8]
    9dae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    9db2:	69fb      	ldr	r3, [r7, #28]
}
    9db4:	4618      	mov	r0, r3
    9db6:	3720      	adds	r7, #32
    9db8:	46bd      	mov	sp, r7
    9dba:	bd80      	pop	{r7, pc}

00009dbc <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    9dbc:	b580      	push	{r7, lr}
    9dbe:	b08a      	sub	sp, #40	; 0x28
    9dc0:	af02      	add	r7, sp, #8
    9dc2:	6078      	str	r0, [r7, #4]
    9dc4:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
    9dc6:	687b      	ldr	r3, [r7, #4]
    9dc8:	61bb      	str	r3, [r7, #24]
	__asm volatile
    9dca:	f3ef 8211 	mrs	r2, BASEPRI
    9dce:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    9dd2:	f383 8811 	msr	BASEPRI, r3
    9dd6:	f3bf 8f6f 	isb	sy
    9dda:	f3bf 8f4f 	dsb	sy
    9dde:	613a      	str	r2, [r7, #16]
    9de0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
    9de2:	693b      	ldr	r3, [r7, #16]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    9de4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    9de6:	69bb      	ldr	r3, [r7, #24]
    9de8:	695b      	ldr	r3, [r3, #20]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d00e      	beq.n	9e0c <xStreamBufferReceiveCompletedFromISR+0x50>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    9dee:	69bb      	ldr	r3, [r7, #24]
    9df0:	6958      	ldr	r0, [r3, #20]
    9df2:	683b      	ldr	r3, [r7, #0]
    9df4:	9300      	str	r3, [sp, #0]
    9df6:	2300      	movs	r3, #0
    9df8:	2200      	movs	r2, #0
    9dfa:	2100      	movs	r1, #0
    9dfc:	f7ff fb10 	bl	9420 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    9e00:	69bb      	ldr	r3, [r7, #24]
    9e02:	2200      	movs	r2, #0
    9e04:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
    9e06:	2301      	movs	r3, #1
    9e08:	61fb      	str	r3, [r7, #28]
    9e0a:	e001      	b.n	9e10 <xStreamBufferReceiveCompletedFromISR+0x54>
		}
		else
		{
			xReturn = pdFALSE;
    9e0c:	2300      	movs	r3, #0
    9e0e:	61fb      	str	r3, [r7, #28]
    9e10:	697b      	ldr	r3, [r7, #20]
    9e12:	60bb      	str	r3, [r7, #8]
	__asm volatile
    9e14:	68bb      	ldr	r3, [r7, #8]
    9e16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    9e1a:	69fb      	ldr	r3, [r7, #28]
}
    9e1c:	4618      	mov	r0, r3
    9e1e:	3720      	adds	r7, #32
    9e20:	46bd      	mov	sp, r7
    9e22:	bd80      	pop	{r7, pc}

00009e24 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    9e24:	b580      	push	{r7, lr}
    9e26:	b086      	sub	sp, #24
    9e28:	af00      	add	r7, sp, #0
    9e2a:	60f8      	str	r0, [r7, #12]
    9e2c:	60b9      	str	r1, [r7, #8]
    9e2e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    9e30:	68fb      	ldr	r3, [r7, #12]
    9e32:	685b      	ldr	r3, [r3, #4]
    9e34:	617b      	str	r3, [r7, #20]

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    9e36:	68fb      	ldr	r3, [r7, #12]
    9e38:	689a      	ldr	r2, [r3, #8]
    9e3a:	697b      	ldr	r3, [r7, #20]
    9e3c:	1ad3      	subs	r3, r2, r3
    9e3e:	687a      	ldr	r2, [r7, #4]
    9e40:	4293      	cmp	r3, r2
    9e42:	bf28      	it	cs
    9e44:	4613      	movcs	r3, r2
    9e46:	613b      	str	r3, [r7, #16]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    9e48:	68fb      	ldr	r3, [r7, #12]
    9e4a:	699a      	ldr	r2, [r3, #24]
    9e4c:	697b      	ldr	r3, [r7, #20]
    9e4e:	4413      	add	r3, r2
    9e50:	693a      	ldr	r2, [r7, #16]
    9e52:	68b9      	ldr	r1, [r7, #8]
    9e54:	4618      	mov	r0, r3
    9e56:	f000 f9d3 	bl	a200 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    9e5a:	687a      	ldr	r2, [r7, #4]
    9e5c:	693b      	ldr	r3, [r7, #16]
    9e5e:	429a      	cmp	r2, r3
    9e60:	d90a      	bls.n	9e78 <prvWriteBytesToBuffer+0x54>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    9e62:	68fb      	ldr	r3, [r7, #12]
    9e64:	6998      	ldr	r0, [r3, #24]
    9e66:	68ba      	ldr	r2, [r7, #8]
    9e68:	693b      	ldr	r3, [r7, #16]
    9e6a:	18d1      	adds	r1, r2, r3
    9e6c:	687a      	ldr	r2, [r7, #4]
    9e6e:	693b      	ldr	r3, [r7, #16]
    9e70:	1ad3      	subs	r3, r2, r3
    9e72:	461a      	mov	r2, r3
    9e74:	f000 f9c4 	bl	a200 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    9e78:	697a      	ldr	r2, [r7, #20]
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	4413      	add	r3, r2
    9e7e:	617b      	str	r3, [r7, #20]
	if( xNextHead >= pxStreamBuffer->xLength )
    9e80:	68fb      	ldr	r3, [r7, #12]
    9e82:	689b      	ldr	r3, [r3, #8]
    9e84:	697a      	ldr	r2, [r7, #20]
    9e86:	429a      	cmp	r2, r3
    9e88:	d304      	bcc.n	9e94 <prvWriteBytesToBuffer+0x70>
	{
		xNextHead -= pxStreamBuffer->xLength;
    9e8a:	68fb      	ldr	r3, [r7, #12]
    9e8c:	689b      	ldr	r3, [r3, #8]
    9e8e:	697a      	ldr	r2, [r7, #20]
    9e90:	1ad3      	subs	r3, r2, r3
    9e92:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    9e94:	68fb      	ldr	r3, [r7, #12]
    9e96:	697a      	ldr	r2, [r7, #20]
    9e98:	605a      	str	r2, [r3, #4]

	return xCount;
    9e9a:	687b      	ldr	r3, [r7, #4]
}
    9e9c:	4618      	mov	r0, r3
    9e9e:	3718      	adds	r7, #24
    9ea0:	46bd      	mov	sp, r7
    9ea2:	bd80      	pop	{r7, pc}

00009ea4 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b088      	sub	sp, #32
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	60f8      	str	r0, [r7, #12]
    9eac:	60b9      	str	r1, [r7, #8]
    9eae:	607a      	str	r2, [r7, #4]
    9eb0:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    9eb2:	687a      	ldr	r2, [r7, #4]
    9eb4:	683b      	ldr	r3, [r7, #0]
    9eb6:	4293      	cmp	r3, r2
    9eb8:	bf28      	it	cs
    9eba:	4613      	movcs	r3, r2
    9ebc:	61bb      	str	r3, [r7, #24]

	if( xCount > ( size_t ) 0 )
    9ebe:	69bb      	ldr	r3, [r7, #24]
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	d034      	beq.n	9f2e <prvReadBytesFromBuffer+0x8a>
	{
		xNextTail = pxStreamBuffer->xTail;
    9ec4:	68fb      	ldr	r3, [r7, #12]
    9ec6:	681b      	ldr	r3, [r3, #0]
    9ec8:	61fb      	str	r3, [r7, #28]

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    9eca:	68fb      	ldr	r3, [r7, #12]
    9ecc:	689a      	ldr	r2, [r3, #8]
    9ece:	69fb      	ldr	r3, [r7, #28]
    9ed0:	1ad3      	subs	r3, r2, r3
    9ed2:	69ba      	ldr	r2, [r7, #24]
    9ed4:	4293      	cmp	r3, r2
    9ed6:	bf28      	it	cs
    9ed8:	4613      	movcs	r3, r2
    9eda:	617b      	str	r3, [r7, #20]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    9edc:	68fb      	ldr	r3, [r7, #12]
    9ede:	699a      	ldr	r2, [r3, #24]
    9ee0:	69fb      	ldr	r3, [r7, #28]
    9ee2:	4413      	add	r3, r2
    9ee4:	697a      	ldr	r2, [r7, #20]
    9ee6:	4619      	mov	r1, r3
    9ee8:	68b8      	ldr	r0, [r7, #8]
    9eea:	f000 f989 	bl	a200 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    9eee:	69ba      	ldr	r2, [r7, #24]
    9ef0:	697b      	ldr	r3, [r7, #20]
    9ef2:	429a      	cmp	r2, r3
    9ef4:	d90a      	bls.n	9f0c <prvReadBytesFromBuffer+0x68>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    9ef6:	68ba      	ldr	r2, [r7, #8]
    9ef8:	697b      	ldr	r3, [r7, #20]
    9efa:	18d0      	adds	r0, r2, r3
    9efc:	68fb      	ldr	r3, [r7, #12]
    9efe:	6999      	ldr	r1, [r3, #24]
    9f00:	69ba      	ldr	r2, [r7, #24]
    9f02:	697b      	ldr	r3, [r7, #20]
    9f04:	1ad3      	subs	r3, r2, r3
    9f06:	461a      	mov	r2, r3
    9f08:	f000 f97a 	bl	a200 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    9f0c:	69fa      	ldr	r2, [r7, #28]
    9f0e:	69bb      	ldr	r3, [r7, #24]
    9f10:	4413      	add	r3, r2
    9f12:	61fb      	str	r3, [r7, #28]

		if( xNextTail >= pxStreamBuffer->xLength )
    9f14:	68fb      	ldr	r3, [r7, #12]
    9f16:	689b      	ldr	r3, [r3, #8]
    9f18:	69fa      	ldr	r2, [r7, #28]
    9f1a:	429a      	cmp	r2, r3
    9f1c:	d304      	bcc.n	9f28 <prvReadBytesFromBuffer+0x84>
		{
			xNextTail -= pxStreamBuffer->xLength;
    9f1e:	68fb      	ldr	r3, [r7, #12]
    9f20:	689b      	ldr	r3, [r3, #8]
    9f22:	69fa      	ldr	r2, [r7, #28]
    9f24:	1ad3      	subs	r3, r2, r3
    9f26:	61fb      	str	r3, [r7, #28]
		}

		pxStreamBuffer->xTail = xNextTail;
    9f28:	68fb      	ldr	r3, [r7, #12]
    9f2a:	69fa      	ldr	r2, [r7, #28]
    9f2c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    9f2e:	69bb      	ldr	r3, [r7, #24]
}
    9f30:	4618      	mov	r0, r3
    9f32:	3720      	adds	r7, #32
    9f34:	46bd      	mov	sp, r7
    9f36:	bd80      	pop	{r7, pc}

00009f38 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    9f38:	b480      	push	{r7}
    9f3a:	b085      	sub	sp, #20
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	689a      	ldr	r2, [r3, #8]
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	685b      	ldr	r3, [r3, #4]
    9f48:	4413      	add	r3, r2
    9f4a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	68fa      	ldr	r2, [r7, #12]
    9f52:	1ad3      	subs	r3, r2, r3
    9f54:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	689b      	ldr	r3, [r3, #8]
    9f5a:	68fa      	ldr	r2, [r7, #12]
    9f5c:	429a      	cmp	r2, r3
    9f5e:	d304      	bcc.n	9f6a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
    9f60:	687b      	ldr	r3, [r7, #4]
    9f62:	689b      	ldr	r3, [r3, #8]
    9f64:	68fa      	ldr	r2, [r7, #12]
    9f66:	1ad3      	subs	r3, r2, r3
    9f68:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    9f6a:	68fb      	ldr	r3, [r7, #12]
}
    9f6c:	4618      	mov	r0, r3
    9f6e:	3714      	adds	r7, #20
    9f70:	46bd      	mov	sp, r7
    9f72:	bc80      	pop	{r7}
    9f74:	4770      	bx	lr

00009f76 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
    9f76:	b580      	push	{r7, lr}
    9f78:	b084      	sub	sp, #16
    9f7a:	af00      	add	r7, sp, #0
    9f7c:	60f8      	str	r0, [r7, #12]
    9f7e:	60b9      	str	r1, [r7, #8]
    9f80:	607a      	str	r2, [r7, #4]
    9f82:	603b      	str	r3, [r7, #0]
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    9f84:	2220      	movs	r2, #32
    9f86:	2100      	movs	r1, #0
    9f88:	68f8      	ldr	r0, [r7, #12]
    9f8a:	f000 f9af 	bl	a2ec <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    9f8e:	68fb      	ldr	r3, [r7, #12]
    9f90:	68ba      	ldr	r2, [r7, #8]
    9f92:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
    9f94:	68fb      	ldr	r3, [r7, #12]
    9f96:	687a      	ldr	r2, [r7, #4]
    9f98:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    9f9a:	68fb      	ldr	r3, [r7, #12]
    9f9c:	683a      	ldr	r2, [r7, #0]
    9f9e:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
    9fa0:	69bb      	ldr	r3, [r7, #24]
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	d006      	beq.n	9fb4 <prvInitialiseNewStreamBuffer+0x3e>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    9fa6:	68fb      	ldr	r3, [r7, #12]
    9fa8:	7f1b      	ldrb	r3, [r3, #28]
    9faa:	f043 0301 	orr.w	r3, r3, #1
    9fae:	b2da      	uxtb	r2, r3
    9fb0:	68fb      	ldr	r3, [r7, #12]
    9fb2:	771a      	strb	r2, [r3, #28]
	}
}
    9fb4:	bf00      	nop
    9fb6:	3710      	adds	r7, #16
    9fb8:	46bd      	mov	sp, r7
    9fba:	bd80      	pop	{r7, pc}
    9fbc:	0000      	movs	r0, r0
	...

00009fc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    9fc0:	b480      	push	{r7}
    9fc2:	b085      	sub	sp, #20
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	60f8      	str	r0, [r7, #12]
    9fc8:	60b9      	str	r1, [r7, #8]
    9fca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    9fcc:	68fb      	ldr	r3, [r7, #12]
    9fce:	3b04      	subs	r3, #4
    9fd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    9fda:	68fb      	ldr	r3, [r7, #12]
    9fdc:	3b04      	subs	r3, #4
    9fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    9fe0:	68bb      	ldr	r3, [r7, #8]
    9fe2:	f023 0201 	bic.w	r2, r3, #1
    9fe6:	68fb      	ldr	r3, [r7, #12]
    9fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    9fea:	68fb      	ldr	r3, [r7, #12]
    9fec:	3b04      	subs	r3, #4
    9fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    9ff0:	4a08      	ldr	r2, [pc, #32]	; (a014 <pxPortInitialiseStack+0x54>)
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    9ff6:	68fb      	ldr	r3, [r7, #12]
    9ff8:	3b14      	subs	r3, #20
    9ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    9ffc:	687a      	ldr	r2, [r7, #4]
    9ffe:	68fb      	ldr	r3, [r7, #12]
    a000:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    a002:	68fb      	ldr	r3, [r7, #12]
    a004:	3b20      	subs	r3, #32
    a006:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    a008:	68fb      	ldr	r3, [r7, #12]
}
    a00a:	4618      	mov	r0, r3
    a00c:	3714      	adds	r7, #20
    a00e:	46bd      	mov	sp, r7
    a010:	bc80      	pop	{r7}
    a012:	4770      	bx	lr
    a014:	0000a019 	.word	0x0000a019

0000a018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    a018:	b480      	push	{r7}
    a01a:	b083      	sub	sp, #12
    a01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    a01e:	2300      	movs	r3, #0
    a020:	603b      	str	r3, [r7, #0]
	__asm volatile
    a022:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    a026:	f383 8811 	msr	BASEPRI, r3
    a02a:	f3bf 8f6f 	isb	sy
    a02e:	f3bf 8f4f 	dsb	sy
    a032:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    a034:	bf00      	nop
    a036:	683b      	ldr	r3, [r7, #0]
    a038:	2b00      	cmp	r3, #0
    a03a:	d0fc      	beq.n	a036 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    a03c:	bf00      	nop
    a03e:	370c      	adds	r7, #12
    a040:	46bd      	mov	sp, r7
    a042:	bc80      	pop	{r7}
    a044:	4770      	bx	lr

0000a046 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    a046:	4b0a      	ldr	r3, [pc, #40]	; (a070 <pxCurrentTCBConst2>)
    a048:	6819      	ldr	r1, [r3, #0]
    a04a:	6808      	ldr	r0, [r1, #0]
    a04c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a050:	f380 8809 	msr	PSP, r0
    a054:	f3bf 8f6f 	isb	sy
    a058:	f04f 0000 	mov.w	r0, #0
    a05c:	f380 8811 	msr	BASEPRI, r0
    a060:	f04e 0e0d 	orr.w	lr, lr, #13
    a064:	4770      	bx	lr
    a066:	bf00      	nop
    a068:	f3af 8000 	nop.w
    a06c:	f3af 8000 	nop.w

0000a070 <pxCurrentTCBConst2>:
    a070:	200048dc 	.word	0x200048dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    a074:	bf00      	nop

0000a076 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    a076:	4861      	ldr	r0, [pc, #388]	; (a1fc <vPortSetupTimerInterrupt+0x34>)
    a078:	6800      	ldr	r0, [r0, #0]
    a07a:	6800      	ldr	r0, [r0, #0]
    a07c:	f380 8808 	msr	MSP, r0
    a080:	b662      	cpsie	i
    a082:	b661      	cpsie	f
    a084:	f3bf 8f4f 	dsb	sy
    a088:	f3bf 8f6f 	isb	sy
    a08c:	df00      	svc	0
    a08e:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    a090:	bf00      	nop

0000a092 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    a092:	b580      	push	{r7, lr}
    a094:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    a096:	4b0d      	ldr	r3, [pc, #52]	; (a0cc <xPortStartScheduler+0x3a>)
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	4a0c      	ldr	r2, [pc, #48]	; (a0cc <xPortStartScheduler+0x3a>)
    a09c:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
    a0a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    a0a2:	4b0a      	ldr	r3, [pc, #40]	; (a0cc <xPortStartScheduler+0x3a>)
    a0a4:	681b      	ldr	r3, [r3, #0]
    a0a6:	4a09      	ldr	r2, [pc, #36]	; (a0cc <xPortStartScheduler+0x3a>)
    a0a8:	f043 43fe 	orr.w	r3, r3, #2130706432	; 0x7f000000
    a0ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    a0ae:	f000 f88b 	bl	a1c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    a0b2:	4b07      	ldr	r3, [pc, #28]	; (a0d0 <xPortStartScheduler+0x3e>)
    a0b4:	2200      	movs	r2, #0
    a0b6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    a0b8:	f7ff ffdd 	bl	a076 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    a0bc:	f7fe fc9e 	bl	89fc <vTaskSwitchContext>
	prvTaskExitError();
    a0c0:	f7ff ffaa 	bl	a018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    a0c4:	2300      	movs	r3, #0
}
    a0c6:	4618      	mov	r0, r3
    a0c8:	bd80      	pop	{r7, pc}
    a0ca:	bf00      	nop
    a0cc:	e000ed20 	.word	0xe000ed20
    a0d0:	20000498 	.word	0x20000498

0000a0d4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    a0d4:	b480      	push	{r7}
    a0d6:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
    a0d8:	bf00      	nop
    a0da:	46bd      	mov	sp, r7
    a0dc:	bc80      	pop	{r7}
    a0de:	4770      	bx	lr

0000a0e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    a0e0:	b480      	push	{r7}
    a0e2:	b083      	sub	sp, #12
    a0e4:	af00      	add	r7, sp, #0
    a0e6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    a0ea:	f383 8811 	msr	BASEPRI, r3
    a0ee:	f3bf 8f6f 	isb	sy
    a0f2:	f3bf 8f4f 	dsb	sy
    a0f6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    a0f8:	4b04      	ldr	r3, [pc, #16]	; (a10c <vPortEnterCritical+0x2c>)
    a0fa:	681b      	ldr	r3, [r3, #0]
    a0fc:	3301      	adds	r3, #1
    a0fe:	4a03      	ldr	r2, [pc, #12]	; (a10c <vPortEnterCritical+0x2c>)
    a100:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    a102:	bf00      	nop
    a104:	370c      	adds	r7, #12
    a106:	46bd      	mov	sp, r7
    a108:	bc80      	pop	{r7}
    a10a:	4770      	bx	lr
    a10c:	20000498 	.word	0x20000498

0000a110 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    a110:	b480      	push	{r7}
    a112:	b083      	sub	sp, #12
    a114:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
    a116:	4b09      	ldr	r3, [pc, #36]	; (a13c <vPortExitCritical+0x2c>)
    a118:	681b      	ldr	r3, [r3, #0]
    a11a:	3b01      	subs	r3, #1
    a11c:	4a07      	ldr	r2, [pc, #28]	; (a13c <vPortExitCritical+0x2c>)
    a11e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    a120:	4b06      	ldr	r3, [pc, #24]	; (a13c <vPortExitCritical+0x2c>)
    a122:	681b      	ldr	r3, [r3, #0]
    a124:	2b00      	cmp	r3, #0
    a126:	d104      	bne.n	a132 <vPortExitCritical+0x22>
    a128:	2300      	movs	r3, #0
    a12a:	607b      	str	r3, [r7, #4]
	__asm volatile
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    a132:	bf00      	nop
    a134:	370c      	adds	r7, #12
    a136:	46bd      	mov	sp, r7
    a138:	bc80      	pop	{r7}
    a13a:	4770      	bx	lr
    a13c:	20000498 	.word	0x20000498

0000a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    a140:	f3ef 8009 	mrs	r0, PSP
    a144:	f3bf 8f6f 	isb	sy
    a148:	4b0d      	ldr	r3, [pc, #52]	; (a180 <pxCurrentTCBConst>)
    a14a:	681a      	ldr	r2, [r3, #0]
    a14c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a150:	6010      	str	r0, [r2, #0]
    a152:	e92d 4008 	stmdb	sp!, {r3, lr}
    a156:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    a15a:	f380 8811 	msr	BASEPRI, r0
    a15e:	f7fe fc4d 	bl	89fc <vTaskSwitchContext>
    a162:	f04f 0000 	mov.w	r0, #0
    a166:	f380 8811 	msr	BASEPRI, r0
    a16a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a16e:	6819      	ldr	r1, [r3, #0]
    a170:	6808      	ldr	r0, [r1, #0]
    a172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a176:	f380 8809 	msr	PSP, r0
    a17a:	f3bf 8f6f 	isb	sy
    a17e:	4770      	bx	lr

0000a180 <pxCurrentTCBConst>:
    a180:	200048dc 	.word	0x200048dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    a184:	bf00      	nop

0000a186 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    a186:	b580      	push	{r7, lr}
    a188:	b082      	sub	sp, #8
    a18a:	af00      	add	r7, sp, #0
	__asm volatile
    a18c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
    a190:	f383 8811 	msr	BASEPRI, r3
    a194:	f3bf 8f6f 	isb	sy
    a198:	f3bf 8f4f 	dsb	sy
    a19c:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    a19e:	f7fe fb77 	bl	8890 <xTaskIncrementTick>
    a1a2:	4603      	mov	r3, r0
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d003      	beq.n	a1b0 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    a1a8:	4b06      	ldr	r3, [pc, #24]	; (a1c4 <SysTick_Handler+0x3e>)
    a1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a1ae:	601a      	str	r2, [r3, #0]
    a1b0:	2300      	movs	r3, #0
    a1b2:	603b      	str	r3, [r7, #0]
	__asm volatile
    a1b4:	683b      	ldr	r3, [r7, #0]
    a1b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    a1ba:	bf00      	nop
    a1bc:	3708      	adds	r7, #8
    a1be:	46bd      	mov	sp, r7
    a1c0:	bd80      	pop	{r7, pc}
    a1c2:	bf00      	nop
    a1c4:	e000ed04 	.word	0xe000ed04

0000a1c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    a1c8:	b480      	push	{r7}
    a1ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    a1cc:	4b07      	ldr	r3, [pc, #28]	; (a1ec <vPortSetupTimerInterrupt+0x24>)
    a1ce:	2200      	movs	r2, #0
    a1d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    a1d2:	4b07      	ldr	r3, [pc, #28]	; (a1f0 <vPortSetupTimerInterrupt+0x28>)
    a1d4:	2200      	movs	r2, #0
    a1d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    a1d8:	4b06      	ldr	r3, [pc, #24]	; (a1f4 <vPortSetupTimerInterrupt+0x2c>)
    a1da:	4a07      	ldr	r2, [pc, #28]	; (a1f8 <vPortSetupTimerInterrupt+0x30>)
    a1dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    a1de:	4b03      	ldr	r3, [pc, #12]	; (a1ec <vPortSetupTimerInterrupt+0x24>)
    a1e0:	2207      	movs	r2, #7
    a1e2:	601a      	str	r2, [r3, #0]
}
    a1e4:	bf00      	nop
    a1e6:	46bd      	mov	sp, r7
    a1e8:	bc80      	pop	{r7}
    a1ea:	4770      	bx	lr
    a1ec:	e000e010 	.word	0xe000e010
    a1f0:	e000e018 	.word	0xe000e018
    a1f4:	e000e014 	.word	0xe000e014
    a1f8:	000afc7f 	.word	0x000afc7f
    a1fc:	e000ed08 	.word	0xe000ed08

0000a200 <memcpy>:
    a200:	4684      	mov	ip, r0
    a202:	ea41 0300 	orr.w	r3, r1, r0
    a206:	f013 0303 	ands.w	r3, r3, #3
    a20a:	d149      	bne.n	a2a0 <memcpy+0xa0>
    a20c:	3a40      	subs	r2, #64	; 0x40
    a20e:	d323      	bcc.n	a258 <memcpy+0x58>
    a210:	680b      	ldr	r3, [r1, #0]
    a212:	6003      	str	r3, [r0, #0]
    a214:	684b      	ldr	r3, [r1, #4]
    a216:	6043      	str	r3, [r0, #4]
    a218:	688b      	ldr	r3, [r1, #8]
    a21a:	6083      	str	r3, [r0, #8]
    a21c:	68cb      	ldr	r3, [r1, #12]
    a21e:	60c3      	str	r3, [r0, #12]
    a220:	690b      	ldr	r3, [r1, #16]
    a222:	6103      	str	r3, [r0, #16]
    a224:	694b      	ldr	r3, [r1, #20]
    a226:	6143      	str	r3, [r0, #20]
    a228:	698b      	ldr	r3, [r1, #24]
    a22a:	6183      	str	r3, [r0, #24]
    a22c:	69cb      	ldr	r3, [r1, #28]
    a22e:	61c3      	str	r3, [r0, #28]
    a230:	6a0b      	ldr	r3, [r1, #32]
    a232:	6203      	str	r3, [r0, #32]
    a234:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    a236:	6243      	str	r3, [r0, #36]	; 0x24
    a238:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a23a:	6283      	str	r3, [r0, #40]	; 0x28
    a23c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    a23e:	62c3      	str	r3, [r0, #44]	; 0x2c
    a240:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    a242:	6303      	str	r3, [r0, #48]	; 0x30
    a244:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    a246:	6343      	str	r3, [r0, #52]	; 0x34
    a248:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    a24a:	6383      	str	r3, [r0, #56]	; 0x38
    a24c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    a24e:	63c3      	str	r3, [r0, #60]	; 0x3c
    a250:	3040      	adds	r0, #64	; 0x40
    a252:	3140      	adds	r1, #64	; 0x40
    a254:	3a40      	subs	r2, #64	; 0x40
    a256:	d2db      	bcs.n	a210 <memcpy+0x10>
    a258:	3230      	adds	r2, #48	; 0x30
    a25a:	d30b      	bcc.n	a274 <memcpy+0x74>
    a25c:	680b      	ldr	r3, [r1, #0]
    a25e:	6003      	str	r3, [r0, #0]
    a260:	684b      	ldr	r3, [r1, #4]
    a262:	6043      	str	r3, [r0, #4]
    a264:	688b      	ldr	r3, [r1, #8]
    a266:	6083      	str	r3, [r0, #8]
    a268:	68cb      	ldr	r3, [r1, #12]
    a26a:	60c3      	str	r3, [r0, #12]
    a26c:	3010      	adds	r0, #16
    a26e:	3110      	adds	r1, #16
    a270:	3a10      	subs	r2, #16
    a272:	d2f3      	bcs.n	a25c <memcpy+0x5c>
    a274:	320c      	adds	r2, #12
    a276:	d305      	bcc.n	a284 <memcpy+0x84>
    a278:	f851 3b04 	ldr.w	r3, [r1], #4
    a27c:	f840 3b04 	str.w	r3, [r0], #4
    a280:	3a04      	subs	r2, #4
    a282:	d2f9      	bcs.n	a278 <memcpy+0x78>
    a284:	3204      	adds	r2, #4
    a286:	d008      	beq.n	a29a <memcpy+0x9a>
    a288:	07d2      	lsls	r2, r2, #31
    a28a:	bf1c      	itt	ne
    a28c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    a290:	f800 3b01 	strbne.w	r3, [r0], #1
    a294:	d301      	bcc.n	a29a <memcpy+0x9a>
    a296:	880b      	ldrh	r3, [r1, #0]
    a298:	8003      	strh	r3, [r0, #0]
    a29a:	4660      	mov	r0, ip
    a29c:	4770      	bx	lr
    a29e:	bf00      	nop
    a2a0:	2a08      	cmp	r2, #8
    a2a2:	d313      	bcc.n	a2cc <memcpy+0xcc>
    a2a4:	078b      	lsls	r3, r1, #30
    a2a6:	d0b1      	beq.n	a20c <memcpy+0xc>
    a2a8:	f010 0303 	ands.w	r3, r0, #3
    a2ac:	d0ae      	beq.n	a20c <memcpy+0xc>
    a2ae:	f1c3 0304 	rsb	r3, r3, #4
    a2b2:	1ad2      	subs	r2, r2, r3
    a2b4:	07db      	lsls	r3, r3, #31
    a2b6:	bf1c      	itt	ne
    a2b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    a2bc:	f800 3b01 	strbne.w	r3, [r0], #1
    a2c0:	d3a4      	bcc.n	a20c <memcpy+0xc>
    a2c2:	f831 3b02 	ldrh.w	r3, [r1], #2
    a2c6:	f820 3b02 	strh.w	r3, [r0], #2
    a2ca:	e79f      	b.n	a20c <memcpy+0xc>
    a2cc:	3a04      	subs	r2, #4
    a2ce:	d3d9      	bcc.n	a284 <memcpy+0x84>
    a2d0:	3a01      	subs	r2, #1
    a2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    a2d6:	f800 3b01 	strb.w	r3, [r0], #1
    a2da:	d2f9      	bcs.n	a2d0 <memcpy+0xd0>
    a2dc:	780b      	ldrb	r3, [r1, #0]
    a2de:	7003      	strb	r3, [r0, #0]
    a2e0:	784b      	ldrb	r3, [r1, #1]
    a2e2:	7043      	strb	r3, [r0, #1]
    a2e4:	788b      	ldrb	r3, [r1, #2]
    a2e6:	7083      	strb	r3, [r0, #2]
    a2e8:	4660      	mov	r0, ip
    a2ea:	4770      	bx	lr

0000a2ec <memset>:
    a2ec:	b4f0      	push	{r4, r5, r6, r7}
    a2ee:	0786      	lsls	r6, r0, #30
    a2f0:	d043      	beq.n	a37a <memset+0x8e>
    a2f2:	1e54      	subs	r4, r2, #1
    a2f4:	2a00      	cmp	r2, #0
    a2f6:	d03e      	beq.n	a376 <memset+0x8a>
    a2f8:	b2ca      	uxtb	r2, r1
    a2fa:	4603      	mov	r3, r0
    a2fc:	e002      	b.n	a304 <memset+0x18>
    a2fe:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    a302:	d338      	bcc.n	a376 <memset+0x8a>
    a304:	f803 2b01 	strb.w	r2, [r3], #1
    a308:	079d      	lsls	r5, r3, #30
    a30a:	d1f8      	bne.n	a2fe <memset+0x12>
    a30c:	2c03      	cmp	r4, #3
    a30e:	d92b      	bls.n	a368 <memset+0x7c>
    a310:	b2cd      	uxtb	r5, r1
    a312:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    a316:	2c0f      	cmp	r4, #15
    a318:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    a31c:	d916      	bls.n	a34c <memset+0x60>
    a31e:	f1a4 0710 	sub.w	r7, r4, #16
    a322:	093f      	lsrs	r7, r7, #4
    a324:	f103 0620 	add.w	r6, r3, #32
    a328:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    a32c:	f103 0210 	add.w	r2, r3, #16
    a330:	e942 5504 	strd	r5, r5, [r2, #-16]
    a334:	e942 5502 	strd	r5, r5, [r2, #-8]
    a338:	3210      	adds	r2, #16
    a33a:	42b2      	cmp	r2, r6
    a33c:	d1f8      	bne.n	a330 <memset+0x44>
    a33e:	f004 040f 	and.w	r4, r4, #15
    a342:	3701      	adds	r7, #1
    a344:	2c03      	cmp	r4, #3
    a346:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    a34a:	d90d      	bls.n	a368 <memset+0x7c>
    a34c:	461e      	mov	r6, r3
    a34e:	4622      	mov	r2, r4
    a350:	3a04      	subs	r2, #4
    a352:	2a03      	cmp	r2, #3
    a354:	f846 5b04 	str.w	r5, [r6], #4
    a358:	d8fa      	bhi.n	a350 <memset+0x64>
    a35a:	1f22      	subs	r2, r4, #4
    a35c:	f022 0203 	bic.w	r2, r2, #3
    a360:	3204      	adds	r2, #4
    a362:	4413      	add	r3, r2
    a364:	f004 0403 	and.w	r4, r4, #3
    a368:	b12c      	cbz	r4, a376 <memset+0x8a>
    a36a:	b2c9      	uxtb	r1, r1
    a36c:	441c      	add	r4, r3
    a36e:	f803 1b01 	strb.w	r1, [r3], #1
    a372:	429c      	cmp	r4, r3
    a374:	d1fb      	bne.n	a36e <memset+0x82>
    a376:	bcf0      	pop	{r4, r5, r6, r7}
    a378:	4770      	bx	lr
    a37a:	4614      	mov	r4, r2
    a37c:	4603      	mov	r3, r0
    a37e:	e7c5      	b.n	a30c <memset+0x20>

0000a380 <strcpy>:
    a380:	ea80 0201 	eor.w	r2, r0, r1
    a384:	4684      	mov	ip, r0
    a386:	f012 0f03 	tst.w	r2, #3
    a38a:	d14f      	bne.n	a42c <strcpy+0xac>
    a38c:	f011 0f03 	tst.w	r1, #3
    a390:	d132      	bne.n	a3f8 <strcpy+0x78>
    a392:	f84d 4d04 	str.w	r4, [sp, #-4]!
    a396:	f011 0f04 	tst.w	r1, #4
    a39a:	f851 3b04 	ldr.w	r3, [r1], #4
    a39e:	d00b      	beq.n	a3b8 <strcpy+0x38>
    a3a0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a3a4:	439a      	bics	r2, r3
    a3a6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a3aa:	bf04      	itt	eq
    a3ac:	f84c 3b04 	streq.w	r3, [ip], #4
    a3b0:	f851 3b04 	ldreq.w	r3, [r1], #4
    a3b4:	d116      	bne.n	a3e4 <strcpy+0x64>
    a3b6:	bf00      	nop
    a3b8:	f851 4b04 	ldr.w	r4, [r1], #4
    a3bc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a3c0:	439a      	bics	r2, r3
    a3c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a3c6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    a3ca:	d10b      	bne.n	a3e4 <strcpy+0x64>
    a3cc:	f84c 3b04 	str.w	r3, [ip], #4
    a3d0:	43a2      	bics	r2, r4
    a3d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a3d6:	bf04      	itt	eq
    a3d8:	f851 3b04 	ldreq.w	r3, [r1], #4
    a3dc:	f84c 4b04 	streq.w	r4, [ip], #4
    a3e0:	d0ea      	beq.n	a3b8 <strcpy+0x38>
    a3e2:	4623      	mov	r3, r4
    a3e4:	f80c 3b01 	strb.w	r3, [ip], #1
    a3e8:	f013 0fff 	tst.w	r3, #255	; 0xff
    a3ec:	ea4f 2333 	mov.w	r3, r3, ror #8
    a3f0:	d1f8      	bne.n	a3e4 <strcpy+0x64>
    a3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3f6:	4770      	bx	lr
    a3f8:	f011 0f01 	tst.w	r1, #1
    a3fc:	d006      	beq.n	a40c <strcpy+0x8c>
    a3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
    a402:	f80c 2b01 	strb.w	r2, [ip], #1
    a406:	2a00      	cmp	r2, #0
    a408:	bf08      	it	eq
    a40a:	4770      	bxeq	lr
    a40c:	f011 0f02 	tst.w	r1, #2
    a410:	d0bf      	beq.n	a392 <strcpy+0x12>
    a412:	f831 2b02 	ldrh.w	r2, [r1], #2
    a416:	f012 0fff 	tst.w	r2, #255	; 0xff
    a41a:	bf16      	itet	ne
    a41c:	f82c 2b02 	strhne.w	r2, [ip], #2
    a420:	f88c 2000 	strbeq.w	r2, [ip]
    a424:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    a428:	d1b3      	bne.n	a392 <strcpy+0x12>
    a42a:	4770      	bx	lr
    a42c:	f811 2b01 	ldrb.w	r2, [r1], #1
    a430:	f80c 2b01 	strb.w	r2, [ip], #1
    a434:	2a00      	cmp	r2, #0
    a436:	d1f9      	bne.n	a42c <strcpy+0xac>
    a438:	4770      	bx	lr
    a43a:	bf00      	nop

0000a43c <strlen>:
    a43c:	f020 0103 	bic.w	r1, r0, #3
    a440:	f010 0003 	ands.w	r0, r0, #3
    a444:	f1c0 0000 	rsb	r0, r0, #0
    a448:	f851 3b04 	ldr.w	r3, [r1], #4
    a44c:	f100 0c04 	add.w	ip, r0, #4
    a450:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a454:	f06f 0200 	mvn.w	r2, #0
    a458:	bf1c      	itt	ne
    a45a:	fa22 f20c 	lsrne.w	r2, r2, ip
    a45e:	4313      	orrne	r3, r2
    a460:	f04f 0c01 	mov.w	ip, #1
    a464:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    a468:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    a46c:	eba3 020c 	sub.w	r2, r3, ip
    a470:	ea22 0203 	bic.w	r2, r2, r3
    a474:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    a478:	bf04      	itt	eq
    a47a:	f851 3b04 	ldreq.w	r3, [r1], #4
    a47e:	3004      	addeq	r0, #4
    a480:	d0f4      	beq.n	a46c <strlen+0x30>
    a482:	f1c2 0100 	rsb	r1, r2, #0
    a486:	ea02 0201 	and.w	r2, r2, r1
    a48a:	fab2 f282 	clz	r2, r2
    a48e:	f1c2 021f 	rsb	r2, r2, #31
    a492:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    a496:	4770      	bx	lr

0000a498 <strncmp>:
    a498:	2a00      	cmp	r2, #0
    a49a:	d03f      	beq.n	a51c <strncmp+0x84>
    a49c:	ea40 0301 	orr.w	r3, r0, r1
    a4a0:	f013 0303 	ands.w	r3, r3, #3
    a4a4:	b4f0      	push	{r4, r5, r6, r7}
    a4a6:	d125      	bne.n	a4f4 <strncmp+0x5c>
    a4a8:	2a03      	cmp	r2, #3
    a4aa:	d923      	bls.n	a4f4 <strncmp+0x5c>
    a4ac:	6804      	ldr	r4, [r0, #0]
    a4ae:	680d      	ldr	r5, [r1, #0]
    a4b0:	42ac      	cmp	r4, r5
    a4b2:	d11f      	bne.n	a4f4 <strncmp+0x5c>
    a4b4:	3a04      	subs	r2, #4
    a4b6:	d033      	beq.n	a520 <strncmp+0x88>
    a4b8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
    a4bc:	ea25 0404 	bic.w	r4, r5, r4
    a4c0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    a4c4:	d12f      	bne.n	a526 <strncmp+0x8e>
    a4c6:	1d07      	adds	r7, r0, #4
    a4c8:	1d0d      	adds	r5, r1, #4
    a4ca:	e00d      	b.n	a4e8 <strncmp+0x50>
    a4cc:	f857 3b04 	ldr.w	r3, [r7], #4
    a4d0:	680e      	ldr	r6, [r1, #0]
    a4d2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    a4d6:	42b3      	cmp	r3, r6
    a4d8:	ea24 0403 	bic.w	r4, r4, r3
    a4dc:	d10a      	bne.n	a4f4 <strncmp+0x5c>
    a4de:	3a04      	subs	r2, #4
    a4e0:	d01e      	beq.n	a520 <strncmp+0x88>
    a4e2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    a4e6:	d11b      	bne.n	a520 <strncmp+0x88>
    a4e8:	2a03      	cmp	r2, #3
    a4ea:	4629      	mov	r1, r5
    a4ec:	4638      	mov	r0, r7
    a4ee:	f105 0504 	add.w	r5, r5, #4
    a4f2:	d8eb      	bhi.n	a4cc <strncmp+0x34>
    a4f4:	7803      	ldrb	r3, [r0, #0]
    a4f6:	780c      	ldrb	r4, [r1, #0]
    a4f8:	3a01      	subs	r2, #1
    a4fa:	429c      	cmp	r4, r3
    a4fc:	d10b      	bne.n	a516 <strncmp+0x7e>
    a4fe:	b17a      	cbz	r2, a520 <strncmp+0x88>
    a500:	b914      	cbnz	r4, a508 <strncmp+0x70>
    a502:	e00d      	b.n	a520 <strncmp+0x88>
    a504:	b162      	cbz	r2, a520 <strncmp+0x88>
    a506:	b173      	cbz	r3, a526 <strncmp+0x8e>
    a508:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    a50c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    a510:	3a01      	subs	r2, #1
    a512:	42a3      	cmp	r3, r4
    a514:	d0f6      	beq.n	a504 <strncmp+0x6c>
    a516:	1b18      	subs	r0, r3, r4
    a518:	bcf0      	pop	{r4, r5, r6, r7}
    a51a:	4770      	bx	lr
    a51c:	4610      	mov	r0, r2
    a51e:	4770      	bx	lr
    a520:	2000      	movs	r0, #0
    a522:	bcf0      	pop	{r4, r5, r6, r7}
    a524:	4770      	bx	lr
    a526:	4618      	mov	r0, r3
    a528:	e7f6      	b.n	a518 <strncmp+0x80>
    a52a:	bf00      	nop

0000a52c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    a52c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    a52e:	e003      	b.n	a538 <LoopCopyDataInit>

0000a530 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    a530:	4b0a      	ldr	r3, [pc, #40]	; (a55c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
    a532:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    a534:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    a536:	3104      	adds	r1, #4

0000a538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    a538:	4809      	ldr	r0, [pc, #36]	; (a560 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
    a53a:	4b0a      	ldr	r3, [pc, #40]	; (a564 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
    a53c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    a53e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    a540:	d3f6      	bcc.n	a530 <CopyDataInit>
	ldr	r2, =_sbss
    a542:	4a09      	ldr	r2, [pc, #36]	; (a568 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
    a544:	e002      	b.n	a54c <LoopFillZerobss>

0000a546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    a546:	2300      	movs	r3, #0
	str	r3, [r2], #4
    a548:	f842 3b04 	str.w	r3, [r2], #4

0000a54c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    a54c:	4b07      	ldr	r3, [pc, #28]	; (a56c <LoopFillZerobss+0x20>)
	cmp	r2, r3
    a54e:	429a      	cmp	r2, r3
	bcc	FillZerobss
    a550:	d3f9      	bcc.n	a546 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    a552:	f7f7 f9cd 	bl	18f0 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    a556:	f7f6 ffa5 	bl	14a4 <main>
	bx	lr    
    a55a:	4770      	bx	lr
	ldr	r3, =_sidata
    a55c:	0000a82d 	.word	0x0000a82d
	ldr	r0, =_sdata
    a560:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    a564:	2000049c 	.word	0x2000049c
	ldr	r2, =_sbss
    a568:	2000049c 	.word	0x2000049c
	ldr	r3, = _ebss
    a56c:	200049e0 	.word	0x200049e0

0000a570 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    a570:	e7fe      	b.n	a570 <ADC1_2_IRQHandler>
    a572:	0000      	movs	r0, r0
    a574:	6e776f44 	.word	0x6e776f44
    a578:	00000a0d 	.word	0x00000a0d
    a57c:	0a0d7055 	.word	0x0a0d7055
    a580:	00000000 	.word	0x00000000
    a584:	5f444d43 	.word	0x5f444d43
    a588:	41455f48 	.word	0x41455f48
    a58c:	2b2b5f55 	.word	0x2b2b5f55
    a590:	00000a0d 	.word	0x00000a0d
    a594:	5f444d43 	.word	0x5f444d43
    a598:	41455f48 	.word	0x41455f48
    a59c:	2d2d5f55 	.word	0x2d2d5f55
    a5a0:	00000a0d 	.word	0x00000a0d
    a5a4:	52415355 	.word	0x52415355
    a5a8:	0a0d3254 	.word	0x0a0d3254
    a5ac:	00000000 	.word	0x00000000
    a5b0:	00003031 	.word	0x00003031
    a5b4:	6d6d6f43 	.word	0x6d6d6f43
    a5b8:	20646e61 	.word	0x20646e61
    a5bc:	74737953 	.word	0x74737953
    a5c0:	4f206d65 	.word	0x4f206d65
    a5c4:	6572204e 	.word	0x6572204e
    a5c8:	76696563 	.word	0x76696563
    a5cc:	00006465 	.word	0x00006465
    a5d0:	00003131 	.word	0x00003131
    a5d4:	6d6d6f43 	.word	0x6d6d6f43
    a5d8:	20646e61 	.word	0x20646e61
    a5dc:	74737953 	.word	0x74737953
    a5e0:	4f206d65 	.word	0x4f206d65
    a5e4:	72204646 	.word	0x72204646
    a5e8:	69656365 	.word	0x69656365
    a5ec:	00646576 	.word	0x00646576
    a5f0:	00003032 	.word	0x00003032
    a5f4:	6d6d6f43 	.word	0x6d6d6f43
    a5f8:	20646e61 	.word	0x20646e61
    a5fc:	6e616843 	.word	0x6e616843
    a600:	48206567 	.word	0x48206567
    a604:	68676965 	.word	0x68676965
    a608:	616d2074 	.word	0x616d2074
    a60c:	65722078 	.word	0x65722078
    a610:	76696563 	.word	0x76696563
    a614:	00006465 	.word	0x00006465
    a618:	00003132 	.word	0x00003132
    a61c:	6d6d6f43 	.word	0x6d6d6f43
    a620:	20646e61 	.word	0x20646e61
    a624:	6e616843 	.word	0x6e616843
    a628:	54206567 	.word	0x54206567
    a62c:	65706d65 	.word	0x65706d65
    a630:	75746172 	.word	0x75746172
    a634:	6d206572 	.word	0x6d206572
    a638:	72207861 	.word	0x72207861
    a63c:	69656365 	.word	0x69656365
    a640:	00646576 	.word	0x00646576
    a644:	00003232 	.word	0x00003232
    a648:	6d6d6f43 	.word	0x6d6d6f43
    a64c:	20646e61 	.word	0x20646e61
    a650:	6e616843 	.word	0x6e616843
    a654:	53206567 	.word	0x53206567
    a658:	64656570 	.word	0x64656570
    a65c:	78616d20 	.word	0x78616d20
    a660:	63657220 	.word	0x63657220
    a664:	65766965 	.word	0x65766965
    a668:	00000064 	.word	0x00000064
    a66c:	00003033 	.word	0x00003033
    a670:	6d6d6f43 	.word	0x6d6d6f43
    a674:	20646e61 	.word	0x20646e61
    a678:	6e616843 	.word	0x6e616843
    a67c:	54206567 	.word	0x54206567
    a680:	65706d65 	.word	0x65706d65
    a684:	75746172 	.word	0x75746172
    a688:	72206572 	.word	0x72206572
    a68c:	69656365 	.word	0x69656365
    a690:	00646576 	.word	0x00646576
    a694:	00003133 	.word	0x00003133
    a698:	6d6d6f43 	.word	0x6d6d6f43
    a69c:	20646e61 	.word	0x20646e61
    a6a0:	6e616843 	.word	0x6e616843
    a6a4:	53206567 	.word	0x53206567
    a6a8:	64656570 	.word	0x64656570
    a6ac:	63657220 	.word	0x63657220
    a6b0:	65766965 	.word	0x65766965
    a6b4:	00000064 	.word	0x00000064
    a6b8:	00003034 	.word	0x00003034
    a6bc:	6d6d6f43 	.word	0x6d6d6f43
    a6c0:	20646e61 	.word	0x20646e61
    a6c4:	6867694c 	.word	0x6867694c
    a6c8:	4e4f2074 	.word	0x4e4f2074
    a6cc:	63657220 	.word	0x63657220
    a6d0:	65766965 	.word	0x65766965
    a6d4:	00000064 	.word	0x00000064
    a6d8:	00003134 	.word	0x00003134
    a6dc:	6d6d6f43 	.word	0x6d6d6f43
    a6e0:	20646e61 	.word	0x20646e61
    a6e4:	6867694c 	.word	0x6867694c
    a6e8:	464f2074 	.word	0x464f2074
    a6ec:	65722046 	.word	0x65722046
    a6f0:	76696563 	.word	0x76696563
    a6f4:	00006465 	.word	0x00006465
    a6f8:	00003035 	.word	0x00003035
    a6fc:	6d6d6f43 	.word	0x6d6d6f43
    a700:	20646e61 	.word	0x20646e61
    a704:	4f205048 	.word	0x4f205048
    a708:	6572204e 	.word	0x6572204e
    a70c:	76696563 	.word	0x76696563
    a710:	00006465 	.word	0x00006465
    a714:	00003135 	.word	0x00003135
    a718:	6d6d6f43 	.word	0x6d6d6f43
    a71c:	20646e61 	.word	0x20646e61
    a720:	4f205048 	.word	0x4f205048
    a724:	72204646 	.word	0x72204646
    a728:	69656365 	.word	0x69656365
    a72c:	00646576 	.word	0x00646576
    a730:	00003036 	.word	0x00003036
    a734:	6d6d6f43 	.word	0x6d6d6f43
    a738:	20646e61 	.word	0x20646e61
    a73c:	756c6156 	.word	0x756c6156
    a740:	65722065 	.word	0x65722065
    a744:	76696563 	.word	0x76696563
    a748:	00006465 	.word	0x00006465
    a74c:	00000071 	.word	0x00000071
    a750:	6f727245 	.word	0x6f727245
    a754:	203a2072 	.word	0x203a2072
    a758:	61766e49 	.word	0x61766e49
    a75c:	2064696c 	.word	0x2064696c
    a760:	6d6d6f63 	.word	0x6d6d6f63
    a764:	0d646e61 	.word	0x0d646e61
    a768:	0000000a 	.word	0x0000000a
    a76c:	0d46464f 	.word	0x0d46464f
    a770:	0000000a 	.word	0x0000000a
    a774:	0a0d4e4f 	.word	0x0a0d4e4f
    a778:	00000000 	.word	0x00000000
    a77c:	2044454c 	.word	0x2044454c
    a780:	73616c46 	.word	0x73616c46
    a784:	00000068 	.word	0x00000068
    a788:	69726553 	.word	0x69726553
    a78c:	57206c61 	.word	0x57206c61
    a790:	65746972 	.word	0x65746972
    a794:	00003120 	.word	0x00003120
    a798:	69726553 	.word	0x69726553
    a79c:	57206c61 	.word	0x57206c61
    a7a0:	65746972 	.word	0x65746972
    a7a4:	00003220 	.word	0x00003220
    a7a8:	69726553 	.word	0x69726553
    a7ac:	58206c61 	.word	0x58206c61
    a7b0:	2074696d 	.word	0x2074696d
    a7b4:	20727453 	.word	0x20727453
    a7b8:	00000031 	.word	0x00000031
    a7bc:	69726553 	.word	0x69726553
    a7c0:	52206c61 	.word	0x52206c61
    a7c4:	2f646165 	.word	0x2f646165
    a7c8:	74697257 	.word	0x74697257
    a7cc:	00000065 	.word	0x00000065
    a7d0:	33323130 	.word	0x33323130
    a7d4:	37363534 	.word	0x37363534
    a7d8:	62613938 	.word	0x62613938
    a7dc:	66656463 	.word	0x66656463
    a7e0:	6a696867 	.word	0x6a696867
    a7e4:	6e6d6c6b 	.word	0x6e6d6c6b
    a7e8:	7271706f 	.word	0x7271706f
    a7ec:	76757473 	.word	0x76757473
    a7f0:	7a797877 	.word	0x7a797877
    a7f4:	00000000 	.word	0x00000000
    a7f8:	33323130 	.word	0x33323130
    a7fc:	37363534 	.word	0x37363534
    a800:	42413938 	.word	0x42413938
    a804:	46454443 	.word	0x46454443
    a808:	4a494847 	.word	0x4a494847
    a80c:	4e4d4c4b 	.word	0x4e4d4c4b
    a810:	5251504f 	.word	0x5251504f
    a814:	56555453 	.word	0x56555453
    a818:	5a595857 	.word	0x5a595857
    a81c:	00000000 	.word	0x00000000
    a820:	4c554e3c 	.word	0x4c554e3c
    a824:	00003e4c 	.word	0x00003e4c
    a828:	454c4449 	.word	0x454c4449
	...
